-> Runtime efficiency 
T = std::vector<int> of max size 100
Number of loops over which execution time is summed : 1000000 
n = [1 2 4 8 16 32 64 128 ]
*** STL
vec.push_back( t0 ); ... vec.push_back( tn-1 );[0.124504 s 0.347007 s 0.892411 s 1.95284 s 4.38207 s 9.04663 s 18.4447 s 37.3224 s ]
*** Boost.Assign
** v1
list_of( t0 )...( tn-1 )[1.19854 s 2.46302 s 4.22177 s 7.68792 s 14.421 s 27.7614 s 55.3577 s 111.271 s ]
cref_list_of<N>( t0 )...( tn-1 )[2e-06 s 2e-06 s 2e-06 s 2e-06 s 1e-06 s 0.042357 s 0.068711 s 0.129038 s ]
push_back( vec )( t0 )...( tn-1 )[0.350232 s 0.768222 s 1.84854 s 4.1346 s 8.72733 s 18.1646 s 36.6746 s 74.053 s ]
** v2
* like v1's list_of()
csv_deque(t0, ...,tn-1)[0.398598 s 0.651514 s 1.22904 s 2.40314 s 4.75263 s 9.34939 s 19.5964 s 49.0677 s ]
deque<T>( _nil )( t0 )...( tn-1 )[0.993054 s 1.64975 s 2.7362 s 5.0471 s 9.40483 s 17.9857 s 36.7418 s 72.9978 s ]
* like v1's ref_list_of<>()
ref::csv_array(t0, ...,tn-1)[3e-06 s 0.003774 s 0.007132 s 0.018387 s 0.039392 s 0.117493 s 0.592036 s 10.1754 s ]
ref::array( t0 )...( tn-1 )[0.34337 s 0.374191 s 0.388768 s 0.429955 s 0.549425 s 0.678797 s 1.22009 s 3.1004 s ]
* like v1's push_back()
Backend
csv_put( vec )(t0, ...,tn-1)[0.125903 s 0.354342 s 0.86494 s 1.97258 s 4.51651 s 8.93275 s 18.1344 s 37.207 s ]
put( vec )( t0 )...( tn-1 )[0.124226 s 0.35273 s 0.862776 s 1.97922 s 4.31244 s 9.02677 s 18.1397 s 37.0189 s ]
Frontend
vec | _csv_put(t0, ...,tn-1)[0.124607 s 0.33773 s 0.890121 s 2.03831 s 4.59616 s 9.50553 s 19.5305 s 49.4183 s ]
vec | _put( t0 )...( tn-1 )[0.1289 s 0.355112 s 0.86987 s 2.01899 s 4.69471 s 9.84074 s 20.8605 s 47.948 s ]
<- 
