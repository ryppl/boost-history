[#org]

[heading Headers]

[#org_headers]

This is a header only template library that depends on __url_boost__. Accordingly, the latter has to be in the compiler's search path, 
and using a given feature of __url_boost_assign_v2__ only requires including the corresponding header file. Under __url_cpp03__ 
compilation time may be long so it is advised to include headers selectively 
[footnote As an indication, compiling all of [@../../test/ [^libs/assign/v2/test]] takes about 6 mn using __url_cpp03__, 
and 1 mn using __url_cpp0x__, under the machine specifaction given [link perf here].]

Headers can looked for by module or by identifier:

* In directory [@../../../../../boost/assign/v2 `boost/assign/v2`], headers 
and directories (except [^include]) are organized according to the modular structure of this library. The following statement  
[#full_include]:
``
	#include <boost/assign/v2.hpp>
``
includes all the modules [footnote A few headers are not included in that of their enclosing module. Where applicable, 
this will be mentioned].

* In directory [@../../../../../boost/assign/v2/include `boost/assign/v2/include`] headers are named after an identifier that they define[footnote
Excepted [^option.hpp], which includes ['all] the options. Creating, instead, a header for each option would have obfuscated the organization]. The 
following statement 
``
	#include <boost/assign/v2/include.hpp>
``
defines all the identifiers, and is equivalent to the previous include statement.

The functionality of __url_boost_assign_v1__[footnote The presence of parentheses is to mark the fact that this version number is retrospective : Boost.Assign and
Boost.Assign (1.0) designate the same library] does not clash with that versioned 2.0. While it's risk free to use both versions in the same projects, 
it's probably more coherent to stick to just one version. The following statement
``
	#include <boost/assign.hpp>
``

retrieves the content of version 1.0, not 2.0. 

[heading Namespaces]

The `namespace` organization is summed up below:
``
namespace boost{
namespace assign{

    // Boost.Assign (1.0) identifiers

namespace v2{

    // Boost.Assign 2.0 identifiers

namespace ref{

    // Features pertaining to references
	
}// ref
}// assign
}// v2
}// boost
``