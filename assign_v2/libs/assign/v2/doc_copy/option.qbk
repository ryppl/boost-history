[def __option_data_gen__ Option to replace an interpreter's data generator]
[def __option_std_modifier__ Standard modifier option]

[import ../test/option/std_modifier.cpp]
[import ../test/option/mapped.cpp]


[heading Header]
[@../../../../../boost/assign/v2/option.hpp `boost/assign/v2/option.hpp`]

[warning __option_requirement__]

[heading Description]
Options to alter the semantics of an [link boost_assign_v2.reference.interpreter interpreter].

[heading Semantics]

[table
	[[Expression][Description]]
	[[`__object_interpreter__ __invoke_options__`][ Returns an interpreter with a modified type or state  ]]
]

[heading Notation]

[variablelist
	[[`args...`][Arguments passed to `__object_interpreter__` ]]
	[[`__value__`][Data member internally generated by invoking `__object_interpreter__( args... )`]]
	[[`__cont__`][Container that `__object_interpreter__` internally modifies]]
	[[`__cont_type__`][Type of `__cont__`]]
]

[template tpl_option_modifier[HEADER OPTION DEFAULT MODIFIER EXAMPLE]

[heading Header]
[HEADER]

[heading Description]
Modifier option.

[heading Semantics]

[table
	[
		[Option]
		[Default]
		[Modifier]
	]
	[
		[ [OPTION] ]
		[ [DEFAULT] ]
		[ [MODIFIER] ]
	]
]

[heading Example]
[EXAMPLE]

]

[template tpl_option_data_generator[HEADER SYNTAX OPTION DEFAULT GEN EXAMPLE]

[heading Header]
[HEADER]

[heading Description]
Data generator option.

[heading Semantics]

[table
	[
		[Option]
		[Default]
		[Data-generation]
	]
	[
		[ [OPTION] ]
		[ [DEFAULT] ]
		[ [GEN] ]
	]
]

[heading Example]
[EXAMPLE]

]
[section:data Data]
[import ../test/option/data.cpp]

[tpl_option_data_generator 
	[@../../../../../boost/assign/v2/option/data.hpp `boost/assign/v2/option/data.hpp`]
	..[syntax_option_data]
	..`__kwd_data__ = __f__`
	..None
	..`__value__ = __f__(__args__)`
	..[*Example1]
	[test_option_data_math]
	[*Example2]
	[test_option_data_recursive]
]

[endsect][/data]
[section:insert Insert]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/insert.hpp `boost/assign/v2/option/insert.hpp`]
	..`__kwd_insert__`
	..Not applicable
	..`__cont__.insert( __value__ )`
    ..[test_option_insert]
]

[endsect][/insert]
[section:iterate Iterate]

[import ../test/option/iterate.cpp]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/data.hpp `boost/assign/v2/option/data.hpp`]
	..`__kwd_iterate__ = __arg__`
	..`__arg__()` increments a counter initalized at zero  
	..`__cont__[ __arg__() ] = __value__`
    ..[test_option_iterate_shifted]
]

[endsect][/iterate]
[section:key Key]

[tpl_option_data_generator 
	[@../../../../../boost/assign/v2/option/key.hpp `boost/assign/v2/option/key.hpp`]
	..[syntax_option_data]
	..`__kwd_key__`
	..None
	..`__value__ = __cont_type__::key_type(__args__)`
	..See [link option_mapped Option.Mapped]
]

[endsect][/key]
[section:mapped Mapped]
[#option_mapped]

[tpl_option_modifier
	[@../../../../../boost/assign/v2/option/mapped.hpp `boost/assign/v2/option/mapped.hpp`]
	..`__kwd_mapped__ = __arg__`
	.. None
	..`cont[ __value__ ] = __arg__( cont[ __value__ ] )` 
    ..[test_option_mapped_map]
]

[endsect][/mapped]
[section:modifier Modifier]
[#option_modifier]
[import ../../../../boost/assign/v2/option/modifier.hpp]

[tpl_module 
	[@../../../../../boost/assign/v2/option/modifier.hpp boost/assign/v2/option/modifier.hpp]
	..Option modifier framework
]

[heading Synopsis]
[syntax_option_modifier]

[heading Semantics]

[*Requirement]

Specialize, such as to model [link interpreter_modifier `interpreter_aux::ConceptModifier`],
``
namespace interpreter_aux{

    template<typename Arg>
    class interpreter_modifier< Result >;

}
``

[*Expression]

[table
	[[Expression][Description]]
	[
		[`BOOST_ASSIGN_V2_OPTION_MODIFIER_KEYWORD(NAME)`]
		[Defines an empty class `interpreter_aux::keyword_NAME;` and an associated keyword `_keyword_NAME`]
	]
	[
		[`BOOST_ASSIGN_V2_OPTION_MODIFIER_META_MODIFIER_TAG(NAME, Result)`]
		[Specializes metafunction class `interpreter_aux::meta_modifier_tag` on `interpreter_aux::keyword_NAME` to return `Result`]
	]
]

[heading Examples]
[*Example1]

[@../../../../../boost/assign/v2/option/iterate.hpp [^boost/assign/v2/option/iterate.hpp]]

[*Example2]

[@../../../../../boost/assign/v2/option/mapped.hpp [^boost/assign/v2/option/mapped.hpp]]

[*Example3]

[@../../../../../boost/assign/v2/option/repeat.hpp [^boost/assign/v2/option/repeat.hpp]]

[endsect][/modifier]
[section:push Push]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/push.hpp `boost/assign/v2/option/push.hpp`]
	..`__kwd_push__`
	.. Not applicable
	..`__cont__.push( __value__ )`
    ..[test_option_push]
]

[endsect][/push]
[section:push_back Push_back]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/push_back.hpp `boost/assign/v2/option/push_back.hpp`]
	..`__kwd_push_back__`
	.. Not applicable
	..`__cont__.push_back( __value__ )`
    ..[test_option_push_back]
]

[endsect][/push_back]
[section:push_front Push_front]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/push_front.hpp `boost/assign/v2/option/push_front.hpp`]
	..`__kwd_push_front__`
	.. Not applicable
	..`__cont__.push_front( __value__ )`
    ..[test_option_push_front_deque]
]

[endsect][/push_front]
[section:repeat Repeat]

[import ../test/option/repeat.cpp]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/push_front.hpp `boost/assign/v2/option/push_front.hpp`]
	..`__kwd_repeat__ = n`
	..[^n = 0]
	..Invokes [^n] times the modifier that prevailed before passing this option
    ..[*Example1]
    [test_option_repeat_simple]
    [*Example2]
    [test_option_repeat_compose]
]

[endsect][/repeat]
[section:std_modifier Std_modifier]

[heading Header]
[@../../../../../boost/assign/v2/option/push.hpp `boost/assign/v2/option/push.hpp`]

[heading Description]
Modifier option

[heading Syntax]
``
namespace interpreter_aux{
	struct option_std_modifier;
}
	option_std_modifier const __kwd_std_modifier__;
	#define BOOST_ASSIGN_V2_OPTION_STD_MODIFIER(Name) __unspecified__
``

[heading Semantics]

[*Option]

[table
	[[Option][Default][Modifier]]
	[[`__kwd_std_modifier__ = __arg__`][None][Semantics of `interpreter_aux::modifier<Arg>`]]
]

[*Macro]
``
	BOOST_ASSIGN_V2_OPTION_STD_MODIFIER(Name)
``

* Defines `namespace modifier_tag{ struct Name{}; }`
* Creates a keyword `_Name`, shortcut for `__kwd_std_modifier__ = modifier_tag::Name`
* Specializes `interpreter_aux::modifier<modifier_tag::Name>` with the following semantics:

[table
	[[Option][Modifier]]
	[[`_Name`][`__cont__.Name( __value__ )`]]
]

[heading Example]
``
	BOOST_ASSIGN_V2_OPTION_STD_MODIFIER(push_back)
``

[endsect][/std_modifier]




