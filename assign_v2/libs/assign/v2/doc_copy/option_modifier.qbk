[def __option_std_modifier__ Standard modifier option]

[heading Header]
[@../../../../../boost/assign/v2/option/modifier.hpp [^boost/assign/v2/option/modifier.hpp]]

[heading Description]
Options to alter the modifier of an [link boost_assign_v2.reference.interpreter interpreter].

[template tpl_option_modifier[HEADER OPTION DEFAULT MODIFIER EXAMPLE]

[heading Header]
[HEADER]

[heading Description]
Modifier option.

[heading Semantics]

[table
	[
		[Option]
		[Default]
		[Modifier]
	]
	[
		[ [OPTION] ]
		[ [DEFAULT] ]
		[ [MODIFIER] ]
	]
]

[heading Example]
[EXAMPLE]

]

[section:framework Framework]
[#option_modifier]
[import ../../../../boost/assign/v2/option/modifier/framework.hpp]

[tpl_module 
	[@../../../../../boost/assign/v2/option/modifier/framework.hpp boost/assign/v2/option/modifier/framework.hpp]
	..Option modifier framework
]

[heading Synopsis]
[syntax_option_modifier]

[heading Semantics]

[*Requirement]

Specialize, such as to model [link interpreter_modifier `interpreter_aux::ConceptModifier`],
``
namespace interpreter_aux{

    template<typename Arg>
    class interpreter_modifier< Result >;

}
``

[*Expression]
[#modifier_macro]

[table
	[[Expression][Description]]
	[
		[`BOOST_ASSIGN_V2_OPTION_MODIFIER_KEYWORD(NAME)`]
		[Defines an empty class `interpreter_aux::keyword_NAME;` and an associated keyword `_keyword_NAME`]
	]
	[
		[`BOOST_ASSIGN_V2_OPTION_MODIFIER_META_MODIFIER_TAG(NAME, Result)`]
		[Specializes metafunction class `interpreter_aux::meta_modifier_tag` on `interpreter_aux::keyword_NAME` to return `Result`]
	]
]


[heading Example]
[*Example1]

[@../../../../../boost/assign/v2/option/modifier/iterate.hpp [^boost/assign/v2/option/modifier/iterate.hpp]]

[*Example2]

[@../../../../../boost/assign/v2/option/modifier/mapped.hpp [^boost/assign/v2/option/modifier/mapped.hpp]]

[*Example3]

[@../../../../../boost/assign/v2/option/modifier/repeat.hpp [^boost/assign/v2/option/modifier/repeat.hpp]]

[endsect][/framework]

[section:iterate Iterate]
[#option_iterate]
[import ../test/option/iterate.cpp]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/modifier/iterate.hpp `boost/assign/v2/option/modifier/iterate.hpp`]
	..`__kwd_iterate__ = __arg__`
	..`__arg__()` increments a counter initalized at zero  
	..`__cont__[ __arg__() ] = __value__`
    ..[*Example 1]
    [test_iterate1]
    [*Example 2]
    [test_iterate2]
]

[endsect][/iterate]
[section:mapped Mapped]
[#option_mapped]

[tpl_option_modifier
	[@../../../../../boost/assign/v2/option/modifier/mapped.hpp `boost/assign/v2/option/modifier/mapped.hpp`]
	..`__kwd_mapped__ = __arg__`
	.. None
	..`cont[ __value__ ] = __arg__( cont[ __value__ ] )` 
    ..[*Example 1]
    [test_mapped1]
    [*Example 2]
    [test_mapped2]
]

[endsect][/mapped]
[section:repeat Repeat]

[import ../test/option/repeat.cpp]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/modifier/repeat.hpp `boost/assign/v2/option/modifier/repeat.hpp`]
	..`__kwd_repeat__ = n`
	..[^n = 0]
	..Invokes [^n] times the modifier that prevailed before passing this option
    ..[*Example1]
    [test_repeat1]
    [*Example2]
    [test_repeat2]
]

[endsect][/repeat]
[section:row_major Row_major]
[#row_major]
[import ../test/option/row_major.cpp]

[tpl_option_modifier 
	[@../../../../../boost/assign/v2/option/modifier/row_major.hpp `boost/assign/v2/option/modifier/row_major.hpp`]
	..`__kwd_row_major__ = __arg__`
	..`__arg__()` increments a counter initalized at zero  
	..Equivalent to `*( __arg__() + __cont__.data() ) = __value__` 
    ..[*Example1]
    [test_row_major1]
]

[endsect][/repeat]
[section:std_modifier Std_modifier]
[#std_modifier]

[heading Header]
[@../../../../../boost/assign/v2/option/modifier/std.hpp `boost/assign/v2/option/modifier/std.hpp`]

[heading Description]
Modifier option

[heading Syntax]
``
namespace interpreter_aux{

    struct option_std_modifier;

}// interpreter_aux

    interpreter_aux::option_std_modifier const __kwd_std_modifier__;
    
    #define BOOST_ASSIGN_V2_OPTION_STD_MODIFIER(Name) __unspecified__
``

[heading Option]

[*Semantics]

[table
	[[Option][Default][Modifier]]
	[[`__kwd_std_modifier__ = __arg__`][None][Semantics of `interpreter_aux::modifier<Arg>`]]
]

[*Instances]

[table
	[[Keyword][Option]]
	[[`__kwd_insert__`][`__kwd_std_modifier__ = modifier_tag::insert()`]]
	[[`__kwd_push__`][`__kwd_std_modifier__ = modifier_tag::push()`]]
	[[`__kwd_push_back__`][`__kwd_std_modifier__ = modifier_tag::push_back()`]]
	[[`__kwd_push_front__`][`__kwd_std_modifier__ = modifier_tag::push_front()`]]
]

[import ../test/option/std_modifier.cpp]
[*Example 1]
[test_push_front1]
[*Example 2]
[test_push_front2]

[heading Macro]
[*Semantics]
``
	BOOST_ASSIGN_V2_OPTION_STD_MODIFIER(Name)
``

* Defines `namespace modifier_tag{ struct Name{}; }`
* Creates a keyword `_Name`, shortcut for `__kwd_std_modifier__ = modifier_tag::Name`
* Specializes `interpreter_aux::modifier<modifier_tag::Name>` with the following semantics:

[table
	[[Option][Modifier]]
	[[`_Name`][`__cont__.Name( __value__ )`]]
]

[*Example]
``
	BOOST_ASSIGN_V2_OPTION_STD_MODIFIER(push_back)
``

[endsect][/std_modifier]




