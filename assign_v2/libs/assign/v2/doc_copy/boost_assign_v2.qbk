[library Boost.Assign
    [quickbook 1.5]
    [version 2.0]
    [authors [Thorsten, Ottosen],[Rogard, Erwann]]
    [copyright 2003-2004 Thorsten Ottosen, 2010 Erwann Rogard]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [id boost_assign_v2]
]

[/Support]

[def __TO__						[@http://www.boost.org/users/people/thorsten_ottosen.html TO]]
[def __ER__						[@mailto:erDOTciDOT2020ATgmailDOTcom ER]]

[template tpl_user_mailing_list[var]		[@http://www.boost.org/community/groups.html#users [var]]]
[def __user_mailing_list__      			[tpl_user_mailing_list Boost Users Mailing List]]
[def __url_boost_assign_v2_mini_review__ 	[@http://lists.boost.org/Archives/boost/2010/06/168028.php mini-review]]


[/ C++ Standard ]

[def __cpp03__ C++03]
[def __cpp0x__ C++0x]
[template tpl_cpp03[var] [@http://en.wikipedia.org/wiki/C%2B%2B03 [var]]]
[template tpl_cpp0x[var] [@http://www2.research.att.com/~bs/C++0xFAQ.html [var]]]
[def __url_cpp03__ [tpl_cpp03 __cpp03__]]
[def __url_cpp0x__ [tpl_cpp0x __cpp0x__]]

[/ Platform]

[def __mac_os__ OS X 10.6.5]
[def __mac_default_compiler__ gcc4.2]
[def __mac_processor__ 2.4 Ghz Intel Core 2 Duo]
[def __mac_mem__ 4GB 1067 Mhz DDR3]

[def __fink__ Fink]
[template tpl_fink[var] [@http://www.finkproject.org/ [var]]]
[def __url_fink__ [tpl_fink __fink__]]


[/ Libraries ]

[def __callout__										[@http://www.boost.org/doc/libs/1_45_0/doc/html/quickbook/syntax.html#quickbook.syntax.phrase.anchors callout]]

[def __boost_assign_v1__ 								Boost.Assign 1.0]
[template tpl_boost_assign_v1[var] 						[@../../../../../libs/assign/doc/index.html [var]]]
[def __url_boost_assign_v1__ 							[tpl_boost_assign_v1 __boost_assign_v1__]]

[def __boost_assign_v2__ 								Boost.Assign 2.0]
[template tpl_boost_assign_v2[var] 						[@./index.html [var]]]
[def __url_boost_assign_v2__ 							[tpl_boost_assign_v2 __boost_assign_v2__]]

[def __boost__											Boost]
[template tpl_boost[var] 								[@http://www.boost.org [var]]]
[def __url_boost__ 										[tpl_boost __boost__]]

[template tpl_boost_array[var] 							[@http://www.boost.org/doc/libs/release/doc/html/array.html [var]]]

[template tpl_mpl[var] 									[@http://www.boost.org/libs/mpl/index.html [var]]]
[def __mpl__ 											[tpl_mpl MPL]]

[template tpl_stl[var] 									[@http://en.wikipedia.org/wiki/Standard_Template_Library [var]]]
[def __stl__ 											[tpl_stl STL]]

[template tpl_stl_assoc[var] 							[@http://www.sgi.com/tech/stl/AssociativeContainer.html [var]]]
[template tpl_stl_seq[var] 								[@http://www.sgi.com/tech/stl/Sequence.html [var]]]
[template tpl_stl_adapter[var]							[@http://flylib.com/books/en/2.674.1.106/1/ [var]]]
[template tpl_stl_deque[var] 							[@http://www.sgi.com/tech/stl/Deque.html [var]]]
[template tpl_stl_cont[var]								[@http://www.sgi.com/tech/stl/Container.html [var]]]


[template tpl_lambda[var] 								[@http://www.boost.org/doc/libs/release/doc/html/lambda.html [var]]]
[def __lambda__											[tpl_lambda lambda]]

[template tpl_ptr_container[var] 						[@http://www.boost.org/doc/libs/release/libs/ptr_container/doc/ptr_container.html [var]]]

[template tpl_range[var] 								[@http://www.boost.org/doc/libs/release/libs/range/index.html [var]]]

[template tpl_range_adaptor[var] 						[@http://svn.boost.org/svn/boost/trunk/libs/range/doc/html/range/reference/adaptors.html [var]]]
[template tpl_range_adaptor_compose[var] 				[@http://svn.boost.org/svn/boost/trunk/libs/range/doc/html/range/reference/adaptors/introduction.html#range.reference.adaptors.introduction.composition_of_adaptors [var]]]
[template tpl_range_algo[var] 							[@http://svn.boost.org/svn/boost/trunk/libs/range/doc/html/range/reference/algorithms.html [var]]]
[template tpl_range_join[var]							[@http://svn.boost.org/svn/boost/trunk/boost/range/join.hpp [var]]]
[template tpl_itr[var]						            [@http://svn.boost.org/svn/boost/trunk/libs/range/doc/html/range/reference/utilities/iterator_range.html [var]]]

[template tpl_operators[var]							[@http://www.boost.org/doc/libs/release/libs/utility/operators.htm [var]]]
[template tpl_boost_typeof[var]								[@http://www.boost.org/doc/libs/1_35_0/doc/html/typeof.html [var]]]

[/Concepts]

[template tpl_meta_fun[var] 					[@http://svn.boost.org/svn/boost/trunk/libs/mpl/doc/refmanual/metafunction.html [var]]]
[template tpl_meta_fun_class[var]				[@http://svn.boost.org/svn/boost/trunk/libs/mpl/doc/refmanual/metafunction-class.html [var]]]

[/Headers]

[template tpl_boost_trunk [var]										[@http://svn.boost.org/svn/boost/trunk [var]]]
[def __boost_trunk__												[tpl_boost_trunk [^boost-trunk]]]

[template tpl_boost_type [var]										[@http://svn.boost.org/svn/boost/trunk/boost/type.hpp [var]]]
[def __boost_type__													[@http://svn.boost.org/svn/boost/trunk/boost/type.hpp boost::type]]

[template tpl_dir_boost_assign_v2[var] 								[@../../../../../boost/assign/v2 [var]]]
[def __dir_boost_assign_v2__ 										[tpl_dir_boost_assign_v2 boost/assign/v2]]

[template tpl_dir_libs_assign_v2[var] 								[@../../ [var]]]
[def __dir_libs_assign_v2__ 										[tpl_dir_libs_assign_v2 libs/assign/v2]]

[template tpl_dir_libs_assign_v2_example [var] 						[@../../example [var]]]
[def __dir_libs_assign_v2_example__ 								[tpl_dir_libs_assign_v2_example libs/assign/v2/example]]


[/Files]

[template tpl_test[var] [@../../test/ [var]] ] 
[template tpl_run_eff[var] [@../../speed/results [var]] ] 

[/Concepts]

[template tpl_concept_range[var] [@http://svn.boost.org/svn/boost/trunk/libs/range/doc/html/range/concepts/overview.html [var]]]

[template tpl_crtp[var] [@http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern [var]]]
[def __crtp__ [tpl_crtp crtp]]

[template tpl_class_tpl[var] [@http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fclass_templates.htm [var]]]

[/ CodeLinks]


[def __kwd_put__			_put]
[def __put__				put]
[def __kwd_csv_put__		_csv_put]
[def __csv_put__			csv_put]
[def __deque__				deque]
[def __csv_deque__			csv_deque]

[def __kwd_iterate__		_iterate]
[def __kwd_lookup__			_lookup]
[def __kwd_repeat__			_repeat]

[def __ref_csv_array__		ref::csv_array]
[def __ref_array__			ref::array]

[def __converter__			converter]
[def __convert__			convert]


[/ Templates]

[def __type_ext__ _]
[template tpl_join[a b][a][b]]
[template tpl_typeof[object][tpl_join [object]..__type_ext__]]
[template tpl_seq[index first last] [index] = [first], ..., [last]]
[template tpl_sub[var index] [var]\[[index]\] ]
[template tpl_sub_sub[var index1 index2] [var]\[[index1],[index2]\]]

[/ Note]

[def __explicit_header__ This header has to be explicitly included]
[def __dev_only__		 End-users may wish to skip this part. ]
[def __pervasive_parameters__ These parameters will be encountered in various (meta) expressions, but their description is only shown here: ]

[def __ns_as2__					boost::assign::v2]
[def __unspecified__ 			'''<replaceable>unspecified</replaceable>''']

[/ External ]

[def __cont__					cont]
[def __cont_type__				C]
[def __value__					t]
[def __value_type__				T]
[def __values__ 				__value__...]
[def __f__						f]
[def __f_type__					F]
[def __range__					r]
[def __range_type__				R]
[def __array__					ar]
[def __array_type__				Ar]

[/Kwd]

[def __kwd_nil__				_nil]

[/Put]

[def __kwd_fun__				_fun]

[def __kwd_modifier__			_modifier]
[def __kwd_insert__				_insert]
[def __kwd_iterate__			_iterate]
[def __kwd_lookup__				_lookup]
[def __kwd_push__				_push]
[def __kwd_push_back__			_push_back]
[def __kwd_push_front__			_push_front]
[def __kwd_repeat__				_repeat]

[/Ref]

[def __kwd_get__				_get]

[/Utility]

[def __kwd_chain__				_chain]
[def __r1__						r1]
[def __r1_type__				R1]
[def __r2__						r2]
[def __r2_type__				R2]

[section:intro Introduction]
[import ../test/put/put.cpp]

This library builds upon __url_boost_assign_v1__'s design, but is functionally independent of it. It can be broadly characterized as providing a compact interface
for carrying out operations involving containers, which would ordinarily require repetitive statements. Here's an example:
[test_put_put_numeric_kb]

Header [link boost_assign_v2.put [^[*boost/assign/v2/put.hpp]]] revolves around putting a sequence of values in a container. Notable features include:

* A functor interface, supplied by [link boost_assign_v2.put.put `__put__()`], that forwards arguments to the constructor of the container's value-type (`data_`, in the above example) and passes the result, `__value__`, to a container-deduced modifier (`numeric_kb[i++] = __value__`, in the same example). 
* Optionally, either of the above two components can be overriden via a parameter passing mechanism expressed by the modulo operator. Common 
  parameters are provided, and the repertoire can be arbitrarily extended through the use of macros.
* A variant of the above in which the container is constructed in place, by invoking [link boost_assign_v2.put.deque `deque<>()`]. The relevant 
sections are [link boost_assign_v2.put.fun.modulo here] and [link boost_assign_v2.put.modifier.modulo here]
* A [link boost_assign_v2.put.pipe ['piping] ] mechanism to facilitate integration of  [link boost_assign_v2.put.put `__put__()`] with [tpl_range_algo range algorithms]

Header [link boost_assign_v2.ref [^[*boost/assign/v2/ref.hpp]]] pertains to treating a set of references as a [tpl_concept_range range-like] interface. 

Header [link boost_assign_v2.utility [^[*boost/assign/v2/utility.hpp]]] contains functionality that is adjunct to either of the above ['put] and ['ref] frameworks.

* Chaining ranges, with special consideration for those created using the ['ref] functionaltiy
* Conversion from ranges to containers
* A function, `csv()`, to be used primarily in conjunction with `__put__()`, that, given a functor and a sequence of values as its arguments, is equivalent to successive unary functor calls over that sequence.

If __url_cpp0x__'s capabilities are detecte (specifically variadic templates and move semantics), they are incorporated into the libraries's implementation.

[endsect][/intro]

[section:tutorial Tutorial]
[endsect][/tutorial]
[section:put Put]

[def __put_adapter__ 			'''<replaceable>put-adapter</replaceable>''']
[def __put_modifier__ 			'''<replaceable>put-modifier</replaceable>''']

[def __link_put_adapter__		[link boost_assign_v2.put.adapter Adapter]]
[def __link_put_adapter_crtp__	[link boost_assign_v2.put.adapter.crtp Crtp]]

[def __header_put_deque__       	[@../../../../../boost/assign/v2/put/deque.hpp           boost/assign/v2/put/deque.hpp]]

[def __header_put_pipe__        	[@../../../../../boost/assign/v2/put/pipe.hpp        	 boost/assign/v2/put/pipe.hpp]]


[section:adapter Adapter]
[def __header_put_adapter__ 			[@../../../../../boost/assign/v2/put/adapter.hpp boost/assign/v2/put/adapter.hpp]]
[def __describe_put_adapter__ 			A framework for adapting a container's interface for inserting elements to that of a functor ]
[import ../../../../boost/assign/v2/put/adapter.hpp]

[heading Header]
``
    #include <__header_put_adapter__>
``

[heading Description]
__describe_put_adapter__ 

[section:as_arg_list As_arg_list]
										
[def __header_put_adapter_as_arg_list__ [@../../../../../boost/assign/v2/put/adapter/as_arg_list.hpp boost/assign/v2/put/adapter/as_arg_list.hpp]]
[def __describe_put_adapter_as_arg_list__ A function that, invoked with a given [tpl_concept_range range], returns a class wrapped around it that signals that the range's elements are to be treated as a sequence of unary arguments to an adapter.]
[import ../../../../boost/assign/v2/put/adapter/as_arg_list.hpp]

[heading Header]
``
	#include <__header_put_adapter_as_arg_list__>
``

[heading Description]
__describe_put_adapter_as_arg_list__

[heading Synopsis]
[syntax_put_adapter_as_arg_list]

[endsect][/as_arg_list]
[section:crtp Crtp]

[def __header_put_adapter_crtp__ 		[@../../../../../boost/assign/v2/put/adapter/crtp.hpp boost/assign/v2/put/adapter/crtp.hpp]]
[def __describe_put_adapter_crtp__ 		A [tpl_crtp CRTP] [tpl_class_tpl class template] with a variadic functor interface that maps arguments to a value 
and inserts it in a container supplied by the derived class. Each of the mapping and the insertion mechanism, termed a ['modifier], are specified 
by template paramaters. ]
[import ../../../../boost/assign/v2/put/adapter/crtp.hpp]

[heading Header]
``
#include <__header_put_adapter_crtp__>
``

[heading Description]
__describe_put_adapter_crtp__

[heading Synopsis]
[syntax_put_adapter_crtp]

[heading Semantics]
[*Notation]

[variablelist 
    [
        [`cont`]
        [ Instance of `C`, supplied by the derived class  ]
    ]
    [
        [`f`]
        [ Internal copy of instance of type `F`]
    ]
    [
        [`__put_modifier__`]
        [ Internal copy of instance of type `put_aux::adapter_modifier<Tag>`]
    ]
    [
        [`__put_adapter__`]
        [ Instance of `D`  ]
    ]
]

[*Expressions]

[table
    [[Expression][Side effect][Result]]
    [    
        [ `__put_adapter__( args... ) ` ]
        [ `__put_modifier__.impl( cont, f( args... ) )` ]
        [ A reference to `__put_adapter__` ]
    ]
    [    
        [ `__put_adapter__( as_arg_list( range ) ) ` ]
        [ `__put_adapter__( arg )` for each `arg` in `range` ]
        [ A reference to `__put_adapter__`]
    ]
]

[endsect][/crtp]
[section:modifier Modifier]
[def __header_put_adapter_modifier__ 	[@../../../../../boost/assign/v2/put/adapter/modifier.hpp boost/assign/v2/put/adapter/modifier.hpp]]
[def __describe_put_adapter_modifier__ 	A [tpl_class_tpl class template] with no default implementation, but whose specializations
are required to expose a particular interface for modifying a container.]
[import ../../../../boost/assign/v2/put/adapter/modifier.hpp]

[heading Header]
``
#include <__header_put_adapter_modifier__>
``

[heading Description]
__describe_put_adapter_modifier__

[heading Synopsis]
[syntax_put_adapter_modifier]

[endsect][/modifier]
[endsect][/adapter]
[section:deque Deque]
										
[def __header_deque__ 					[@../../../../../boost/assign/v2/put/deque.hpp boost/assign/v2/put/deque.hpp]]
[def __describe_deque__ 				In place construction of a de-que container that has the [link boost_assign_v2.put.adapter.crtp adapter interface].]
[import ../../../../boost/assign/v2/put/deque/csv_deque.hpp]
[import ../../../../boost/assign/v2/put/deque/deque.hpp]

[heading Header]
``
	#include<__header_deque__>
``

[heading Describe]
__describe_deque__

[heading Synopsis]
[syntax_put_deque_deque]

[*Alerternative syntax]
[syntax_put_deque_csv_deque]

[heading Semantics]

[*Adapter]

[table 
	[[Expression][Properties]]
	[	
		[``
			put_aux::deque_adapter<__value_type__, __f__, Tag>
		``]
		[Inherits `put_aux::adapter_crtp<__value_type__, __f__, Tag, deque_adapter>`]
	]
]

[*Meta]

[table 
	[[Expression][Value]]
	[
		[`put_aux::deque_impl<__value_type__>::type`]
		[`std::deque<__value_type__>`]
	]
	[	
		[`result_of::deque<__value_type__>::type`]
		[``
        	put_aux::deque_adapter<
        		__value_type__,
        		put_aux::deduce_fun< deque_impl<__value_type__>::type >,
        		put_aux::deduce_modifier_tag< deque_impl<__value_type__>::type >::type
        	>
		``]
	]
	[
		[``
			csv_deque_value<__value_type__>::type
		``]
		[``
			boost::decay<boost::remove_cv<__value_type__>::type>::type
		``]
	]
	[
		[``
			result_of::csv_deque<__value_type__>::type
		``]
		[``
			result_of::deque< 
				csv_deque_value<__value_type__>::type
			>::type
		``]
	]
]

[note `boost::decay<>` is needed if `__value_type__` is a string literal]

[*Invocation]

[table 
	[[Expression][Value]]
	[
		[`__deque__<__value_type__>( __kwd_nil__ )`]
		[Instance of `result_of::__deque__<__value_type__>`]
	]
	[
		[`__deque__<__value_type__>( args... )`]
		[Equivalent to `__deque__<__value_type__>( __kwd_nil__ )( args... )`]
	]
	[
		[`__csv_deque__( args... )`]
		[Equivalent to `__deque__<csv_deque_value<__value_type__>::type>( args... )`]
	]
]

Also see the semantics of the [link boost_assign_v2.put.adapter.crtp base class].

[heading Example]
[import ../test/put/deque.cpp]
[*Integers]
[test_put_deque_ints]

[*String literal]
[test_put_deque_str_literal]

[note The examples above are minimal to avoid redundancies with those of [link boost_assign_v2.put.put `__put__()`], which illustrate specific
features of the [link boost_assign_v2.put.adapter.crtp adapter interface], which is common to both. These examples are easy to translate to `__deque__<>()`]

[endsect][/deque]
[section:fun Fun]
[def __header_put_fun__ 				[@../../../../../boost/assign/v2/put/fun.hpp boost/assign/v2/put/fun.hpp]]
[def __describe_put_fun__				Aspects of an adapter's functor] 
										
[heading Header]
``
    #include <__header_put_fun__>
``

[heading Description]
__describe_put_fun__

[section:deduce Deduce]
[def __header_put_fun_deduce__ 			[@../../../../../boost/assign/v2/put/fun/deduce.hpp boost/assign/v2/put/fun/deduce.hpp]]
[def __describe_put_fun_deduce__		A meta-function that maps a container's type to a functor] 
[import ../../../../boost/assign/v2/put/fun/deduce.hpp]

[heading Description]
__describe_put_fun_deduce__

[heading Synopsis]
[syntax_put_fun_deduce]

[endsect]
[section:modulo Modulo]

[def __header_put_fun_modulo__ 			[@../../../../../boost/assign/v2/put/fun/modulo.hpp boost/assign/v2/put/fun/modulo.hpp]]
[def __describe_put_fun_modulo__		Overloads of `operator%` for replacing a __link_put_adapter__'s functor] 
[import ../../../../boost/assign/v2/put/fun/modulo.hpp]

[heading Description]
__describe_put_fun_modulo__

[heading Synopsis]
[syntax_put_fun_modulo]

[heading Semantics]

[*Expressions]

[table
	[[Expression][Result type][Description]]
    [
    	[`__put_adapter__ % ( _fun = f )`]
        [`::boost::mpl::apply1<result_of::modulo_fun<D>, F>::type`]
        [Replaces `__put_adapter__`'s functor with `f`]
    ]
]

[heading Aliases]

[*Synopsis]
``
const __unspecified__ _construct;
const __unspecified__ _identity;
const __unspecified__ _new;
``

[*Semantics]

[table
	[[Expression][Result type]]
    [
    	[`__put_adapter__ % _identity`]
        [Replaces `__put_adapter__`'s functor with an identity functor]
    ]
    [
    	[`__put_adapter__ % _constructor<T>()`]
        [Replaces `__put_adapter__`'s functor with a constructor for `T`]
    ]
    [
    	[`__put_adapter__ % _new<T>()`]
        [Replaces `__put_adapter__`'s functor with a functor returning a pointer for `T`]
    ]
]

[heading Example]
[import ../test/put/fun.cpp]
[*Math]
[test_put_fun_math]
[*Recursive]
[test_put_fun_recursive]

[endsect][/fun]
[endsect][/modulo]
[section:modifier Modifier]
										
[def __header_put_modifier__        	[@../../../../../boost/assign/v2/put/modifier.hpp boost/assign/v2/put/modifier.hpp]]
[def __describe_put_modifier__  		Overloads of `operator%` for replacing an __link_put_adapter__'s modifier and a meta-function for deducing a default] 
[def __tip_put_modifier__ Don't misconstrue the existence of this overload of `operator%` as necessary to specify the stated
modifier. In particular, the default, for a particular `__put_adapter__`, is the most natural choice. See the section of 
that adapter and section [link boost_assign_v2.put.modifier.deduce Modifier.Deduce] ]

[def __describe_a_standard_modifier__ A [link boost_assign_v2.put.modifier.standard Standard modifier]]

[import ../test/put/modifier/standard.cpp]

[heading Header]
``
    #include <__header_put_modifier__>
``

[heading Description]
__describe_put_modifier__

[section:deduce Deduce]

[def __describe_put_modifier_deduce__ 	A meta-function that, based on a set of rules, maps a container's type to a modifier]
[def __header_put_modifier_deduce__ 	[@../../../../../boost/assign/v2/put/modifier/deduce.hpp boost/assign/v2/put/modifier/deduce.hpp]]
[import ../../../../boost/assign/v2/put/modifier/deduce.hpp]

[heading Header]
``
    #include <__header_put_modifier_deduce__>
``

[heading Description]

__describe_put_modifier_deduce__

[heading Syntax]
[syntax_put_modifier_deduce]

[heading Semantics]

[table
	[
    	[`C`][`Tag`]
    ]
    [
    	[ [tpl_stl_assoc Associative] ]
        [ `modifier_tag::insert`]
    ]
    [
    	[ [tpl_boost_array Array] ]
        [ `modifier_tag::iterate<>` ]
    ]
    [
    	[ [tpl_stl_adapter Adapter] ]
        [ `modifier_tag::push` ]
    ]
    [
    	[ None of the above ]
        [ `modifier_tag::push_back` ]
    ]
]

[heading Customization]
[*Syntax]
``
// The next 5 not override-able macros can be used for defining a custom switch
#define BOOST_ASSIGN_V2_PUT_MODIFIER_DEDUCE_SWITCH_CASE(ModifierTag, BooleanMetaFun, Number) __unspecified__ 
#define BOOST_ASSIGN_V2_PUT_MODIFIER_DEDUCE_SWITCH_ASSOCIATIVE(CaseNumber) 	__unspecified__ // modifier_tag::insert
#define BOOST_ASSIGN_V2_PUT_MODIFIER_DEDUCE_SWITCH_ARRAY(CaseNumber) 		__unspecified__ // modifier_tag::iterate<>
#define BOOST_ASSIGN_V2_PUT_MODIFIER_DEDUCE_SWITCH_ADAPTER(CaseNumber) 		__unspecified__ // modifier_tag::push
#define BOOST_ASSIGN_V2_PUT_MODIFIER_DEDUCE_SWITCH_DEFAULT(CaseNumber) 		__unspecified__ // modifier_tag::push_back

#define BOOST_ASSIGN_V2_PUT_MODIFIER_DEDUCE_SWITCH // Signals that a switch is already defined 
``

[endsect][/deduce]
[section:modulo Modulo]
										
[def __header_put_modifier_modulo__ 	[@../../../../../boost/assign/v2/put/modifier/modulo.hpp boost/assign/v2/put/modifier/modulo.hpp]]
[def __describe_put_modifier_modulo__ 	Overload of `operator%`  to replace an adapter's modifier]
[import ../../../../boost/assign/v2/put/modifier/modulo.hpp]

[heading Header]
``
    #include <__header_put_modifier_modulo__>
``

[heading Description]
__describe_put_modifier_modulo__

[heading Synopsis]
[syntax_put_modifier_modulo]

[heading Semantics]

[table
	[[Expression][Description]]
    [[`__put_adapter__ % __put_modifier__ `][ Replaces `__put_adapter__`'s modifier]]
]

[heading Customization]

[*Syntax]
``
#define BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_META_MODIFIER_TAG(Name, Result) unspecified
#define BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_KEYWORD(Name) unspecified
``

[*Semantics]

[table
	[[Expression][Description]]
    [
    	[`BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_META_MODIFIER_TAG(Name, Result)`]
        [Specializes `put_aux::meta_modifier_tag` on `keyword_Name` to return `Result`[footnote `Result` may be expressed in terms of `Arg`]]
    ]
    [
    	[`BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_META_MODIFIER_KEYWORD(Name)`]
        [Creates a class `put_aux::keyword_Name`, and a `const` instance thereof, `_Name`]
    ]
]

[*Requirement]

[table
	[	
		[Requirement]
	]
	[
		[Specialize `put_aux::modifier<Result>` on `keyword_Name`. See [link boost_assign_v2.put.adapter.modifier Adapter.Modifier]]
	]
]

[*Example]
``
BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_KEYWORD(standard_modifier)    
BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_META_MODIFIER_TAG(standard_modifier, Arg)
``

[endsect][/modulo]
[section:insert Insert]
										
[def __header_put_modifier_insert__ 	[@../../../../../boost/assign/v2/put/modifier/insert.hpp boost/assign/v2/put/modifier/insert.hpp]]
[import ../../../../boost/assign/v2/put/modifier/insert.hpp]

[heading Header]
``
#include <__header_put_modifier_insert__>
``

[heading Description]
__describe_a_standard_modifier__

[heading Semantics]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % _insert `][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::insert`]]	
]

[tip __tip_put_modifier__]

[heading Example]
[test_put_modifier_insert]

[endsect][/insert]
[section:iterate Iterate]

[def __header_put_modifier_iterate__ 	[@../../../../../boost/assign/v2/put/modifier/iterate.hpp boost/assign/v2/put/modifier/iterate.hpp]]
[import ../../../../boost/assign/v2/put/modifier/iterate.hpp]

[heading Header]
``
#include <__header_put_modifier_iterate__>
``

[heading Description]

[heading Synopsis]
``
namespace modifier_tag{ 

    template<typename Arg = __unspecified__ > struct iterate{}; 

}// modifier_tag
namespace put_aux{
                
    template<typename Arg>
    class adapter_modifier< modifier_tag::iterate<Arg> >;

    struct keyword_iterate;

}//put_aux

put_aux::keyword_iterate const _iterate;

``

[heading Semantics]
[*Notation]

[variablelist
	[
		[`__put_modifier__`]
		[ Instance of `put_aux::adapter_modifier< modifier_tag::iterate<Arg> >`]
	]
	[
		[`arg`]
		[Copy of argument passed as `_iterate = arg`]
	]
]

[*Adapter]

[table
	[[Expression][Description]]
	[[`__put_modifier__( __cont__, __value__ )`][ `__cont__[ arg() ] = __value__` ]]
]

[*Meta]

[table
	[[Expression][Description]]
    [[`mpl::apply2<put_aux::meta_modifier_tag<D>, keyword_iterate, Arg>::type`][`modifier_tag::iterate<Arg>`]]
]

[*Invocation]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % ( _iterate = arg )`][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::iterate<Arg>`]]	
]

If omitted, `arg()` is equivalent to `i++` for some `i` initialized at zero.

[tip __tip_put_modifier__]

[heading Example]
[import ../test/put/modifier/iterate.cpp]
[*Shifted]
[/test_put_modifier_iterate_shifted]

[endsect][/iterate]
[section:lookup Lookup]

[def __header_put_modifier_lookup__ 	[@../../../../../boost/assign/v2/put/modifier/lookup.hpp boost/assign/v2/put/modifier/lookup.hpp]]
[import ../../../../boost/assign/v2/put/modifier/lookup.hpp]

[heading Header]
``
#include <__header_put_modifier_lookup__>
``

[heading Description]

[heading Synopsis]
``
namespace modifier_tag{ 

    template<typename Arg> struct lookup{}; 

}// modifier_tag
namespace put_aux{
                
    template<typename Arg>
    class adapter_modifier< modifier_tag::lookup<Arg> >;

    struct keyword_lookup;

}//put_aux

put_aux::keyword_lookup const _lookup;

``

[heading Semantics]
[*Notation]

[variablelist
	[
		[`__put_modifier__`]
		[ Instance of `put_aux::adapter_modifier< modifier_tag::lookup<Arg> >`]
	]
	[
		[`arg`]
		[Copy of argument passed as `_lookup = arg`]
	]
]

[*Adapter]

[table
	[[Expression][Description]]
	[[`__put_modifier__( __cont__, key )`][ `__cont__[ key ] = arg( __cont__[ key ] )` ]]
]


[*Meta]

[table
	[[Expression][Description]]
    [[`mpl::apply2<put_aux::meta_modifier_tag<D>, keyword_lookup, Arg>::type`][`modifier_tag::lookup<Arg>`]]
]

[*Pre-condition]

[table
	[[Expression][Requirement]]
	[[`result-type` of `__put_adapter__`'s functor][convertible to `__cont_type__::key_type`]]
]

[*Invocation]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % ( _lookup = arg )`][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::lookup<Arg>`]]	
]

The precondition is usually not met by default. In common cases, this suffices:
``
	__put_adapter__ % ( _fun = lambda::_1 ) % ( _lookup = arg )
``

[/tip __tip_put_modifier__ Not sure if applies (think about pointer containers)]

[heading Example]
[import ../test/put/modifier/lookup.cpp]
[*Days-in-each-moth]
[test_put_modifier_lookup_days_in_each_month]

[endsect][/lookup]
[section:push Push]

[def __header_put_modifier_push__ 	[@../../../../../boost/assign/v2/put/modifier/push.hpp boost/assign/v2/put/modifier/push.hpp]]
[import ../../../../boost/assign/v2/put/modifier/push.hpp]

[heading Header]
``
#include <__header_put_modifier_push__>
``

[heading Description]
__describe_a_standard_modifier__

[heading Semantics]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % _push `][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::push`]]	
]

[tip __tip_put_modifier__]

[heading Example]
[test_put_modifier_push]

[endsect][/push]
[section:push_back Push_back]

[def __header_put_modifier_push_back__ 	[@../../../../../boost/assign/v2/put/modifier/push_back.hpp boost/assign/v2/put/modifier/push_back.hpp]]
[import ../../../../boost/assign/v2/put/modifier/push_back.hpp]

[heading Header]
``
#include <__header_put_modifier_push_back__>
``

[heading Description]
__describe_a_standard_modifier__

[heading Semantics]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % _push_back `][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::push_back`]]	
]

[tip __tip_put_modifier__]

[heading Example]
[test_put_modifier_push_back]

[endsect][/push_back]
[section:push_front Push_front]

[def __header_put_modifier_push_front__ 	[@../../../../../boost/assign/v2/put/modifier/push_front.hpp boost/assign/v2/put/modifier/push_front.hpp]]
[import ../../../../boost/assign/v2/put/modifier/push_front.hpp]

[heading Header]
``
#include <__header_put_modifier_push_front__>
``

[heading Description]
__describe_a_standard_modifier__

[heading Semantics]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % _push_front `][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::push_front`]]	
]

[tip __tip_put_modifier__]

[heading Example]
[test_put_modifier_push_front]

[endsect][/push_front]
[section:repeat Repeat]

[def __header_put_modifier_repeat__ 	[@../../../../../boost/assign/v2/put/modifier/repeat.hpp boost/assign/v2/put/modifier/repeat.hpp]]
[import ../../../../boost/assign/v2/put/modifier/repeat.hpp]

[heading Header]
``
#include <__header_put_modifier_repeat__>
``

[heading Description]

[heading Synopsis]
``
namespace modifier_tag{ 

    template<typename Tag> struct repeat{}; 

}// modifier_tag
namespace put_aux{
                
    template<typename Tag>
    class adapter_modifier< modifier_tag::repeat<Tag> >;

    struct keyword_repeat;

}//put_aux

    put_aux::keyword_repeat const _repeat;

``

[heading Semantics]
[*Notation]

[variablelist
	[
		[`__put_modifier__0`]
		[ Instance of `put_aux::adapter_modifier<Tag>`]
	]
	[
		[`__put_modifier__`]
		[ Instance of `put_aux::adapter_modifier< modifier_tag::repeat<Tag> >`]
	]
]

[*Adapter]

[table
	[[Expression][Description]]
	[[`__put_modifier__( __cont__, __value__ )`][ `m = n; while(m--) __put_modifier__0( __cont__, __value__ )` ]]
]


[*Meta]

[table
	[[Expression][Description]]
    [[`mpl::apply2<put_aux::meta_modifier_tag<D>, keyword_repeat, Arg>::type`][`modifier_tag::repeat<D::modifier_tag>`]]
]

[*Invocation]

[table
	[[Expression][Description]]
	[[`__put_adapter__ % ( _repeat = n )`][Replaces `__put_adapter__`'s modifier-tag with `modifier_tag::repeat<D::modifier_tag>`]]	
]

[/tip __tip_put_modifier__ Does not apply here]

[heading Example]
[import ../test/put/modifier/repeat.cpp]
[*Simple]
[test_put_modifier_repeat_simple]

[*Compose]
[test_put_modifier_repeat_compose]

[endsect][/repeat]
[section:standard Standard]

[def __header_put_modifier_standard__ 	[@../../../../../boost/assign/v2/put/modifier/standard.hpp boost/assign/v2/put/modifier/standard.hpp]]

[heading Header]
``
#include <__header_put_modifier_standard__>
``

[heading Description]
__describe_a_standard_modifier__

[heading Helper]
[*Syntax]
``
namespace put_aux{

    struct keyword_standard_modifier;

}// put_aux

put_aux::keyword_standard_modifier const _standard_modifier;

``

[*Semantics]

[table
	[[Expression][Description]]
    [[`mpl::apply2<put_aux::meta_modifier_tag<D>, keyword_standard_modifier, Arg>::type`][`Arg`]]
]

[heading Customization]
``
#define BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_STANDARD_TAG(FUN) unspecified
#define BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_STANDARD(FUN) unspecified
``

[*Notation]

[table
	[[Symbol][Description]]
	[[`__put_modifier__`][Instance of `put_aux::adapter_modifier`<modifier_tag::FUN>` ]]
]

[*Semantics]

[table
	[[Expression][Description]]
    [[`BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_STANDARD_TAG(FUN)`][Defines `modifier_tag::FUN` as an empty class.]]
    [[`BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_STANDARD(FUN)`][Specializes `put_aux::adapter_modifier` on `modifier_tag::FUN`, such that 
		`__put_modifier__.impl( __cont__, __value__ )` forwards to the modifier of `__cont__` named FUN, using move semantics where possible.    	
    ]]
]

[*Example]
``
	BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_STANDARD_TAG(push_back)
	BOOST_ASSIGN_V2_PUT_MODIFIER_MODULO_STANDARD(push_back)
``

[heading Models]

* [link boost_assign_v2.put.modifier.insert Insert]
* [link boost_assign_v2.put.modifier.push Push]
* [link boost_assign_v2.put.modifier.push_back Push_back]
* [link boost_assign_v2.put.modifier.push_front Push_front]

[endsect][/standard]
[endsect][/modifier]
[section:pipe Pipe]

[def __header_put_pipe__       [@../../../../../boost/assign/v2/put/pipe.hpp boost/assign/v2/put/pipe.hpp]]
[def __describe_put_pipe__     Overloads `operator|()`[footnote The reason for calling it ['pipe] rather than ['bitwise or], the C++ convention, is
that the former speaks better to the semantics that it implements in this particular context, in reference to the 
[@http://en.wikipedia.org/wiki/Vertical_bar#Pipe idiom] by the same name. ], such as to make [link boost_assign_v2.put.put `put()`] composable. ]

[heading Header]
``
	#include <__header_put_pipe__>
``

[heading Description]
__describe_put_pipe__

[heading Arglist]
[*Syntax]
``
namespace put_pipe_aux{

    template<typename ParList = empty_par_list_, typename ArgsList = empty_args_list_, bool enable_pars = ::boost::mpl::size<ArgsList>::value == 0>
    class args_list;

}//put_pipe_aux
``    

[heading Synopsis]
[import ../../../../boost/assign/v2/put/pipe/put.hpp]
[syntax_put_pipe_put]

[*Alternative syntax]
[import ../../../../boost/assign/v2/put/pipe/csv_put.hpp]
[syntax_put_pipe_csv_put]

[heading Semantics]
[*Notation]

[variablelist
	[
		[`a1, ..., an`]
		[ Indivual elements of the argument list, `args...`]
	]
	[
		[ `p1, ..., pm` ]
		[ 
			Instances of classes that, as second second argument, `operator%` is overloaded for [link boost_assign_v2.put.adapter.crtp 
			`adapter_crtp<>`]. [footnote Recall that these are defined in Sections 
				[link boost_assign_v2.put.modifier.modulo Modifier.Modulo] 
				and [link boost_assign_v2.put.fun.modulo Fun.Modulo]. 
			] 
		]
	]
]

[*Expressions]
[table
	[
		[Expression]
		[Returns]
		[Side effect]
	]
	[	
		[``
			__cont__ |( __kwd_put__ % p1 ... % pm )( args1... )...( argsn... )
		``]
		[A reference to `__cont__`]
		[Forwards to [link boost_assign_v2.put.put `( __put__( __cont__ ) % p1 ... % pm )( args1... )...( argsn... )`]]
	]
	[	
		[``
			__cont__ |( __kwd_csv_put__ % p1 ... % pm )( args... )
		``]
		[A reference to `__cont__`]
		[Forwards to [link boost_assign_v2.put.put `( __put__( __cont__ )  % p1 ... % pm )( a1 )...( an )`]]
	]
]

The special case [^m = 0] is allowed and implies that `( __kwd_put__ % p1 ... % pm )` is identical to ` __kwd_put__`, and likewise for  `__kwd_csv_put__`.

[*Notes]

* The semantics above are borrowed from [tpl_range_adaptor range adaptors], but they differ in that the latter transforms a range,
whereas, here, the state of a container is modified. In each case, however, composability follows. This will not be explained here, as the
reader can infer from the [tpl_range_adaptor_compose corresponding section] in this other library, its translation to the present context.

* A call to `__kwd_put__( args1... )...( argsn... )`, and similarly for `__kwd_csv_put__` creates a list-like data structure that keeps the arguments by reference. No copying
the arguments takes place. 

[heading Example]
[import ../test/put/pipe/put.cpp]
[import ../test/put/pipe/modifier/standard.cpp]
[*String literal]
[test_put_pipe_put_str_literal]

[*Intervals]
[test_put_pipe_put_intervals]

[*Push front]
[test_put_pipe_modifier_push_front]

[endsect][/pipe]
[section:put Put]

[def __header_put_put__       [@../../../../../boost/assign/v2/put/put.hpp boost/assign/v2/put/put.hpp]]
[import ../../../../boost/assign/v2/put/put.hpp]
[def __describe_put_put__      An [link boost_assign_v2.put.adapter adapter] wrapped around a user supplied container]

[heading Header]
``
	#include <__header_put_put__>
``

[heading Description]
__describe_put_put__

[heading Synopsis]
[syntax_put_put]

[heading Semantics]
[*Adapter]

[table
	[[Expression][Properties]]
	[
		[ `put_aux::container_adapter<__cont_type__, __f_type__, Tag>` ]
		[ Inherits [link boost_assign_v2.put.adapter.crtp `put_aux::adapter_crtp<__cont_type__, __f_type__, Tag>`] ]
	]	
]

[*Meta]

[table
	[
		[Expression]
		[Description]
	]
	[	
		[`result_of::put<C>::type`]
		[`put_aux::container_adapter<C, deduce_fun<C>::type, deduce_modifier_tag<C>::type>`]
	]
]

[*Invocation]

[table
	[
		[Expression]
		[Description]
	]
	[
		[`__put__( __cont__ )`]
		[An instance of `result_of::put<C>::type`]
	]
]

Also see the semantics of the [link boost_assign_v2.put.adapter.crtp base class].

[heading Example]

[*Bistset]
[test_put_put_bitset]
[*Numeric keyboard]
[test_put_put_numeric_kb]
[*Ragged]
[test_put_put_ragged]
[*STL]
[test_put_put_stl]
[*Area codes]
[put_put_put_area_codes]

[endsect][/put]
[endsect][/put]
[section:ref Ref]
[endsect][/ref]
[section:utility Utility]
[endsect][/utility]


