[heading Requisites]

We assume in this tutorial that all the header files are included, as shown in section [link full_include Organization]
and
``
	using namespace boost::assign::v2;
``

Headers from other libraries will not be shown in the code snippets of this tutorial, but they can be found in the tutorial's 
actual [@../../tutorial.cpp source file].

[heading Put]

Consider this example:
[tutorial_map]

In this library, we call the variadic functor returned by [link put `__fun_put__`] an [link interpreter_crtp ['interpreter]]. It performs two tasks:

* its arguments are forwarded to a ['data-generator], which outputs a data element. 
* it invokes a ['modifier], `insert`, in this case

The syntax is invariant across container categories, but not the semantics:

* For a map, as above, the first argument is treated as a key, and the
rest is forwarded to the mapped-type's constructor, `word_( x, 3 )`, in the first call. Key and data are then combined into a pair, 
which is inserted using modifier `insert`. 
* For a sequence container, all arguments are forwarded to the value-type's constructor, and the result is inserted using `push_back`.

For these and other container categories, see the specific rules for the [link data_gen_rules data-generator] and those for the 
[link modifier_rules modifier]. Also see the [link containers supported containers].

[heading Csv]

As noted in the [link boost_assign_v2.intro introduction], `__fun_put__` caters to variable argument lists, 
whereas `__fun_csv_put__` is reserved for a fixed number of arguments, which is denoted [^I]. There are two types of 
`__fun_csv_put__` overloads:

* If [^I] is ommited it is assumed to be equal to one and is called the ['basic] form.
* If [^I] is specified as an integer template parameter it is called the ['extended] form. In the [link boost_assign_v2.intro introduction]'s example, [^I = 2].

Other identifiers starting with ['csv] are treated similarly [footnote ['csv] stands for comma separated values], and the two forms are 
defined in headers with suffixes ['basic] and ['ext], respectively. Among such identifiers, function
`__fun_csv__` extends the interface of an interpreter, shown below in its basic form:
[tutorial_csv_put]

The second novelty to notice is the expression `for_each( numeric )`, where `numeric` is a [tpl_concept_range range]. It instructs the 
interpreter to scan the range's elements, and process each as if passed as an individual argument. This function shares some 
commonality with the csv-form since it assumes a fixed arity, I = 1. There is also an extended syntax,  `for_each<I>( __range__ )`.
See the  [link boost_assign_v2.reference.put reference] for details.

[heading Pipe syntax]

Suppose we wish to put a set of integers in a container and, in the same statement, pass it through a mutating [tpl_range_algo algorithm]:
[tutorial_do_put]
The vertical bar, `|`, expresses the on-the-fly modification we were looking for, and call it ['piping]
after the related [tpl_pipe idiom] by the same name. A related feature is Boost.Range's [tpl_range_adaptor range adaptors].
Also see the [link boost_assign_v2.intro introduction]'s example.

[heading Container generation]
[#tut_cont_gen]

After having assigned `target` and, in the same statement, passed it through a 
[@http://www.boost.org/doc/libs/1_46_0/libs/range/doc/html/range/reference/algorithms/mutating/stable_partition.html stable partition] algorithm, 
let's verify the state of the container against that of an in place generated container:
[tutorial_csv_deque]

In keeping with our previously established ['csv] convention, there are two variants of container generating function 
[link csv_deque `__fun_csv_deque__`], basic and extented, and it is paired with a functor form, [link deque `__fun_deque__`]. 

[#tut_empty]
Another convention, which we now introduce by way of 
example, is that which governs the generation of an empty container:

[tutorial_empty_deque]

In comparison, `__fun_deque__<int>()` and `__fun_csv_deque__( int() )` generate a container of size [^1], whose element is default
constructed.

[heading Pointer-containers]

To insert elements in a [tpl_ptr_container pointer container], pretend it is a value-container:
[tutorial_ptr_container]

[heading Options]

An [link boost_assign_v2.reference.option option] overrides the default semantics, described under heading [*Put], above, of 

* the data-generator, or
* the modifier

Here's an example of an option for overriding the deduced [*data-generator]:
[tutorial_data]

Option keyword `__kwd_data__` accepts as input two kinds of objects:

* A functor, such as `f_( log10 )`, above
* A keyword : `__kwd_key__`, `__kwd_element__`, `__kwd_mapped__`, and `__kwd_value__`.

The second kind is only needed in rather special cases, yet here's how it works: with `__kwd_data__ = __kwd_value__` 
[footnote The type of expression `__kwd_data__ = __kwd_value__` has alias `value_`, so that `value_()` can be used as a shortcut.]
the data-generator is changed to the container's value-type constructor [footnote For pointer-container, 
pretend it is the counterpart that stores its element by value.], and likewise for other keywords. 

Here's an example that changes the internal [*modifier] to `push_front`, with [^I = 1]:
[tutorial_push_front]

As seen from these two examples, there is a difference of syntax between the functor and its dual csv form:

* The functor form uses `operator%` with an option keyword, say `__kwd_push_front__`. 
* The csv form specifies the option with a template argument, say `push_front_`. 

Consequently, only default constructible options are allowed in the second case. Function `__fun_deque__` works both ways:
[tutorial_repeat]

Composing the two options, here, could have alternatively been achieved as follows:
`deque<int>( _nil) %  _push_front % _modifier`. This composition syntax extends to an arbitrary number of options. 

Creating a custom modifier-option is facilitated by [link modifier_macro macros] that manage the 
overhead.

[heading Reference arrays]

In the examples that precede, `__fun_csv_deque__` could be replaced by [link ref_csv_array  `__fun_ref_csv_array__`], 
which returns a reference-array. The reciprocal is not true, in general: 

* A reference-array is preferable if the values are expensive to copy
* It is necessary for working specifically with references

The second case is illustrated below:

[tutorial_ref_csv_array]

Here, an implicit conversion takes place, from each of the reference-array's element (a reference wrapper) to the reference it holds. 
More generally,

* In read mode, as above, the context usually suffices to cause this conversion. 
* In write-mode i.e. if the values of the held references are to be modified, explicit conversion is usually required. 

Explicit conversion is achieved using a [tpl_range_adaptor range adaptor] identified by keyword `__kwd_ref_get__`:
[tutorial_ref_csv_array_write]

In keeping with our ['csv] convention, `__fun_ref_csv_array__` has a functor dual, [link ref_array  `__fun_ref_array__`]. Unlike 
`__fun_put__` or `__fun_deque__`, it is unary (not variadic).

[heading Chaining]

Chaining ranges is already provided by [tpl_range_join `join`] in [tpl_range Boost.Range]. Here's a [link chain variant] that caters
to reference arrays: 
[tutorial_chain]

Note that 

* This algorithm modifies `x`, `y` and `z` even though the array returned by `ref::csv_array` is 
a temporary. 
* Keyword [link ref_get `__kwd_ref_get__`] is needed in conjunction with a reference-array, as explained under the previous
heading, but otherwise it should be ommited. 
* There is a shorter syntax, using [link chain_operator `operator&&`]. 


[heading Conversion]

This section deals with conversion from a [tpl_concept_range Range] to collections of elements that need not (but may) support iterators. For example,
[tutorial_converter]

Notice that the left hand side of `=` is an [tpl_stl_adapter adapter] so, unlike the container in the right hand side, it is not a 
[tpl_concept_range Range]. Here, the object returned by [link converter converter] is able to deduce the appropriate conversion (implicit),
but some contexts necessitate  [link convert explicit conversion]. It is illustrated by continuing the above snippet as follows:
[tutorial_convert]

Here's an example combining implicit and explicit conversion:
[tutorial_conversion]