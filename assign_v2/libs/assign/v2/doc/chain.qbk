[#chain]

[heading Header]
[@../../../../../boost/assign/v2/chain.hpp [^boost/assign/v2/chain.hpp]]

[note This header does not include [^boost/assign/v2/chain/logical_and.hpp]. ]

[heading Description]
A variant of [tpl_range_join join] that caters to [link boost_assign_v2.reference.ref reference arrays]

[section:chain Chain]

[heading Header]
[@../../../../../boost/assign/v2/chain/chain.hpp [^boost/assign/v2/chain/chain.hpp]]

[heading Description]
[tpl_range_adaptor Range adaptor] syntax.

[heading Synopsis]
[import ../../../../boost/assign/v2/chain/chain.hpp]
[syntax_chain_chain]

[heading Semantics]

[*Notation]

[variablelist
	[[`chained`][result of `r1 | __kwd_chain__( r2 )`]]
]

[*Expressions]

[table
	[[Expression][Value]]
	[
		[`*( i + begin( chained ) )`]
		[`*( i < size( r1 ) ? i + begin( r1 ) : i - size( r1 ) + begin( r2 ) )` ]
	]
]

Although a reference array is (generally) generated in place, its elements may be convertible to non-const lvalue references. Chaining
preserves this property.

[heading Examples]
[import ../test/chain.cpp]
[*Example 1]
[test_chain1]
[*Example 2]
[test_chain2]

[endsect][/chain]
[section:logical_and Logical_and]

[tpl_module
	[@../../../../../boost/assign/v2/chain/logical_and.hpp [^boost/assign/v2/chain/logical_and.hpp]]
	..Alternative syntax. 
]

[heading Semantics]
[table 
	[ [Expression][ Description ] ]
	[
		[`r1 && r2`]
		[Equivalent to `r1 | _chain( r2 )`]
	]
]

[heading Example]

[*Example 1]
[test_chain3]

[endsect][/logical_and]


