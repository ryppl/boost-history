[heading Headers]
[#org_headers]

Using a given feature of this library requires no more than including the corresponding header file. To find it, one can look inside 
either the organization by module or the one by identifier.

[def __full_include__ includes most of the functionality [footnote A few headers are not included in that of their enclosing module. Where applicable, 
this will be mentioned]]

[*By module]

In directory [^boost/assign/v2], all but within [^boost/assign/v2/include], headers and directories are organized according to the modular structure of this
library. The following statement  __full_include__:
``
	#include <boost/assign/v2.hpp>
``

[*By identifier]

In directory [link boost_assign_v2.reference.include [^boost/assign/v2/include]], headers are named after the an identifier that they 
define. 

[*Requirement]

__option_requirement__. For example,
``
	#include <boost/assign/v2/include/deque.hpp>
	#include <boost/assign/v2/option/data.hpp>
`` 

is right, but reversing the order is wrong.

[heading Namespace]
[#org_ns]

All library identifiers are within `boost::assign::v2`.

[heading Identifier ]
[#org_id]

[variablelist
	[
		[With prefix `_`]
		[Returns an object that is the second argument to an operator overload.]
	]
	[
		[With prefix `csv`]
		[Function that translates a functor to sucessive unary invocations of the latter over the parameter list]
	]
]

