# Boost Enums Library test Jamfile

# Copyright Vicente Botet 2011

# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt

# See library home page at http://www.boost.org/libs/opaque


if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

project
    : requirements

        # uncomment the line above if you build outside a Boost release
        #<include>$(BOOST_ROOT)
        <include>.

        <define>BOOST_ENABLE_WARNINGS
        <warnings>all
        <toolset>gcc:<cxxflags>-Wextra
        <toolset>gcc:<cxxflags>-pedantic
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>darwin:<cxxflags>-Wextra
        <toolset>darwin:<cxxflags>-pedantic
        <toolset>darwin:<cxxflags>-Wno-long-long
        #<toolset>pathscale:<cxxflags>-Wextra
        <toolset>pathscale:<cxxflags>-Wno-long-long
        <toolset>pathscale:<cxxflags>-pedantic
        <toolset>clang:<cxxflags>-Wextra
        <toolset>clang:<cxxflags>-pedantic
        <toolset>clang:<cxxflags>-Wno-long-long
        <toolset>gcc-mingw-4.5.0:<cxxflags>-Wno-missing-field-initializers
        <toolset>gcc-mingw-4.5.0:<cxxflags>-fdiagnostics-show-option
        <toolset>msvc:<cxxflags>/wd4127
    ;

   test-suite "enum_class"
        :
        [ compile enum_class/has_same_size_as_ut_pass.cpp ]
        [ compile enum_class/underlying_type_pass.cpp ]

        [ run enum_class/cons/default_to_0_pass.cpp ]
        #[ run-fail enum_class/cons/default_to_0_fail.cpp ]
        [ run enum_class/cons/from_enum_pass.cpp ]
        [ compile-fail enum_class/cons/from_int_fails.cpp ]

        [ run enum_class/comparison/less_pass.cpp ]
        [ run enum_class/comparison/equal_pass.cpp ]
        [ run enum_class/comparison/not_equal_pass.cpp ]

        [ compile-fail enum_class/conversion/implicit_conversion_to_ut_fails.cpp ]
        [ compile-fail enum_class/conversion/implicit_conversion_to_bool_fails.cpp ]

        [ compile enum_class/meta/first_pass.cpp ]
        [ compile enum_class/meta/last_pass.cpp ]
        [ compile enum_class/meta/pos_pass.cpp ]
        [ compile enum_class/meta/val_pass.cpp ]
        [ compile enum_class/meta/pred_pass.cpp ]
        [ compile enum_class/meta/succ_pass.cpp ]
        [ compile-fail enum_class/meta/succ_of_last_fail.cpp ]
        [ compile-fail enum_class/meta/pred_of_first_fail.cpp ]
        [ compile-fail enum_class/meta/val_of_invalid_fail.cpp ]

        [ run EnumClass.cpp odr.cpp ]
        ;

  test-suite "enum_array"
  :
        [ run enum_array/types.pass.cpp : : : : enum_array__types__pass ]
        [ run enum_array/cons/default.pass.cpp : : : : enum_array__cons__default__pass ]
        [ run enum_array/cons/initializer_list.pass.cpp : : : : enum_array__cons__initializer_list__pass ]
        [ run enum_array/size/size.pass.cpp : : : : enum_array__size__size__pass ]
        [ run enum_array/data/data.pass.cpp : : : : enum_array__data__data__pass ]
        [ run enum_array/data/data_const.pass.cpp : : : : enum_array__data__data_const__pass ]
        [ run enum_array/swap/swap.pass.cpp : : : : enum_array__swap__swap__pass ]
        [ run enum_array/special/swap.pass.cpp : : : : enum_array__special__swap__pass ]
        [ run enum_array/fill/fill.pass.cpp : : : : enum_array__fill__fill__pass ]
	;

  test-suite "enum_set"
	:
        [ run enum_set/version.pass.cpp : : : : enum_set__version__pass ]
        #[ run enum_set/types.pass.cpp : : : : enum_set__types__pass ]
        [ run enum_set/cons/default.pass.cpp : : : : enum_set__cons_default__pass ]
        [ run enum_set/cons/ull_ctor.pass.cpp : : : : enum_set__cons_ull_ctor__pass ]
        #[ run enum_set/cons/char_ptr_ctor.pass.cpp : : : : enum_set__char_ptr_ull_ctor__pass ]
        #[ run enum_set/cons/string_ctor.pass.cpp : : : : enum_set__cons_string_ctor__pass ]
  ;
