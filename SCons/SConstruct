# vi: syntax=python:et:ts=4
EnsureSConsVersion(0, 98, 3)

vars = Variables("build-config.py")
vars.AddVariables(
    ListVariable("variant", "Build configuration", "release", ["release", "debug", "profile"]),
    ListVariable("link", "Library linking", "all", ["static", "dynamic"]),
    ListVariable("threading", "Multi-threading support", "multi", ["single", "multi"]),
    EnumVariable("layout", "Layout of library names and header locations", "versioned", ["versioned", "system"]),
    PathVariable("stagedir", "If --stage is passed install only compiled library files in this location", "stage", PathVariable.PathAccept),
    PathVariable("prefix", "Install prefix", "/usr/local", PathVariable.PathAccept)
)
env = Environment(toolpath = ["tools/scons"], tools = ["default", "boost-libs", "boost-build-variants", "boost-configure"], variables = vars, config_log = "$BOOST_BUILD_DIR/config.log")
vars.Save("build-config.py", env)
Export("env")

Help("""
Usage: scons [--option...] [variable=value...] [target...]
target is a library name, e.g. 'iostreams' or 'signals'
variable may be one of:
""" + vars.GenerateHelpText(env, sort=cmp) + """
Variables are saved in build-config.py and persist between scons invocations.
""")

if(GetOption("help")):
    Return()

env["BOOST_VERSION"] = "1.38"

SConsignFile(File(env.subst("$BOOST_BUILD_DIR/sconsign.dblite")).path)

SConscript("libs/SConscript")

Alias("install-headers", env.Install("$prefix/include", "boost"))
