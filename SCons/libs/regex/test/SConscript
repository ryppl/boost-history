# vi: syntax=python:et:ts=4
Import("env")

regress_sources = Split("""
    regress/basic_tests.cpp
    regress/main.cpp
    regress/test_alt.cpp
    regress/test_anchors.cpp
    regress/test_asserts.cpp
    regress/test_backrefs.cpp
    regress/test_deprecated.cpp
    regress/test_emacs.cpp
    regress/test_escapes.cpp
    regress/test_grep.cpp
    regress/test_locale.cpp
    regress/test_mfc.cpp
    regress/test_non_greedy_repeats.cpp
    regress/test_perl_ex.cpp
    regress/test_replace.cpp
    regress/test_sets.cpp
    regress/test_simple_repeats.cpp
    regress/test_tricky_cases.cpp
    regress/test_icu.cpp
    regress/test_unicode.cpp
    regress/test_overloads.cpp
    regress/test_operators.cpp
    """)
env.BoostRunTest("regex_regress", regress_sources)
threaded_env = env.Clone()
threaded_env.Append(CPPDEFINES = "TEST_THREADS", OBJPREFIX = "threaded_")
threaded_env.BoostUseLib("thread")
threaded_env.BoostRunTest("regex_regress_threaded", regress_sources)
env.BoostRunTest("posix_api_check", "c_compiler_checks/posix_api_check.c", LINK = "$CXX")
env.BoostCompileTest("wide_posix_api_check", "c_compiler_checks/wide_posix_api_check.c")
env.BoostRunTest("posix_api_check_cpp", "c_compiler_checks/posix_api_check.cpp", OBJPREFIX = "cpp_")
env.BoostRunTest("wide_posix_api_check_cpp", "c_compiler_checks/wide_posix_api_check.cpp", OBJPREFIX = "cpp_")
env.BoostRunTests(Split("""
    pathology/bad_expression_test
    pathology/recursion_test
    unicode/unicode_iterator_test
    object_cache/object_cache_test
    config_info/regex_config_info
    collate_info/collate_info
    """))
threaded_env.BoostRunTest("static_mutex/static_mutex_test")
env.BoostCompileTests(Split("""
    concepts/concept_check
    concepts/icu_concept_check
    """))
regex_extra_env = env.Clone()
regex_extra_env.Append(CPPDEFINES = ["BOOST_REGEX_MATCH_EXTRA"])
regex_extra = regex_extra_env.BoostLibrary("regex_extra",
    Glob("../src/*.cpp"), OBJPREFIX = "captures_", make_aliases = False)
regex_extra_env.BoostRunTest("captures/captures_test", LIBS = [regex_extra])
