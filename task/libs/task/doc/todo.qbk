[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:todo Appendix A: Future development]

[heading Optimizations]
 
* lock-free-queue with fifo ordering as queue


[heading Dynamic thread-pool]

* __dynamic_pool__ adds or removes __worker_threads__ from the __thread_pool__ depending on the work-load (undersubscription/
oversubscription).


[heading Communication and synchronisation abstractions]

* [*Event variable]: A event variable is a bivalued variable (up/down) on which a task can wait for an event to be set or reset. The
calling task will be suspended until the state of the event variable is that required by the caller.

* [*Buffer]: A bounded/unbounded buffer is shared between several tasks. The data must be placed in, and retrieved from, the buffer
under mutual exclusion. Condition synchronisation is required because a calling task attempting to place data into the buffer. When
the buffer is full, the task must be suspended until there is space int the buffer. Also a retrieving task must be suspended when
the buffer is empty. The data, once read, is destroyed.

* [*Multicast]: The data is sent to a specific group of tasks and all tasks in the group should receive the data. Only when all tasks
have received one item of data then another item is allowed to be transmitted.

* [*Rendezvous]: A rendezvous uses direct naming and synchronous communication between tasks. One task that executes its command first
will be delayed until the other tasks is ready to rendezvous.

* [*Protected resource]: A protected resource is a passive entity that controls access to the internal states (to the controled real
resources).

* [*Task groups]: A task group defines a graph of interdependent tasks that can mostly be run in parallel. The tasks in the group have
dependencies or communicate with each other.


[heading Interdepended task]

* integration of __boost_fiber__  - interdepended tasks (using communication and synchronisation abstractions above) work in 
__thread_pools__ without deadlocking the pool


[endsect]
