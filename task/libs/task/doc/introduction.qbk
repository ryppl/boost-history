[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:motivation Motivation]

In order to take advantage of the technological evolution from single-core to many-core architectures multi-core machines requires to partition the compute bound work into smaller chunks that can run in parallel.

The goal of parallel programming is to write once and have our code scale well as the hardware underneath it gets better, i.e. see incremental benefits when running our app on machines with more cores without changing the code.

Had we partitioned the work into much smaller chunks, when a core is finished with the item it executes, it would be able to start working on another chunk hence achieving the desired load balancing.

__boost_task__ provides a framework to utilize the available hardware and provide a way for efficient asynchronous processing of time consuming operations in the same process.

[note Equating multithreading to parallelism is not accurate. You can have multithreading on a single-core machine, but you can only have parallelism on a multi-core machine. the portions of your code that can truly run at the same time.]

[heading Executing a task]

	std::string echo( std::string const& msg)
	{ return msg; }

	boost::task::handle< std::string > h(
		boost::task::async(
			boost::task::new_thread(),
			boost::task::make_task(
				echo,
				"Hello World!") ) );
	std::cout << h.get() << std::endl;

[endsect]
