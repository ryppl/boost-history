[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:get_pool Non-member function `get_pool()`]

``
	#include <boost/task/utility.hpp>

	template< typename Pool >
	Pool & get_pool()
``

[variablelist
[[Effects:] [returns reference to the thread-pool where the current worker thread is executed]]
[[Throws:] [nothing]]
[[Note:] [this function resides in namespace `boost::this_task`]]
]

[endsect]


[section:runs_in_pool Non-member function `runs_in_pool()`]

``
	#include <boost/task/utility.hpp>

	bool runs_in_pool()
``

[variablelist
[[Effects:] [returns true if the current task is executed in a thread-pool]]
[[Throws:] [nothing]]
[[Note:] [this function resides in namespace `boost::this_task`]]
]

[endsect]


[section:worker_id Non-member function `worker_id()`]

``
	#include <boost/task/utility.hpp>

	id worker_id()
``

[variablelist
[[Effects:] [returns returns the thread-id of the worker-thread]]
[[Throws:] [nothing]]
[[Note:] [this function resides in namespace `boost::this_task`]]
]

[endsect]


[section:delay Non-member function `delay()`]

``
	#include <boost/task/utility.hpp>

	void delay( system_time abs_time)

	template< typename Duration >
	void delay( Duration const& rel_time)
``

[variablelist
[[Effects:] [delays the execution of the current task so that the worker-thread can process another task in the meantime]]
[[Throws:] [nothing]]
[[Note:] [this function resides in namespace `boost::this_task`]]
]

[endsect]


[section:yield Non-member function `yield()`]

``
	#include <boost/task/utility.hpp>

	void yield()
``

[variablelist
[[Effects:] [yields the current task so that the worker-threadcan process another task in the meantime]]
[[Throws:] [nothing]]
[[Note:] [this function resides in namespace `boost::this_task`]]
]

[endsect]


[section:interrupt Non-member function `interrupt()`]

``
	#include <boost/task/utility.hpp>

	void interrupt()
``

[variablelist
[[Effects:] [task can request interruption for itself]]
[[Throws:] [nothing]]
[[Note:] [this function resides in namespace `boost::this_task`]]
]

[endsect]

