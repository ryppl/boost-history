[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:context Class `context`]

``
	#include <boost/task/context.hpp>

	class context
	{
	public:
		context();

		void reset( shared_ptr< thread > const& thrd);

		void interrupt();

		bool interruption_requested();

		void swap( context & other);
	};
``


[heading Constructor `callable()`]

	callable()

[variablelist
[[Effects:] [creates an context object]
[[Throws:] [Nothing]]
]


[heading Member function `reset( shared_ptr< thread> const&)`]

	void reset( shared_ptr< thread > const& thrd)

[variablelist
[[Effects:] [sets internal thread-context]]
[[Throws:] [Nothing]]
]


[heading Member function `interrupt()`]

	void interrupt()

[variablelist
[[Effects:] [request interruption of associated task]]
[[Throws:] [Nothing]]
]


[heading Member function `interruption_requested()`]

	bool interruption_requested()

[variablelist
[[Effects:] [retuns true if interruption of associated task is requested]]
[[Throws:] [Nothing]]
]


[heading Member function `swap( context &)`]

	void swap( context & ctx)

[variablelist
[[Effects:] [swaps content of both context instances]]
[[Throws:] [Nothing]]
]


[endsect]
