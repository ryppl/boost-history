[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:async_executor Asynchronous executor]

Often you will see mentioned ‘synchronous’ or ‘asynchronous’ when talking about methods. Here I explain what this means, how to use them, and what are the benefits of the two.
Usually the methods are synchronous. That means that you call them, they gets executed. And when they finish you get the control back.
The asynchronous methods are different. You call them. They start executing, but return the control over the execution back to the thread which called them while they continue to execute in different thread.

The synchronous methods are easier to use and write and that’s why most of the methods are such. But when dealing with something which execution may last long often it is more convenient to use asynchronous functions.
For example some internet components are asynchronous. Asynchronous is the function for shutting down Windows. This way you can close your application before the actual shutdown.

Asynchronous methods have the advantage to not interrupt the program flow when a time consuming operation is needed. They are used a bit harder and have to be used carefully. You can not be sure that the execution of a method is finished, and the result is ready to use (unless you do checks).
A good use is to call an asynchronous method, continue executing the application, and when the results of the method execution must be used, a loop like the one shown above should be made to wait for the results.


[include own_thread.qbk]
[include new_thread.qbk]
[include pool.qbk]
[include as_sub_task.qbk]

[endsect] 
