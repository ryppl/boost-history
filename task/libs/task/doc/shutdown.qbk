[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:static_pool Pool shutdown]

[heading Shutdown]

If `boost::tp::pool< Channel >::shutdown()` is called - the the pool is set closed and all __worker_threads__ are joined until all pending __actions__ are processed. No futher __actions__ can be submitted by application threads.

[note The deconstructor calls `boost::tp::pool< Channel >::shutdown()` if the pool was not shutdown yet.]

    boost::tp::pool<
      boost::tp::unbounded_channel< boost::tp::fifo >
    > pool( boost::tp::poolsize( 1) );

    boost::tp::task< int > t1(
      pool.submit(
      boost::bind(
        fibonacci_fn,
        10) ) );
    boost::tp::task< int > t2(
      pool.submit(
        boost::bind(
          fibonacci_fn,
          10) ) );

    pool.shutdown();

    std::cout << t1.result().get() << std::endl; // 55
    std::cout << t2.result().get() << std::endl; // 55


[heading Shutdown immediatly]

The function `boost::tp::pool< Channel >::shutdown_now()` closes the pool, interrupts and then joins all __worker_threads__. All pending (unprocessed) __actions__ will be returned.

[important Pending __actions__ in the local __worker_queues__ are not returned if `boost::tp::pool< Channel >::shutdown_now()` was called.]


[endsect]

