[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:invalid_poolsize Class `invalid_poolsize`]

``
	#include <boost/task/exceptions.hpp>

	class invalid_poolsize : public std::invalid_argument
	{
	public:
		invalid_poolsize( std::string const& msg);
	};
``

[heading Constructor]

	invalid_poolsize( std::string const& msg);

[variablelist
[[Effects:] [constructs a `boost::task::invalid_poolsize` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:invalid_scanns Class `invalid_scanns`]

``
	#include <boost/task/exceptions.hpp>

	class invalid_scanns : public std::invalid_argument
	{
	public:
		invalid_scanns( std::string const& msg);
	};
``

[heading Constructor]

	invalid_scanns( std::string const& msg)

[variablelist
[[Effects:] [constructs a `boost::task::invalid_scanns` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:invalid_timeduration Class `invalid_timeduration`]

``
	#include <boost/task/exceptions.hpp>

	class invalid_timeduration : public std::invalid_argument
	{
	public:
		invalid_timeduration( std::string const& msg);
	};
``

[heading Constructor]

	invalid_timeduration( std::string const& msg)

[variablelist
[[Effects:] [constructs a `boost::task::invalid_timeduration` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:invalid_watermark Class `invalid_watermark`]

``
	#include <boost/task/exceptions.hpp>

	class invalid_watermark : public std::invalid_argument
	{
	public:
		invalid_watermark( std::string const& msg);
	};
``

[heading Constructor]

	invalid_watermark( std::string const& msg)

[variablelist
[[Effects:] [constructs a `boost::task::invalid_watermark` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:task_rejected Class `task_rejected`]

``
	#include <boost/task/exceptions.hpp>

	class task_rejected : public std::runtime_error
	{
	public:
		task_rejected( std::string const& msg);
	};
``

[heading Constructor]

	task_rejected( std::string const& msg)

[variablelist
[[Effects:] [constructs a `boost::task::task_rejected` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:task_unitialized Class `task_unitialized`]

``
	#include <boost/task/exceptions.hpp>

	class task_unitialized : public std::logic_error
	{
	public:
		task_unitialized();
	};
``

[heading Constructor]

	task_unitialized()

[variablelist
[[Effects:] [constructs a `boost::task::task_unitialized` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:task_already_executed Class `task_already_executed`]

``
	#include <boost/task/exceptions.hpp>

	class task_already_executed : public std::logic_error
	{
	public:
		task_already_executed();
	};
``

[heading Constructor]

	task_already_executed()

[variablelist
[[Effects:] [constructs a `boost::task::task_already_executed` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:task_moved Class `task_moved`]

``
	#include <boost/task/exceptions.hpp>

	class task_moved : public std::logic_error
	{
	public:
		task_moved();
	};
``

[heading Constructor]

	task_moved()

[variablelist
[[Effects:] [constructs a `boost::task::task_moved` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:broken_task Class `broken_task`]

``
	#include <boost/task/exceptions.hpp>

	class broken_task : public std::logic_error
	{
	public:
		broken_task();
	};
``

[heading Constructor]

	broken_task()

[variablelist
[[Effects:] [constructs a `boost::task::broken_task` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:task_interrupted Class `task_interrupted`]

``
	#include <boost/task/exceptions.hpp>

	class task_interrupted : public std::runtime_error
	{
	public:
		task_interrupted();
	};
``

[heading Constructor]

	task_interrupted()

[variablelist
[[Effects:] [constructs a `boost::task::task_interrupted` instance]]
[[Throws:] [nothing]]
]

[endsect]


[section:pool_moved Class `pool_moved`]

``
	#include <boost/task/exceptions.hpp>

	class pool_moved : public std::logic_error
	{
	public:
		pool_moved();
	};
``

[heading Constructor]

	pool_moved()

[variablelist
[[Effects:] [constructs a `boost::task::pool_moved` instance]]
[[Throws:] [nothing]]
]

[endsect]

