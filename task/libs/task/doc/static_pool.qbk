[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:static_pool Static thread-pool]

__boost_task__ provides __static_pool__ - which contains an fixed set of pre-forked __worker_threads__ (the size of the pool doesn't change during its lifetime).


``
	boost::task::_static_pool<			// pool type
		boost::task::unbounded_channel<		// queuing policy (unbounded_channel, bounded_channel)
			boost::task::fifo		// scheduling policy (fifo, priority, smart)
		>
	> pool(
		boost::task::poolsize( 6),				// pool with 6 pre-forked worker-threads
		boost::posix_time::posix_time::milliseconds( 50),	// time to sleep if no work-item available
		boost::task::scanns( 10) );				// iterations over local-queues before sleep
``


The first argument of the constructor specifies how many __worker_threads__ the pool will contain. The second
and third argument are used by the [link_work_stealing __work_stealing__] algorithm.

[note If __bounded_channel__ is used as queuing policy the constructor has two additional arguments . ]

__static_pool__ provides functionality to check the status of the pool - __fn_closed__ returns true when the pool was
shutdown and __fn_active__ as well as __fn_idle__ returning how many __worker_threads__ are active (executing a task) or idle.
The size of the pool can be accessed over __fn_size__.

For infomational pruposes __fn_empty__ and __fn_pending__ can be used in order to know if the global task-queue is empty or
how many tasks are waiting for execution. With __fn_clear__ all tasks are removed from the global-queue.

[note __fn_pending__ does not count tasks in the local-queues of the __worker_threads__.]


[endsect]

