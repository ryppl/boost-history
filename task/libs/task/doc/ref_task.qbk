[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:task Class template `task`]

``
	#include <boost/task/task.hpp>

	template< typename R >
	class task : private noncopyable
	{
	public:
		task();

		task( R( * fn)());

		template< typename Fn >
		task( Fn fn);

		template< typename Fn, typename A0 >
		task( Fn fn, A0 a0);
		...
		template< typename Fn, typename A0, ..., typename A9 >
		task( Fn fn, A0 a0, ..., A9 a9);

		task( task && t);
		task & operator=( task && t);
		task && move();

		shared_future< R > & get_future();

		void operator()();

		template< typename Cb >
		void set_wait_callback( Cb const& cb);

		void swap( task< R > & other);

		operator unspecified_bool_type() const;
		bool operator!() const;
	};
``

[heading Default constructor]

	task()

[variablelist
[[Effects:] [constructs an unitialized `boost::task::task< R >`]]
[[Throws:] [Nothing]]
]


[heading Constructor (function pointer)]

	task( R( * fn)());

[variablelist
[[Effects:] [constructs a `boost::task::task< R >` from a function pointer]]
[[Throws:] [Nothing]]
]


[heading Constructor (functor)]

	template< typename Fn >
	task( Fn const& fn)

[variablelist
[[Effects:] [constructs a `boost::task::task< R >` from a function object]]
[[Throws:] [Nothing]]
]


[heading Constructor (functor with arguments)]

	template< typename Fn, typename A0 >
	task( Fn fn, A0 a0);
	...
	template< typename Fn, typename A0, ..., typename A9 >
	task( Fn fn, A0 a0, ..., A9 a9);

[variablelist
[[Effects:] [constructs a `boost::task::task< R >` from a function object and its arguments]]
[[Throws:] [Nothing]]
]


[heading Move-copy constructor]

	task( task &&)

[variablelist
[[Effects:] [constructs a `boost::task::task< R >` from another task taking over the ownership]]
[[Throws:] [Nothing]]
]


[heading Move-assignment operator]

	task & operator=( task &&)

[variablelist
[[Effects:] [constructs a `boost::task::task< R >` from another task taking over the ownership]]
[[Throws:] [Nothing]]
]


[heading Member function `move()`]

	task && move()

[variablelist
[[Effects:] [moves task releasing the ownership]]
[[Throws:] [Nothing]]
]


[heading Member function `get_future()`]

	shared_future< R > & get_future()

[variablelist
[[Effects:] [returns a future assiciated with the task]]
[[Throws:] [Nothing]]
]


[heading Member function `operator()()`]

	void operator()()

[variablelist
[[Effects:] [executes task's internal function object]]
[[Throws:] [Nothing]]
]


[heading Member template-function `set_wait_callback( Cb cons&)`]

	template< typename Cb >
	void set_wait_callback( Cb const cb&);

[variablelist
[[Effects:] [stores callback function object which will be called if task would block]]
[[Throws:] [Nothing]]
]


[heading Member function `swap( task< R > &)`]

	void swap( task< R > & other)

[variablelist
[[Effects:] [swaps the task]]
[[Throws:] [Nothing]]
]


[heading operator `operator unspecified_bool_type()`]

	operator unspecified_bool_type() const

[variablelist
[[Effects:] [is task valid == does task own ownership]]
[[Throws:] [Nothing]]
]


[heading operator `operator!()`]

	bool operator!() const

[variablelist
[[Effects:] [is task invalid == task does not have ownership]]
[[Throws:] [Nothing]]
]


[endsect]
