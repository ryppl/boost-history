[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:task Class template `task`]

``
	#include <boost/task/task.hpp>

	template< typename R >
	class task
	{
	public:
		template< typename Fn >
		task( Fn const& fn);

		const id get_id() const;

		shared_future< R > & get_future();

		void swap( task< R > & other) // throw();

		void operator()() // throw();
	}
``

[section:constructor Constructor]

	template< typename Fn >
	task( Fn const& fn)

[variablelist
[[Effects:] [constructs a `boost::tp::task< R >` from a function object]]
[[Throws:] [Nothing]]
]
[endsect]


[section:get_id Member function `get_id()`]

	const id get_id() const

[variablelist
[[Effects:] [returns task identifier]]
[[Throws:] [Nothing]]
]
[endsect]


[section:get_future Member function `get_future()`]

	shared_future< R > & get_future()

[variablelist
[[Effects:] [returns a future assiciated with the task]]
[[Throws:] [???]]
]
[endsect]


[section:swap Member function `swap()`]

	void swap( task< R > & other)

[variablelist
[[Effects:] [swaps the task]]
[[Throws:] [Nothing]]
]
[endsect]


[section:operator() Member function `operator()()`]

	void operator()()

[variablelist
[[Effects:] [executes tasks internal function object]]
[[Throws:] [Nothing]]
]
[endsect]


[endsect]
