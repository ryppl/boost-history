[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:async Asynchronous execution] 

Function __fn_async__ applies the moved __task__ to the __ep__ which executes the __task__ (for this purpose __ep__ is 
required to provide `handle< R > operator()( task< R > && t)`).
__fn_async__ accepts two arguments - the first is an __task__ object and the second an __ep__. For the second argument 
__as_sub_task__ is used per default. The function returns a __handle__ which controls the submitted __task__.


``
	long fibonacci( long n)
	{
		if ( n == 0) return 0;
		if ( n == 1) return 1;
		long k1( 1), k2( 0);
		for ( int i( 2); i <= n; ++i)
		{
			long tmp( k1);
			k1 = k1 + k2;
			k2 = tmp;
		}
		return k1;
	}

	void main()
	{
		// task computing fibonacci(10)
		// move the task to executor
		boost::task::handle< long > h1(
			boost::task::async(
				 boost::task::make_task( fibonacci, 10) ) );

		// task computing fibonacci(5)
		boost::task< long > t( fibonacci, 5);
		// move the task to executor
		boost::task::handle< long > h2(
			boost::task::async(
				 boost::move( t) ) );

		// access the results
		std::cout << "fibonacci(10) == " << h1.get() << std::endl;
		std::cout << "fibonacci(5) == " << h2.get() << std::endl;
	}
``

[endsect]
