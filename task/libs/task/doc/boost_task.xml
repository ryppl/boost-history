<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library id="boost_task" name="Boost.Task" dirname="boost_task" last-revision="$Date: 2009/06/23 18:15:41 $"
 xmlns:xi="http://www.w3.org/2001/XInclude">
  <libraryinfo>
    <authorgroup>
    <author>
      <firstname>Oliver</firstname> <surname>Kowalke</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2009</year> <holder>Oliver Kowalke</holder>
    </copyright>
    <legalnotice>
      <para>
        Distributed under the Boost Software License, Version 1.0. (See accompanying
        file LICENSE_1_0.txt or copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>
    <librarypurpose>
      C++ Library for asynchronous execution of tasks
    </librarypurpose>
    <librarycategory name="category:text"></librarycategory>
  </libraryinfo>
  <title>Boost.Task</title>
  <section id="boost_task.overview">
    <title><link linkend="boost_task.overview"> Overview</link></title>
    <para>
      <emphasis role="bold">Boost.Task</emphasis> provides a framework for parallel
      execution of tasks (a task is a small unit of code that can be executed independently).
    </para>
    <itemizedlist>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code>, a <emphasis>callable</emphasis> representing
        a fine-grained work-item:
        <itemizedlist>
          <listitem>
            <code><phrase role="keyword">operator</phrase><phrase role="special">()()</phrase></code>
            to execute the fine-grained work-item
          </listitem>
          <listitem>
            <code><phrase role="identifier">get_future</phrase><phrase role="special">()</phrase></code>
            providing an <emphasis>asynchronous-completion-token</emphasis> in order
            to pass the result (values, exceptions) back to initiator
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">handle</phrase></code>, works as a <emphasis>asynchronous-completion-token</emphasis>
        of executed task:
        <itemizedlist>
          <listitem>
            <code><phrase role="identifier">interrupt</phrase><phrase role="special">()</phrase></code>,
            <code><phrase role="identifier">interrupt_and_wait</phrase><phrase role="special">()</phrase></code>,
            ... allow to cancel an cooperative task
          </listitem>
          <listitem>
            interface of the <emphasis>asynchronous-completion-token</emphasis>:
            <itemizedlist>
              <listitem>
                <code><phrase role="identifier">get</phrase><phrase role="special">()</phrase></code>
                retrieve value or exception of task execution
              </listitem>
              <listitem>
                <code><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase></code>
                test if task was executed
              </listitem>
              <listitem>
                <code><phrase role="identifier">wait</phrase><phrase role="special">()</phrase></code>,
                <code><phrase role="identifier">wait_for</phrase><phrase role="special">()</phrase></code>
                and <code><phrase role="identifier">wait_until</phrase><phrase role="special">()</phrase></code>
                block until task is executed and the result is set
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <code><phrase role="identifier">get_future</phrase><phrase role="special">()</phrase></code>
            returns reference to internal <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">shared_future</phrase></code>
          </listitem>
          <listitem>
            functions <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">waitfor_all</phrase><phrase role="special">()</phrase></code>/<code><phrase
            role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">waitfor_any</phrase><phrase role="special">()</phrase></code>
            to wait for all or any handles
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">async</phrase><phrase role="special">()</phrase></code>,
        executes a task by means of <emphasis>execution-policies</emphasis>
      </listitem>
      <listitem>
        <emphasis>execution-policy</emphasis> models:
        <itemizedlist>
          <listitem>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">own_thread</phrase></code>: executes task in current
            thread
          </listitem>
          <listitem>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">new_thread</phrase></code>: executes task in a newly-created
            thread (thread will be destroyed after completion)
          </listitem>
          <listitem>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">as_sub_task</phrase></code>: executes task in newly-created
            thread or in a pool of <emphasis>worker-threads</emphasis> depending
            on whether the parent-task is already executed in a <emphasis>thread-pool</emphasis>
          </listitem>
          <listitem>
            <emphasis>thread-pool</emphasis>: task gets executed by a <emphasis>worker-thread</emphasis>
            of a custom <emphasis>thread-pool</emphasis> (for instance with priority
            or smart scheduling)
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <emphasis>thread-pools</emphasis> with work-stealing algorithm and for/join
        semantics
      </listitem>
      <listitem>
        support of forking and joining sub-tasks
        <itemizedlist>
          <listitem>
            better performance
          </listitem>
          <listitem>
            no deadlock because of inline-execution of sub-tasks
          </listitem>
          <listitem>
            detects if parent-task runs in a <emphasis>thread-pool</emphasis> - the
            appropriate mechanism for executing the sub-tasks is choosen
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>
      In order to use the classes and functions described here, you can either include
      the specific headers specified by the descriptions of each class or function,
      or include the master library header:
    </para>
    <para>
      
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
</programlisting>
    </para>
    <para>
      which includes all the other headers in turn.
    </para>
    <para>
      Used namespaces are:
    </para>
    <para>
      
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase>
<phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_task</phrase>
</programlisting>
    </para>
    <anchor id="boost_task.overview.example"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.overview.example">Example</link>
    </bridgehead>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create a thread-pool
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
		<phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// create two tasks, computing fibonacci numbers
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// execute tasks in thread-pool
</phrase>	<phrase role="comment">// move tasks ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h1: is ready == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h2: is ready == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>

	<phrase role="comment">// wait for completion of both tasks
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">h1</phrase><phrase role="special">,</phrase> <phrase role="identifier">h2</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h1: is ready == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h2: is ready == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h1: has value == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">has_value</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h2: has value == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">has_value</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h1: has exception == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;h2: has exception == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>

	<phrase role="comment">// get results
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(5) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <anchor id="boost_task.overview.references"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.overview.references">References</link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        N2185: Proposed Text for Parallel Task Execution <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2185.html">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2185.html</ulink>
        written by Peter Dimov.
      </listitem>
      <listitem>
        N2276: Thread Pools and Futures <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2276.html">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2276.html</ulink>
        written by Anthony Williams.
      </listitem>
      <listitem>
        N2802: A plea to reconsider detach-on-destruction for thread objects <ulink
        url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2802.html">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2802.html</ulink>
        written by Hans-J. Boehm.
      </listitem>
      <listitem>
        N2880: C++ object lifetime interactions with the threads API <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2880.html">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2880.html</ulink>
        written by Hans-J. Boehm and Lawrence Crowl.
      </listitem>
      <listitem>
        <ulink url="http://herbsutter.wordpress.com">'Sutter’s Mill'</ulink> by
        Herb Sutter
      </listitem>
      <listitem>
        mailing list of C++ standard committee's Library Working Group
      </listitem>
    </itemizedlist>
    <note>
      <para>
        <emphasis role="bold">Boost.Task</emphasis> uses <ulink url="http://www.justsoftwaresolutions.co.uk/threading/updated-implementation-of-c++-futures-3.html"><emphasis
        role="bold">Boost.Future</emphasis></ulink> from Anthony Williams (will be
        integrated in some of the next releases of <ulink url="http://www.boost.org/libs/thread"><emphasis
        role="bold">Boost.Thread</emphasis></ulink>).
      </para>
    </note>
    <note>
      <para>
        Please note that <emphasis role="bold">Boost.Task</emphasis> is not optimized
        yet.
      </para>
    </note>
    <anchor id="boost_task.overview.tested_platforms"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.overview.tested_platforms">Tested Platforms</link>
    </bridgehead>
    <para>
      <emphasis role="bold">Boost.Task</emphasis> has been tested on the following
      platforms and compilers:
    </para>
    <itemizedlist>
      <listitem>
        Debian GNU/Linux 2.6.29.2 (x86_64), GCC 4.3.3
      </listitem>
      <listitem>
        Ubuntu GNU/Linux 2.6.28.11 (x86), GCC 4.3.3
      </listitem>
      <listitem>
        FreeBSD 7.2 (x86), GCC 4.2.1
      </listitem>
      <listitem>
        OpenSolaris 2009.06 (x86_64), GCC 4.3.2
      </listitem>
      <listitem>
        Windows XP Professional (x86), MSVC 9.0
      </listitem>
    </itemizedlist>
    <anchor id="boost_task.overview.how_to_build_and_install"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.overview.how_to_build_and_install">How to build and
      install</link>
    </bridgehead>
    <itemizedlist>
      <listitem>
        download the sources form <ulink url="http://www.boost-consulting.com/vault/index.php?directory=Concurrent%20Programming">Boost
        Vault</ulink> or the latest development version from <ulink url="https://svn.boost.org/svn/boost/sandbox/task/">boost-sandbox</ulink>
      </listitem>
      <listitem>
        extract the archive into the boost-source directory
      </listitem>
      <listitem>
        call <emphasis>'bjam toolset=&lt;compiler-name&gt; --with-task install'</emphasis>
        in order to build and install <emphasis role="bold">Boost.Task</emphasis>
      </listitem>
    </itemizedlist>
  </section>
  <section id="boost_task.motivation">
    <title><link linkend="boost_task.motivation"> Motivation</link></title>
    <para>
      To speed-up computer-bound work and/or increase the computation-throughput
      is a common motivation for parallelizing a program. Especially for interactive
      applications that have to process user input while performing some background
      tasks responsivness is very important. Parallelizing a program requires partitioning
      the program into smaller chunks that can run in parallel. The code can scale
      as the hardware gets better without changing the code.
    </para>
    <para>
      The evolution from one-core to many-core architectures and the usage of threads
      (of course processes fit too) support this paradigm.
    </para>
    <note>
      <para>
        <quote>You can have multithreading on a single core machine, but you can
        only have parallelism on a multi core machine ... .</quote> -- Daniel Moth
        <footnote>
          <para>
            more to read at Daniel's <ulink url="http://www.danielmoth.com/Blog/2008/11/threadingconcurrency-vs-parallelism.html">blog</ulink>
          </para>
        </footnote>
      </para>
    </note>
    <para>
      <emphasis role="bold">Boost.Task</emphasis> provides a framework to utilize
      the available hardware and provide a way for efficient asynchronous processing
      of time consuming operations. The framework provides some <emphasis>execution-policies</emphasis>,
      like <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase></code>,
      in order to execute the task asynchronously in another execution context (<emphasis
      role="bold">Boost.Task</emphasis> uses preemptible threads for this purpose).
    </para>
    <para>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">print</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase> <phrase role="identifier">printf</phrase><phrase role="special">(</phrase><phrase role="string">&quot;%s\n&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">msg</phrase><phrase role="special">.</phrase><phrase role="identifier">c_str</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// task, to be executed asynchronously
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">print</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;Hello World!&quot;</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// execute task in newly-created thread
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <para>
      In order to manage the task <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">async</phrase><phrase role="special">()</phrase></code> returns
      a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase></code>
      (associated with the submitted task). It functions as a <emphasis>asynchronous-completion-token</emphasis>
      - that means it transfers the result of the execution back to the caller thread.
    </para>
    <para>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">echo</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">msg</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// task returning the submitted string
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">echo</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;Hello World!&quot;</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// execute task in newly-created thread
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// wait until task has finished and return the result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <para>
      The task can also be interrupted via <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">handle</phrase></code> if it is a so-called <link linkend="boost_task.task"><emphasis>cooperative
      task</emphasis></link>.
    </para>
    <para>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">long_running</phrase><phrase role="special">(</phrase>  <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rel_time</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">sleep</phrase><phrase role="special">(</phrase> <phrase role="identifier">rel_time</phrase><phrase role="special">);</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create a long runing task
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">long_running</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">millisec</phrase><phrase role="special">(</phrase> <phrase role="number">500</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// execute task in newly-created thread
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// requests interruption of task
</phrase>	<phrase role="comment">// returns immediately
</phrase>	<phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">interrupt</phrase><phrase role="special">();</phrase>

	<phrase role="comment">// access the result
</phrase>	<phrase role="comment">// task_interrupted exeception will be thrown
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>		
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <para>
      Beside <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase></code>
      (which creates a new task for each submitted task - the thread will be joined
      by <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase></code>)
      <emphasis role="bold">Boost.Task</emphasis> provides <link linkend="boost_task.pool"><emphasis>thread-pools</emphasis></link>
      to prevent the overhead of thread creation and destruction of threads for each
      task (<emphasis>thread-pools</emphasis> can be customized).
    </para>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">2</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">else</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">+</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">long</phrase> <phrase role="identifier">parallel_fib</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">cutof</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">cutof</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">else</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// create a sub-task calculating fibonacci(n-1)
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">cutof</phrase><phrase role="special">);</phrase>
		<phrase role="comment">// create a sub-task calculating fibonacci(n-2)
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">cutof</phrase><phrase role="special">);</phrase>

		<phrase role="comment">// fork two sub-tasks
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_task</phrase><phrase role="special">::</phrase><phrase role="identifier">get_pool</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_task</phrase><phrase role="special">::</phrase><phrase role="identifier">get_pool</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

		<phrase role="comment">// join the results of both sub-tasks
</phrase>		<phrase role="keyword">return</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">();</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create a thread-pool with five worker-threads
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
		<phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// create task computing fibonacci-number for 10
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
		<phrase role="number">10</phrase><phrase role="special">,</phrase>
		<phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// execute task in a thread-pool
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// access the result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <para>
      With function <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">this_task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">runs_in_pool</phrase><phrase role="special">()</phrase></code>
      a task can detect if it is executed inside a <emphasis>thread-pool</emphasis>.
      <emphasis>sub-tasks</emphasis> arecreated by <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">as_sub_task</phrase></code>. Where the <emphasis>sub-task</emphasis>
      is executed by a new thread if the parent task is not executed inside a <emphasis>thread-pool</emphasis>.
      In the other case the <emphasis>sub-task</emphasis> is put into the local
      <emphasis>worker-queue</emphasis> which enables <link linkend="boost_task.pool.work_stealing"><emphasis>work-stealing</emphasis></link>
      and <link linkend="boost_task.pool.forkjoin">inline execution</link> of tasks.
    </para>
    <para>
      
<programlisting><phrase role="comment">// create a long runing task
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
	<phrase role="number">10</phrase><phrase role="special">,</phrase>
	<phrase role="number">5</phrase><phrase role="special">);</phrase>

<phrase role="comment">// move task ownership to executor
</phrase><phrase role="comment">// sub-task executed in a new thread or inside the thread-pool
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">as_sub_task</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.task">
    <title><link linkend="boost_task.task"> Task</link></title>
    <para>
      A task is a chunk of code that can be executed independently.
    </para>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      represents a <emphasis>callable</emphasis> (provides <code><phrase role="keyword">operator</phrase><phrase
      role="special">()()</phrase></code>) object containing the unit of code to
      be execute by a <emphasis>execution-policy</emphasis>. Function <code><phrase
      role="identifier">get_future</phrase><phrase role="special">()</phrase></code>
      returns a <emphasis>asynchronous-completion-token</emphasis> allowing to wait
      for the completion of the computation of the task, for getting the result of
      a computation or for transfering exceptions. <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> supports move semantics (moving ownership).
    </para>
    <anchor id="boost_task.task.cooperative_task_and_interruption"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.task.cooperative_task_and_interruption">Cooperative
      task and interruption</link>
    </bridgehead>
    <para>
      Sometimes it is desired to stop a running task if it is no longer needed. In
      this case the thread is not killed - it stops only at well-defined points (<emphasis>interruption-points</emphasis>)
      its execution. In the context of task-interruption a task is known as cooperative
      if it checks for an interruption request between two <emphasis>interruption-points</emphasis>
      via <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase
      role="identifier">interruption_requested</phrase><phrase role="special">()</phrase></code>
      <footnote>
        <para>
          see <ulink url="http://www.ddj.com/architect/207100682">'Interrupt Politely'</ulink>,
          Herb Sutter
        </para>
      </footnote>
      .
    </para>
    <para>
      <emphasis>interruption-points</emphasis> are:
    </para>
    <itemizedlist>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">thread</phrase><phrase role="special">::</phrase><phrase
        role="identifier">join</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">thread</phrase><phrase role="special">::</phrase><phrase
        role="identifier">timed_join</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">condition_variable</phrase><phrase role="special">::</phrase><phrase
        role="identifier">wait</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">condition_variable</phrase><phrase role="special">::</phrase><phrase
        role="identifier">timed_wait</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">condition_variable_any</phrase><phrase role="special">::</phrase><phrase
        role="identifier">wait</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">condition_variable_any</phrase><phrase role="special">::</phrase><phrase
        role="identifier">timed_wait</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">thread</phrase><phrase role="special">::</phrase><phrase
        role="identifier">sleep</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase
        role="identifier">sleep</phrase><phrase role="special">()</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase
        role="identifier">interruption_point</phrase><phrase role="special">()</phrase></code>
      </listitem>
    </itemizedlist>
    <para>
      A <emphasis>interruption-point</emphasis> throws <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task_interrupted</phrase></code> if an interruption was requested.
    </para>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// interruption point
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">interruption_point</phrase><phrase role="special">();</phrase>
	
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// check if interruption was requested
</phrase>		<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">interruption_requested</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
			<phrase role="keyword">return</phrase><phrase role="special">;</phrase>
			
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	
	<phrase role="comment">// interruption point
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">interruption_point</phrase><phrase role="special">();</phrase>
	
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// task for computing fibonacci-number
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// execute task in new thread
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// interrupt task an wait until
</phrase>	<phrase role="comment">// the task is removed by the worker-thread
</phrase>	<phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">interrupt_and_wait</phrase><phrase role="special">();</phrase>

	<phrase role="comment">// access the result
</phrase>	<phrase role="comment">// throws boost::task::task_interrupted
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <anchor id="boost_task.task.exceptions"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.task.exceptions">Exceptions</link>
    </bridgehead>
    <para>
      Exceptions thrown by <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> are transported by the <emphasis>asynchronous-completion-token</emphasis>.
    </para>
    <para>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">throwing</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="special">...</phrase>
	<phrase role="keyword">throw</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">domain_error</phrase><phrase role="special">(</phrase><phrase role="string">&quot;domain error&quot;</phrase><phrase role="special">);</phrase>
	<phrase role="special">...</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create task throwing std::domain_error
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">throwing</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// execute task asynchron
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// wait for task completion
</phrase>	<phrase role="comment">// throws std::domain_error
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <para>
      Exceptions rethrown by type are:
    </para>
    <itemizedlist>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">bad_alloc</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">bad_cast</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">bad_exception</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">bad_typeid</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">domain_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">invalid_argument</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">ios_base</phrase><phrase role="special">::</phrase><phrase
        role="identifier">failure</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">length_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">logic_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">out_of_range</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">overflow_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">range_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">runtime_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">underflow_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">exception</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">future_already_set</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">future_cancel</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">invalid_thread_argument</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">lock_error</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">broken_task</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">pool_moved</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task_already_executed</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task_interrupted</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task_moved</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task_interrupted</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task_task_rejected</phrase></code>
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task_unitialized</phrase></code>
      </listitem>
    </itemizedlist>
    <anchor id="boost_task.task.parent_task"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.task.parent_task">Parent task</link>
    </bridgehead>
    <para>
      Top-level tasks have no parent. A parent task can create child tasks when it
      creates another task by using <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">as_sub_task</phrase></code> as <emphasis>execution-policy</emphasis>.
      These children are implicitly treated as <emphasis>sub-tasks</emphasis> of
      the larger task. It is assumed that that <emphasis>sub-tasks</emphasis> can
      be executed in any order because only overall operation speed matters (enabling
      strategies for fast execution of unordered <emphasis>work-items</emphasis>
      as <link linkend="boost_task.pool.work_stealing"><emphasis>work-stealing</emphasis></link>).
    </para>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">2</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">else</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">+</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">long</phrase> <phrase role="identifier">parallel_fib</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">cutof</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">cutof</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">else</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// sub-task for computing fibonacci(n-1)
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">cutof</phrase><phrase role="special">);</phrase>
		<phrase role="comment">// sub-task for computing fibonacci(n-2)
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">cutof</phrase><phrase role="special">);</phrase>

		<phrase role="comment">// submit a sub-tasks to thread-pool
</phrase>		<phrase role="comment">// move task ownership to executor
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

		<phrase role="comment">// computing fibonacci(n) by
</phrase>		<phrase role="comment">// joining results of both sub-tasks
</phrase>		<phrase role="keyword">return</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">();</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create thread-pool with five worker-threads
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
		<phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// create task computing fibonacci-number for 10
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
		<phrase role="number">10</phrase><phrase role="special">,</phrase>
		<phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// execute task asynchron in thread-pool
</phrase>	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// access result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.handle">
    <title><link linkend="boost_task.handle"> Handle</link></title>
    <para>
      The <emphasis>asynchronous-completion-token</emphasis> dispatches tasks in
      response to the completion of asynchronous operations. <emphasis>asynchronous-completion-token</emphasis>
      uniquely identifies the task and state necessary to process the result of the
      operation
      <footnote>
        <para>
          see <ulink url="http://www.cs.wustl.edu/~schmidt/PDF/ACT.pdf">'Asynchronous
          Completion Token'</ulink>, Douglas Schmidt
        </para>
      </footnote>
      .
    </para>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase></code>
      represents an <emphasis>asynchronous-completion-token</emphasis>. It will be
      returned by <link linkend="boost_task.async"><code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">async</phrase><phrase role="special">()</phrase></code></link>
      and is associated with the submitted <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code>.
    </para>
    <anchor id="boost_task.handle.asynchronous_completion_token_interface"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.handle.asynchronous_completion_token_interface">Asynchronous
      completion token interface</link>
    </bridgehead>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase></code>
      implements an interface in order to check the state of computation and to transfer
      the result.
    </para>
    <itemizedlist>
      <listitem>
        <code><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase></code>:
        test if result is set
      </listitem>
      <listitem>
        <code><phrase role="identifier">has_value</phrase><phrase role="special">()</phrase></code>:
        test if value-result is set
      </listitem>
      <listitem>
        <code><phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase></code>:
        test if exception-result is set
      </listitem>
      <listitem>
        <code><phrase role="identifier">get</phrase><phrase role="special">()</phrase></code>:
        return value-result or throw the exception-result
      </listitem>
      <listitem>
        <code><phrase role="identifier">wait</phrase><phrase role="special">()</phrase></code>:
        wait until result is set
      </listitem>
      <listitem>
        <code><phrase role="identifier">wait_for</phrase><phrase role="special">()</phrase></code>:
        wait until result is set or time-duration has elapsed
      </listitem>
      <listitem>
        <code><phrase role="identifier">wait_until</phrase><phrase role="special">()</phrase></code>:
        wait until result ist set or time-point has elapsed
      </listitem>
    </itemizedlist>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create task
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// move task ownership to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;is ready == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>

	<phrase role="comment">// wait for task completion
</phrase>	<phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">wait</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;has value == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">has_value</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;has exception == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>

	<phrase role="comment">// return result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <anchor id="boost_task.handle.task_interruption"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.handle.task_interruption">Task interruption</link>
    </bridgehead>
    <para>
      Each invokation of <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase
      role="special">()</phrase></code> returns an <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">handle</phrase></code> which allows to control the associated
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      (passed to <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase
      role="special">()</phrase></code>). This includes the ability to interrupt
      an <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      if it is cooperative. Cooperative means that the <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> contains <emphasis>interruption-points</emphasis>
      or checks for interruption requests
      <footnote>
        <para>
          see <ulink url="http://www.ddj.com/architect/207100682">'Interrupt Politely'</ulink>,
          Herb Sutter
        </para>
      </footnote>
      .
    </para>
    <itemizedlist>
      <listitem>
        <code><phrase role="identifier">interrupt</phrase><phrase role="special">()</phrase></code>:
        interrupt <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code> and return immediately
      </listitem>
      <listitem>
        <code><phrase role="identifier">interrupt_and_wait</phrase><phrase role="special">()</phrase></code>:
        interrupt and wait until <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase></code>
        was removed from <emphasis>worker-thread</emphasis>
      </listitem>
      <listitem>
        <code><phrase role="identifier">interrupt_and_wait_for</phrase><phrase role="special">()</phrase></code>:
        interrupt and wait until <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase></code>
        was removed from <emphasis>worker-thread</emphasis> or time duration has
        elapsed
      </listitem>
      <listitem>
        <code><phrase role="identifier">interrupt_and_wait_until</phrase><phrase
        role="special">()</phrase></code>: interrupt and wait until <code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code> was removed from <emphasis>worker-thread</emphasis>
        or time point has reached
      </listitem>
      <listitem>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase
        role="identifier">interruption_requested</phrase><phrase role="special">()</phrase></code>:
        return bool if interruption was requested
      </listitem>
    </itemizedlist>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">interruption_point</phrase><phrase role="special">();</phrase> <phrase role="comment">// interruption point
</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">interruption_requested</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>	<phrase role="comment">// check if interruption was requested
</phrase>			<phrase role="keyword">return</phrase><phrase role="special">;</phrase>

		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_thread</phrase><phrase role="special">::</phrase><phrase role="identifier">interruption_point</phrase><phrase role="special">();</phrase>  <phrase role="comment">// interruption point
</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// task, to be executed asynchronously
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// move task to async. executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// interrupt task and wait until task is removed by worker-thread
</phrase>	<phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">interrupt_and_wait</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;is ready == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;has value == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">has_value</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;has exception == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>

	<phrase role="comment">// access result
</phrase>	<phrase role="comment">// throws boost::task::task_interrupted
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <note>
      <para>
        If the task is still pending (not executed yet) when an interruption is requested
        - the task is not removed from the queue, it is marked to be interrupted
        instead.
      </para>
    </note>
    <anchor id="boost_task.handle.waiting_for_handles"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.handle.waiting_for_handles">Waiting for handles</link>
    </bridgehead>
    <para>
      <emphasis role="bold">Boost.Task</emphasis> provides function <code><phrase
      role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">waitfor_all</phrase><phrase
      role="special">()</phrase></code> waits for all handles passed to this function
      to become ready
    </para>
    <para>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase> <phrase role="identifier">handles</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">results</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">results</phrase><phrase role="special">.</phrase><phrase role="identifier">reserve</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">10</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

		<phrase role="identifier">results</phrase><phrase role="special">.</phrase><phrase role="identifier">push_back</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
				<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
	<phrase role="special">}</phrase>

	<phrase role="comment">// wait until all tasks are ready
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">results</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">results</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>

	<phrase role="keyword">int</phrase> <phrase role="identifier">k</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">e</phrase><phrase role="special">(</phrase> <phrase role="identifier">results</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="identifier">results</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
		<phrase role="identifier">i</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">e</phrase><phrase role="special">;</phrase>
		<phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(&quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">k</phrase><phrase role="special">++</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">i</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <para>
      and <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">waitfor_any</phrase><phrase
      role="special">()</phrase></code> which returns if at least one of the passed
      handles becomes ready.
    </para>
    <para>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">,</phrase> <phrase role="number">7</phrase><phrase role="special">);</phrase>
	 <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">(</phrase> <phrase role="identifier">cooperative</phrase><phrase role="special">,</phrase> <phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h3</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t3</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// wait for any task becomes ready
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">h1</phrase><phrase role="special">,</phrase> <phrase role="identifier">h2</phrase><phrase role="special">,</phrase> <phrase role="identifier">h3</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(7) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">h3</phrase><phrase role="special">.</phrase><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(5) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h3</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.async">
    <title><link linkend="boost_task.async"> Asynchronous execution</link></title>
    <para>
      Function <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase
      role="special">()</phrase></code> applies the moved <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> to the <emphasis>execution-policy</emphasis>
      which executes the <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      (for this purpose <emphasis>execution-policy</emphasis> is required to provide
      <code><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase>
      <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase>
      <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase>
      <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase
      role="special">)</phrase></code>). <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">async</phrase><phrase role="special">()</phrase></code> accepts
      two arguments - the first is an <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> object and the second an <emphasis>execution-policy</emphasis>.
      For the second argument <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">as_sub_task</phrase></code> is used per default. The function
      returns a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase></code>
      which controls the submitted <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code>.
    </para>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// task computing fibonacci(10)
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// move the task to executor
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			 <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// access the result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.own_thread">
    <title><link linkend="boost_task.own_thread"> Execute in own thread</link></title>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">own_thread</phrase></code>
      executes the task in the current thread (synchronous execution - concerns of
      <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2802.html">N2802</ulink>
      do not aply).
    </para>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">own_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.new_thread">
    <title><link linkend="boost_task.new_thread"> Execute in new thread</link></title>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase></code>
      creates a new <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">thread</phrase></code> and executes the task in this thread
      (asynchronous). The created thread gets joined by handle (so <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2802.html">N2802</ulink>
      should be addressed). The returned <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">handle</phrase></code> joins the thread in its destructor
      (if the last reference gets out of scope) .
    </para>
    <para>
      
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <caution>
      <para>
        Always store the returned <emphasis>asynchronous-completion-token</emphasis>
        in a variable because <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">handle</phrase></code>
        joins the thread in its destructor (if the last reference gets out of scope).
      </para>
    </caution>
    <para>
      In the example below both <code><phrase role="identifier">a_function</phrase><phrase
      role="special">()</phrase></code> and <code><phrase role="identifier">another_function</phrase><phrase
      role="special">()</phrase></code> are executed synchron because the returned
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase></code>
      is not stored in a variable. Thatswhy the <emphasis>worker-thread</emphasis>
      is joined after return from <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">async</phrase><phrase role="special">()</phrase></code>!
    </para>
    <para>
      
<programlisting><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase> <phrase role="identifier">a_function</phrase><phrase role="special">);</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase> <phrase role="identifier">another_function</phrase><phrase role="special">);</phrase>

<phrase role="comment">// handles are not retrieved
</phrase><phrase role="comment">// both task executed in sequence
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">new_thread</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.pool">
    <title><link linkend="boost_task.pool"> Thread-pool</link></title>
    <para>
      Instead of creating a new thread and quickly throwing it away after the task
      is done, the overhead related to thread creation and destruction can be avoided
      by running the <emphasis>work-items</emphasis> on a <emphasis>thread-pool</emphasis>
      (reusing an existing <emphasis>worker-thread</emphasis> instead).
    </para>
    <para>
      A <emphasis>thread-pool</emphasis> maintains a queue (or queues) of <emphasis>work-items</emphasis>
      to be done, and a pool of <emphasis>worker-threads</emphasis> which execute
      <emphasis>work-items</emphasis> from the queue(s).
    </para>
    <para>
      <emphasis role="bold">Boost.Task</emphasis> provides <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">async</phrase><phrase role="special">()</phrase></code> with
      support of executing an <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> in <emphasis>thread-pool</emphasis>:
    </para>
    <para>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">echo</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">msg</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="comment">// create a thread-pool with
</phrase>	<phrase role="comment">// five worker-threads
</phrase>	<phrase role="comment">// FIFO schduling of queued tasks
</phrase>	<phrase role="comment">// and unlimited size of internal queue
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
		<phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// create task
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">echo</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;Hello World!&quot;</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// move task to executor
</phrase>	<phrase role="comment">// let the task be executed by the thread-pool
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// access the result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
    </para>
    <important>
      <para>
        Tasks should not be too small (performance overhead dominates) and avoid
        blocking tasks
        <footnote>
          <para>
            see <ulink url="http://www.ddj.com/go-parallel/article/showArticle.jhtml?articleID=216500409">'Use
            Thread Pools Correctly'</ulink>, Herb Sutter
          </para>
        </footnote>
        .
      </para>
    </important>
    <section id="boost_task.pool.static_pool">
      <title><link linkend="boost_task.pool.static_pool"> Static thread-pool</link></title>
      <para>
        <emphasis role="bold">Boost.Task</emphasis> provides <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">static_pool</phrase></code>
        - which contains an fixed set of pre-forked <emphasis>worker-threads</emphasis>
        (the size of the pool doesn't change during its lifetime). <code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">static_pool</phrase></code> supports move semantics.
      </para>
      <para>
        
<programlisting><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">_static_pool</phrase><phrase role="special">&lt;</phrase>               <phrase role="comment">// pool type
</phrase>        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>  <phrase role="comment">// queuing policy (unbounded_channel, bounded_channel)
</phrase>               <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>        <phrase role="comment">// scheduling policy (fifo, priority, smart)
</phrase>        <phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">6</phrase><phrase role="special">),</phrase>                         <phrase role="comment">// pool with 6 pre-forked worker-threads
</phrase>        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">milliseconds</phrase><phrase role="special">(</phrase> <phrase role="number">50</phrase><phrase role="special">),</phrase>  <phrase role="comment">// time to sleep if no work-item available
</phrase>        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>                        <phrase role="comment">// iterations over local-queues before sleep
</phrase></programlisting>
      </para>
      <para>
        The first argument of the constructor specifies how many <emphasis>worker-threads</emphasis>
        the pool will contain. The second and third argument are used by the <link
        linkend="boost_task.pool.work_stealing"><emphasis>work-stealing</emphasis></link>
        algorithm.
      </para>
      <note>
        <para>
          If <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
          role="identifier">task</phrase><phrase role="special">::</phrase><phrase
          role="identifier">bounded_channel</phrase></code> is used as queuing policy
          the constructor has two additional arguments .
        </para>
      </note>
      <para>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">static_pool</phrase></code> provides functionality to check
        the status of the pool - <code><phrase role="identifier">close</phrase><phrase
        role="special">()</phrase></code> returns true when the pool was shutdown
        and <code><phrase role="identifier">active</phrase><phrase role="special">()</phrase></code>
        as well as <code><phrase role="identifier">idle</phrase><phrase role="special">()</phrase></code>
        returning how many <emphasis>worker-threads</emphasis> are active (executing
        a task) or idle. The size of the pool can be accessed over <code><phrase
        role="identifier">size</phrase><phrase role="special">()</phrase></code>.
      </para>
      <para>
        For informational pruposes <code><phrase role="identifier">empty</phrase><phrase
        role="special">()</phrase></code> and <code><phrase role="identifier">pending</phrase><phrase
        role="special">()</phrase></code> can be used in order to know if the global
        task-queue is empty or how many tasks are waiting for execution. With <code><phrase
        role="identifier">clear</phrase><phrase role="special">()</phrase></code>
        all tasks are removed from the global-queue.
      </para>
      <note>
        <para>
          <code><phrase role="identifier">pending</phrase><phrase role="special">()</phrase></code>
          does not count tasks in the local-queues of the <emphasis>worker-threads</emphasis>.
        </para>
      </note>
    </section>
    <section id="boost_task.pool.channel">
      <title><link linkend="boost_task.pool.channel"> Channel</link></title>
      <para>
        The channel synchronizes the access between non-pool threads (application
        threads) and <emphasis>worker-threads</emphasis> and implements a queuing
        policy (limitation of queued tasks).
      </para>
      <anchor id="boost_task.pool.channel._code__phrase_role__identifier__boost__phrase__phrase_role__special______phrase__phrase_role__identifier__task__phrase__phrase_role__special______phrase__phrase_role__identifier__bounded_channel__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.channel._code__phrase_role__identifier__boost__phrase__phrase_role__special______phrase__phrase_role__identifier__task__phrase__phrase_role__special______phrase__phrase_role__identifier__bounded_channel__phrase___code_"><code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">bounded_channel</phrase></code></link>
      </bridgehead>
      <para>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">bounded_channel</phrase></code> contains a single lock
        in order to synchronize access to the queue. The number of pending tasks
        is limited in order to prevent resource exhaustion. For this purpose a high-
        and low-watermark has to be passed at construction. <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">high_watermark</phrase></code>
        sets the maximum of pending tasks. If this limited is reached all threads
        which submit a task will be set to sleep (blocked). If it is equal to <code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">low_watermark</phrase></code> everytime a sleeping producer
        thread will be woken up and puts its task if one worker thread has taken
        a task from the channel. <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">low_watermark</phrase></code>
        sets the threshold when blocked threads get woken up. If it is less than
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">high_watermark</phrase></code> all sleeping producer threads
        will be woken up if the amount of pending tasks reaches <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">low_watermark</phrase></code>.
      </para>
      <anchor id="boost_task.pool.channel._code__phrase_role__identifier__boost__phrase__phrase_role__special______phrase__phrase_role__identifier__task__phrase__phrase_role__special______phrase__phrase_role__identifier__unbounded_channel__phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.channel._code__phrase_role__identifier__boost__phrase__phrase_role__special______phrase__phrase_role__identifier__task__phrase__phrase_role__special______phrase__phrase_role__identifier__unbounded_channel__phrase___code_"><code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">unbounded_channel</phrase></code></link>
      </bridgehead>
      <para>
        <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">unbounded_channel</phrase></code> contains a single lock
        in order to synchronize access to the queue. An unlimited number of tasks
        can be queued into this channel. The insertion of an <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase></code>
        will never block. If the channel becomes empty <emphasis>worker-threads</emphasis>
        will be set to sleep until new tasks are enqueued.
      </para>
    </section>
    <section id="boost_task.pool.scheduling">
      <title><link linkend="boost_task.pool.scheduling"> Scheduling</link></title>
      <para>
        The scheduling policy determines how tasks are scheduled inside the <emphasis>channel</emphasis>.
      </para>
      <anchor id="boost_task.pool.scheduling.fifo"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.scheduling.fifo">fifo</link>
      </bridgehead>
      <para>
        First inserted pending <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase></code>
        gets taken first.
      </para>
      <anchor id="boost_task.pool.scheduling.priority"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.scheduling.priority">priority</link>
      </bridgehead>
      <para>
        Each <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code> is submitted to the pool with a priority
        attribute. The type and ordering of the priority is user-defined.
      </para>
      <para>
        
<programlisting><phrase role="comment">// thread-pool with priority scheduling
</phrase><phrase role="comment">// tasks with higher priority are
</phrase><phrase role="comment">// scheduled first
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">priority</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase> <phrase role="identifier">some_fn</phrase><phrase role="special">);</phrase>
<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">void</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase> <phrase role="identifier">another_fn</phrase><phrase role="special">);</phrase>

<phrase role="comment">// move task t1 with priority 5 to thread-pool
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
	<phrase role="number">5</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">pool</phrase><phrase role="special">);</phrase>

<phrase role="comment">// move task t2 with priority 3 to thread-pool
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
	<phrase role="number">3</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">pool</phrase><phrase role="special">);</phrase>
</programlisting>
      </para>
      <para>
        In this example the tasks get scheduled by the assigned integer (third argument
        of <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">async</phrase><phrase role="special">()</phrase></code>).
        The <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code> with the lowest priority gets scheduled
        first (taken by a <emphasis>worker-thread</emphasis>). The ordering can be
        changed by the second argument of <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">priority</phrase></code>
        (the default is <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
        role="identifier">greater</phrase><phrase role="special">&lt;</phrase> <phrase
        role="identifier">Attr</phrase> <phrase role="special">&gt;</phrase></code>).
      </para>
      <para>
        
<programlisting><phrase role="comment">// thread-pool with priority scheduling
</phrase><phrase role="comment">// tasks with lower priority are
</phrase><phrase role="comment">// scheduled first
</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">priority</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">less</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.pool.scheduling.smart"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.scheduling.smart">smart</link>
      </bridgehead>
      <para>
        Each inserted <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code> is associated with an attribute. The
        scheduler gets an put- and take-policy as template arguments. The corresponding
        policy gets applied for each insertion and removal.
      </para>
      <para>
        <emphasis role="bold">Boost.Task</emphasis> provides <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">replace_oldest</phrase></code>
        as put- policy and <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">take_oldest</phrase></code>
        as take-policy. Both policies allow the replacement of older (pending) tasks
        in the scheduler by new ones.
      </para>
      <para>
        
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">smart</phrase><phrase role="special">&lt;</phrase>
			<phrase role="keyword">int</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">less</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;,</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">replace_oldest</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">take_oldest</phrase>
		<phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool_type</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">pool_type</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="special">...</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">,</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// replaced by later task with same attribute == 2
</phrase>	<phrase role="comment">// if still pending in pool
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
		<phrase role="number">2</phrase><phrase role="special">,</phrase>
		<phrase role="identifier">pool</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// will replace previous pending task with attribute == 2
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
		<phrase role="number">2</phrase><phrase role="special">,</phrase>
		<phrase role="identifier">pool</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
    </section>
    <section id="boost_task.pool.pool_shutdown">
      <title><link linkend="boost_task.pool.pool_shutdown"> Pool shutdown</link></title>
      <para>
        <emphasis role="bold">Boost.Task</emphasis> allows to shutdown a <emphasis>thread-pool</emphasis>
        explicitly via functions <code><phrase role="identifier">shutdown</phrase><phrase
        role="special">()</phrase></code> and <code><phrase role="identifier">shutdown_now</phrase><phrase
        role="special">()</phrase></code>. The destructor of the pool calls <code><phrase
        role="identifier">shutdown</phrase><phrase role="special">()</phrase></code>
        if not already done so that all <emphasis>worker-threads</emphasis> are joined
        and the topic of <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2802.html">N2802</ulink>
        should be addressed.
      </para>
      <anchor id="boost_task.pool.pool_shutdown.shutdown"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.pool_shutdown.shutdown">Shutdown</link>
      </bridgehead>
      <para>
        If <code><phrase role="identifier">shutdown</phrase><phrase role="special">()</phrase></code>
        is called - the the pool is set the closed state and all <emphasis>worker-threads</emphasis>
        are joined until all pending tasks are processed. No futher tasks can be
        submitted.
      </para>
      <para>
        
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
	<phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool_type</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">pool_type</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="special">...</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">,</phrase> <phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// waits until all pending tasks are finished
</phrase>	<phrase role="identifier">pool</phrase><phrase role="special">.</phrase><phrase role="identifier">shutdown</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(5) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
      <note>
        <para>
          The deconstructor calls <code><phrase role="identifier">shutdown</phrase><phrase
          role="special">()</phrase></code> if the pool was not shutdown yet.
        </para>
      </note>
      <anchor id="boost_task.pool.pool_shutdown.shutdown_immediatly"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.pool.pool_shutdown.shutdown_immediatly">Shutdown
        immediatly</link>
      </bridgehead>
      <para>
        The function <code><phrase role="identifier">shutdown_now</phrase><phrase
        role="special">()</phrase></code> closes the pool, interrupts and then joins
        all <emphasis>worker-threads</emphasis>. Pending tasks are unprocessed.
      </para>
      <para>
        
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">long</phrase> <phrase role="identifier">k1</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="identifier">k2</phrase><phrase role="special">(</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">for</phrase> <phrase role="special">(</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">(</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
	<phrase role="special">{</phrase>
		<phrase role="keyword">long</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">(</phrase> <phrase role="identifier">k1</phrase><phrase role="special">);</phrase>
		<phrase role="identifier">k1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">k1</phrase> <phrase role="special">+</phrase> <phrase role="identifier">k2</phrase><phrase role="special">;</phrase>
		<phrase role="identifier">k2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">tmp</phrase><phrase role="special">;</phrase>
	<phrase role="special">}</phrase>
	<phrase role="keyword">return</phrase> <phrase role="identifier">k1</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
	<phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool_type</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">pool_type</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="special">...</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci_fn</phrase><phrase role="special">,</phrase> <phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// requests task interruption and
</phrase>	<phrase role="comment">// joins all worker-threads
</phrase>	<phrase role="identifier">pool</phrase><phrase role="special">.</phrase><phrase role="identifier">shutdown_now</phrase><phrase role="special">();</phrase>

	<phrase role="comment">// accessing the result may throw task_interrupted
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>
	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(5) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
    </section>
    <section id="boost_task.pool.processor_binding">
      <title><link linkend="boost_task.pool.processor_binding"> Processor binding</link></title>
      <para>
        For some applications it is convenient to bind the <emphasis>worker-threads</emphasis>
        to processors/cores of the system. For this purpose <code><phrase role="identifier">bind_to_processors</phrase><phrase
        role="special">()</phrase></code> must be given to constructor instead <code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">poolsize</phrase></code> so that a <emphasis>worker-thread</emphasis>
        is created an bound the the core.
      </para>
      <para>
        
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">tp</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase> <phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool_type</phrase><phrase role="special">;</phrase>

<phrase role="comment">// constructs thread-pool with worker-threads as
</phrase><phrase role="comment">// CPUs/Cores are available on the system
</phrase><phrase role="identifier">pool_type</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">pool_type</phrase><phrase role="special">::</phrase><phrase role="identifier">bind_to_processors</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase>
</programlisting>
      </para>
      <para>
        The constructor takes additional arguments for the <link linkend="boost_task.pool.work_stealing">work-stealing
        algorithm</link> and <link linkend="boost_task.pool.channel">high-</link>
        and <link linkend="boost_task.pool.channel">low-watermark</link> too.
      </para>
      <note>
        <para>
          <emphasis role="bold">Boost.Task</emphasis> does provide this feature only
          for Windows, Linux, AIX, HP-UX, Solaris and FreeBSD.
        </para>
      </note>
    </section>
    <section id="boost_task.pool.work_stealing">
      <title><link linkend="boost_task.pool.work_stealing"> Work-Stealing</link></title>
      <para>
        Traditional <emphasis>thread-pools</emphasis> do not scale because they use
        a single global-queue protected by a global-lock. The frequency at which
        <emphasis>worker-threads</emphasis> aquire the global-lock becomes a limiting
        factor for the throughput if:
      </para>
      <itemizedlist>
        <listitem>
          the tasks become smaller
        </listitem>
        <listitem>
          more processors are added
        </listitem>
      </itemizedlist>
      <para>
        A <emphasis>work-stealing</emphasis> algorithm can be used to solve this
        problem. It uses a special kind of queue which has two ends, and allows lock-free
        pushes and pops from the <emphasis>private end</emphasis> (accessed by the
        <emphasis>worker-thread</emphasis> owning the queue), but requires synchronization
        from the <emphasis>public end</emphasis> (accessed by the other <emphasis>worker-threads</emphasis>).
        Synchronization is necessary when the queue is sufficiently small that private
        and public operations could conflict.
      </para>
      <para>
        The pool contains one global-queue (<code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">bounded_channel</phrase></code>
        or <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">unbounded_channel</phrase></code>) protected by a global-lock
        and each <emphasis>worker-thread</emphasis> has its own private local worker-queue.
        If work is enqueued by a <emphasis>worker-thread</emphasis> the <code><phrase
        role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase><phrase role="special">::</phrase><phrase
        role="identifier">task</phrase></code> is stored in the worker queue. If
        the work is enqueued by a application thread it goes into the global queue.
        When <emphasis>worker-threads</emphasis> are looking for work, they have
        following search order:
      </para>
      <itemizedlist>
        <listitem>
          look into the private worker-queue - tasks can be dequeued without locks
        </listitem>
        <listitem>
          look in the global-queue - locks are used for synchronization
        </listitem>
        <listitem>
          check other worker-queues ('stealing' tasks from private worker queues
          of other <emphasis>worker-threads</emphasis>) - requires locks
        </listitem>
      </itemizedlist>
      <para>
        For a lot of recursively queued tasks (so called <emphasis>sub-tasks</emphasis>),
        the use of a worker-queue per thread substantially reduces the synchronization
        necessary to complete the work. There are also fewer cache effects due to
        sharing of the global-queue information.
      </para>
      <para>
        Operations on the private worker queue are executed in LIFO order and operations
        on worker queues of other <emphasis>worker-threads</emphasis> in FIFO order
        (steals).
      </para>
      <itemizedlist>
        <listitem>
          There are chances that memory is still hot in the cache, if the tasks are
          pushed in LIFO order into the private worker queue.
        </listitem>
        <listitem>
          If a <emphasis>worker-thread</emphasis> steals work in FIFO order, increases
          the chances that a larger 'chunk' of work will be stolen (the need for
          other steals will be possibly reduced). Because the <emphasis>sub-tasks</emphasis>
          are stored in LIFO order, the oldest items are closer to the <emphasis>public
          end</emphasis> of the queue (forming a tree). Stealing such an older <code><phrase
          role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
          role="identifier">task</phrase><phrase role="special">::</phrase><phrase
          role="identifier">task</phrase></code> also steals a (probably) larger
          subtree of tasks unfolded if the stolen work item get executed. Since a
          <emphasis>sub-task</emphasis> is just part of a larger <code><phrase role="identifier">boost</phrase><phrase
          role="special">::</phrase><phrase role="identifier">task</phrase><phrase
          role="special">::</phrase><phrase role="identifier">task</phrase></code>,
          we don’t need to worry about execution order.
        </listitem>
      </itemizedlist>
    </section>
    <para>
      / Copyright Oliver Kowalke 2009. Distributed under the Boost Software License,
      Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt
      ]
    </para>
    <section id="boost_task.pool.forkjoin">
      <title><link linkend="boost_task.pool.forkjoin"> Fork/Join</link></title>
      <para>
        Fork/Join algorithms are recursive divide-and-conquer algorithms which repeatedly
        splitt into sub-tasks until they become small enough to solve using simple,
        short sequential methods, so that they run in parallel on multiple cores.
      </para>
      <para>
        The fork operation creates new <emphasis>sub-tasks</emphasis> which can run
        in parallel. The current <code><phrase role="identifier">boost</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase><phrase
        role="special">::</phrase><phrase role="identifier">task</phrase></code>
        is not proceeded in the join operation until the forked <emphasis>sub-tasks</emphasis>
        have completed. In the meantime the <emphasis>worker-thread</emphasis> executes
        other tasks from its local <emphasis>worker-queue</emphasis>.
      </para>
      <para>
        
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="number">2</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">else</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="special">+</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">long</phrase> <phrase role="identifier">parallel_fib</phrase><phrase role="special">(</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">cutof</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">if</phrase> <phrase role="special">(</phrase> <phrase role="identifier">n</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">cutof</phrase><phrase role="special">)</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">serial_fib</phrase><phrase role="special">(</phrase> <phrase role="identifier">n</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">else</phrase>
	<phrase role="special">{</phrase>
		<phrase role="comment">// create a sub-task calculating fibonacci(n-1)
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">cutof</phrase><phrase role="special">);</phrase>
		<phrase role="comment">// create a sub-task calculating fibonacci(n-2)
</phrase>		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">cutof</phrase><phrase role="special">);</phrase>

		<phrase role="comment">// fork both sub-tasks by moving the task
</phrase>		<phrase role="comment">// ownership to the thread-pool
</phrase>		<phrase role="identifier">h1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t1</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
		<phrase role="identifier">h2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t2</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

		<phrase role="comment">// join the results of both sub-tasks
</phrase>		<phrase role="comment">// if one of the both sub-tasks is not ready
</phrase>		<phrase role="comment">// the worker-thread does not block, it executes other
</phrase>		<phrase role="comment">// task from its local-queue
</phrase>		<phrase role="keyword">return</phrase> <phrase role="identifier">h1</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">h2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">();</phrase>
	<phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">main</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">fifo</phrase>
		<phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase> <phrase role="identifier">pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// compute fibonacci-number 10
</phrase>	<phrase role="comment">// for numbers &lt; 5 do inline calculation
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">parallel_fib</phrase><phrase role="special">,</phrase>
		<phrase role="number">10</phrase><phrase role="special">,</phrase>
		<phrase role="number">5</phrase><phrase role="special">);</phrase>

	<phrase role="comment">// move task ownership to thread-pool
</phrase>	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">pool</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

	<phrase role="comment">// access result
</phrase>	<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;fibonacci(10) == &quot;</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </para>
    </section>
  </section>
  <section id="boost_task.as_sub_task">
    <title><link linkend="boost_task.as_sub_task"> Execute as sub-task</link></title>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">as_sub_task</phrase></code>
      is a convenient way to execute a <emphasis>sub-task</emphasis>. If the parent
      task is executed inside a <emphasis>thread-pool</emphasis> the <emphasis>sub-task</emphasis>
      is put into the local-queue of the <emphasis>worker-thread</emphasis> in the
      other case the <emphasis>sub-task</emphasis> will be executed in a new thread.
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">as_sub_task</phrase></code>
      is used as default <emphasis>execution-policy</emphasis> for <code><phrase
      role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">()</phrase></code>,
    </para>
    <para>
      
<programlisting><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">t</phrase><phrase role="special">(</phrase> <phrase role="identifier">fibonacci</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">);</phrase>

<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">long</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">h</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">async</phrase><phrase role="special">(</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">move</phrase><phrase role="special">(</phrase> <phrase role="identifier">t</phrase><phrase role="special">),</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">as_sub_task</phrase><phrase role="special">()</phrase> <phrase role="special">)</phrase> <phrase role="special">);</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.utilities">
    <title><link linkend="boost_task.utilities"> Utilities</link></title>
    <para>
      <emphasis role="bold">Boost.Task</emphasis> provides some free-functions which
      can be used inside a <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code> to access some informations (like if
      the <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      runs in a <emphasis>thread-pool</emphasis>).
    </para>
    <anchor id="boost_task.utilities.reschedule_until"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.reschedule_until">reschedule_until</link>
    </bridgehead>
    <para>
      In the function <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">this_task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">reschedule_until</phrase><phrase role="special">(</phrase>
      <phrase role="identifier">Pred</phrase> <phrase role="keyword">const</phrase><phrase
      role="special">&amp;)</phrase></code> allows to synchronize the task with other
      asynchronous events without blocking the <emphasis>worker-threads</emphasis>
      (bool Pred::operator()() must not block). The current task will be rescheduled
      until the passed predicate becomes true.
    </para>
    <anchor id="boost_task.utilities.get_pool"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.get_pool">get_pool</link>
    </bridgehead>
    <para>
      The pool in which the current code (<code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code>) is executed can be accessed via <code><phrase
      role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">get_pool</phrase><phrase
      role="special">()</phrase></code>. If hte code is not executed by a <emphasis>worker-thread</emphasis>
      an assertion is raised.
    </para>
    <anchor id="boost_task.utilities.runs_in_pool"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.runs_in_pool">runs_in_pool</link>
    </bridgehead>
    <para>
      In order to check if the current code is executed in a <emphasis>thread-pool</emphasis>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">this_task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">runs_in_pool</phrase><phrase role="special">()</phrase></code>
      should be used.
    </para>
    <anchor id="boost_task.utilities.worker_id"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.worker_id">worker_id</link>
    </bridgehead>
    <para>
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">this_task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">worker_id</phrase><phrase role="special">()</phrase></code>
      returns the <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">thread</phrase><phrase role="special">::</phrase><phrase
      role="identifier">id</phrase></code> of the <emphasis>worker-thread</emphasis>
      executing the current <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase></code>.
    </para>
    <anchor id="boost_task.utilities.delay"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.delay">delay</link>
    </bridgehead>
    <para>
      The execution of a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      can be delayed for a time-duration or until a specific time-point with <code><phrase
      role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">this_task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">delay</phrase><phrase role="special">()</phrase></code>.
    </para>
    <anchor id="boost_task.utilities.yield"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.yield">yield</link>
    </bridgehead>
    <para>
      If a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      detects that it would bould block it can yield itself with <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">this_task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">yield</phrase><phrase role="special">()</phrase></code>
      so that the <emphasis>worker-thread</emphasis> can execute another <code><phrase
      role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">task</phrase></code> in
      the meantime.
    </para>
    <anchor id="boost_task.utilities.interrupt"/>
    <bridgehead renderas="sect3">
      <link linkend="boost_task.utilities.interrupt">interrupt</link>
    </bridgehead>
    <para>
      A <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase></code>
      can interrupt itself via <code><phrase role="identifier">boost</phrase><phrase
      role="special">::</phrase><phrase role="identifier">this_task</phrase><phrase
      role="special">::</phrase><phrase role="identifier">interrupt</phrase><phrase
      role="special">()</phrase></code>.
    </para>
  </section>
  <section id="boost_task.meta_functions">
    <title><link linkend="boost_task.meta_functions"> Meta functions</link></title>
    <para>
      If the <emphasis>thread-pool</emphasis> supports attributes (like priorities)
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">has_attribute</phrase></code>
      evaluates to <code><phrase role="keyword">true</phrase></code> at compile-time
      (derived from boost::mpl::bool_). The type of the attribute is determined by
      <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
      role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">attribute_type</phrase></code>.
    </para>
    <para>
      
<programlisting><phrase role="comment">// thread-pool with priority scheduling
</phrase><phrase role="comment">// type of priority is int
</phrase><phrase role="identifier">typdef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">unbounded_channel</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">priority</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="special">&gt;</phrase>
<phrase role="special">&gt;</phrase> <phrase role="identifier">pool_type</phrase><phrase role="special">;</phrase>

<phrase role="comment">// test if thread-pool supports priorities at compile time
</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">boolalpha</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">has_attribute</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">pool_type</phrase> <phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="string">&quot;\n&quot;</phrase><phrase role="special">;</phrase>

<phrase role="comment">// access the type used for priority
</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="keyword">typeid</phrase><phrase role="special">(</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">task</phrase><phrase role="special">::</phrase><phrase role="identifier">attribute_type</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">pool_type</phrase> <phrase role="special">&gt;::</phrase><phrase role="identifier">type</phrase><phrase role="special">).</phrase><phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
</programlisting>
    </para>
  </section>
  <section id="boost_task.reference">
    <title><link linkend="boost_task.reference"> Reference</link></title>
    <section id="boost_task.reference.task">
      <title><link linkend="boost_task.reference.task"> Class template <code><phrase
      role="identifier">task</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">task</phrase> <phrase role="special">:</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">noncopyable</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">task</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">R</phrase><phrase role="special">(</phrase> <phrase role="special">*</phrase> <phrase role="identifier">fn</phrase><phrase role="special">)());</phrase>

	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">A0</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">);</phrase>
	<phrase role="special">...</phrase>
	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="special">...,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">A9</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">,</phrase> <phrase role="special">...,</phrase> <phrase role="identifier">A9</phrase> <phrase role="identifier">a9</phrase><phrase role="special">);</phrase>

	<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">task</phrase> <phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase> <phrase role="identifier">task</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">);</phrase>
	<phrase role="identifier">task</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">move</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">shared_future</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">get_future</phrase><phrase role="special">();</phrase>

	<phrase role="keyword">void</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()();</phrase>

	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Cb</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">set_wait_callback</phrase><phrase role="special">(</phrase> <phrase role="identifier">Cb</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">cb</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified_bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.task.default_constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.default_constructor">Default constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs an unitialized <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase
            role="special">&gt;</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.constructor__function_pointer_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.constructor__function_pointer_">Constructor
        (function pointer)</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">R</phrase><phrase role="special">(</phrase> <phrase role="special">*</phrase> <phrase role="identifier">fn</phrase><phrase role="special">)());</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase></code>
            from a function pointer
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.constructor__functor_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.constructor__functor_">Constructor
        (functor)</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fn</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase></code>
            from a function object
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.constructor__functor_with_arguments_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.constructor__functor_with_arguments_">Constructor
        (functor with arguments)</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">A0</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">);</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="special">...,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">A9</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">,</phrase> <phrase role="special">...,</phrase> <phrase role="identifier">A9</phrase> <phrase role="identifier">a9</phrase><phrase role="special">);</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase></code>
            from a function object and its arguments
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.move_copy_constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.move_copy_constructor">Move-copy
        constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase> <phrase role="special">&amp;&amp;)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase></code>
            from another task taking over the ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.move_assignment_operator"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.move_assignment_operator">Move-assignment
        operator</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task</phrase> <phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase> <phrase role="identifier">task</phrase> <phrase role="special">&amp;&amp;)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">&lt;</phrase>
            <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase></code>
            from another task taking over the ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.member_function__code__phrase_role__identifier__move__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.member_function__code__phrase_role__identifier__move__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">move</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">move</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves task releasing the ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.member_function__code__phrase_role__identifier__get_future__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.member_function__code__phrase_role__identifier__get_future__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">get_future</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">shared_future</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">get_future</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns a future assiciated with the task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.member_function__code__phrase_role__keyword__operator__phrase__phrase_role__special________phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.member_function__code__phrase_role__keyword__operator__phrase__phrase_role__special________phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase><phrase role="special">()()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            executes task's internal function object
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.member_template_function__code__phrase_role__identifier__set_wait_callback__phrase__phrase_role__special_____phrase___phrase_role__identifier__cb__phrase___phrase_role__identifier__cons__phrase__phrase_role__special___amp____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.member_template_function__code__phrase_role__identifier__set_wait_callback__phrase__phrase_role__special_____phrase___phrase_role__identifier__cb__phrase___phrase_role__identifier__cons__phrase__phrase_role__special___amp____phrase___code_">Member
        template-function <code><phrase role="identifier">set_wait_callback</phrase><phrase
        role="special">(</phrase> <phrase role="identifier">Cb</phrase> <phrase role="identifier">cons</phrase><phrase
        role="special">&amp;)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Cb</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">set_wait_callback</phrase><phrase role="special">(</phrase> <phrase role="identifier">Cb</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">cb</phrase><phrase role="special">&amp;);</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            stores callback function object which will be called if task would block
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special_____phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special_____phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp____phrase___code_">Member
        function <code><phrase role="identifier">swap</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase>
        <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
        <phrase role="special">&amp;)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            swaps the task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.operator__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified_bool_type__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.operator__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified_bool_type__phrase__phrase_role__special______phrase___code_">operator
        <code><phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified_bool_type</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified_bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            is task valid == does task own ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.task.operator__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task.operator__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___code_">operator
        <code><phrase role="keyword">operator</phrase><phrase role="special">!()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            is task invalid == task does not have ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.handle">
      <title><link linkend="boost_task.reference.handle"> Class template <code><phrase
      role="identifier">handle</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">handle</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">handle</phrase>
<phrase role="special">{</phrase>
	<phrase role="identifier">handle</phrase><phrase role="special">();</phrase>

	<phrase role="keyword">void</phrase> <phrase role="identifier">interrupt</phrase><phrase role="special">();</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">interrupt_and_wait</phrase><phrase role="special">();</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">interrupt_and_wait_until</phrase><phrase role="special">(</phrase> <phrase role="identifier">system_time</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">abs_time</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Duration</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">interrupt_and_wait_for</phrase><phrase role="special">(</phrase> <phrase role="identifier">Duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rel_time</phrase><phrase role="special">);</phrase>
	<phrase role="keyword">bool</phrase> <phrase role="identifier">interruption_requested</phrase><phrase role="special">();</phrase>

	<phrase role="identifier">R</phrase> <phrase role="identifier">get</phrase><phrase role="special">();</phrase>
	<phrase role="keyword">bool</phrase> <phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">bool</phrase> <phrase role="identifier">has_value</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">bool</phrase> <phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
	<phrase role="keyword">void</phrase> <phrase role="identifier">wait</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

	<phrase role="identifier">shared_future</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">get_future</phrase><phrase role="special">();</phrase>

	<phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">friend</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">friend</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">);</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T4</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">friend</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t4</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t5</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">friend</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">friend</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">);</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T4</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">friend</phrase> <phrase role="keyword">unsigned</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t4</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t5</phrase><phrase role="special">);</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.handle.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">handle</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs an empty (invalid) handle
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__interruption_requested__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__interruption_requested__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">interruption_requested</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">interruption_requested</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            checks if interruption is already requested
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">interrupt</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">interrupt</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            requests task interruption; doesn not block (immediatly returns)
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt_and_wait__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt_and_wait__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">interrupt_and_wait</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">interrupt_and_wait</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            requests task interruption and blocks until worker-thread stops task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt_and_wait_until__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt_and_wait_until__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">interrupt_and_wait_until</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">interrupt_and_wait_until</phrase><phrase role="special">(</phrase> <phrase role="identifier">system_time</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">abs_time</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            requests task interruption and blocks until worker-thread stops task
            or time-point elapsed
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Returns:</term>
        <listitem>
          <para>
            false if the the time specified by abs_time was reached, true otherwise
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt_and_wait_for__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__interrupt_and_wait_for__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">interrupt_and_wait_for</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Duration</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">bool</phrase> <phrase role="identifier">interrupt_and_wait_for</phrase><phrase role="special">(</phrase> <phrase role="identifier">Duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rel_time</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            requests task interruption and blocks until worker-thread stops task
            or time-duration elapsed
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Returns:</term>
        <listitem>
          <para>
            false if the the time specified by rel_time was reached, true otherwise
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__get__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__get__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">get</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">R</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            requests the result
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task_uninialized</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">broken_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__wait__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__wait__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">wait</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">wait</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            blocks caller until task is done
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task_uninialized</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">broken_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__wait_for__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__wait_for__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">wait_for</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Duration</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">bool</phrase> <phrase role="identifier">wait_for</phrase><phrase role="special">(</phrase> <phrase role="identifier">Duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rel_time</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            blocks caller until task is done
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task_uninialized</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">broken_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__wait_until__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__wait_until__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">wait_until</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">wait_until</phrase><phrase role="special">(</phrase> <phrase role="identifier">system_time</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">abs_time</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            blocks caller until task is done
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task_uninialized</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">broken_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__is_ready__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__is_ready__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">is_ready</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            checks if task is done
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__has_value__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__has_value__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">has_value</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">has_value</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            checks if task is done and a result value is set
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__has_exception__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__has_exception__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">has_exception</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            checks if task is done and an exception is set
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__get_future__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__get_future__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">get_future</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">shared_future</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">get_future</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns a reference to the internal shared_future&lt; R &gt;
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.member_function__code__phrase_role__identifier__swap__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">swap</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            swapps handle
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.non_member_function__code__phrase_role__identifier__wait_for_all__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.non_member_function__code__phrase_role__identifier__wait_for_all__phrase__phrase_role__special______phrase___code_">Non-member
        function <code><phrase role="identifier">wait_for_all</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t4</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T4</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">waitfor_all</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t4</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t5</phrase><phrase role="special">);</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            waits for all handles to become ready
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task_rejected</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.handle.non_member_function__code__phrase_role__identifier__wait_for_any__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.handle.non_member_function__code__phrase_role__identifier__wait_for_any__phrase__phrase_role__special______phrase___code_">Non-member
        function <code><phrase role="identifier">wait_for_any</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">Iterator</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">unsigned</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">unsigned</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">unsigned</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t4</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T3</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T4</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">unsigned</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">waitfor_any</phrase><phrase role="special">(</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T1</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t1</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T2</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t2</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T3</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t3</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T4</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t4</phrase><phrase role="special">,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">T5</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">t5</phrase><phrase role="special">);</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            waits for any handle to become ready
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task_rejected</phrase></code>,
            <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
            role="identifier">bad_alloc</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.async">
      <title><link linkend="boost_task.reference.async"> Non-member function <code><phrase
      role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase
      role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="special">&amp;&amp;,</phrase> <phrase role="identifier">EP</phrase><phrase
      role="special">)</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">async</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">EP</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">,</phrase> <phrase role="identifier">EP</phrase> <phrase role="identifier">ep</phrase><phrase role="special">);</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves task to an asyncrounous executer and returns a handle associated
            with the task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.async1">
      <title><link linkend="boost_task.reference.async1"> Non-member function <code><phrase
      role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase
      role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="special">&amp;&amp;,</phrase> <phrase role="identifier">pool</phrase><phrase
      role="special">&lt;</phrase> <phrase role="identifier">Channel</phrase> <phrase
      role="special">&gt;</phrase> <phrase role="special">&amp;)</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">async</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Channel</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">,</phrase> <phrase role="identifier">pool</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">Channel</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">ep</phrase><phrase role="special">);</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves task into a thread-pool and returns a handle associated with the
            task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.async2">
      <title><link linkend="boost_task.reference.async2"> Non-member function <code><phrase
      role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase
      role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="special">&amp;&amp;,</phrase> <phrase role="identifier">Attr</phrase><phrase
      role="special">,</phrase> <phrase role="identifier">pool</phrase><phrase role="special">&lt;</phrase>
      <phrase role="identifier">Channel</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="special">&amp;)</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">async</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Channel</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Attr</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">async</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">,</phrase> <phrase role="identifier">Attr</phrase> <phrase role="identifier">attr</phrase><phrase role="special">,</phrase> <phrase role="identifier">pool</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">Channel</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">ep</phrase><phrase role="special">);</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves attributed task into a thread-pool and returns a handle associated
            with the task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.own_thread">
      <title><link linkend="boost_task.reference.own_thread"> Class <code><phrase
      role="identifier">own_thread</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">async</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">own_thread</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.own_thread.member_function__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.own_thread.member_function__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase><phrase role="special">()(</phrase>
        <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase>
        <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
        <phrase role="special">&amp;&amp;)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves task in the current thread an returns an handle associated with
            the task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.new_thread">
      <title><link linkend="boost_task.reference.new_thread"> Class <code><phrase
      role="identifier">new_thread</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">async</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">new_thread</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.new_thread.member_function__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.new_thread.member_function__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase><phrase role="special">()(</phrase>
        <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase>
        <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
        <phrase role="special">&amp;&amp;)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves task in a new thread an returns an handle associated with the task
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.static_pool">
      <title><link linkend="boost_task.reference.static_pool"> Class template <code><phrase
      role="identifier">static_pool</phrase></code></link></title>
      <para>
        
<programlisting>	<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

	<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Channel</phrase> <phrase role="special">&gt;</phrase>
	<phrase role="keyword">class</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">:</phrase> <phrase role="keyword">private</phrase> <phrase role="identifier">noncopyable</phrase>
	<phrase role="special">{</phrase>
	<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
		<phrase role="identifier">static_pool</phrase><phrase role="special">();</phrase>

		<phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">poolsize</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">psize</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">microseconds</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

		<phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
			<phrase role="identifier">poolsize</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">psize</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">milliseconds</phrase><phrase role="special">(</phrase> <phrase role="number">100</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

		<phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;&amp;);</phrase>

		<phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;&amp;);</phrase>

<phrase role="preprocessor"># if</phrase> <phrase role="identifier">defined</phrase><phrase role="special">(</phrase><phrase role="identifier">BOOST_HAS_PROCESSOR_BINDINGS</phrase><phrase role="special">)</phrase>
		<phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
			<phrase role="special">&lt;&lt;</phrase><phrase role="identifier">unspec</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">&gt;&gt;,</phrase>
			<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">microseconds</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>

		<phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
			<phrase role="special">&lt;&lt;</phrase><phrase role="identifier">unspec</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">&gt;&gt;,</phrase>
			<phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase role="special">,</phrase>
			<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">milliseconds</phrase><phrase role="special">(</phrase> <phrase role="number">100</phrase><phrase role="special">),</phrase>
			<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">);</phrase>
			
		<phrase role="keyword">static</phrase> <phrase role="special">&lt;&lt;</phrase><phrase role="identifier">unspec</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">&gt;&gt;</phrase> <phrase role="identifier">bind_to_processors</phrase><phrase role="special">();</phrase>
<phrase role="preprocessor"># endif</phrase>

		<phrase role="special">~</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">();</phrase>

		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">size</phrase><phrase role="special">();</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">active</phrase><phrase role="special">();</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">idle</phrase><phrase role="special">();</phrase>

		<phrase role="keyword">void</phrase> <phrase role="identifier">shutdown</phrase><phrase role="special">();</phrase>
		<phrase role="keyword">void</phrase> <phrase role="identifier">shutdown_now</phrase><phrase role="special">();</phrase>

		<phrase role="keyword">void</phrase> <phrase role="identifier">interrupt_all_worker</phrase><phrase role="special">();</phrase>

		<phrase role="keyword">bool</phrase> <phrase role="identifier">closed</phrase><phrase role="special">();</phrase>
		<phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">();</phrase>
		<phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">();</phrase>
		<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">pending</phrase><phrase role="special">();</phrase>

		<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">upper_bound</phrase><phrase role="special">();</phrase>
		<phrase role="keyword">void</phrase> <phrase role="identifier">upper_bound</phrase><phrase role="special">(</phrase> <phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase role="special">);</phrase>
		<phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">lower_bound</phrase><phrase role="special">();</phrase>
		<phrase role="keyword">void</phrase> <phrase role="identifier">lower_bound</phrase><phrase role="special">(</phrase> <phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase role="special">);</phrase>

		<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
		<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">submit</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">);</phrase>

		<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Attr</phrase> <phrase role="special">&gt;</phrase>
		<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">submit</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">,</phrase> <phrase role="identifier">Attr</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">);</phrase>

		<phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

		<phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified_bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
		<phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
	<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.static_pool.default_constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.default_constructor">Default
        constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">static_pool</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs an unitialized pool
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.constructor__unbounded_channel_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.constructor__unbounded_channel_">Constructor
        (unbounded channel)</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
	<phrase role="special">&lt;&lt;</phrase><phrase role="identifier">unspec</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">&gt;&gt;,</phrase>
	<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">microseconds</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            operating system provides functionality for processor binding
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a pool - for each processor a worker-thread is created and
            bound to one processor - global-queue can queue an unlimited number of
            tasks
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>, <code><phrase
            role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_scanns</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">invalid_timeduration</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            constructor has to be called if a unbounded-channel is used and <code><phrase
            role="identifier">bind_to_processors</phrase><phrase role="special">()</phrase></code>
            must be set as first argument
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.constructor__unbounded_channel_poolsize_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.constructor__unbounded_channel_poolsize_">Constructor
        (unbounded channel/poolsize)</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">poolsize</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">psize</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">microseconds</phrase><phrase role="special">(</phrase> <phrase role="number">10</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a pool containing psize worker-threads - global-queue can
            queue an unlimited number of tasks
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>, <code><phrase
            role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_scanns</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">invalid_timeduration</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            constructor has to be called if a unbounded-channel is used
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.constructor__bounded_channel_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.constructor__bounded_channel_">Constructor
        (bounded channel)</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
	<phrase role="special">&lt;&lt;</phrase><phrase role="identifier">unspec</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">&gt;&gt;,</phrase>
	<phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">milliseconds</phrase><phrase role="special">(</phrase> <phrase role="number">100</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            operating system provides functionality for processor binding
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a pool - for each processor a worker-thread is created and
            bound to one processor - global-queue can only queue a limited number
            of tasks
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>, <code><phrase
            role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_scanns</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">invalid_timeduration</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            constructor has to be called if a bounded-channel is used and <code><phrase
            role="identifier">bind_to_processors</phrase><phrase role="special">()</phrase></code>
            must be set as first argument
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.constructor__bounded_channel_poolsize_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.constructor__bounded_channel_poolsize_">Constructor
        (bounded channel/poolsize)</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase>
	<phrase role="identifier">poolsize</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">psize</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase role="special">,</phrase>
	<phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">time_duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">asleep</phrase> <phrase role="special">=</phrase> <phrase role="identifier">posix_time</phrase><phrase role="special">::</phrase><phrase role="identifier">milliseconds</phrase><phrase role="special">(</phrase> <phrase role="number">100</phrase><phrase role="special">),</phrase>
	<phrase role="identifier">scanns</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">scns</phrase> <phrase role="special">=</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase> <phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a pool containing psize worker-threads - global-queue can
            only queue a limited number of tasks
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_resource_error</phrase></code>, <code><phrase
            role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_scanns</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">invalid_timeduration</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            constructor has to be called if a bounded-channel is used
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.move_copy_constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.move_copy_constructor">Move-copy
        constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">static_pool</phrase><phrase role="special">(</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;&amp;)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            creates an pool out of another one which gets zeroed out
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.move_assigment_constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.move_assigment_constructor">Move-assigment
        constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;&amp;)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            creates an pool out of another one which gets zeroed out
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.destructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.destructor">Destructor</link>
      </bridgehead>
      
<programlisting><phrase role="special">~</phrase><phrase role="identifier">static_pool</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            calls <code><phrase role="identifier">shutdown</phrase><phrase role="special">()</phrase></code>
            if not already called
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.static_member_function__code__phrase_role__identifier__bind_to_processors__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.static_member_function__code__phrase_role__identifier__bind_to_processors__phrase__phrase_role__special______phrase___code_">Static
        member function <code><phrase role="identifier">bind_to_processors</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="special">&lt;&lt;</phrase><phrase role="identifier">unspec</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">&gt;&gt;</phrase> <phrase role="identifier">bind_to_processors</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            used in order to let the pool create worker-threads as cores are available
            and bound the threads to the cores
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__size__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__size__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">size</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">size</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns how many worker-threads are running in the pool
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__active__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__active__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">active</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">active</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns how many worker-threads are active (executing an task)
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__idle__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__idle__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">idle</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">idle</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns how many worker-threads are idle (not executing an task).
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            the value is the difference of <code><phrase role="identifier">size</phrase><phrase
            role="special">()</phrase></code> and <code><phrase role="identifier">active</phrase><phrase
            role="special">()</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__shutdown__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__shutdown__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">shutdown</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">shutdown</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            deactivates the channel and joins all worker-threads - the pool is closed
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">system</phrase><phrase
            role="special">::</phrase><phrase role="identifier">system_error</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            all pending tasks are processed
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__shutdown_now__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__shutdown_now__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">shutdown_now</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">shutdown_now</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            deactivates the channel, send interruption request to all worker-threads
            and joins them - the pool is closed
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_interrupted</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">system</phrase><phrase
            role="special">::</phrase><phrase role="identifier">system_error</phrase></code>,
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            pending tasks are not processed but returned
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__interrupt_all_worker__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__interrupt_all_worker__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">interrupt_all_worker</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">interrupt_all_worker</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            interrupts all worker-threads without invalidating the pool
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__closed__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__closed__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">closed</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">closed</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            queries if the pool is closed (pool is shutdown)
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__clear__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__clear__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">clear</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            removes all pending tasks from the channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__empty__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__empty__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">empty</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">empty</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            queries if the channel is empty
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__pending__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__pending__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">pending</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">pending</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            queries how many tasks are pending (still unprocessed) in the global-queue
            (channel)
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__upper_bound__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__upper_bound__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">upper_bound</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">upper_bound</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            channel is of type bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns the upper bound of the bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            can only be used if a bounded-channel is used
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__upper_bound__phrase__phrase_role__special_____phrase___phrase_role__identifier__high_watermark__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__hwm__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__upper_bound__phrase__phrase_role__special_____phrase___phrase_role__identifier__high_watermark__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__hwm__phrase__phrase_role__special_____phrase___code_">Member
        function <code><phrase role="identifier">upper_bound</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase
        role="special">)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">upper_bound</phrase><phrase role="special">(</phrase> <phrase role="identifier">high_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">hwm</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            channel is of type bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            sets the upper bound of the bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Postconditions:</term>
        <listitem>
          <para>
            <code><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase
            role="identifier">upper_bound</phrase><phrase role="special">()</phrase>
            <phrase role="special">==</phrase> <phrase role="identifier">hwm</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            can only be used if a bounded-channel is used
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__lower_bound__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__lower_bound__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="identifier">lower_bound</phrase><phrase role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">lower_bound</phrase><phrase role="special">();</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            channel is of type bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns the lower bound of the bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            can only be used if a bounded-channel is used
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__lower_bound__phrase__phrase_role__special_____phrase___phrase_role__identifier__low_watermark__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__lwm__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__lower_bound__phrase__phrase_role__special_____phrase___phrase_role__identifier__low_watermark__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__lwm__phrase__phrase_role__special_____phrase___code_">Member
        function <code><phrase role="identifier">lower_bound</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase
        role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase
        role="special">)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">lower_bound</phrase><phrase role="special">(</phrase> <phrase role="identifier">low_watermark</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lwm</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            channel is of type bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            sets the lower bound of the bounded-channel
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Postconditions:</term>
        <listitem>
          <para>
            <code><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase
            role="identifier">lower_bound</phrase><phrase role="special">()</phrase>
            <phrase role="special">==</phrase> <phrase role="identifier">lwm</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Notes:</term>
        <listitem>
          <para>
            can only be used if a bounded-channel is used
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__submit__phrase__phrase_role__special_____phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__submit__phrase__phrase_role__special_____phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___code_">Member
        function <code><phrase role="identifier">submit</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase>
        <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
        <phrase role="special">&amp;&amp;)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">submit</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            has_attribute&lt; pool &gt;::value == false &amp;&amp; ! closed()
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves an task to the pool and returns an associated handle
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__submit__phrase__phrase_role__special_____phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___phrase_role__identifier__attr__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function__code__phrase_role__identifier__submit__phrase__phrase_role__special_____phrase___phrase_role__identifier__task__phrase__phrase_role__special___lt___phrase___phrase_role__identifier__r__phrase___phrase_role__special___gt___phrase___phrase_role__special___amp__amp____phrase___phrase_role__identifier__attr__phrase___phrase_role__keyword__const__phrase__phrase_role__special___amp___phrase___phrase_role__identifier__attr__phrase__phrase_role__special_____phrase___code_">Member
        function <code><phrase role="identifier">submit</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase>
        <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase>
        <phrase role="special">&amp;&amp;,</phrase> <phrase role="identifier">Attr</phrase>
        <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase>
        <phrase role="identifier">attr</phrase><phrase role="special">)</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Attr</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">submit</phrase><phrase role="special">(</phrase> <phrase role="identifier">task</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">R</phrase> <phrase role="special">&gt;</phrase> <phrase role="special">&amp;&amp;</phrase> <phrase role="identifier">t</phrase><phrase role="special">,</phrase> <phrase role="identifier">Attr</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            has_attribute&lt; pool &gt;::value == true &amp;&amp; ! closed()
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            moves an task to the pool and returns an associated handle - task is
            scheduled by the attribute
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">task</phrase><phrase
            role="special">::</phrase><phrase role="identifier">pool_moved</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.member_function_swap__static_pool__amp___"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.member_function_swap__static_pool__amp___">Member
        function swap( static_pool &amp;)`</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">swap</phrase><phrase role="special">(</phrase> <phrase role="identifier">static_pool</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            swaps pool
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.operator__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified_bool_type__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.operator__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__unspecified_bool_type__phrase__phrase_role__special______phrase___code_">operator
        <code><phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified_bool_type</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">unspecified_bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            is static_pool valid == does static_pool own ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.static_pool.operator__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.static_pool.operator__code__phrase_role__keyword__operator__phrase__phrase_role__special_______phrase___code_">operator
        <code><phrase role="keyword">operator</phrase><phrase role="special">!()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            is static_pool invalid == static_pool does not have ownership
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.reschedule_until">
      <title><link linkend="boost_task.reference.reschedule_until"> Non-member function
      <code><phrase role="identifier">reschedule_until</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Pred</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">reschedule_until</phrase><phrase role="special">(</phrase> <phrase role="identifier">Pred</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            reschedules current task until passed callable predicate becomes ready
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">thread_interrupted</phrase></code>,<code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">system</phrase><phrase
            role="special">::</phrase><phrase role="identifier">system_error</phrase></code>
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.get_pool">
      <title><link linkend="boost_task.reference.get_pool"> Non-member function
      <code><phrase role="identifier">get_pool</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Pool</phrase> <phrase role="special">&gt;</phrase>
<phrase role="identifier">Pool</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">get_pool</phrase><phrase role="special">()</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns reference to the thread-pool where the current worker thread
            is executed
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.runs_in_pool">
      <title><link linkend="boost_task.reference.runs_in_pool"> Non-member function
      <code><phrase role="identifier">runs_in_pool</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">bool</phrase> <phrase role="identifier">runs_in_pool</phrase><phrase role="special">()</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns true if the current task is executed in a thread-pool
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.worker_id">
      <title><link linkend="boost_task.reference.worker_id"> Non-member function
      <code><phrase role="identifier">worker_id</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="identifier">id</phrase> <phrase role="identifier">worker_id</phrase><phrase role="special">()</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns returns the thread-id of the worker-thread
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.delay">
      <title><link linkend="boost_task.reference.delay"> Non-member function <code><phrase
      role="identifier">delay</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">delay</phrase><phrase role="special">(</phrase> <phrase role="identifier">system_time</phrase> <phrase role="identifier">abs_time</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Duration</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">delay</phrase><phrase role="special">(</phrase> <phrase role="identifier">Duration</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rel_time</phrase><phrase role="special">)</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            delays the execution of the current task so that the worker-thread can
            process another task in the meantime
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.yield">
      <title><link linkend="boost_task.reference.yield"> Non-member function <code><phrase
      role="identifier">yield</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">yield</phrase><phrase role="special">()</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            yields the current task so that the worker-threadcan process another
            task in the meantime
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.interrupt">
      <title><link linkend="boost_task.reference.interrupt"> Non-member function
      <code><phrase role="identifier">interrupt</phrase><phrase role="special">()</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">interrupt</phrase><phrase role="special">()</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            task can request interruption for itself
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Note:</term>
        <listitem>
          <para>
            this function resides in namespace <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">this_task</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.has_attribute">
      <title><link linkend="boost_task.reference.has_attribute"> Meta function <code><phrase
      role="identifier">has_attribute</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">meta</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Pool</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">has_attribute</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">bool_</phrase><phrase role="special">&lt;</phrase>
	<phrase role="identifier">is_same</phrase><phrase role="special">&lt;</phrase>
		<phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">has_priority</phrase><phrase role="special">,</phrase>
		<phrase role="keyword">typename</phrase> <phrase role="identifier">Pool</phrase><phrase role="special">::</phrase><phrase role="identifier">scheduler_type</phrase><phrase role="special">::</phrase><phrase role="identifier">priority_tag_type</phrase>
	<phrase role="special">&gt;::</phrase><phrase role="identifier">value</phrase>
<phrase role="special">&gt;</phrase>
<phrase role="special">{};</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns true if Pool supports attributes (priority-scheduling)
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.attribute_type">
      <title><link linkend="boost_task.reference.attribute_type"> Meta function
      <code><phrase role="identifier">attribute_type</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">meta</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Pool</phrase> <phrase role="special">&gt;</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">attribute_type</phrase>
<phrase role="special">{</phrase>
	<phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Pool</phrase><phrase role="special">::</phrase><phrase role="identifier">scheduler_type</phrase><phrase role="special">::</phrase><phrase role="identifier">attribute_type</phrase>   <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns type of attribute
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.poolsize">
      <title><link linkend="boost_task.reference.poolsize"> Class <code><phrase role="identifier">poolsize</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">poolsize</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">poolsize</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">explicit</phrase> <phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.poolsize.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.poolsize.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">poolsize</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            value &gt; 0
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">poolsize</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Postconditions:</term>
        <listitem>
          <para>
            operator std::size_t () &gt; 0
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_poolsize</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.poolsize.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.poolsize.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase
        role="special">::</phrase><phrase role="identifier">size_t</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns the value
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.high_watermark">
      <title><link linkend="boost_task.reference.high_watermark"> Class <code><phrase
      role="identifier">high_watermark</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">watermark</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">high_watermark</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">explicit</phrase> <phrase role="identifier">high_watermark</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.high_watermark.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.high_watermark.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">high_watermark</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">tp</phrase><phrase role="special">::</phrase><phrase
            role="identifier">high_watermark</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.high_watermark.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.high_watermark.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase
        role="special">::</phrase><phrase role="identifier">size_t</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns high watermark
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.low_watermark">
      <title><link linkend="boost_task.reference.low_watermark"> Class <code><phrase
      role="identifier">low_watermark</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">watermark</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">low_watermark</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">explicit</phrase> <phrase role="identifier">low_watermark</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.low_watermark.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.low_watermark.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">low_watermark</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">low_watermark</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.low_watermark.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.low_watermark.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase
        role="special">::</phrase><phrase role="identifier">size_t</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns low watermark
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.scanns">
      <title><link linkend="boost_task.reference.scanns"> Class <code><phrase role="identifier">scanns</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">scanns</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">scanns</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="keyword">explicit</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>

	<phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.scanns.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.scanns.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">scanns</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Preconditions:</term>
        <listitem>
          <para>
            value &gt; 0
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">scanns</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Postconditions:</term>
        <listitem>
          <para>
            operator std::size_t () &gt; 0
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_poolsize</phrase></code>
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
      <anchor id="boost_task.reference.scanns.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.scanns.member_function__code__phrase_role__keyword__operator__phrase___phrase_role__identifier__std__phrase__phrase_role__special______phrase__phrase_role__identifier__size_t__phrase__phrase_role__special______phrase___code_">Member
        function <code><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase
        role="special">::</phrase><phrase role="identifier">size_t</phrase><phrase
        role="special">()</phrase></code></link>
      </bridgehead>
      
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            returns the value
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            Nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.invalid_poolsize">
      <title><link linkend="boost_task.reference.invalid_poolsize"> Class <code><phrase
      role="identifier">invalid_poolsize</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">invalid_poolsize</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">invalid_argument</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">invalid_poolsize</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.invalid_poolsize.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.invalid_poolsize.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">invalid_poolsize</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">);</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_poolsize</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.invalid_scanns">
      <title><link linkend="boost_task.reference.invalid_scanns"> Class <code><phrase
      role="identifier">invalid_scanns</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">invalid_scanns</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">invalid_argument</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">invalid_scanns</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.invalid_scanns.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.invalid_scanns.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">invalid_scanns</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_scanns</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.invalid_timeduration">
      <title><link linkend="boost_task.reference.invalid_timeduration"> Class <code><phrase
      role="identifier">invalid_timeduration</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">invalid_timeduration</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">invalid_argument</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">invalid_timeduration</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.invalid_timeduration.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.invalid_timeduration.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">invalid_timeduration</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_timeduration</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.invalid_watermark">
      <title><link linkend="boost_task.reference.invalid_watermark"> Class <code><phrase
      role="identifier">invalid_watermark</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">invalid_watermark</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">invalid_argument</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">invalid_watermark</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.invalid_watermark.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.invalid_watermark.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">invalid_watermark</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">invalid_watermark</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.task_rejected">
      <title><link linkend="boost_task.reference.task_rejected"> Class <code><phrase
      role="identifier">task_rejected</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">task_rejected</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">runtime_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">task_rejected</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.task_rejected.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task_rejected.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task_rejected</phrase><phrase role="special">(</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">msg</phrase><phrase role="special">)</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_rejected</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.task_unitialized">
      <title><link linkend="boost_task.reference.task_unitialized"> Class <code><phrase
      role="identifier">task_unitialized</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">task_unitialized</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">logic_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">task_unitialized</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.task_unitialized.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task_unitialized.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task_unitialized</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_unitialized</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.task_already_executed">
      <title><link linkend="boost_task.reference.task_already_executed"> Class <code><phrase
      role="identifier">task_already_executed</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">task_already_executed</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">logic_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">task_already_executed</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.task_already_executed.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task_already_executed.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task_already_executed</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_already_executed</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.task_moved">
      <title><link linkend="boost_task.reference.task_moved"> Class <code><phrase
      role="identifier">task_moved</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">task_moved</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">logic_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">task_moved</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.task_moved.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task_moved.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task_moved</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_moved</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.broken_task">
      <title><link linkend="boost_task.reference.broken_task"> Class <code><phrase
      role="identifier">broken_task</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">broken_task</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">logic_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">broken_task</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.broken_task.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.broken_task.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">broken_task</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">broken_task</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.task_interrupted">
      <title><link linkend="boost_task.reference.task_interrupted"> Class <code><phrase
      role="identifier">task_interrupted</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">task_interrupted</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">runtime_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">task_interrupted</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.task_interrupted.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.task_interrupted.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">task_interrupted</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task_interrupted</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="boost_task.reference.pool_moved">
      <title><link linkend="boost_task.reference.pool_moved"> Class <code><phrase
      role="identifier">pool_moved</phrase></code></link></title>
      <para>
        
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">task</phrase><phrase role="special">/</phrase><phrase role="identifier">exceptions</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">pool_moved</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">logic_error</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
	<phrase role="identifier">pool_moved</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </para>
      <anchor id="boost_task.reference.pool_moved.constructor"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.reference.pool_moved.constructor">Constructor</link>
      </bridgehead>
      
<programlisting><phrase role="identifier">pool_moved</phrase><phrase role="special">()</phrase>
</programlisting>
      <variablelist>
        <title></title> <varlistentry><term>Effects:</term>
        <listitem>
          <para>
            constructs a <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">task</phrase><phrase role="special">::</phrase><phrase
            role="identifier">pool_moved</phrase></code> instance
          </para>
        </listitem>
        </varlistentry> <varlistentry><term>Throws:</term>
        <listitem>
          <para>
            nothing
          </para>
        </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section id="boost_task.appendices">
    <title><link linkend="boost_task.appendices">Appendices</link></title>
    <section id="boost_task.appendices.todo">
      <title><link linkend="boost_task.appendices.todo"> Appendix A: Future development</link></title>
      <anchor id="boost_task.appendices.todo.dynamic_thread_pool"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.appendices.todo.dynamic_thread_pool">Dynamic thread-pool</link>
      </bridgehead>
      <itemizedlist>
        <listitem>
          <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
          role="identifier">task</phrase><phrase role="special">::</phrase><phrase
          role="identifier">dynamic_pool</phrase></code> adds or removes <emphasis>worker-threads</emphasis>
          from the <emphasis>thread-pool</emphasis> depending on the work-load (undersubscription/
          oversubscription).
        </listitem>
      </itemizedlist>
      <anchor id="boost_task.appendices.todo.communication_and_synchronisation_abstractions"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.appendices.todo.communication_and_synchronisation_abstractions">Communication
        and synchronisation abstractions</link>
      </bridgehead>
      <itemizedlist>
        <listitem>
          <emphasis role="bold">Event variable</emphasis>: A event variable is a
          bivalued variable (up/down) on which a task can wait for an event to be
          set or reset. The calling task will be suspended until the state of the
          event variable is that required by the caller.
        </listitem>
        <listitem>
          <emphasis role="bold">Buffer</emphasis>: A bounded/unbounded buffer is
          shared between several tasks. The data must be placed in, and retrieved
          from, the buffer under mutual exclusion. Condition synchronisation is required
          because a calling task attempting to place data into the buffer. When the
          buffer is full, the task must be suspended until there is space int the
          buffer. Also a retrieving task must be suspended when the buffer is empty.
          The data, once read, is destroyed.
        </listitem>
        <listitem>
          <emphasis role="bold">Multicast</emphasis>: The data is sent to a specific
          group of tasks and all tasks in the group should receive the data. Only
          when all tasks have received one item of data then another item is allowed
          to be transmitted.
        </listitem>
        <listitem>
          <emphasis role="bold">Rendezvous</emphasis>: A rendezvous uses direct naming
          and synchronous communication between tasks. One task that executes its
          command first will be delayed until the other tasks is ready to rendezvous.
        </listitem>
        <listitem>
          <emphasis role="bold">Protected resource</emphasis>: A protected resource
          is a passive entity that controls access to the internal states (to the
          controled real resources).
        </listitem>
        <listitem>
          <emphasis role="bold">Task groups</emphasis>: A task group defines a graph
          of interdependent tasks that can mostly be run in parallel. The tasks in
          the group have dependencies or communicate with each other.
        </listitem>
      </itemizedlist>
      <anchor id="boost_task.appendices.todo.interdepended_task"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.appendices.todo.interdepended_task">Interdepended
        task</link>
      </bridgehead>
      <itemizedlist>
        <listitem>
          With special support of concurrence and synchronisation abstractions interdepended
          tasks work in <emphasis>thread-pools</emphasis> without deadlocking the
          pool.
        </listitem>
      </itemizedlist>
      <anchor id="boost_task.appendices.todo.optimizations"/>
      <bridgehead renderas="sect4">
        <link linkend="boost_task.appendices.todo.optimizations">Optimizations</link>
      </bridgehead>
      <itemizedlist>
        <listitem>
          two-lock-queue as global queue in <emphasis>thread-pool</emphasis>
        </listitem>
        <listitem>
          maybe lock-free-queue as global queue too (how to provide the scheduling
          policies fifo, priority, smart?)
        </listitem>
      </itemizedlist>
    </section>
    <section id="boost_task.appendices.acknowledgements">
      <title><link linkend="boost_task.appendices.acknowledgements"> Appendix B:
      Acknowledgments</link></title>
      <para>
        I'd like to thank Vicente J. Botet Escriba for his comments and contributions
        (this_task::reschedule_until, this_task::delay, this_task::yield) as well
        Anthony Williams and Braddock Gaskill for their future libraries.
      </para>
    </section>
  </section>
</library>
