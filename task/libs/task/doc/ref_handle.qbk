[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:handle Class template `handle`]

``
	#include <boost/task/handle.hpp>

	template< typename R >
	class handle
	{
		handle();

		const id get_id() const;

		void interrupt();

		void interrupt_and_wait();

		void interrupt_and_wait_until( system_time const& abs_time);

		template< typename Duration >
		void interrupt_and_wait_for( Duration const& rel_time);

		bool interruption_requested();

		R get();

		bool is_ready() const;

		bool has_value() const;

		bool has_exception() const;

		void wait() const;

		shared_future< R > & get_future();

		void swap( handle< R > & other);
	};
``

[section:constructor Constructor]

	handle()

[variablelist
[[Effects:] [constructs an empty (invalid) handle]]
[[Throws:] [Nothing]]
]
[endsect]


[section:get_id Member function `get_id()`]

	const id get_id() const

[variablelist
[[Effects:] [returns identifier of the associated task]]
[[Throws:] [Nothing]]
]
[endsect]


[section:interruption_requested Member function `interruption_requested()`]

	bool interruption_requested()

[variablelist
[[Effects:] [checks if interruption is already requested]]
[[Throws:] [Nothing]]
]
[endsect]


[section:interrupt Member function `interrupt()`]

	void interrupt()

[variablelist
[[Effects:] [requests task interruption; doesn not block (immediatly returns)]]
[[Throws:] [???]]
]
[endsect]


[section:interrupt_and_wait Member function `interrupt_and_wait()`]

	void interrupt_and_wait()

[variablelist
[[Effects:] [requests task interruption and blocks until worker-thread stops task]]
[[Throws:] [???]]
]
[endsect]


[section:interrupt_and_wait_until Member function `interrupt_and_wait_until()`]

	void interrupt_and_wait_until( system_time const& abs_time)

[variablelist
[[Effects:] [requests task interruption and blocks until worker-thread stops task or time-point elapsed]]
[[Throws:] [???]]
]
[endsect]


[section:interrupt_and_wait_for Member function `interrupt_and_wait_for()`]

	template< typename Duration >
	void interrupt_and_wait_for( Duration const& rel_time)

[variablelist
[[Effects:] [requests task interruption and blocks until worker-thread stops task or time-duration elapsed]]
[[Throws:] [???]]
]
[endsect]


[section:get Member function `get()`]

	R get()

[variablelist
[[Effects:] [requests the result]]
[[Throws:] [task_interrupted, task_uninialized]]
]
[endsect]


[section:wait Member function `wait()`]

	void wait()

[variablelist
[[Effects:] [blocks caller until task is done]]
[[Throws:] [task_interrupted, task_uninialized]]
]
[endsect]


[section:is_ready Member function `is_ready()`]

	bool is_ready()

[variablelist
[[Effects:] [checks if task is done]]
[[Throws:] [Nothing]]
]
[endsect]


[section:has_value Member function `has_value()`]

	bool has_value()

[variablelist
[[Effects:] [checks if task is done and a result value is set]]
[[Throws:] [Nothing]]
]
[endsect]


[section:has_exception Member function `has_exception()`]

	bool has_exception()

[variablelist
[[Effects:] [checks if task is done and an exception is set]]
[[Throws:] [Nothing]]
]
[endsect]


[section:get_future Member function `get_future()`]

	shared_future< R > & get_future()

[variablelist
[[Effects:] [returns a reference to the internal shared_future< R >]]
[[Throws:] [Nothing]]
]
[endsect]


[section:swap Member function `swap()`]

	void swap( handle< R > & other)

[variablelist
[[Effects:] [swapps handle]]
[[Throws:] [Nothing]]
]
[endsect]


[endsect]
