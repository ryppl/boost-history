// Boost.Print library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#include "TestClassesAndConstants.h"

BOOST_AUTO_TEST_CASE( TestSetGetFloat )
{
    TestPropertyGroup testGroup;
    
	float fValue;
	set_as_string( PROPERTY_FLOAT_1, PROPERTY_FLOAT_1_STRING_VALUE );
	BOOST_CHECK( from_string<float>(fValue, get_as_string(PROPERTY_FLOAT_1), std::dec) );
	CHECK_CLOSE( PROPERTY_FLOAT_1_VALUE, fValue, 0.01f );
}

BOOST_AUTO_TEST_CASE( TestSetGetFloatVar )
{
    TestPropertyGroup testGroup;
    
	float fValue;
	set_as_string( PROPERTY_FLOAT_1_VAR, PROPERTY_FLOAT_1_STRING_VALUE );
	BOOST_CHECK( from_string<float>(fValue, get_as_string(PROPERTY_FLOAT_1_VAR), std::dec) );
	CHECK_CLOSE( PROPERTY_FLOAT_1_VALUE, fValue, 0.01f );
}

BOOST_AUTO_TEST_CASE( TestFloatPropertyType )
{
    TestPropertyGroup_4 testGroup;
    
    BOOST_CHECK( typeid(bool) != GetTypeInfo(PROPERTY_FLOAT_1) );
    BOOST_CHECK( typeid(int) != GetTypeInfo(PROPERTY_FLOAT_1) );
    BOOST_CHECK( typeid(float) == GetTypeInfo(PROPERTY_FLOAT_1) );
    BOOST_CHECK( typeid(double) != GetTypeInfo(PROPERTY_FLOAT_1) );
    BOOST_CHECK( typeid(std::string) != GetTypeInfo(PROPERTY_FLOAT_1) );

	const FloatEditor *pEditor = dynamic_cast<const FloatEditor*>(get_metadata( PROPERTY_FLOAT_1 ));
	BOOST_CHECK( get_metadata(PROPERTY_FLOAT_1)->getEditorPropertyType() == FloatType );
}

BOOST_AUTO_TEST_CASE( TestFloatGetControlType )
{
    TestPropertyGroup_4 testGroup;
    
	const FloatEditor *pEditor = dynamic_cast<const FloatEditor*>(get_metadata( PROPERTY_FLOAT_1 ));
	BOOST_CHECK( pEditor->GetControlType() == EditBox );
}

BOOST_AUTO_TEST_CASE( TestFloatGetUIOverrideType )
{
    TestPropertyGroup_4 testGroup;
    
	const FloatEditor *pEditor = dynamic_cast<const FloatEditor*>(get_metadata( PROPERTY_FLOAT_2 ));
	BOOST_CHECK( pEditor->GetControlType() == Tracker );
}

BOOST_AUTO_TEST_CASE( TestFloatHighLowIncrement )
{
    TestPropertyGroup_4 testGroup;
    
	const FloatEditor *pEditor = dynamic_cast<const FloatEditor*>(get_metadata( PROPERTY_FLOAT_2 ));
	CHECK_CLOSE( FLOAT_LOW, pEditor->getLowRange(), 0.01f );
	CHECK_CLOSE( FLOAT_HIGH, pEditor->getHighRange(), 0.01f );
	CHECK_CLOSE( FLOAT_INCREMENT, pEditor->getIncrement(), 0.01f );
}

BOOST_AUTO_TEST_CASE( TestFloatGetRange )
{
    TestPropertyGroup_4 testGroup;
    
	const FloatEditor *pEditor = dynamic_cast<const FloatEditor*>(get_metadata( PROPERTY_FLOAT_2 ));
	BOOST_CHECK( pEditor->UseRange() == true );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerFloat )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = get_metadata(PROPERTY_FLOAT_1);
	BOOST_CHECK( NULL != dynamic_cast<const FloatEditor*>(pEditor) );
}

BOOST_AUTO_TEST_CASE( TestUpDownEditor)
{
    TestUpDownGroup testGroup;
    
	const Editor* pEditor = get_metadata(PROPERTY_FLOAT_1);
	BOOST_CHECK( pEditor->GetControlType() == UpDown );
}