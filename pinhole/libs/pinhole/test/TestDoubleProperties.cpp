// Boost.Pinhole library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#define BOOST_TEST_MODULE PinholeLib
#include <boost/test/unit_test.hpp>
#include "TestClassesAndConstants.h"

// I can hide these two line if I don't do everything in headers
boost::shared_ptr<property_manager> property_manager::m_instance(new property_manager);
event_source* event_source::m_instance = 0;

BOOST_AUTO_TEST_CASE( TestSetGetDouble )
{
    TestPropertyGroup_5 testGroup;
    
	double dValue;
	testGroup.set_as_string( PROPERTY_DOUBLE, PROPERTY_DOUBLE_STRING_VALUE );
	BOOST_CHECK( from_string<double>(dValue, testGroup.get_as_string( PROPERTY_DOUBLE), std::dec) );
	BOOST_CHECK_EQUAL( dValue, PROPERTY_DOUBLE_VALUE );
}

BOOST_AUTO_TEST_CASE( TestSetGetDoubleVar )
{
    TestPropertyGroup_5 testGroup;
    
	double dValue;
	testGroup.set_as_string( PROPERTY_DOUBLE_VAR, PROPERTY_DOUBLE_STRING_VALUE );
	BOOST_CHECK( from_string<double>(dValue, testGroup.get_as_string( PROPERTY_DOUBLE_VAR), std::dec) );
	BOOST_CHECK_EQUAL( dValue, PROPERTY_DOUBLE_VALUE );
}

BOOST_AUTO_TEST_CASE( TestDoublePropertyType )
{
    TestPropertyGroup_5 testGroup;
    
    BOOST_CHECK( typeid(bool) != testGroup.get_type_info(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(int) != testGroup.get_type_info(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(float) != testGroup.get_type_info(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(double) == testGroup.get_type_info(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(std::string) != testGroup.get_type_info(PROPERTY_DOUBLE_2) );

	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(testGroup.get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( pEditor != NULL );
	BOOST_CHECK( testGroup.get_metadata(PROPERTY_DOUBLE_2)->getEditorPropertyType() == DoubleType );
}

BOOST_AUTO_TEST_CASE( TestDoubleGetUIOverrideType )
{
    TestPropertyGroup_5 testGroup;
    
	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(testGroup.get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( pEditor->GetControlType() == Tracker );
}

BOOST_AUTO_TEST_CASE( TestDoubleHighLowIncrement )
{
    TestPropertyGroup_5 testGroup;
    
	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(testGroup.get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( DOUBLE_LOW == pEditor->getLowRange() );
	BOOST_CHECK( DOUBLE_HIGH == pEditor->getHighRange() );
	BOOST_CHECK( DOUBLE_INCREMENT == pEditor->getIncrement() );
}

BOOST_AUTO_TEST_CASE( TestDouble2GetRange )
{
    TestPropertyGroup_5 testGroup;
    
	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(testGroup.get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( pEditor->UseRange() == true );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerDouble )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = testGroup.get_metadata(PROPERTY_DOUBLE);
	BOOST_CHECK( NULL != dynamic_cast<const DoubleEditor*>(pEditor) );
}