// Boost.Print library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#include "TestClassesAndConstants.h"

BOOST_AUTO_TEST_CASE( TestSetGetDouble )
{
    TestPropertyGroup_5 testGroup;
    
	double dValue;
	set_as_string( PROPERTY_DOUBLE, PROPERTY_DOUBLE_STRING_VALUE );
	BOOST_CHECK( from_string<double>(dValue, get_as_string( PROPERTY_DOUBLE), std::dec) );
	CHECK_CLOSE( dValue, PROPERTY_DOUBLE_VALUE, 0.01 );
}

BOOST_AUTO_TEST_CASE( TestSetGetDoubleVar )
{
    TestPropertyGroup_5 testGroup;
    
	double dValue;
	set_as_string( PROPERTY_DOUBLE_VAR, PROPERTY_DOUBLE_STRING_VALUE );
	BOOST_CHECK( from_string<double>(dValue, get_as_string( PROPERTY_DOUBLE_VAR), std::dec) );
	CHECK_CLOSE( dValue, PROPERTY_DOUBLE_VALUE, 0.01 );
}

BOOST_AUTO_TEST_CASE( TestDoublePropertyType )
{
    TestPropertyGroup_5 testGroup;
    
    BOOST_CHECK( typeid(bool) != GetTypeInfo(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(int) != GetTypeInfo(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(float) != GetTypeInfo(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(double) == GetTypeInfo(PROPERTY_DOUBLE_2) );
    BOOST_CHECK( typeid(std::string) != GetTypeInfo(PROPERTY_DOUBLE_2) );

	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( get_metadata(PROPERTY_DOUBLE_2)->getEditorPropertyType() == DoubleType );
}

BOOST_AUTO_TEST_CASE( TestDoubleGetUIOverrideType )
{
    TestPropertyGroup_5 testGroup;
    
	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( pEditor->GetControlType() == Tracker );
}

BOOST_AUTO_TEST_CASE( TestDoubleHighLowIncrement )
{
    TestPropertyGroup_5 testGroup;
    
	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( DOUBLE_LOW == pEditor->getLowRange() );
	BOOST_CHECK( DOUBLE_HIGH == pEditor->getHighRange() );
	BOOST_CHECK( DOUBLE_INCREMENT == pEditor->getIncrement() );
}

BOOST_AUTO_TEST_CASE( TestDouble2GetRange )
{
    TestPropertyGroup_5 testGroup;
    
	const DoubleEditor *pEditor = dynamic_cast<const DoubleEditor*>(get_metadata( PROPERTY_DOUBLE_2 ));
	BOOST_CHECK( pEditor->UseRange() == true );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerDouble )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = get_metadata(PROPERTY_DOUBLE);
	BOOST_CHECK( NULL != dynamic_cast<const DoubleEditor*>(pEditor) );
}