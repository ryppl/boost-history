// Boost.Print library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#include "TestClassesAndConstants.h"

#include <boost/test/unit_test.hpp>

// I can hide these two line if I don't do everything in headers
boost::shared_ptr<property_manager> property_manager::m_instance(new property_manager);
event_source* event_source::m_instance = 0;

BOOST_AUTO_TEST_CASE( TestGetString )
{
    TestPropertyGroup testGroup;
    
	BOOST_CHECK( testGroup.get_as_string(PROPERTY_STRING_1) == PROPERTY_STRING_1_VALUE );
}

BOOST_AUTO_TEST_CASE( TestNoSetterReadOnly )
{
    TestPropertyGroup testGroup;
    
    BOOST_CHECK_EQUAL( testGroup.is_read_only(PROPERTY_STRING_1), true );
}

BOOST_AUTO_TEST_CASE( TestNoSetterStringFail )
{
    TestPropertyGroup testGroup;
    
    bool bWasExceptionThrown = false;
    try
    {
        testGroup.set_as_string(PROPERTY_STRING_1, PROPERTY_STRING_1_VALUE);
    }
    catch( boost::bad_function_call )
    {
        bWasExceptionThrown = true;
    }
    
    BOOST_CHECK_EQUAL( bWasExceptionThrown, true );
}

BOOST_AUTO_TEST_CASE( TestSetGetString )
{
    TestPropertyGroup testGroup;
    
	testGroup.set_as_string( PROPERTY_STRING_2, PROPERTY_STRING_2_VALUE );
	BOOST_CHECK( PROPERTY_STRING_2_VALUE == testGroup.get_as_string( PROPERTY_STRING_2) );
}

BOOST_AUTO_TEST_CASE( TestSetGetStringVar )
{
    TestPropertyGroup testGroup;
    
	testGroup.set_as_string( PROPERTY_STRING_2_VAR, PROPERTY_STRING_2_VALUE );
	BOOST_CHECK_EQUAL( testGroup.get_as_string( PROPERTY_STRING_2_VAR), PROPERTY_STRING_2_VALUE );
}

BOOST_AUTO_TEST_CASE( TestStringPropertyType )
{
    TestPropertyGroup_4 testGroup;
    
    BOOST_CHECK( typeid(bool) != testGroup.get_type_info(PROPERTY_STRING_2) );
    BOOST_CHECK( typeid(int) != testGroup.get_type_info(PROPERTY_STRING_2) );
    BOOST_CHECK( typeid(float) != testGroup.get_type_info(PROPERTY_STRING_2) );
    BOOST_CHECK( typeid(double) != testGroup.get_type_info(PROPERTY_STRING_2) );
    BOOST_CHECK( typeid(std::string) == testGroup.get_type_info(PROPERTY_STRING_2) );

	const StringEditor *pEditor = dynamic_cast<const StringEditor*>(testGroup.get_metadata( PROPERTY_STRING_2 ));
	BOOST_CHECK( testGroup.get_metadata(PROPERTY_STRING_2)->getEditorPropertyType() == StringType );
}

BOOST_AUTO_TEST_CASE( TestStringGetControlType )
{
    TestPropertyGroup_4 testGroup;
    
	const StringEditor *pEditor = dynamic_cast<const StringEditor*>(testGroup.get_metadata( PROPERTY_STRING_2 ));
	BOOST_CHECK( pEditor->GetControlType() == EditBox );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerString )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = testGroup.get_metadata(PROPERTY_STRING_1);
	BOOST_CHECK( NULL != dynamic_cast<const StringEditor*>(pEditor) );
}
