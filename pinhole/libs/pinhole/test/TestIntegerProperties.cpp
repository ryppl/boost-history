// Boost.Pinhole library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#define BOOST_TEST_MODULE PinholeLib
#include <boost/test/unit_test.hpp>
#include "TestClassesAndConstants.h"

// I can hide these two line if I don't do everything in headers
boost::shared_ptr<property_manager> property_manager::m_instance(new property_manager);
event_source* event_source::m_instance = 0;

BOOST_AUTO_TEST_CASE( TestIntegerSetGet )
{
    TestPropertyGroup testGroup;
    
	int iValue;
	testGroup.set_as_string( PROPERTY_INT_1, PROPERTY_INT_1_STRING_VALUE );
	BOOST_CHECK( from_string<int>(iValue, testGroup.get_as_string(PROPERTY_INT_1), std::dec) );
	BOOST_CHECK_EQUAL( iValue, PROPERTY_INT_1_VALUE );
}

BOOST_AUTO_TEST_CASE( TestIntegerSetGetVar )
{
    TestPropertyGroup testGroup;
    
	int iValue;
	testGroup.set_as_string( PROPERTY_INT_1_VAR, PROPERTY_INT_1_STRING_VALUE );
	BOOST_CHECK( from_string<int>(iValue, testGroup.get_as_string(PROPERTY_INT_1_VAR), std::dec) );
	BOOST_CHECK_EQUAL( iValue, PROPERTY_INT_1_VALUE );
}

BOOST_AUTO_TEST_CASE( TestIntegerEditorType )
{
    TestPropertyGroup_4 testGroup;
    
    BOOST_CHECK( typeid(bool) != testGroup.get_type_info(PROPERTY_INT_1) );
    BOOST_CHECK( typeid(int) == testGroup.get_type_info(PROPERTY_INT_1) );
    BOOST_CHECK( typeid(float) != testGroup.get_type_info(PROPERTY_INT_1) );
    BOOST_CHECK( typeid(double) != testGroup.get_type_info(PROPERTY_INT_1) );
    BOOST_CHECK( typeid(std::string) != testGroup.get_type_info(PROPERTY_INT_1) );

	const IntegerEditor *pEditor = dynamic_cast<const IntegerEditor*>(testGroup.get_metadata( PROPERTY_INT_1 ));
	BOOST_CHECK( pEditor != NULL );
	BOOST_CHECK( testGroup.get_metadata(PROPERTY_INT_1)->getEditorPropertyType() == IntegerType );
}

BOOST_AUTO_TEST_CASE( TestIntegerHighLowIncrement )
{
    TestPropertyGroup_4 testGroup;
    
	const IntegerEditor *pEditor = dynamic_cast<const IntegerEditor*>(testGroup.get_metadata( PROPERTY_INT_1 ));
	BOOST_CHECK_EQUAL( pEditor->getLowRange(), INT_LOW );
	BOOST_CHECK_EQUAL( pEditor->getHighRange(), INT_HIGH );
	BOOST_CHECK_EQUAL( pEditor->getIncrement(), INT_INCREMENT );
}

BOOST_AUTO_TEST_CASE( TestIntegerGetControlType )
{
    TestPropertyGroup_4 testGroup;
    
	const IntegerEditor *pEditor = dynamic_cast<const IntegerEditor*>(testGroup.get_metadata( PROPERTY_INT_1 ));
	BOOST_CHECK( pEditor->GetControlType() == DropDown );
	BOOST_CHECK( pEditor->UseRange() == true );
}

BOOST_AUTO_TEST_CASE( TestInteger2GetRange )
{
    TestPropertyGroup_4 testGroup;
    
	const IntegerEditor *pEditor = dynamic_cast<const IntegerEditor*>(testGroup.get_metadata( PROPERTY_INT_2 ));
	BOOST_CHECK( pEditor->UseRange() == false );
}

BOOST_AUTO_TEST_CASE( TestInteger2GetControlType )
{
    TestPropertyGroup_4 testGroup;
    
	const IntegerEditor *pEditor = dynamic_cast<const IntegerEditor*>(testGroup.get_metadata( PROPERTY_INT_2 ));
	BOOST_CHECK( pEditor->GetControlType() == EditBox );
}

BOOST_AUTO_TEST_CASE( TestIntegerGetEditorTypeFailure )
{
    TestPropertyGroup_5 testGroup;
    
	BOOST_CHECK_THROW( testGroup.get_metadata( PROPERTY_INT_1 ), no_metadata_defined_error );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerInt )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = testGroup.get_metadata(PROPERTY_INT_1);
	BOOST_CHECK( NULL != dynamic_cast<const IntegerEditor*>(pEditor) );
}