// Boost.Print library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#include "TestClassesAndConstants.h"

BOOST_AUTO_TEST_CASE( TestSetGetBool )
{
    TestPropertyGroup testGroup;
    
	set_as_string( PROPERTY_STRING_2, PROPERTY_STRING_2_VALUE );
	BOOST_CHECK( PROPERTY_STRING_2_VALUE == get_as_string( PROPERTY_STRING_2) );
}

BOOST_AUTO_TEST_CASE( TestSetGetBoolVar )
{
    TestPropertyGroup testGroup;
    
	set_as_string( PROPERTY_BOOL_VAR, PROPERTY_BOOL_VALUE );
	BOOST_CHECK_EQUAL( get_as_string( PROPERTY_BOOL_VAR), PROPERTY_BOOL_VALUE );
}

BOOST_AUTO_TEST_CASE( TestBoolPropertyType )
{
    TestPropertyGroup_4 testGroup;
    
    BOOST_CHECK( typeid(bool) == GetTypeInfo(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(int) != GetTypeInfo(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(float) != GetTypeInfo(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(double) != GetTypeInfo(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(std::string) != GetTypeInfo(PROPERTY_BOOL) );

	const BoolEditor *pEditor = dynamic_cast<const BoolEditor*>(get_metadata( PROPERTY_BOOL ));
	BOOST_CHECK( get_metadata(PROPERTY_BOOL)->getEditorPropertyType() == BooleanType );
}

BOOST_AUTO_TEST_CASE( TestBoolGetControlType )
{
    TestPropertyGroup_4 testGroup;
    
	const BoolEditor *pEditor = dynamic_cast<const BoolEditor*>(get_metadata( PROPERTY_BOOL ));
	BOOST_CHECK( pEditor->GetControlType() == Radio );
}

BOOST_AUTO_TEST_CASE( TestBoolGetSet )
{
    TestPropertyGroup_4 testGroup;
    
	set_as_string( PROPERTY_BOOL, BOOL_TRUE );
	BOOST_CHECK( get_as_string( PROPERTY_BOOL ) == BOOL_TRUE );

	set_as_string( PROPERTY_BOOL, BOOL_FALSE );
	BOOST_CHECK( get_as_string( PROPERTY_BOOL ) == BOOL_FALSE );
}

BOOST_AUTO_TEST_CASE( TestInvalidSet )
{
    TestPropertyGroup_4 testGroup;
    
	// TODO
	set_as_string( PROPERTY_BOOL, "Foo" );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerBool )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = get_metadata(PROPERTY_BOOL);
	BOOST_CHECK( NULL != dynamic_cast<const BoolEditor*>(pEditor) );
}
