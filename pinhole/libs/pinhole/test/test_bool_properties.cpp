// Boost.Pinhole library

// Copyright Jared McIntyre 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#define BOOST_TEST_MODULE PinholeLib
#include <boost/test/unit_test.hpp>
#include "TestClassesAndConstants.h"

// I can hide these two line if I don't do everything in headers
boost::shared_ptr<property_manager> property_manager::m_instance(new property_manager);
event_source* event_source::m_instance = 0;

BOOST_AUTO_TEST_CASE( TestSetGetBool )
{
    TestPropertyGroup testGroup;
    
	testGroup.set_as_string( PROPERTY_STRING_2, PROPERTY_STRING_2_VALUE );
	BOOST_CHECK( PROPERTY_STRING_2_VALUE == testGroup.get_as_string( PROPERTY_STRING_2) );
}

BOOST_AUTO_TEST_CASE( TestSetGetBoolVar )
{
    TestPropertyGroup testGroup;
    
	testGroup.set_as_string( PROPERTY_BOOL_VAR, PROPERTY_BOOL_VALUE );
	BOOST_CHECK_EQUAL( testGroup.get_as_string( PROPERTY_BOOL_VAR), PROPERTY_BOOL_VALUE );
}

BOOST_AUTO_TEST_CASE( TestBoolPropertyType )
{
    TestPropertyGroup_4 testGroup;
    
    BOOST_CHECK( typeid(bool) == testGroup.get_type_info(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(int) != testGroup.get_type_info(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(float) != testGroup.get_type_info(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(double) != testGroup.get_type_info(PROPERTY_BOOL) );
    BOOST_CHECK( typeid(std::string) != testGroup.get_type_info(PROPERTY_BOOL) );

	const BoolEditor *pEditor = dynamic_cast<const BoolEditor*>(testGroup.get_metadata( PROPERTY_BOOL ));
	BOOST_CHECK( pEditor != NULL );
	BOOST_CHECK( testGroup.get_metadata(PROPERTY_BOOL)->getEditorPropertyType() == BooleanType );
}

BOOST_AUTO_TEST_CASE( TestBoolGetControlType )
{
    TestPropertyGroup_4 testGroup;
    
	const BoolEditor *pEditor = dynamic_cast<const BoolEditor*>(testGroup.get_metadata( PROPERTY_BOOL ));
	BOOST_CHECK( pEditor->GetControlType() == Radio );
}

BOOST_AUTO_TEST_CASE( TestBoolGetSet )
{
    TestPropertyGroup_4 testGroup;
    
	testGroup.set_as_string( PROPERTY_BOOL, BOOL_TRUE );
	BOOST_CHECK( testGroup.get_as_string( PROPERTY_BOOL ) == BOOL_TRUE );

	testGroup.set_as_string( PROPERTY_BOOL, BOOL_FALSE );
	BOOST_CHECK( testGroup.get_as_string( PROPERTY_BOOL ) == BOOL_FALSE );
}

BOOST_AUTO_TEST_CASE( TestInvalidSet )
{
    TestPropertyGroup_4 testGroup;
    
	// TODO
	testGroup.set_as_string( PROPERTY_BOOL, "Foo" );
}

BOOST_AUTO_TEST_CASE( TestAutoGeneratedDesignerBool )
{
    TestAutoGeneratedDesigners testGroup;
    
	const Editor* pEditor = testGroup.get_metadata(PROPERTY_BOOL);
	BOOST_CHECK( NULL != dynamic_cast<const BoolEditor*>(pEditor) );
}
