/*----------------------------------------------------------------------------+
Copyright (c) 2007-2008: Joachim Faulhaber
+-----------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------------*/
#ifndef __itl_functors_H_JOFA_080315__
#define __itl_functors_H_JOFA_080315__

#include <functional>
#include <boost/itl/type_traits/neutron.hpp>
#include <boost/itl/type_traits/unon.hpp>

namespace boost{namespace itl
{
    // ------------------------------------------------------------------------
    template <typename Type> struct neutron_based_inplace_combine 
        : public std::binary_function<Type&, const Type&, void>
    {
		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    // ------------------------------------------------------------------------
    template <typename Type> struct unon_based_inplace_combine 
        : public std::binary_function<Type&, const Type&, void>
    {
		static Type neutron() { return boost::itl::unon<Type>::value(); }
    };

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_identity 
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const{}
		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_identity>::apply() 
    { return "i="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_erasure 
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        { 
            if(object == operand)
                object = Type();
        }
		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_erasure>::apply() 
    { return "0="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_plus 
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;

        void operator()(Type& object, const Type& operand)const
        { object += operand; }
    };

    template<>
    inline std::string unary_template_to_string<inplace_plus>::apply() { return "+="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_minus 
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;
        void operator()(Type& object, const Type& operand)const
        { object -= operand; }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_minus>::apply() { return "-="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_bit_add
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;

        void operator()(Type& object, const Type& operand)const
        { object |= operand; }
    };

    template<>
    inline std::string unary_template_to_string<inplace_bit_add>::apply() { return "b|="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_bit_subtract
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;
        void operator()(Type& object, const Type& operand)const
        { object &= ~operand; }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_bit_subtract>::apply() { return "b-="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_bit_and
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;

        void operator()(Type& object, const Type& operand)const
        { object &= operand; }
    };

    template<>
    inline std::string unary_template_to_string<inplace_bit_and>::apply() { return "b&="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_bit_xor
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;
        void operator()(Type& object, const Type& operand)const
        { object ^= operand; }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_et
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;

        void operator()(Type& object, const Type& operand)const
        { object &= operand; }
    };

    template<>
    inline std::string unary_template_to_string<inplace_et>::apply() { return "&="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_caret
        : public neutron_based_inplace_combine<Type>
    {
        typedef Type type;
        void operator()(Type& object, const Type& operand)const
        { object ^= operand; }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_caret>::apply() { return "^="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inserter
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        { insert(object,operand); }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inserter>::apply() { return "ins="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct eraser
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        { erase(object,operand); }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<eraser>::apply() { return "ers="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_star
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        { object *= operand; }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_star>::apply() { return "*="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_slash
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        { object /= operand; }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_slash>::apply() { return "/="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_max
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        {
            if(object < operand)
                object = operand;
        }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_max>::apply() { return "max="; }

    // ------------------------------------------------------------------------
    template <typename Type> struct inplace_min
        : public neutron_based_inplace_combine<Type>
    {
        void operator()(Type& object, const Type& operand)const
        {
            if(object > operand)
                object = operand;
        }

		static Type neutron() { return boost::itl::neutron<Type>::value(); }
    };

    template<>
    inline std::string unary_template_to_string<inplace_min>::apply() { return "min="; }

	//--------------------------------------------------------------------------
	// Inverse functor
	template<class Functor> struct inverse;

	template<class Type> 
	struct inverse<itl::inplace_plus<Type> >
	{ typedef itl::inplace_minus<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_minus<Type> >
	{ typedef itl::inplace_plus<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_bit_add<Type> >
	{ typedef itl::inplace_bit_subtract<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_bit_subtract<Type> >
	{ typedef itl::inplace_bit_add<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_et<Type> >
	{ typedef itl::inplace_caret<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_caret<Type> >
	{ typedef itl::inplace_et<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_bit_and<Type> >
	{ typedef itl::inplace_bit_xor<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_bit_xor<Type> >
	{ typedef itl::inplace_bit_and<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_star<Type> >
	{ typedef itl::inplace_slash<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_slash<Type> >
	{ typedef itl::inplace_star<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_max<Type> >
	{ typedef itl::inplace_min<Type> type; };

	template<class Type> 
	struct inverse<itl::inplace_min<Type> >
	{ typedef itl::inplace_max<Type> type; };


}} // namespace itl boost

#endif


