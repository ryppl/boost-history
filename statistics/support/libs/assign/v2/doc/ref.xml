<?xml version="1.0" standalone="yes"?>
<library-reference><header name="boost/assign/v2/anon/anon.hpp"/><header name="boost/assign/v2/ref/anon/anon.hpp"/><header name="boost/assign/v2/anon/cont.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="anon_aux"><struct name="impl"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="type"><type>std::deque&lt; T &gt;</type></typedef></struct><struct name="cont_modifier_traits"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="F"/>
      <template-type-parameter name="Tag"/>
    </template></struct><class name="cont"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="F"/>
      <template-type-parameter name="Tag"/>
    </template><typedef name="value_type"><type>T</type></typedef><typedef name="size_type"><type>boost::range_size&lt; impl_ &gt;::type</type></typedef><typedef name="iterator"><type>boost::range_iterator&lt; impl_ &gt;::type</type></typedef><typedef name="const_iterator"><type>boost::range_iterator&lt; const impl_ &gt;::type</type></typedef><typedef name="reference"><type>impl_::reference</type></typedef><typedef name="const_reference"><type>impl_::const_reference</type></typedef><typedef name="difference_type"><type>impl_::difference_type</type></typedef><method-group name="public member functions"><method name="begin" cv=""><type>iterator</type></method><method name="end" cv=""><type>iterator</type></method><method name="begin" cv="const"><type>const_iterator</type></method><method name="end" cv="const"><type>const_iterator</type></method><method name="size" cv="const"><type>size_type</type></method><method name="max_size" cv="const"><type>size_type</type></method><method name="empty" cv="const"><type>bool</type></method><method name="operator[]" cv=""><type>reference</type><parameter name="n"><paramtype>size_type</paramtype></parameter></method><method name="operator[]" cv="const"><type>const_reference</type><parameter name="n"><paramtype>size_type</paramtype></parameter></method><method name="front" cv=""><type>reference</type></method><method name="front" cv="const"><type>const_reference</type></method><method name="back" cv=""><type>reference</type></method><method name="back" cv="const"><type>const_reference</type></method><method name="pop_front" cv=""><type>void</type></method><method name="pop_back" cv=""><type>void</type></method><method name="swap" cv=""><type>void</type><parameter name="that"><paramtype><classname>cont</classname> &amp;</paramtype></parameter></method><method name="unwrap" cv="const"><type>BOOST_ASSIGN_V2_CONVERT_CONVERT_MF BOOST_ASSIGN_V2_CONVERT_OPERATOR_MF impl_ &amp;</type></method><method name="equal_to" cv="const"><type>bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="r"><paramtype>const R &amp;</paramtype></parameter></method><method name="less_than" cv="const"><type>bool</type><template>
          <template-type-parameter name="R"/>
        </template><parameter name="r"><paramtype>const R &amp;</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="f"><paramtype>const F &amp;</paramtype></parameter></constructor><constructor><parameter name="v"><paramtype>impl_ const &amp;</paramtype></parameter><parameter name="f"><paramtype>F const &amp;</paramtype></parameter></constructor><constructor><parameter name="v"><paramtype>impl_ const &amp;</paramtype></parameter><parameter name="f"><paramtype>F const &amp;</paramtype></parameter><parameter name="m"><paramtype>modifier_ const &amp;</paramtype></parameter></constructor></class></namespace><namespace name="result_of_modulo"><struct-specialization name="new_fun"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="F"/>
      <template-type-parameter name="Tag"/>
    </template><specialization><template-arg>anon_aux::cont&lt; T</template-arg><template-arg>F</template-arg><template-arg>Tag &gt;</template-arg></specialization><struct name="apply"><template>
      <template-type-parameter name="F1"/>
    </template><typedef name="type"><type><classname>anon_aux::cont</classname>&lt; T, F1, Tag &gt;</type></typedef></struct></struct-specialization><struct-specialization name="new_modifier"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="F"/>
      <template-type-parameter name="Tag"/>
    </template><specialization><template-arg>anon_aux::cont&lt; T</template-arg><template-arg>F</template-arg><template-arg>Tag &gt;</template-arg></specialization><struct name="apply"><template>
      <template-type-parameter name="NewTag"/>
    </template><typedef name="type"><type><classname>anon_aux::cont</classname>&lt; T, F, NewTag &gt;</type></typedef></struct></struct-specialization></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/anon/csv.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"/></namespace></namespace><macro name="MACRO1" kind="functionlike"><macro-parameter name="z"/><macro-parameter name="i"/><macro-parameter name="data"/></macro><macro name="MACRO2" kind="functionlike"><macro-parameter name="z"/><macro-parameter name="N"/><macro-parameter name="data"/></macro></header><header name="boost/assign/v2/ref/anon/csv/csv.hpp"/><header name="boost/assign/v2/anon/make.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="result_of"><struct name="anon"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="t_"><type>boost::remove_cv&lt; T &gt;::<classname>type</classname></type></typedef><typedef name="cont_"><type><classname>anon_aux::impl</classname>&lt; t_ &gt;::<classname>type</classname></type></typedef><typedef name="traits_"><type>result_of::put&lt; cont_ &gt;</type></typedef><typedef name="f_"><type>traits_::f_</type></typedef><typedef name="modifier_tag_"><type>traits_::modifier_tag_</type></typedef><typedef name="type"><type><classname>anon_aux::cont</classname>&lt; t_, f_, modifier_tag_ &gt;</type></typedef></struct></namespace><data-member name="anon"><type><classname>result_of::anon</classname>&lt; T &gt;::type</type></data-member></namespace></namespace></namespace></header><header name="boost/assign/v2/ref/anon/csv/make.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="ref"><namespace name="result_of"><struct name="empty_csv_anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::nth_result_of::csv_anon&lt; 0, Tag1, T &gt;</inherit></struct><struct name="empty_anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::nth_result_of::anon&lt; 0, Tag1, T &gt;</inherit></struct><struct name="anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::nth_result_of::anon&lt; 1, Tag1, T &gt;</inherit></struct></namespace><data-member name="csv_anon"><type><classname>result_of::empty_csv_anon</classname>&lt; Tag1, T &gt;::type</type></data-member><function name="anon"><type><classname>result_of::empty_anon</classname>&lt; Tag1, T &gt;::type</type><template>
          <template-type-parameter name="Tag1"/>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>keyword_aux::nil const &amp;</paramtype></parameter></function><function name="anon"><type><classname>result_of::anon</classname>&lt; Tag1, T &gt;::type</type><template>
          <template-type-parameter name="Tag1"/>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T &amp;</paramtype></parameter></function><function name="anon"><type><classname>result_of::anon</classname>&lt; Tag1, T const  &gt;::type</type><template>
          <template-type-parameter name="Tag1"/>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T const &amp;</paramtype></parameter></function></namespace><data-member name="anon"><type><classname>result_of::anon</classname>&lt; T &gt;::type</type></data-member></namespace></namespace></namespace><macro name="MACRO" kind="functionlike"><macro-parameter name="z"/><macro-parameter name="n"/><macro-parameter name="data"/></macro></header><header name="boost/assign/v2/ref/anon/unary/make.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="ref"><namespace name="result_of"><struct name="empty_csv_anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::nth_result_of::csv_anon&lt; 0, Tag1, T &gt;</inherit></struct><struct name="empty_anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::nth_result_of::anon&lt; 0, Tag1, T &gt;</inherit></struct><struct name="anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::nth_result_of::anon&lt; 1, Tag1, T &gt;</inherit></struct></namespace><data-member name="csv_anon"><type><classname>result_of::empty_csv_anon</classname>&lt; Tag1, T &gt;::type</type></data-member><function name="anon"><type><classname>result_of::empty_anon</classname>&lt; Tag1, T &gt;::type</type><template>
          <template-type-parameter name="Tag1"/>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>keyword_aux::nil const &amp;</paramtype></parameter></function><function name="anon"><type><classname>result_of::anon</classname>&lt; Tag1, T &gt;::type</type><template>
          <template-type-parameter name="Tag1"/>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T &amp;</paramtype></parameter></function><function name="anon"><type><classname>result_of::anon</classname>&lt; Tag1, T const  &gt;::type</type><template>
          <template-type-parameter name="Tag1"/>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T const &amp;</paramtype></parameter></function></namespace><data-member name="anon"><type><classname>result_of::anon</classname>&lt; T &gt;::type</type></data-member></namespace></namespace></namespace></header><header name="boost/assign/v2/chain/chain.hpp"/><header name="boost/assign/v2/detail/detail.hpp"/><header name="boost/assign/v2/detail/type_traits/container/container.hpp"/><header name="boost/assign/v2/detail/type_traits/container/forward_to_value.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="forward_to_value"><template>
      <template-nontype-parameter name="F"><type>template&lt; typename T &gt; class</type></template-nontype-parameter>
      <template-type-parameter name="V"/>
    </template></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/has_push.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="has_push"><template>
      <template-type-parameter name="V"/>
      <template-type-parameter name="T"><default>typename container_type_traits::value&lt;V&gt;::type</default></template-type-parameter>
    </template><struct name="helper"><template>
      <template-type-parameter name="U"/>
      <template-nontype-parameter name="fp"><type>void(U::*)(T const &amp;)</type></template-nontype-parameter>
    </template></struct><typedef name="yes_"><type>boost::type_traits::yes_type</type></typedef><typedef name="no_"><type>boost::type_traits::no_type</type></typedef><typedef name="type"><type>boost::mpl::bool_&lt; <classname>value</classname> &gt;</type></typedef><method-group name="public static functions"><method name="test" cv=""><type>static yes_</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>U *</paramtype></parameter><parameter name="p"><paramtype><classname>helper</classname>&lt; U,&amp;U::push &gt; *</paramtype><default>0</default></parameter></method><method name="test" cv=""><type>static no_</type><parameter name=""><paramtype>...</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="BOOST_STATIC_CONSTANT" cv=""><type/><parameter name=""><paramtype>bool</paramtype></parameter><parameter name=""><paramtype><classname>value</classname></paramtype><default>sizeof(test((V *) 0))==sizeof(yes_)</default></parameter></method></method-group></struct><struct name="has_push_deduced_value"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::has_push&lt; V &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/has_static_size.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="has_static_size"><template>
      <template-type-parameter name="T"/>
    </template><struct name="sfinae"><template>
      <template-type-parameter name="U"/>
      <template-nontype-parameter name=""><type>sig</type></template-nontype-parameter>
    </template></struct><typedef name="size_type"><type>T::size_type</type></typedef><typedef name="yes"><type>char</type></typedef><typedef name="no"><type>char(&amp;</type></typedef><typedef name="sig"><type>const size_type</type></typedef><typedef name="type"><type>boost::mpl::bool_&lt; <classname>value</classname> &gt;</type></typedef><method-group name="public static functions"><method name="test" cv=""><type>static yes</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype><classname>sfinae</classname>&lt; U, U::static_size &gt; *</paramtype></parameter></method><method name="test" cv=""><type>static no</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>...</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="BOOST_STATIC_CONSTANT" cv=""><type/><parameter name=""><paramtype>bool</paramtype></parameter><parameter name=""><paramtype><classname>value</classname></paramtype><default>sizeof(test&lt; T &gt;(0))==sizeof(yes)</default></parameter></method></method-group></struct><struct-specialization name="has_static_size"><template>
      <template-type-parameter name="T"/>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="C"/>
    </template><specialization><template-arg>boost::ptr_array&lt; T</template-arg><template-arg>N</template-arg><template-arg>C &gt;</template-arg></specialization></struct-specialization></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_associative.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="associative"/></namespace><namespace name="container_type_traits"><struct name="is_associative"><template>
      <template-type-parameter name="V"/>
    </template></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_fifo.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="fifo"/></namespace><namespace name="container_type_traits"><struct name="is_fifo_impl"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct-specialization name="is_fifo_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::queue&lt; T</template-arg><template-arg>A &gt;</template-arg></specialization></struct-specialization><struct name="is_fifo"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; is_fifo_impl, boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_lifo.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="lifo"/></namespace><namespace name="container_type_traits"><struct name="is_lifo_impl"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct-specialization name="is_lifo_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::stack&lt; T</template-arg><template-arg>A &gt;</template-arg></specialization></struct-specialization><struct name="is_lifo"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; is_lifo_impl, boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_map.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="map"/></namespace><namespace name="container_type_traits"><struct name="is_map_impl"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct-specialization name="is_map_impl"><template>
      <template-type-parameter name="K"/>
      <template-type-parameter name="D"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::map&lt; K</template-arg><template-arg>D</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization></struct-specialization><struct name="is_map"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; is_map_impl, boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_ptr_container.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="is_ptr_container"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value&lt; V &gt;::is_applicable</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_range.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="range"/></namespace><namespace name="container_type_traits"><struct name="is_range"><template>
      <template-type-parameter name="V"/>
    </template></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_set.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="set"/></namespace><namespace name="container_type_traits"><struct name="is_set_impl"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct-specialization name="is_set_impl"><template>
      <template-type-parameter name="K"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::set&lt; K</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization></struct-specialization><struct name="is_set"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; is_set_impl, boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_sorted.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="sorted"/></namespace><namespace name="container_type_traits"><struct name="is_sorted_impl"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct-specialization name="is_sorted_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::set&lt; T</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization></struct-specialization><struct-specialization name="is_sorted_impl"><template>
      <template-type-parameter name="K"/>
      <template-type-parameter name="T"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::map&lt; K</template-arg><template-arg>T</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization></struct-specialization><struct name="is_sorted"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; is_sorted_impl, boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/is_static_array.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_tag"><struct name="static_array"/></namespace><namespace name="container_type_traits"><struct name="is_static_array_impl"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::has_static_size&lt; T &gt;</inherit></struct><struct name="is_static_array"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; is_static_array_impl, boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/ptr_to_value.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="ptr_to_value"><template>
      <template-type-parameter name="V"/>
    </template><struct name="is_applicable"/></struct><struct-specialization name="ptr_to_value"><template>
      <template-type-parameter name="T"/>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::ptr_array&lt; T</template-arg><template-arg>N</template-arg><template-arg>A &gt;</template-arg></specialization><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::static_array_like&lt; boost::ptr_array&lt; T, N, A &gt;, boost::array &gt;</inherit></struct-specialization><struct-specialization name="ptr_to_value"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::ptr_deque&lt; T</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::seq_like&lt; boost::ptr_deque&lt; T, C, A &gt;, std::deque &gt;</inherit></struct-specialization><struct-specialization name="ptr_to_value"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::ptr_list&lt; T</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::seq_like&lt; boost::ptr_list&lt; T, C, A &gt;, std::list &gt;</inherit></struct-specialization><struct-specialization name="ptr_to_value"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="C"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::ptr_vector&lt; T</template-arg><template-arg>C</template-arg><template-arg>A &gt;</template-arg></specialization><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::seq_like&lt; boost::ptr_vector&lt; T, C, A &gt;, std::vector &gt;</inherit></struct-specialization><namespace name="ptr_to_value_aux"><struct name="allocator"><template>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T"/>
    </template></struct><struct-specialization name="allocator"><template>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>std::allocator&lt; void * &gt;</template-arg><template-arg>T</template-arg></specialization><typedef name="type"><type>std::allocator&lt; T &gt;</type></typedef></struct-specialization><struct name="common"><template>
      <template-type-parameter name="V"/>
    </template><struct name="is_applicable"/><typedef name="value_type"><type>boost::remove_reference&lt; typename V::reference &gt;::type</type></typedef><typedef name="allocator_type"><type><classname>ptr_to_value_aux::allocator</classname>&lt; typename V::allocator_type, value_type &gt;::type</type></typedef></struct><struct name="static_array_like"><template>
      <template-type-parameter name="V"/>
      <template-nontype-parameter name="F"><type>template&lt; typename, std::size_t &gt; class</type></template-nontype-parameter>
    </template><struct name="is_applicable"/><typedef name="value_type"><type>boost::remove_reference&lt; typename V::reference &gt;::type</type></typedef><typedef name="container_type"><type>F&lt; typename static_array_like::value_type, <classname>container_type_traits::static_size</classname>&lt; V &gt;::<classname>value</classname> &gt;</type></typedef></struct><struct name="seq_like"><template>
      <template-type-parameter name="V"/>
      <template-nontype-parameter name="F"><type>template&lt; typename, typename &gt; class</type></template-nontype-parameter>
    </template><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::common&lt; V &gt;</inherit><typedef name="container_type"><type>F&lt; typename seq_like::value_type, typename seq_like::allocator_type &gt;</type></typedef></struct><struct name="map_like"><template>
      <template-type-parameter name="V"/>
      <template-nontype-parameter name="F"><type>template&lt; typename, typename, typename, typename &gt; class</type></template-nontype-parameter>
    </template><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::common&lt; V &gt;</inherit><typedef name="container_type"><type>F&lt; typename V::key_type, typename map_like::value_type, typename V::key_compare, typename map_like::allocator_type &gt;</type></typedef></struct><struct name="set_like"><template>
      <template-type-parameter name="V"/>
      <template-nontype-parameter name="F"><type>template&lt; typename, typename, typename &gt; class</type></template-nontype-parameter>
    </template><inherit access="public">boost::assign::v2::container_type_traits::ptr_to_value_aux::common&lt; V &gt;</inherit><typedef name="container_type"><type>F&lt; typename V::key_type, typename V::key_compare, typename set_like::allocator_type &gt;</type></typedef></struct><class name="unordered_map_like"><template>
      <template-type-parameter name="V"/>
      <template-nontype-parameter name="F"><type>template&lt; typename, typename, typename, typename, typename &gt; class</type></template-nontype-parameter>
    </template><inherit access="private">boost::assign::v2::container_type_traits::ptr_to_value_aux::common&lt; V &gt;</inherit></class><class name="unordered_set_like"><template>
      <template-type-parameter name="V"/>
      <template-nontype-parameter name="F"><type>template&lt; typename, typename, typename, typename &gt; class</type></template-nontype-parameter>
    </template><inherit access="private">boost::assign::v2::container_type_traits::ptr_to_value_aux::common&lt; V &gt;</inherit></class></namespace></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/ptr_to_value_container.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="ptr_to_value_container"><template>
      <template-type-parameter name="V"/>
    </template><typedef name="type"><type><classname>ptr_to_value</classname>&lt; V &gt;::container_type</type></typedef></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/static_size.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="static_size"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct-specialization name="static_size"><template>
      <template-type-parameter name="T"/>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
    </template><specialization><template-arg>boost::array&lt; T</template-arg><template-arg>N &gt;</template-arg></specialization></struct-specialization><struct-specialization name="static_size"><template>
      <template-type-parameter name="T"/>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="C"/>
    </template><specialization><template-arg>boost::ptr_array&lt; T</template-arg><template-arg>N</template-arg><template-arg>C &gt;</template-arg></specialization></struct-specialization></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/value_container.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="value_container"><template>
      <template-type-parameter name="V"/>
    </template></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/decay.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="type_traits"><struct name="decay"><template>
      <template-type-parameter name="T"/>
    </template></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/has_value_type.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="type_traits"><struct name="has_value_type"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="yes_"><type>boost::type_traits::yes_type</type></typedef><typedef name="no_"><type>boost::type_traits::no_type</type></typedef><typedef name="type"><type>boost::mpl::bool_&lt; <classname>value</classname> &gt;</type></typedef><method-group name="public static functions"><method name="test" cv=""><type>static yes_</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>U *</paramtype></parameter><parameter name="p"><paramtype>typename U::value_type *</paramtype><default>0</default></parameter></method><method name="test" cv=""><type>static no_</type><parameter name=""><paramtype>...</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="BOOST_STATIC_CONSTANT" cv=""><type/><parameter name=""><paramtype>bool</paramtype></parameter><parameter name=""><paramtype><classname>value</classname></paramtype><default>sizeof(test((T *) 0))==sizeof(yes_)</default></parameter></method></method-group></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/is_stl_pair.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="type_traits"><struct name="is_stl_pair"><template>
      <template-type-parameter name="T"/>
    </template></struct><struct-specialization name="is_stl_pair"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="U"/>
    </template><specialization><template-arg>std::pair&lt; T</template-arg><template-arg>U &gt;</template-arg></specialization></struct-specialization></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/meta_convert.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="type_traits"><struct name="meta_convert"><template>
      <template-type-parameter name="Tag"><default>boost::use_default</default></template-type-parameter>
    </template><struct name="apply"><template>
      <template-type-parameter name="T1"/>
      <template-type-parameter name="T2"/>
    </template></struct></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/same_remove_cv.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="type_traits"><struct name="same_remove_cv"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="U"/>
    </template></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/type_traits.hpp"/><header name="boost/assign/v2/detail/type_traits/value.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="type_traits"><struct name="value_impl"><template>
      <template-type-parameter name="V"/>
    </template></struct><struct name="value"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::type_traits::value_impl&lt; boost::remove_cv&lt; V &gt;::type &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/detail/type_traits/container/value.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="container_type_traits"><struct name="value"><template>
      <template-type-parameter name="V"/>
    </template><inherit access="public">boost::assign::v2::container_type_traits::forward_to_value&lt; type_traits::value, V &gt;</inherit></struct></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/put/compose/compose.hpp"/><header name="boost/assign/v2/put/compose/tag.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="put_compose_aux"><struct name="compose_tag"/></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/put/range/adaptor.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="adaptor"><data-member name="_put_range"><type><classname>put_range_aux::adaptor2</classname> const</type></data-member></namespace><namespace name="put_range_aux"><struct name="adaptor1"><template>
      <template-type-parameter name="From"/>
    </template><data-member name="value" specifiers="mutable"><type>From const &amp;</type></data-member><method-group name="public member functions"/><constructor><parameter name="from"><paramtype>From const &amp;</paramtype></parameter></constructor><method-group name="private member functions"/><constructor/></struct><struct name="adaptor2"><method-group name="public member functions"><method name="operator()" cv="const"><type><classname>adaptor1</classname>&lt; From &gt;</type><template>
          <template-type-parameter name="From"/>
        </template><parameter name="from"><paramtype>const From &amp;</paramtype></parameter></method></method-group><constructor/></struct><function name="operator|"><type>To &amp;</type><template>
          <template-type-parameter name="To"/>
          <template-type-parameter name="From"/>
        </template><parameter name="to"><paramtype>To &amp;</paramtype></parameter><parameter name="from"><paramtype><classname>put_range_aux::adaptor1</classname>&lt; From &gt; const &amp;</paramtype></parameter></function></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/put/range/convert.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="adaptor"><function name="convert"><type><classname>convert_aux::adaptor</classname>&lt; To &gt;</type><template>
          <template-type-parameter name="To"/>
        </template></function></namespace><namespace name="convert_aux"><struct name="adaptor"><template>
      <template-type-parameter name="To"/>
    </template><method-group name="public member functions"/><constructor/></struct><function name="operator|"><type>To</type><template>
          <template-type-parameter name="From"/>
          <template-type-parameter name="To"/>
        </template><parameter name="from"><paramtype>From &amp;</paramtype></parameter><parameter name="dummy"><paramtype><classname>convert_aux::adaptor</classname>&lt; To &gt; const &amp;</paramtype></parameter></function></namespace><function name="convert"><type>To</type><template>
          <template-type-parameter name="To"/>
          <template-type-parameter name="From"/>
        </template><parameter name="from"><paramtype>From const &amp;</paramtype></parameter></function></namespace></namespace></namespace><macro name="BOOST_ASSIGN_V2_CONVERT_CONVERT_MF"/><macro name="BOOST_ASSIGN_V2_CONVERT_OPERATOR_MF"/></header><header name="boost/assign/v2/put/range/range.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><function name="put_range"><type>To &amp;</type><template>
          <template-type-parameter name="From"/>
          <template-type-parameter name="To"/>
        </template><parameter name="from"><paramtype>From const &amp;</paramtype></parameter><parameter name="to"><paramtype>To &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/assign/v2/ref/anon/csv/assign_copy.hpp"><macro name="xxx_Tag1"/></header><header name="boost/assign/v2/ref/anon/unary/assign_copy.hpp"/><header name="boost/assign/v2/ref/anon/csv/assign_rebind.hpp"><macro name="xxx_Tag1"/></header><header name="boost/assign/v2/ref/anon/unary/assign_rebind.hpp"/><header name="boost/assign/v2/ref/anon/csv/assign_xxx.hpp"><macro name="BOOST_ASSIGN_V2_REF_CSV_ARRAY_iter" kind="functionlike"><macro-parameter name="z"/><macro-parameter name="n"/><macro-parameter name="data"/></macro><macro name="BOOST_ASSIGN_V2_REF_CSV_ARRAY_ASSIGN_XXX" kind="functionlike"><macro-parameter name="NS"/></macro></header><header name="boost/assign/v2/ref/anon/unary/assign_xxx.hpp"><macro name="BOOST_ASSIGN_V2_REF_ANON_UNARY_XXX" kind="functionlike"><macro-parameter name="NS"/><macro-parameter name="Tag1"/></macro></header><header name="boost/assign/v2/ref/anon/csv/nth_result_of.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="ref"><namespace name="anon_aux"><struct name="empty_anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template></struct><struct name="recursive_result"><template>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><typedef name="previous_"><type><classname>recursive_result</classname>&lt; N-1, Tag1, T &gt;::type</type></typedef><typedef name="type"><type>previous_::template result&lt; T &gt;::type</type></typedef></struct><struct-specialization name="recursive_result"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>0</template-arg><template-arg>Tag1</template-arg><template-arg>T</template-arg></specialization><inherit access="public">boost::assign::v2::ref::anon_aux::empty_anon&lt; Tag1, T &gt;</inherit></struct-specialization><typedef name="csv_tag2_"><type>boost::use_default</type></typedef></namespace><namespace name="nth_result_of"><struct name="csv_anon"><template>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><typedef name="type"><type>static_array_aux::fast_alloc&lt; N, Tag1, T &gt;</type></typedef></struct><struct name="anon"><template>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::anon_aux::recursive_result&lt; N, Tag1, T &gt;</inherit></struct></namespace></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/ref/anon/unary/nth_result_of.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="ref"><namespace name="anon_aux"><struct name="empty_anon"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template></struct><struct name="recursive_result"><template>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><typedef name="previous_"><type><classname>recursive_result</classname>&lt; N-1, Tag1, T &gt;::type</type></typedef><typedef name="type"><type>previous_::template result&lt; T &gt;::type</type></typedef></struct><struct-specialization name="recursive_result"><template>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>0</template-arg><template-arg>Tag1</template-arg><template-arg>T</template-arg></specialization><inherit access="public">boost::assign::v2::ref::anon_aux::empty_anon&lt; Tag1, T &gt;</inherit></struct-specialization><typedef name="csv_tag2_"><type>boost::use_default</type></typedef></namespace><namespace name="nth_result_of"><struct name="csv_anon"><template>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><typedef name="type"><type>static_array_aux::fast_alloc&lt; N, Tag1, T &gt;</type></typedef></struct><struct name="anon"><template>
      <template-nontype-parameter name="N"><type>std::size_t</type></template-nontype-parameter>
      <template-type-parameter name="Tag1"/>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::assign::v2::ref::anon_aux::recursive_result&lt; N, Tag1, T &gt;</inherit></struct></namespace></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/ref/anon/csv/pp.hpp"><macro name="BOOST_ASSIGN_V2_REF_CSV_ARRAY_invoke" kind="functionlike"><macro-parameter name="z"/><macro-parameter name="n"/><macro-parameter name="data"/></macro><macro name="BOOST_ASSIGN_V2_REF_CSV_ARRAY_tpl" kind="functionlike"><macro-parameter name="U"/><macro-parameter name="N"/><macro-parameter name="param"/><macro-parameter name="Tag1"/></macro></header><header name="boost/assign/v2/ref/anon/unary/tag2.hpp"><namespace name="boost"><namespace name="assign"><namespace name="v2"><namespace name="ref"><namespace name="anon_aux"><typedef name="unary_tag2_"><type>ref::alloc_tag::lazy_alloc</type></typedef></namespace></namespace></namespace></namespace></namespace></header><header name="boost/assign/v2/ref/anon/unary/unary.hpp"/><header name="boost/assign/v2/ref/ref.hpp"/><header name="boost/assign/v2/v2.hpp"/></library-reference>
