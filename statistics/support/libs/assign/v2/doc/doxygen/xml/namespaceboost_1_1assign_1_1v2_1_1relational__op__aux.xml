<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="namespaceboost_1_1assign_1_1v2_1_1relational__op__aux" kind="namespace">
    <compoundname>boost::assign::v2::relational_op_aux</compoundname>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1base" prot="public">boost::assign::v2::relational_op_aux::base</innerclass>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1crtp" prot="public">boost::assign::v2::relational_op_aux::crtp</innerclass>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1is__relational" prot="public">boost::assign::v2::relational_op_aux::is_relational</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1relational__op__aux_1a121739b7cddede1b18fbde6db81fb459" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>boost::disable_if&lt; <ref refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1is__relational" kindref="compound">relational_op_aux::is_relational</ref>&lt; A &gt;, bool &gt;::type</type>
        <definition>boost::disable_if&lt; relational_op_aux::is_relational&lt;A&gt;, bool &gt;::type boost::assign::v2::relational_op_aux::operator==</definition>
        <argsstring>(A const &amp;a, crtp&lt; B &gt; const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>A const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1crtp" kindref="compound">crtp</ref>&lt; B &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" line="46" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1relational__op__aux_1a6b6d7f50759de3fc46901dc652cf0e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::assign::v2::relational_op_aux::operator==</definition>
        <argsstring>(crtp&lt; A &gt; const &amp;a, B const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1crtp" kindref="compound">crtp</ref>&lt; A &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>B const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" line="52" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1relational__op__aux_1a3eb62216be7979768a47fcc331806723" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>boost::disable_if&lt; <ref refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1is__relational" kindref="compound">relational_op_aux::is_relational</ref>&lt; A &gt;, bool &gt;::type</type>
        <definition>boost::disable_if&lt; relational_op_aux::is_relational&lt;A&gt;, bool &gt;::type boost::assign::v2::relational_op_aux::operator&lt;</definition>
        <argsstring>(A const &amp;a, crtp&lt; B &gt; const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>A const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1crtp" kindref="compound">crtp</ref>&lt; B &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" line="63" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1relational__op__aux_1a3821be30f0c1a83e645edd9c2958f2d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::assign::v2::relational_op_aux::operator&lt;</definition>
        <argsstring>(crtp&lt; A &gt; const &amp;a, B const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1relational__op__aux_1_1crtp" kindref="compound">crtp</ref>&lt; A &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>B const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" line="69" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1relational__op__aux_1a63dcdf8fac50ddc7b3e1e1a1ff1d8c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::assign::v2::relational_op_aux::MACRO</definition>
        <argsstring>(&lt;=,(a&lt; b)||(a==b)) MACRO( &gt;</argsstring>
        <name>MACRO</name>
        <param>
          <type>&lt;=</type>
        </param>
        <param>
          <type>(a&lt; b)||(a==b)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" line="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/detail/relational_op/crtp.hpp" line="18"/>
  </compounddef>
</doxygen>
