<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="namespaceboost_1_1assign_1_1v2_1_1ref" kind="namespace">
    <compoundname>boost::assign::v2::ref</compoundname>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1ref_1_1is__unwrapped__iterator" prot="public">boost::assign::v2::ref::is_unwrapped_iterator</innerclass>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1ref_1_1is__unwrapped__range" prot="public">boost::assign::v2::ref::is_unwrapped_range</innerclass>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4" prot="public">boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</innerclass>
    <innerclass refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp" prot="public">boost::assign::v2::ref::wrapper_crtp</innerclass>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper" prot="public">boost::assign::v2::ref::wrapper</innerclass>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01assign__tag_1_1rebind_00_01_t_01_4" prot="public">boost::assign::v2::ref::wrapper&lt; assign_tag::rebind, T &gt;</innerclass>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1alloc__tag">boost::assign::v2::ref::alloc_tag</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1anon__aux">boost::assign::v2::ref::anon_aux</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1assign__copy">boost::assign::v2::ref::assign_copy</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1assign__rebind">boost::assign::v2::ref::assign_rebind</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1assign__tag">boost::assign::v2::ref::assign_tag</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1container__type__traits">boost::assign::v2::ref::container_type_traits</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits">boost::assign::v2::ref::convert_traits</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1functional">boost::assign::v2::ref::functional</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1fusion__aux">boost::assign::v2::ref::fusion_aux</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1fusion__matrix__aux">boost::assign::v2::ref::fusion_matrix_aux</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1nth__result__of">boost::assign::v2::ref::nth_result_of</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1result__of">boost::assign::v2::ref::result_of</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1static__array__aux">boost::assign::v2::ref::static_array_aux</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1type__traits">boost::assign::v2::ref::type_traits</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1unwrap__aux">boost::assign::v2::ref::unwrap_aux</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1wrapper__aux">boost::assign::v2::ref::wrapper_aux</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a55618fcbdfe0f24d6c43cb660c6c4763" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1empty__csv__anon" kindref="compound">result_of::empty_csv_anon</ref>&lt; Tag1, T &gt;::type</type>
        <definition>result_of::empty_csv_anon&lt;Tag1, T&gt;::type boost::assign::v2::ref::csv_anon</definition>
        <argsstring>(keyword_aux::nil)</argsstring>
        <name>csv_anon</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1keyword__aux_1_1nil" kindref="compound">keyword_aux::nil</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/csv/make.hpp" line="39" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/csv/make.hpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a9b204fdec97f2d01692f6e6805fe2ead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1anon__nil" kindref="compound">result_of::anon_nil</ref>&lt; Tag1, T &gt;::type</type>
        <definition>result_of::anon_nil&lt;Tag1, T&gt;::type boost::assign::v2::ref::anon</definition>
        <argsstring>(keyword_aux::nil const &amp;)</argsstring>
        <name>anon</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1keyword__aux_1_1nil" kindref="compound">keyword_aux::nil</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/unary/make.hpp" line="37" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/unary/make.hpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1aaa66c5ed4010a05ad25263e62dc1dfec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1anon" kindref="compound">result_of::anon</ref>&lt; Tag1, T &gt;::type</type>
        <definition>result_of::anon&lt;Tag1, T&gt;::type boost::assign::v2::ref::anon</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>anon</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/unary/make.hpp" line="45" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/unary/make.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a9765d43dc1c526bc7e8895988ed8bce6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1anon" kindref="compound">result_of::anon</ref>&lt; Tag1, T const  &gt;::type</type>
        <definition>result_of::anon&lt;Tag1, T const&gt;::type boost::assign::v2::ref::anon</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>anon</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/unary/make.hpp" line="52" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/unary/make.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a159942c3ea2c93553b7b1722b6c5e6db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1unwrap__iterator" kindref="compound">result_of::unwrap_iterator</ref>&lt; I &gt;::type</type>
        <definition>result_of::unwrap_iterator&lt;I&gt;::type boost::assign::v2::ref::unwrap_iterator</definition>
        <argsstring>(const I &amp;base)</argsstring>
        <name>unwrap_iterator</name>
        <param>
          <type>const I &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/unwrap/iterator.hpp" line="101" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/unwrap/iterator.hpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a12d64c0e21ccaba6fd314ebb4b8c89d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1unwrap__range" kindref="compound">result_of::unwrap_range</ref>&lt; R &gt;::type</type>
        <definition>result_of::unwrap_range&lt;R&gt;::type boost::assign::v2::ref::unwrap_range</definition>
        <argsstring>(R &amp;r)</argsstring>
        <name>unwrap_range</name>
        <param>
          <type>R &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/unwrap/range.hpp" line="82" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/unwrap/range.hpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1ac622020974862e1c35914537d4f1790f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1unwrap__range" kindref="compound">result_of::unwrap_range</ref>&lt; R const  &gt;::type</type>
        <definition>result_of::unwrap_range&lt;R const&gt;::type boost::assign::v2::ref::unwrap_range</definition>
        <argsstring>(R const &amp;r)</argsstring>
        <name>unwrap_range</name>
        <param>
          <type>R const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/unwrap/range.hpp" line="90" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/unwrap/range.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a07f936c3ba3c58af8ada39f0673d5f4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag1</type>
          </param>
          <param>
            <type>typename Tag2</type>
          </param>
          <param>
            <type>typename Tnil</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1empty__fusion" kindref="compound">result_of::empty_fusion</ref>&lt; Tag1, Tag2, Tnil &gt;::type</type>
        <definition>result_of::empty_fusion&lt;Tag1, Tag2, Tnil&gt;::type boost::assign::v2::ref::fusion</definition>
        <argsstring>(keyword_aux::nil)</argsstring>
        <name>fusion</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1keyword__aux_1_1nil" kindref="compound">keyword_aux::nil</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/fusion/make.hpp" line="40" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/fusion/make.hpp" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1aa567a481e2772c079e0e0d5cbe3d7544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag1</type>
          </param>
          <param>
            <type>typename Tag2</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1result__of_1_1empty__fusion" kindref="compound">result_of::empty_fusion</ref>&lt; Tag1, Tag2, fusion_aux::nil_arg_type &gt;::type</type>
        <definition>result_of::empty_fusion&lt; Tag1, Tag2, fusion_aux::nil_arg_type &gt;::type boost::assign::v2::ref::fusion</definition>
        <argsstring>(keyword_aux::nil)</argsstring>
        <name>fusion</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1keyword__aux_1_1nil" kindref="compound">keyword_aux::nil</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/fusion/make.hpp" line="56" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/fusion/make.hpp" bodystart="55" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a3f74b67dea04fbd869503e60849a3a15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::assign::v2::ref::rebind</definition>
        <argsstring>(wrapper_crtp&lt; D, T &gt; &amp;a, T &amp;r)</argsstring>
        <name>rebind</name>
        <param>
          <type><ref refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp" kindref="compound">wrapper_crtp</ref>&lt; D, T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/crtp.hpp" line="102" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/crtp.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1ad6a1e5a06bad082b32d0cb395b278094" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::assign::v2::ref::swap</definition>
        <argsstring>(wrapper_crtp&lt; D, T &gt; &amp;l, wrapper_crtp&lt; D, T &gt; &amp;r)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp" kindref="compound">wrapper_crtp</ref>&lt; D, T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp" kindref="compound">wrapper_crtp</ref>&lt; D, T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/crtp.hpp" line="106" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/crtp.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a9765c9a8e9191f763b11c300f3ce10d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper" kindref="compound">ref::wrapper</ref>&lt; Tag, T &gt;</type>
        <definition>ref::wrapper&lt;Tag,T&gt; boost::assign::v2::ref::wrap</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>wrap</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/framework.hpp" line="34" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/framework.hpp" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1assign_1_1v2_1_1ref_1a273f9d4354f415a41969b118cac4b9c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper" kindref="compound">ref::wrapper</ref>&lt; Tag, T const  &gt;</type>
        <definition>ref::wrapper&lt;Tag,T const&gt; boost::assign::v2::ref::wrap</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>wrap</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/framework.hpp" line="42" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/framework.hpp" bodystart="41" bodyend="45"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/anon/csv/make.hpp" line="27"/>
  </compounddef>
</doxygen>
