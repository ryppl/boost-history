<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4" kind="struct" prot="public">
    <compoundname>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</compoundname>
    <basecompoundref refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp" prot="public" virt="non-virtual">boost::assign::v2::ref::wrapper_crtp&lt; wrapper&lt; ref::assign_tag::copy, T &gt;, T &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4_1a70bf25b29861d62fa82126288749c852" prot="public" static="no">
        <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1assign__tag_1_1copy" kindref="compound">ref::assign_tag::copy</ref></type>
        <definition>typedef ref::assign_tag::copy boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;::assign_tag</definition>
        <argsstring></argsstring>
        <name>assign_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" line="34" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4_1af17a1e0a34b944dba0a59b309839c394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;::assign</definition>
        <argsstring>(typename boost::call_traits&lt; T &gt;::param_type r)</argsstring>
        <name>assign</name>
        <param>
          <type>typename boost::call_traits&lt; T &gt;::param_type</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" line="37" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4_1a27d6178698aa799b426133c062965fe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;::swap</definition>
        <argsstring>(wrapper &amp;r)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper" kindref="compound">wrapper</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" line="42" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="915">
        <label>boost::less_than_comparable1&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, boost::less_than_comparable2&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, T, boost::equality_comparable1&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, boost::equality_comparable2&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, T &gt; &gt; &gt; &gt;</label>
        <link refid="classboost_1_1less__than__comparable1"/>
      </node>
      <node id="914">
        <label>boost::assign::v2::ref::wrapper_crtp&lt; wrapper&lt; ref::assign_tag::copy, T &gt;, T &gt;</label>
        <link refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp"/>
        <childnode refid="915" relation="private-inheritance">
        </childnode>
      </node>
      <node id="913">
        <label>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</label>
        <link refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4"/>
        <childnode refid="914" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="918">
        <label>boost::less_than_comparable1&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, boost::less_than_comparable2&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, T, boost::equality_comparable1&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, boost::equality_comparable2&lt; wrapper_crtp&lt;wrapper&lt; ref::assign_tag::copy, T &gt; ,T&gt;, T &gt; &gt; &gt; &gt;</label>
        <link refid="classboost_1_1less__than__comparable1"/>
      </node>
      <node id="917">
        <label>boost::assign::v2::ref::wrapper_crtp&lt; wrapper&lt; ref::assign_tag::copy, T &gt;, T &gt;</label>
        <link refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp"/>
        <childnode refid="918" relation="private-inheritance">
        </childnode>
      </node>
      <node id="916">
        <label>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</label>
        <link refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4"/>
        <childnode refid="917" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" line="31" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/wrapper/copy.hpp" bodystart="28" bodyend="46"/>
    <listofallmembers>
      <member refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4_1af17a1e0a34b944dba0a59b309839c394" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>assign</name></member>
      <member refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4_1a70bf25b29861d62fa82126288749c852" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>assign_tag</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1aa12beb819637cc6b328357f0ca4da922" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>derived</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a433ebdd79af2746670c5d6c45b173bb5" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>derived</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a990c088c7b452d911403bb82807786f1" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator T &amp;</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a0607cc8c5ec920986f0fa2d36c07596f" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator&lt;</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1afd7b8ce51d190f11a0a80491066c891d" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator&lt;</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1af62a30996156a0dd63bef12d09ae9a7d" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator=</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a9f0cabfee05257147b9c152cbe57a70d" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator=</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a0c9f2657f43519d307b0b9646f7be20b" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator==</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a42c203e3c13797cb1ffcd87f407c2825" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator==</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a72e0d25854c1aac2e195f0e4ea807961" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>operator&gt;</name></member>
      <member refid="structboost_1_1assign_1_1v2_1_1ref_1_1wrapper_3_01ref_1_1assign__tag_1_1copy_00_01_t_01_4_1a27d6178698aa799b426133c062965fe8" prot="public" virt="non-virtual"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>swap</name></member>
      <member refid="classboost_1_1assign_1_1v2_1_1ref_1_1wrapper__crtp_1a7dff2aabde4689105ff0de97e51e7298" prot="public" virt="non-virtual" ambiguityscope="wrapper_crtp&lt; wrapper&lt; ref::assign_tag::copy, T &gt;, T &gt;::"><scope>boost::assign::v2::ref::wrapper&lt; ref::assign_tag::copy, T &gt;</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
