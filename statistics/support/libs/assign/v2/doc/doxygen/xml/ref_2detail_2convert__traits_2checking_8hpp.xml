<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="ref_2detail_2convert__traits_2checking_8hpp" kind="file">
    <compoundname>checking.hpp</compoundname>
    <includes local="no">boost/mpl/apply.hpp</includes>
    <includes local="no">boost/mpl/not.hpp</includes>
    <includes local="no">boost/config.hpp</includes>
    <includes local="no">boost/static_assert.hpp</includes>
    <includes local="no">boost/utility/enable_if.hpp</includes>
    <includes local="no">boost/type_traits/promote.hpp</includes>
    <includes local="no">boost/type_traits/is_same.hpp</includes>
    <includes refid="ref_2detail_2convert__traits_2result_8hpp" local="no">boost/assign/v2/ref/detail/convert_traits/result.hpp</includes>
    <incdepgraph>
      <node id="4731">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="4717">
        <label>boost/mpl/apply.hpp</label>
      </node>
      <node id="4722">
        <label>boost/type_traits/promote.hpp</label>
      </node>
      <node id="4728">
        <label>boost/type_traits/is_reference.hpp</label>
      </node>
      <node id="4732">
        <label>boost/assign/v2/ref/detail/convert_traits/twin_values.hpp</label>
        <link refid="ref_2detail_2convert__traits_2twin__values_8hpp_source"/>
        <childnode refid="4733" relation="include">
        </childnode>
        <childnode refid="4734" relation="include">
        </childnode>
        <childnode refid="4735" relation="include">
        </childnode>
        <childnode refid="4736" relation="include">
        </childnode>
      </node>
      <node id="4727">
        <label>boost/type_traits/is_const.hpp</label>
      </node>
      <node id="4720">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="4737">
        <label>boost/type_traits/add_const.hpp</label>
      </node>
      <node id="4730">
        <label>boost/type_traits/remove_reference.hpp</label>
      </node>
      <node id="4736">
        <label>boost/assign/v2/ref/detail/convert_traits/add_const.hpp</label>
        <link refid="add__const_8hpp_source"/>
        <childnode refid="4733" relation="include">
        </childnode>
        <childnode refid="4734" relation="include">
        </childnode>
        <childnode refid="4737" relation="include">
        </childnode>
      </node>
      <node id="4733">
        <label>boost/mpl/eval_if.hpp</label>
      </node>
      <node id="4724">
        <label>boost/assign/v2/ref/detail/convert_traits/result.hpp</label>
        <link refid="ref_2detail_2convert__traits_2result_8hpp_source"/>
        <childnode refid="4719" relation="include">
        </childnode>
        <childnode refid="4725" relation="include">
        </childnode>
        <childnode refid="4726" relation="include">
        </childnode>
        <childnode refid="4720" relation="include">
        </childnode>
        <childnode refid="4723" relation="include">
        </childnode>
        <childnode refid="4727" relation="include">
        </childnode>
        <childnode refid="4728" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4730" relation="include">
        </childnode>
        <childnode refid="4731" relation="include">
        </childnode>
        <childnode refid="4732" relation="include">
        </childnode>
        <childnode refid="4738" relation="include">
        </childnode>
      </node>
      <node id="4721">
        <label>boost/utility/enable_if.hpp</label>
      </node>
      <node id="4740">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="4739">
        <label>boost/numeric/conversion/conversion_traits.hpp</label>
      </node>
      <node id="4716">
        <label>/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/convert_traits/checking.hpp</label>
        <link refid="ref/detail/convert_traits/checking.hpp"/>
        <childnode refid="4717" relation="include">
        </childnode>
        <childnode refid="4718" relation="include">
        </childnode>
        <childnode refid="4719" relation="include">
        </childnode>
        <childnode refid="4720" relation="include">
        </childnode>
        <childnode refid="4721" relation="include">
        </childnode>
        <childnode refid="4722" relation="include">
        </childnode>
        <childnode refid="4723" relation="include">
        </childnode>
        <childnode refid="4724" relation="include">
        </childnode>
      </node>
      <node id="4729">
        <label>boost/type_traits/is_convertible.hpp</label>
      </node>
      <node id="4734">
        <label>boost/mpl/identity.hpp</label>
      </node>
      <node id="4726">
        <label>boost/mpl/or.hpp</label>
      </node>
      <node id="4718">
        <label>boost/mpl/not.hpp</label>
      </node>
      <node id="4719">
        <label>boost/config.hpp</label>
      </node>
      <node id="4725">
        <label>boost/mpl/and.hpp</label>
      </node>
      <node id="4738">
        <label>boost/assign/v2/ref/detail/convert_traits/distinct_values.hpp</label>
        <link refid="ref_2detail_2convert__traits_2distinct__values_8hpp_source"/>
        <childnode refid="4739" relation="include">
        </childnode>
        <childnode refid="4733" relation="include">
        </childnode>
        <childnode refid="4734" relation="include">
        </childnode>
        <childnode refid="4725" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4740" relation="include">
        </childnode>
        <childnode refid="4736" relation="include">
        </childnode>
      </node>
      <node id="4735">
        <label>boost/type_traits/add_reference.hpp</label>
      </node>
      <node id="4723">
        <label>boost/type_traits/is_same.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" prot="public">boost::assign::v2::ref::convert_traits::checking::tester</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign">boost::assign</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2">boost::assign::v2</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref">boost::assign::v2::ref</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits">boost::assign::v2::ref::convert_traits</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking">boost::assign::v2::ref::convert_traits::checking</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1twin__values">boost::assign::v2::ref::convert_traits::checking::twin_values</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1distinct__values">boost::assign::v2::ref::convert_traits::checking::distinct_values</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1distinct__values_1_1arithmetic">boost::assign::v2::ref::convert_traits::checking::distinct_values::arithmetic</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1distinct__values_1_1arithmetic_1_1workaround">boost::assign::v2::ref::convert_traits::checking::distinct_values::arithmetic::workaround</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ref_2detail_2convert__traits_2checking_8hpp_1a37ac7b7ea9da578e2d19b7193fe47532" prot="public" static="no">
        <name>m</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <initializer>template&lt;typename T&gt;													\
    void do_check(															\
    	typename boost::enable_if&lt;											\
    		boost::is_same&lt;T,T1&gt; 											\
        &gt;::type* = 0														\
    ) 																		\
    {																		\
        distinct_values::arithmetic::do_check_impl( T1(), T2(), T3() );	    \
    }																		\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/convert_traits/checking.hpp" line="116" bodyfile="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/convert_traits/checking.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/><sp/>Boost.Assign<sp/>v2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(C)<sp/>2003-2004<sp/>Thorsten<sp/>Ottosen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(C)<sp/>2010<sp/>Erwann<sp/>Rogard<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Use,<sp/>modification<sp/>and<sp/>distribution<sp/>are<sp/>subject<sp/>to<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying<sp/>file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_ASSIGN_V2_REF_CONVERT_TRAITS_CHECKING_ER_2010_HPP</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BOOST_ASSIGN_V2_REF_CONVERT_TRAITS_CHECKING_ER_2010_HPP</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/mpl/apply.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/mpl/not.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/static_assert.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/utility/enable_if.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/type_traits/promote.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/type_traits/is_same.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign/v2/ref/detail/convert_traits/result.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">assign{<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">v2{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ref{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">convert_traits{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">checking{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="29" refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester</ref>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1result" kindref="compound">convert_traits::result&lt;T1,T2&gt;::type</ref><sp/>result_;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::is_same&lt;result_,T3&gt;<sp/>pred_;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_STATIC_ASSERT(<sp/>pred_::value<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">twin_values{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T &amp;, const T &amp;, const T &amp;&gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T &amp;,       T &amp;, const T &amp;&gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T &amp;, const T &amp;, const T &amp;&gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T &amp;,       T &amp;,       T &amp;&gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T &amp;, const T  , const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T &amp;,       T  , const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T &amp;, const T  , const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T &amp;,       T  ,       T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T ,  const T &amp;, const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T ,        T &amp;, const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T ,  const T &amp;, const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T ,        T &amp;,       T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T ,  const T  , const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;const T ,        T  , const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T ,  const T  , const T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1assign_1_1v2_1_1ref_1_1convert__traits_1_1checking_1_1tester" kindref="compound">tester&lt;      T ,        T  ,       T  &gt;::test</ref>();<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>twin_values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">distinct_values{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">arithmetic{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T3&amp;)<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>for<sp/>Ubuntu<sp/>9.1<sp/>-<sp/>GCC<sp/>4.4<sp/>(see<sp/>workaround<sp/>below).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>typename<sp/>boost::mpl::not_&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>boost::is_same&lt;T1,T2&gt;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&gt;::type<sp/>not_same_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BOOST_STATIC_ASSERT(not_same_::value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1&amp;,<sp/>const<sp/>T2&amp;,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1&amp;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&amp;,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1&amp;,<sp/>const<sp/>T2&amp;,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1&amp;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&amp;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1&amp;,<sp/>const<sp/>T2<sp/>,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1&amp;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2<sp/>,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1&amp;,<sp/>const<sp/>T2<sp/>,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1&amp;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1<sp/>,<sp/><sp/>const<sp/>T2&amp;,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&amp;,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1<sp/>,<sp/><sp/>const<sp/>T2&amp;,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&amp;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1<sp/>,<sp/><sp/>const<sp/>T2<sp/>,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;const<sp/>T1<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2<sp/>,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1<sp/>,<sp/><sp/>const<sp/>T2<sp/>,<sp/>const<sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester&lt;<sp/><sp/><sp/><sp/><sp/><sp/>T1<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>T3<sp/>&gt;::test();<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>m(T1,<sp/>T2,<sp/>T3)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>do_check(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::is_same&lt;T,T1&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type*<sp/>=<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distinct_values::arithmetic::do_check_impl(<sp/>T1(),<sp/>T2(),<sp/>T3()<sp/>);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Works<sp/>for<sp/>Max<sp/>OSX<sp/>10.6<sp/>GCC<sp/>4.2<sp/>but<sp/>not<sp/>Ubuntu<sp/>9.1<sp/>GCC<sp/>4.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m(short<sp/><sp/>,<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m(int<sp/><sp/><sp/><sp/>,<sp/>long,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m(float<sp/><sp/>,<sp/>double,<sp/><sp/><sp/><sp/><sp/><sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>typedef<sp/>long<sp/>double<sp/>long_double_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>m(double<sp/>,<sp/>long_double_,<sp/>long<sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">workaround{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::numeric::conversion_traits&lt;short,<sp/>int&gt;::supertype<sp/>a_;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::numeric::conversion_traits&lt;int,<sp/>long&gt;::supertype<sp/>b_;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::numeric::conversion_traits&lt;float,<sp/>double&gt;::supertype<sp/>c_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::numeric::conversion_traits&lt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;::supertype<sp/>d_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>workaround</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">m(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workaround::a_)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">m(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workaround::b_)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">m(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>workaround::c_)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">typedef<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>long_double_;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">m(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>,<sp/>long_double_,<sp/>workaround::d_)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>m</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight><highlight class="comment">//<sp/>arithmetic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>distinct_values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>convert_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/erwann/sandbox/statistics/support/boost/assign/v2/ref/detail/convert_traits/checking.hpp"/>
  </compounddef>
</doxygen>
