[/
  (C) Copyright 2008-2009 Vicente J Botet Escriba.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:changes  Appendix A: History]

[section [*Version 0.2, May 07, 2009] Adding immediate asynchronous executor + Adaptation to Boost 1.39]

[*Features:]

* Immediate asynchronous executor 

[endsect]

[section [*Version 0.1, April 29, 2009] Extraction of the AE/ACT frameworks from Boost.Async]

[*Features:]

* An asynchronous execution framework working with __AE__ and __ACT__. It includes some generic functions and several __AE__ and __ACT__:
    * fork and fork_all to execute asynchronously functions
    * fork_after: request an __AE__ to execute a function asynchronously once each one of __ACT__ in the dependency tuple parameter are ready. It is similar to the async_with_dependencies proposed Peter Dimov.
    * generic get, join, ... free functions to synchronize on an __ACT__
    * generic get_all, join_all, ... free functions to synchronize on multiple __ACT__
    * generic wait_for_all, wait_for_any to execute asynchronously functions and wait for the completion of all or any of them.

* Some __AE__ and __ACT__ models
    * basic_threader: can be seen as a thread factory executing asynchronously a function on the returned thread.
    * launchers: Launchers can be seen as a future factory executing asynchronously a function on a hidden thread.
    * threader/joiner: A Threader runs a unary function in its own thread. A Threader can be seen as a Joiner
    factory executing asynchronously a function on a thread encapsulated on the returned Joiner. The joiner is used
    to synchronize with and pick up the result from a function or to manage the encapsulated thread.
    * __tp_pool__ and __tp_task__ customization as an __AE__ and an __ACT__ respectively. __tp_pool__ can be seen as
    a __tp_task__ factory executing asynchronously a function on a pool of threads.
    * a generic asynchronous_executor_decorator which allows to decorate the function to be evaluated asynchronously.
    
[endsect]


[section [*Bugs]]

[heading [*Open Bugs:]]

[heading [*Fixed Bugs:]]

[endsect]

[endsect]
