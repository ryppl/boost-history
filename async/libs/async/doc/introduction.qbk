[/
  (C) Copyright 2008-2009 Vicente J Botet Escriba.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]
[/=============================================================================]

[/============================]
[section:motivation Motivation]
[/============================]

[section Asynchronous Executors and Asynchronous Completion Token Handles]
[/=======================================================================]

In [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1883.pdf N1833 - Preliminary Threading Library Proposal for TR2]
Kevlin Henney introduces the concept of `threader` an asynchronous executor and a function `thread()` that evaluates a function
asynchronously and returns an asynchronous completion token `joiner`, able to join but also to get the value of the function result.

In [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2185.html N2185 - Proposed Text for Parallel Task Execution]
Peter Dimov introduces a `fork()` function able to evaluate a function asynchronously and returns a `future` handle.

In [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2276.html N2276 - Thread Pools and Futures]
Anthony William introduces `launch_in_thread` and `launch_in_pool` function templates which
evaluates a function asynchronously either in a specific `thread` or a thread pool and
returns a `unique_future` handle.

In [@http://www.boostpro.com/vault/index.php?action=downloadfile&filename=boost-threadpool.3.tar.gz&directory=Concurrent%20Programming&  Boost.ThreadPool]
Oliver Kowalke proposes a complete implementation of a thread `pool` with a `submit()` function
which evaluates a function asynchronously and returns a `task` handle.

Behind all these proposals there is a concept of asynchronous executor, fork-like function and
the asynchronous completion token handle.

[table AE/ACT/fork-like relationship
    [
        [[*Proposal]]       [[*executor]]   [[*fork-like]]              [[*ACT handle]]
    ]
    [
        [Boost.Thread]      [`thread` class] [`thread()` constructor]   [__thread__]
    ]
    [
        [Boost.ThreadPool]  [__tp_pool__]   [`submit()`]                [__tp_task__]
    ]
    [
        [N2276]             [__thread__]    [`launch_in_thread()`]      [`unique_future<T>`]
    ]
    [
        [N2276]             [thread_pool]   [`launch_in_pool()`]        [`unique_future<T>`]
    ]
    [
        [N2185]             [thread pool]   [`fork()`]                  [`future<T>`]
    ]
    [
        [N1833]             [`threader`]    [`thread()`]                [`joiner<T>`]
    ]
]

The asynchronous completion token models can follow two interfaces, the thread interface and
the future interface. Some asynchronous completion tokens handle allow to recover the result of the evaluation of
the function, others allow to manage the underlying thread of execution.

It seems natural to make a generic __fork__ function that will evaluate a function asynchronously
with respect to the calling thread and returns an ACT handle. The following meta-function
associates an ACT handle to an asynchronous executor.

    template <typename AE, typename T>
    struct asynchronous_completion_token {
        typedef typename AE::template handle<T>::type type;
    };

The result of forking a nullary function by an asynchronous executor is given by the metafunction result_of::fork<AE,F>

    namespace result_of {
        template <typename AE,typename F>
        struct __c_fork__ {
            typedef typename boost::result_of<F()>::type result_type;
            typedef typename asynchronous_completion_token<AE, result_type>::type type;
        };
    }

The default implementation of fork delegates on fork asynchronous executor function.

    template< typename AE, typename F >
    typename result_of::fork<AE, F>::type fork( AE& ae, F fn ) {
        return ae.fork(fn);
    }

Forking n-ary functions rely on the nullary version and bind.

    template< typename AE, typename F, typename A1, ..., typename An >
    typename asynchronous_completion_token<AE,
                typename boost::result_of<F(A1,..., An)>::type >::type
    fork( AE& ae, F fn, A1 a1, ..., An an ) {
        return ae.fork( bind( fn, a1, ..., an ) );
    }

We can define a basic_threader which just returns a new thread as follows:

    class basic_threader {
    public:
        template <typename T>
        struct handle {
            typedef boost::thread type;
        };

        template <typename F>
        boost::thread fork(F f) {
            thread th(f);
            return boost::move(th);
        }
    };

The library includes also a launcher class that creates a thread and returns a unique_future when forking

    class launcher {
    public:
        template <typename T>
        struct handle {
            typedef unique_future<T> type;
        };
        template <typename F>
        unique_future<typename result_of<F()>::type>
        fork(F f) {
            typedef typename boost::result_of<F()>::type result_type;
            packaged_task<result_type> tsk(f);
            unique_future<result_type> res = tsk.get_future();
            thread th(boost::move(tsk));
            return res;
        }
    };

and a shared_launcher class that creates a thread and returns a shared_future when forking.

Given the sequential example:

    double f( double a, int n )
    {
        double r = 0.0;

        for( int i = 1; i <= n; ++i )
        {
            double x = 1.0 / i;
            r += std::pow( x, a );
        }

        return r;
    }

    int main()
    {
        double m1 = f( 1.0, 1000000 );
        double m2 = f( 1.0, 5000000 );
        double m3 = f( 2.2, 1000000 );
        double m4 = f( 2.2, 5000000 );

        std::cout << m2 - m1 + m3 - m4 << std::endl;
    }

The library allows a programmer to switch to parallel execution as follows:

    int main()
    {
        launcher l;
        boost::unique_future<double> fm1 = basync::fork( l, f, 1.0, 1000000 );
        boost::unique_future<double> fm2 = basync::fork( l, f, 1.0, 5000000 );
        boost::unique_future<double> fm3 = basync::fork( l, f, 2.2, 1000000 );
        boost::unique_future<double> fm4 = basync::fork( l, f, 2.2, 5000000 );

        std::cout << fm2.get() - fm1.get() + fm3.get() - fm4.get() << std::endl;
    }


The question now is how we can adapt the example to an existing asynchronous executor such as
the Boost.ThreadPool library. We need to specialize the template class
asynchronous_completion_token to state which is the __ACT__ associate to the __tp_pool__.

    namespace boost { namespace async {

    template <typename Channel, typename T>
    struct asynchronous_completion_token<boost::tp::pool<Channel>,T> {
        typedef boost::tp::task<T> type;
    };

    }}

and also to specialize the fork function as the default one requires a fork member function and __tp_pool__ provides a `submit()` member function`

    namespace boost { namespace async {

    template< typename Channel, typename F >
    result_of::fork<boost::tp::pool<Channel>, F>::type
    fork<boost::tp::pool<Channel>,F>( boost::tp::pool<Channel>& ae, F fn ) {
        return ae.submit(fn);
    }
    }
    }

Evidently these specializations must be done on the `boost::async` namespace.

As the preceding is ilegal in C++03 we need to use an auxiliary class to define the default behaviour of the fork function

    namespace partial_specialization_workaround {
        template< typename AE, typename F >
        struct fork {
            static typename result_of::fork<AE,F>::type apply(AE& ae, F fn ) {
                return ae.fork(fn);
            }
        };
    }
    template< typename AE, typename F >
    typename result_of::fork<AE,F>::type
    fork( AE& ae, F fn ) {
        return partial_specialization_workaround::fork<AE,F>::apply(ae,fn);
    }

And specialize partially the partial_specialization_workaround::fork  class

    namespace boost { namespace async {
        namespace partial_specialization_workaround {
            template< typename Channel, typename F >
            struct fork<boost::tp::pool<Channel>,F> {
                static typename result_of::fork<boost::tp::pool<Channel>, F>::type
                apply( boost::tp::pool<Channel>& ae, F fn ) {
                    return ae.submit(fn);
                }
            };
        }
    }}

Note that only the __fork__ function needs to be specialized. The library provides the other overloadings.

We can write the preceding main function in a more generic way

    template < typename AE>
    void do(AE& ae)
    {
        typedef basync::result_of::fork<AE, int(*)(double, int) >::type auto_type;
        auto_type fm1 = basync::fork(ae, f, 1.0, 1000000 );
        auto_type fm2 = basync::fork(ae, f, 1.0, 5000000 );
        auto_type fm3 = basync::fork(ae, f, 2.2, 1000000 );
        auto_type fm4 = basync::fork(ae, f, 2.2, 5000000 );

        std::cout << fm2.get() - fm1.get() + fm3.get() - fm4.get() << std::endl;
    }

    int main()
    {
        launcher ae;
        do(ae);
    }

and we can switch from using the launcher or the tp::pool just by changing one line

    int main()
    {
        boost::tp::pool<> ae(boost::tp::poolsize(6))
        do(ae);
    }

Instead of defining a type, the user can make use of BOOST_AUTO once the
associated files included on the threadpool sub-directory.

        BOOST_AUTO(fm1, basync::fork(ae, f, 1.0, 1000000 ));

As a extreme case the library provides a immediate executor which allows to execute synchronously the function on the current thread. This can be used for test purposes. Note that this executor can not be used when there are dependencies between the children __ACT__ and the parent __ACT__.

The library allows also to fork several functions at one time

    result_of::fork_all<AE, int(*)(), int(*)(), int(*)()>::type handles = basync::fork_all(ae, f, g, h);
    std::cout << get<1>(res).get() - get<0>(res).get() + get<2>(res).get() << std::endl;


The result of the fork_all operation is a fusion tuple of asynchronous completion token handles.
The user can apply any fusion algorithm on this tuple as for example

    bool b = fusion::none(handles, fct::interruption_requested());

The asynchronous completion token models follows two interfaces, the thread interface and the
unique_/shared_future interface.

To make common tasks easier the library provides some functors in the name space fct:
for the thread interface as

* fct::join
* fct::join_until
* fct::join_for
* fct::detach
* fct::interrupt
* fct::interrupt_requested

and for the future operations as

* fct::get
* fct::wait
* fct::wait_until
* fct::wait_for
* fct::is_ready
* fct::has_value
* fct::has_exception

Here is an example for get:

    namespace fct {
        struct get {
            template<typename ACT>
            typename ACT::result_type operator()(ACT& t) const {
                return t.get();
            }
        };
    }

In addition the library provides some non member functions that are the result of applying
these functors to the tuple using a fusion algorithm:

* join_all
* join_all_until
* join_all_for
* detach_all
* interrupt_all
* interrupt_requested_on_all

* get_all
* wait_all
* wait_all_until
* wait_all_for
* are_all_ready
* have_all_value
* have_all_exception

Next follows how get_all is defined.

    template <typename MovableTuple>
    typename result_of::get_all<Sequence>::type
    get_all(Sequence& t) {
        return fusion::transform(t, fct::get());
    }

The library defines in a systematic way the result_of of a function as a metafunction
having the same name as the function on the namespace result_of, as the Boost.Fusion library
does.

    namespace result_of {
        template <typename Sequence>
        struct get_all {
            typedef typename fusion::result_of::transform<Sequence, fct::get>::type type
        };
    }

So the user can do the following

    result_of::fork_all<AE, int(*)(), int(*)(), int(*)()>::type res = 
        basync::fork_all(ae, f, g, h);
    result_of::get_all<result_of::fork_all<AE, int(*)(), int(*)(), int(*)()>::type>::type values = 
        basync::get_all(handles);

or using a typedef

    typedef result_of::fork_all<AE, int(*)(), int(*)(), int(*)()>::type auto_type;
    auto_type handles = basync::fork_all(ae, f, g, h);
    result_of::get_all<auto_type>::type values= basync::get_all(handles);

Note that the notation can be shortened by using the C++0x auto keyword.

    auto res = basync::fork_all(ae, f, g, h);
    auto values = basync::get_all(handles);

or using BOOST_AUTO

    BOOST_AUTO(res, basync::fork_all(ae, f, g, h));
    BOOST_AUTO(values, basync::get_all(handles));

Last but not least the library provides also some sugaring functions like
wait_for_all that forks and wait for the completion of all the functions.

    result_of::wait_for_all<AE, int(*)(), int(*)(), int(*)()>::type res = 
        basync::wait_for_all(ae, f, g, h);
    std::cout << get<1>(res) - get<0>(res) + get<2>(res) << std::endl;

and wait_for_any, which works only with functions that return the same type or are convertible to the same
type, and return the index and the value of any of the completed functions.

    result_of::wait_for_any<AE, int(*)(), int(*)(), int(*)()>::type res = 
        basync::wait_for_any(ae, f, g, h);
    std::cout << "function " << res.first 
        << " finshed first with result=" << res.second << std::endl;

The current implementation use the wait_for_any function so any AE must provide a way to get a
unique|shared_future from its __ACT__.

The library defines a functor allowing the user to specialize it

    template <typename AE>
    struct get_future {
        template <typename T>
        shared_future<T>& operator()(typename asynchronous_completion_token<AE,T>::type& act)
        { return act.get_future(); }
    };

Resuming a simple way to define a new AsynchronousExecutor is to define a class as

    struct AsynchronousExecutor {
        template <typename T>
        struct handle {
            typedef implementation-specific-type-modeling-a-ACT type;
        };

        template <typename F>
        typename handle<typename result_of<F()>::type>::type
        fork(F f);
    };




[endsect]

[section Threader/Joiner]
[/=============================================================================]

See the [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1883.pdf N1833 - Preliminary Threading Library Proposal for TR2]
where Kevlin Henney introduces the concept of threader as an asynchronous executor and a function thread that evaluates a function
asynchronously and returns an asynchronous completion token joiner, able to join but also to get the value of the function result.

The main specificity is that here we make a difference between unique_joiner (move-only) and shared_joiner and as consequence unique_threader and shared_threader.

The second specificity concerns the fact joiners can detach, terminate, ... on destruction.


[endsect]



[endsect]
