[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:basic_threader_hpp Header `<boost/async/basic_threader.hpp>`]
[/==========================================================================================]

__basic_threader__ is an __AE__ with a thread as __ThreadBasedACT__.

    namespace boost { namespace async {
        class basic_threader {
        public:
            thread::native_handle_attr_type& attr();

            template <typename T> struct handle {
                typedef thread type;
            };

            template <typename F> thread fork(F f);
        };

        template<>
        struct act_traits<thread >  {
                typedef void move_dest_type;
        };
        
        namespace partial_specialization_workaround {
            template <>
            struct wait<thread> {
                static result_of::wait<thread>::type apply( thread& act) {
                    return act.join();
                }
            };

            template <>
            struct wait_until<thread> {
                static result_of::wait_until<thread>::type apply( thread& act, const system_time& abs_time ) {
                    return act.timed_join(abs_time);
                }
            };
            template <typename Duration>
            struct wait_for<thread, Duration> {
                static typename result_of::template wait_for<thread,Duration>::type apply( thread& act, Duration abs_time ) {
                    return act.timed_join(abs_time);
                }
            };

            template <>
            struct join_until<thread> {
                static result_of::join_until<thread>::type apply( thread& act, const system_time& abs_time ) {
                    return act.timed_join(abs_time);
                }
            };
            template <typename Duration>
            struct join_for<thread, Duration> {
                static typename result_of::template join_for<thread,Duration>::type apply( thread& act, Duration abs_time ) {
                    return act.timed_join(abs_time);
                }
            };
        }
        
    }}

[endsect]

