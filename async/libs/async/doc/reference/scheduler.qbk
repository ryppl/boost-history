[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:scheduler_hpp Header `<boost/async/scheduler.hpp>`]
[/==========================================================================================]

__tp_pool__ can be seen as a __AE__ adding some functions and specializing some traits classes.
The functions are:

* get_future
* interruption_requested

The traits are:

* asynchronous_completion_token : associating the __ACT__ __tp_task__
* partial_specialization_workaround::fork::apply: to call to submit instead of fork.

__tp_task__ is an __ACT__ that models __ThreadBasedACT__ and __FutureBasedACT__.

    namespace boost { namespace async {

        template <typename C>
        class scheduler {
            explicit scheduler(
                tp::poolsize const& psize
            );
            template <typename T>
            struct handle {
                typedef tp::task<T> type;
            };
            template <typename F>
            tp::task<typename boost::result_of<F()>::type>
            fork(F f);
        };

        template <typename Channel>
        struct get_future<scheduler<Channel> > {
            template <typename T>
            struct future_type {
                typedef shared_future<T> type;
            };
            template <typename T>
            shared_future<T>& operator()(tp::task<T>& act);
        };

        template <typename Channel, typename T>
        struct asynchronous_completion_token<boost::tp::pool<Channel>,T> {
            typedef boost::tp::task<T> type;
        };

        namespace partial_specialization_workaround {
            template< typename Channel, typename F >
            struct fork<boost::tp::pool<Channel>,F> {
                static typename result_of::fork<boost::tp::pool<Channel>, F>::type
                apply( boost::tp::pool<Channel>& ae, F fn );
            };
        }
        template <typename C>
        struct get_future<tp::pool<C> > {
            template <typename T>
            shared_future<T>& operator()(tp::task<T>& act);
        };


        template <typename R>
        struct has_future_if<tp::task<R> > : mpl::true_{};

        template <typename R>
        struct has_thread_if<tp::task<R> > : mpl::true_{};
    }}


[endsect]

