[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:future_traits_hpp Header `<boost/async/future_traits.hpp>`]
[/==========================================================================================]


    namespace boost { namespace async {

        template<typename T>
        struct act_traits<unique_future<T> >
        {
    #ifdef BOOST_HAS_RVALUE_REFS
            typedef typename boost::mpl::if_<boost::is_fundamental<T>,T,T&&>::type move_dest_type;
    #else
            typedef typename boost::mpl::if_<boost::is_convertible<T&,boost::detail::thread_move_t<T> >,boost::detail::thread_move_t<T>,T>::type move_dest_type;
    #endif
        };
        
        template<typename T>
        struct act_traits<unique_future<T&> >
        {
            typedef T& move_dest_type;
        };

        template<>
        struct act_traits<unique_future<void> >
        {
            typedef void move_dest_type;
        };        

        template<typename T>
        struct act_traits<shared_future<T> >
        {
    #ifdef BOOST_HAS_RVALUE_REFS
            typedef typename boost::mpl::if_<boost::is_fundamental<T>,T,T&&>::type move_dest_type;
    #else
            typedef typename boost::mpl::if_<boost::is_convertible<T&,boost::detail::thread_move_t<T> >,boost::detail::thread_move_t<T>,T>::type move_dest_type;
    #endif
        };
        
        template<typename T>
        struct act_traits<shared_future<T&> >
        {
            typedef T& move_dest_type;
        };

        template<>
        struct act_traits<shared_future<void> >
        {
            typedef void move_dest_type;
        };        

        template<typename T>
        struct act_traits<unique_future<T&> >
        {
            typedef T& move_dest_type;
        };        
        template <typename R>
        struct is_movable<unique_future<R> > : mpl::true_{};

        template <typename R>
        struct has_future_if<unique_future<R> > : mpl::true_{};

        template <typename R>
        struct has_thread_if<unique_future<R> > : mpl::false_{};


        template <typename R>
        struct is_movable<shared_future<R> > : mpl::true_{};

        template <typename R>
        struct has_future_if<shared_future<R> > : mpl::true_{};

        template <typename R>
        struct has_thread_if<shared_future<R> > : mpl::true_{};

        namespace partial_specialization_workaround {
            template <typename R> struct join<unique_future<R> > {
                static typename result_of::template join<unique_future<R> >::type 
                apply( unique_future<R>& act) {
                    return act.wait();
                }
            };
            template <typename R> struct join<shared_future<R> > {
                static typename result_of::template join<shared_future<R> >::type 
                apply( shared_future<R>& act) {
                    return act.wait();
                }
            };
            template <typename R> struct join_until<unique_future<R> > {
                static typename result_of::template join_until<unique_future<R> >::type 
                apply( unique_future<R>& act, const system_time& abs_time ) {
                    return act.timed_wait_until(abs_time);
                }
            };
            template <typename R> struct join_until<shared_future<R> > {
                static typename result_of::template join_until<shared_future<R> >::type 
                apply( shared_future<R>& act, const system_time& abs_time ) {
                    return act.timed_wait_until(abs_time);
                }
            };
            template <typename R, typename Duration> struct join_for<unique_future<R>, Duration> {
                static typename result_of::template join_for<unique_future<R>,Duration>::type 
                apply( unique_future<R>& act, Duration rel_time ) {
                    return act.timed_wait(rel_time);
                }
            };
            template <typename R, typename Duration> struct join_for<shared_future<R>, Duration> {
                static typename result_of::template join_for<shared_future<R>,Duration>::type 
                apply( shared_future<R>& act, Duration rel_time ) {
                    return act.timed_wait(rel_time);
                }
            };
            template <typename R> struct wait_until<unique_future<R> > {
                static typename result_of::template wait_until<unique_future<R> >::type 
                apply( unique_future<R>& act, const system_time& abs_time ) {
                    return act.timed_wait_until(abs_time);
                }
            };
            template <typename R> struct wait_until<shared_future<R> > {
                static typename result_of::template wait_until<shared_future<R> >::type 
                apply( shared_future<R>& act, const system_time& abs_time ) {
                    return act.timed_wait_until(abs_time);
                }
            };
            template <typename R, typename Duration> struct wait_for<unique_future<R>, Duration> {
                static typename result_of::template wait_for<unique_future<R>,Duration>::type 
                apply( unique_future<R>& act, Duration rel_time ) {
                    return act.timed_wait(rel_time);
                }
            };
            template <typename R, typename Duration> struct wait_for<shared_future<R>, Duration> {
                static typename result_of::template wait_for<shared_future<R>,Duration>::type 
                apply( shared_future<R>& act, Duration rel_time ) {
                    return act.timed_wait(rel_time);
                }
            };
        }

    }}

[endsect]

