[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:asynchronous_executor_decorator_hpp Header `<boost/async/asynchronous_executor_decorator.hpp>`]
[/==========================================================================================]

    namespace boost { namespace async {
        template <typename AE, template <class> class Decorator>
        struct asynchronous_executor_decorator : AE {
            template <typename T> struct handle {
                typedef typename AE::template handle<T>::type type;
            };

            template <typename F>
            typename AE::template handle< typename boost::result_of<F()>::type >::type
            fork( F fn );
        };

        template <typename AE, template <class> class Decorator>
        struct get_future<asynchronous_executor_decorator<AE, Decorator> > {
            template <typename T>
            struct future_type {
                typedef typename AE::template get_future<AE>::type type;
            };
            template <typename T>
            typename future_type<T>::type& operator()(typename AE::template handle<T>::type & j);
        };
    }}

[endsect]

