[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[article Fiber
    [quickbook 1.4]
    [authors [Kowalke, Oliver]]
    [copyright 2009 Oliver Kowalke]
    [purpose C++ Library for launching fibers and synchronizing data between them]
    [category text]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __boost_fiber__ [*Boost.Fiber]]
[def __boost_task__ [*Boost.Task]]
[def __boost_thread__ [*Boost.Thread]]

[def __blocked__ ['blocked]]
[def __fiber__ ['fiber]]
[def __interruption_points__ [link interruption_points ['interruption points]]]
[def __not_a_fiber__ ['not-a-fiber]]
[def __scheduler__ ['scheduler]]

[template lockable_concept_link[link_text] [link fiber.synchronization.mutex_concepts.lockable [link_text]]]
[template lock_ref_link[link_text] [link fiber.synchronization.mutex_concepts.lockable.lock [link_text]]]
[template lock_multiple_ref_link[link_text] [link fiber.synchronization.lock_functions.lock_multiple [link_text]]]
[template try_lock_multiple_ref_link[link_text] [link fiber.synchronization.lock_functions.try_lock_multiple [link_text]]]
[template unlock_ref_link[link_text] [link fiber.synchronization.mutex_concepts.lockable.unlock [link_text]]]
[template try_lock_ref_link[link_text] [link fiber.synchronization.mutex_concepts.lockable.try_lock [link_text]]]
[template owns_lock_ref_link[link_text] [link fiber.synchronization.locks.unique_lock.owns_lock [link_text]]]
[template mutex_func_ref_link[link_text] [link fiber.synchronization.locks.unique_lock.mutex [link_text]]]
[template unique_lock_link[link_text] [link fiber.synchronization.locks.unique_lock [link_text]]]
[template join_link[link_text] [link fiber.fiber_management.fiber.join [link_text]]]
[template cond_wait_link[link_text] [link fiber.synchronization.condvar_ref.condition.wait [link_text]]]
[template cond_any_wait_link[link_text] [link fiber.synchronization.condvar_ref.condition_variable_any.wait [link_text]]]


[def __lockable_concept__ [lockable_concept_link `Lockable` concept]]
[def __lockable_concept_type__ [lockable_concept_link `Lockable`]]
[def __lock_multiple_ref__ [lock_multiple_ref_link `lock()`]]
[def __lock_ref__ [lock_ref_link `lock()`]]
[def __mutex_func_ref__ [mutex_func_ref_link `mutex()`]]
[def __mutex__ [link fiber.synchronization.mutex_types.mutex `boost::fibers::mutex`]]
[def __owns_lock_ref__ [owns_lock_ref_link `owns_lock()`]]
[def __try_lock_multiple_ref__ [try_lock_multiple_ref_link `try_lock()`]]
[def __try_lock_ref__ [try_lock_ref_link `try_lock()`]]
[def __unlock_ref__ [unlock_ref_link `unlock()`]]


[def __lock_guard__ [link fiber.synchronization.locks.lock_guard `boost::lock_guard`]]
[def __unique_lock__ [unique_lock_link `boost::fiber::unique_lock`]]

[def __fiber__ [link fiber.fiber_management.fiber `boost::fiber`]]
[def __fiber_id__ [link fiber.fiber_management.fiber.id `boost::fiber::id`]]
[def __join__ [join_link `join()`]]
[def __interrupt__ [link fiber.fiber_management.fiber.interrupt `interrupt()`]]

[def __interruption_enabled__ [link fiber.fiber_management.this_fiber.interruption_enabled `boost::this_fiber::interruption_enabled()`]]
[def __interruption_requested__ [link fiber.fiber_management.this_fiber.interruption_requested `boost::this_fiber::interruption_requested()`]]
[def __interruption_point__ [link fiber.fiber_management.this_fiber.interruption_point `boost::this_fiber::interruption_point()`]]
[def __disable_interruption__ [link fiber.fiber_management.this_fiber.disable_interruption `boost::this_fiber::disable_interruption`]]
[def __restore_interruption__ [link fiber.fiber_management.this_fiber.restore_interruption `boost::this_fiber::restore_interruption`]]

[def __fiber_interrupted__ `boost::fibers::fiber_interrupted`]
[def __fiber_error__ `boost::fibers::fiber_error`]
[def __fiber_moved__ `boost::fibers::fiber_moved`]
[def __system_error__ `boost::system::system_error`]

[def __cond_wait__ [cond_wait_link `wait()`]]
[def __cond_any_wait__ [cond_any_wait_link `wait()`]]


[include overview.qbk]
[include fiber_ref.qbk]
[section:synchronization Synchronization]
[include lockables.qbk]
[include mutexes.qbk]
[include condition_variables.qbk]
[include event_variables.qbk]
[include fifos.qbk]
[endsect]
[include todo.qbk]
[include acknowledgements.qbk]
