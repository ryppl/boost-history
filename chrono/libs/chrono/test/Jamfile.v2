# Boost Chrono Library test Jamfile

# Copyright Beman Dawes 2003, 2006, 2008

# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt

# See library home page at http://www.boost.org/libs/chrono

# uncomment one if the above lines if you build outside the Boost release
#local BOOST_ROOT = /boost_1_41_0 ;
#local BOOST_ROOT = c:/cygwin/boost_1_41_0 ;

if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

project
    : requirements
        <os>LINUX:<threading>multi
        #<library>/boost/chrono//boost_chrono
        <library>../build//boost_chrono
        <library>/boost/system//boost_system
        #<library>/boost/thread//boost_thread/<link>shared
        # uncomment the line above if you build outside the Boost release
        #<include>$(BOOST_ROOT)
        # uncomment the line above if you build outside the Boost release
        #<include>../../..
        <toolset>msvc:<asynch-exceptions>on
        <define>BOOST_ENABLE_WARNINGS
        <define>BOOST_CHRONO_USES_MPL_ASSERT
        <warnings>all
        <toolset>gcc:<cxxflags>-Wextra
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>gcc-mingw-4.5.0:<cxxflags>-Wno-missing-field-initializers
        <toolset>gcc-mingw-4.5.0:<cxxflags>-fdiagnostics-show-option
        <toolset>msvc:<cxxflags>/wd4127
    ;


   test-suite "minmax"
        :
        [ compile test_minmax.cpp ]
        ;

    test-suite "chrono"
        :
        [ run chrono_unit_test.cpp :  :  : <link>static ]
        [ run chrono_unit_test.cpp :  :  : : chrono_unit_test_dll ]
        [ run explore_limits.cpp :  :  : <link>static ]
        [ run explore_limits.cpp :  :  :  : explore_limits_dll ]
        [ run test_duration.cpp :  :  : <link>static ]
        [ run test_duration.cpp :  :  :  : test_duration_dll ]
        [ run test_clock.cpp :  :  : <link>static ]
        [ run test_clock.cpp :  :  :  : test_clock_dll ]
        [ run miscellaneous.cpp :  :  : <link>static ]
        [ run miscellaneous.cpp :  :  :  : miscellaneous_dll ]
        [ run test_special_values.cpp :  :  : <link>static ]
        [ run test_special_values.cpp :  :  :  : test_special_values_dll ]
        [ run manipulate_clock_object.cpp :  :  : <link>static ]
        [ run manipulate_clock_object.cpp :  :  :  : manipulate_clock_object_dll ]
        [ run chrono_accuracy_test.cpp :  :  : <link>static ]
        [ run chrono_accuracy_test.cpp :  :  :  : chrono_accuracy_test_dll ]
        ;


    test-suite "examples"
        :
        [ run ../example/cycle_count.cpp :  :  : <link>static ]
        [ run ../example/cycle_count.cpp :  :  :  : cycle_count_dll ]
        [ run ../example/runtime_resolution.cpp :  :  : <link>static ]
        [ run ../example/runtime_resolution.cpp :  :  :  : runtime_resolution_dll ]
        [ run ../example/xtime.cpp :  :  : <link>static ]
        [ run ../example/xtime.cpp :  :  :  : xtime_dll ]
        [ run ../example/saturating.cpp :  :  : <link>static ]
        [ run ../example/saturating.cpp  :  :  :  : saturating_dll ]
        [ run ../example/min_time_point.cpp :  :  : <link>static ]
        [ run ../example/min_time_point.cpp  :  :  :  : min_time_point_dll ]
        [ run ../example/i_dont_like_the_default_duration_behavior.cpp :  :  : <link>static ]
        [ run ../example/i_dont_like_the_default_duration_behavior.cpp  :  :  :  : i_dont_like_the_default_duration_behavior_dll ]
        [ run ../example/simulated_thread_interface_demo.cpp :  :  : <link>static ]
        [ run ../example/simulated_thread_interface_demo.cpp  :  :  :  : simulated_thread_interface_demo_dll ]
        [ run ../example/timeval_demo.cpp :  :  : <link>static ]
        [ run ../example/timeval_demo.cpp :  :  :  : timeval_demo_dll ]
        ;

    test-suite "timer"
        :
        [ run ../example/run_timer_example.cpp :  :  : <link>static ]
        [ run ../example/run_timer_example.cpp :  :  :  : run_timer_example_dll ]
        [ run ../example/run_timer_example2.cpp :  :  : <link>static ]
        [ run ../example/run_timer_example2.cpp :  :  :  : run_timer_example2_dll ]
        [ run run_timer_test.cpp  :  :  : <link>static ]
        [ run run_timer_test.cpp :  :  :  : run_timer_test_dll ]
        ;

    test-suite "other_clocks"
        :
        [ run test_thread_clock.cpp :  :  : <link>static ]
        [ run test_thread_clock.cpp :  :  :  : test_thread_clock_dll ]
        ;

    test-suite "typedefs"
        :
        [ run hours.pass.cpp :  :  : <link>static ]
        [ run minutes.pass.cpp :  :  : <link>static ]
        [ run seconds.pass.cpp :  :  : <link>static ]
        [ run milliseconds.pass.cpp :  :  : <link>static ]
        [ run microseconds.pass.cpp :  :  : <link>static ]
        [ run nanoseconds.pass.cpp :  :  : <link>static ]
        #[ run milliseconds.pass.cpp :  :  :  : milliseconds.pass.dll ]
        ;

    test-suite "traits"
        :
        [ run traits/specializations/duration.pass.cpp :  :  : <link>static ]
        [ run traits/specializations/time_point.pass.cpp :  :  : <link>static ]
        [ run traits/is_fp/treat_as_floating_point.pass.cpp :  :  : <link>static ]
        [ run traits/duration_values/max.pass.cpp :  :  : <link>static ]
        [ run traits/duration_values/zero.pass.cpp :  :  : <link>static ]
        [ run traits/duration_values/min.pass.cpp :  :  : <link>static ]
        ;

    test-suite "duration"
        :
        [ compile-fail duration/duration.fail.cpp  ]
        [ compile-fail duration/ratio.fail.cpp  ]
        [ compile-fail duration/positive_num.fail.cpp  ]
        [ compile duration/default_ratio.pass.cpp :  :  : ]
        [ compile duration/types.pass.cpp :  :  : ]
        
        [ run duration/arithmetic/op_divide_ass.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_minusminusint.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_plus_ass.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_minus.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_mod_ass_duration.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_plusplus.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_minus_ass.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_mod_ass_rep.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_plusplusint.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_minusminus.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_plus.pass.cpp :  :  : <link>static ]
        [ run duration/arithmetic/op_times_ass.pass.cpp :  :  : <link>static ]
        
        [ run duration/cast/duration_cast.pass.cpp :  :  : <link>static ]
        [ compile-fail duration/cast/toduration.fail.cpp  ]
        
        [ run duration/comparisons/op_equal.pass.cpp :  :  : <link>static ]
        [ run duration/comparisons/op_less.pass.cpp :  :  : <link>static ]
        
        [ run duration/cons/convert_exact.pass.cpp :  :  : <link>static ]
        [ compile-fail duration/cons/convert_float_to_int.fail.cpp  ]
        [ compile-fail duration/cons/convert_inexact.fail.cpp  ]
        [ run duration/cons/convert_inexact.pass.cpp :  :  : <link>static ]
        [ run duration/cons/convert_int_to_float.pass.cpp :  :  : <link>static ]
        [ run duration/cons/default.pass.cpp :  :  : <link>static ]
        [ run duration/cons/rep.pass.cpp :  :  : <link>static ]
        [ compile-fail duration/cons/rep01.fail.cpp  ]
        [ compile-fail duration/cons/rep02.fail.cpp  ]
        [ run duration/cons/rep02.pass.cpp :  :  : <link>static ]
        [ compile-fail duration/cons/rep03.fail.cpp  ]
        
        [ run duration/nonmember/op_plus.pass.cpp :  :  : <link>static : nonmember_op_plus.pass ]
        [ run duration/nonmember/op_minus.pass.cpp :  :  : <link>static : nonmember_op_minus.pass ]
        [ run duration/nonmember/op_divide_duration.pass.cpp :  :  : <link>static : nonmember_op_divide_duration.pass  ]
        [ compile-fail duration/nonmember/op_divide_rep.fail.cpp : : nonmember_op_divide_rep.fail   ]
        [ run duration/nonmember/op_divide_rep.pass.cpp :  :  : <link>static : nonmember_op_divide_rep.pass  ]
        [ run duration/nonmember/op_mod_duration.pass.cpp :  :  : <link>static : nonmember_op_mod_duration.pass  ]
        [ run duration/nonmember/op_mod_rep.pass.cpp :  :  : <link>static : nonmember_op_mod_rep.pass  ]
        [ compile-fail duration/nonmember/op_mod_rep.fail.cpp : : nonmember_op_mod_rep.fail   ]
        [ run duration/nonmember/op_times_rep.pass.cpp :  :  : <link>static : nonmember_op_times_rep.pass  ]
        [ compile-fail duration/nonmember/op_times_rep1.fail.cpp : : nonmember_op_times_rep1.fail   ]
        [ compile-fail duration/nonmember/op_times_rep2.fail.cpp : : nonmember_op_times_rep2.fail   ]

        [ run duration/special/max.pass.cpp :  :  : <link>static : duration_special_max.pass  ]
        [ run duration/special/min.pass.cpp :  :  : <link>static : duration_special_min.pass  ]
        [ run duration/special/zero.pass.cpp :  :  : <link>static : duration_special_zero.pass  ]
        ;

    test-suite "time_point"
        :
        [ run time_point/default_duration.pass.cpp :  :  : <link>static : time_point.default_duration.pass ]
        [ compile-fail time_point/duration.fail.cpp : : time_point.duration.fail   ]

        [ run time_point/arithmetic/op_plus_ass.pass.cpp :  :  : <link>static : time_point.op_plus_ass.pass ]
        [ run time_point/arithmetic/op_minus_ass.pass.cpp :  :  : <link>static : time_point.op_minus_ass.pass ]
        
        [ run time_point/cast/time_point_cast.pass.cpp :  :  : <link>static : time_point.time_point_cast.pass ]
        [ compile-fail time_point/cast/toduration.fail.cpp : : time_point.toduration.fail   ]
        
        [ compile-fail time_point/comparisons/op_equal.fail.cpp : : time_point.op_equal.fail   ]
        [ run time_point/comparisons/op_equal.pass.cpp :  :  : <link>static : time_point.op_equal.pass ]
        [ compile-fail time_point/comparisons/op_less.fail.cpp : : time_point.op_less.fail   ]
        [ run time_point/comparisons/op_less.pass.cpp :  :  : <link>static : time_point.op_less.pass ]
        
        [ compile-fail time_point/cons/convert.fail.cpp : : time_point.convert.fail   ]
        [ run time_point/cons/convert.pass.cpp :  :  : <link>static : time_point.convert.pass ]
        [ run time_point/cons/default.pass.cpp :  :  : <link>static : time_point.default.pass ]
        [ compile-fail time_point/cons/duration.fail.cpp : : time_point.cons.duration.fail   ]
        [ run time_point/cons/duration.pass.cpp :  :  : <link>static : time_point.duration.pass ]
        
        [ run time_point/nonmember/op_plus.pass.cpp :  :  : <link>static : time_point.op_plus.pass ]
        [ run time_point/nonmember/op_minus_time_point.pass.cpp :  :  : <link>static : time_point.op_minus_time_point.pass ]
        [ run time_point/nonmember/op_minus_duration.pass.cpp :  :  : <link>static : time_point.op_minus_duration.pass ]
        
        [ run time_point/special/max.pass.cpp :  :  : <link>static : time_point.max.pass ]
        [ run time_point/special/min.pass.cpp :  :  : <link>static : time_point.min.pass ]
        ;

    test-suite "clock"
        :
        [ compile clock/hires/consistency.pass.cpp : : clock.hires.consistency.pass ]
        [ run clock/hires/now.pass.cpp :  :  : <link>static : clock.hires.now.pass ]
        
        [ compile clock/monotonic/consistency.pass.cpp : : clock.monotonic.consistency.pass ]
        [ run clock/monotonic/now.pass.cpp :  :  : <link>static : clock.monotonic.now.pass ]
        
        [ compile clock/system/consistency.pass.cpp : : clock.system.consistency.pass ]
        [ run clock/system/now.pass.cpp :  :  : <link>static : clock.system.now.pass ]
        [ run clock/system/from_time_t.pass.cpp :  :  : <link>static : clock.system.from_time_t.pass ]
        [ run clock/system/rep_signed.pass.cpp :  :  : <link>static : clock.system.rep_signed.pass ]
        [ run clock/system/to_time_t.pass.cpp :  :  : <link>static : clock.system.to_time_t.pass ]
        
        [ compile clock/process/consistency.pass.cpp : : clock.process.consistency.pass ]
        [ run clock/process/now.pass.cpp :  :  : <link>static : clock.process.now.pass ]
        
        [ compile clock/thread/consistency.pass.cpp : : clock.thread.consistency.pass ]
        [ run clock/thread/now.pass.cpp :  :  : <link>static : clock.thread.now.pass ]

        [ compile clock/errored/consistency.pass.cpp : : clock.errored.consistency.pass ]
        [ run clock/errored/now.pass.cpp :  :  : <link>static : clock.errored.now.pass ]
        
        ;


    test-suite "io"
        :
        [ run ../example/io_ex1.cpp :  :  : <link>static ]
        [ run ../example/io_ex2.cpp :  :  : <link>static ]
        [ run ../example/io_ex3.cpp :  :  : <link>static ]
        [ run ../example/io_ex4.cpp :  :  : <link>static ]
        [ run ../example/io_ex5.cpp :  :  : <link>static ]
        ;
