# Boost Chrono Library test Jamfile

# Copyright Beman Dawes 2003, 2006, 2008

# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt

# See library home page at http://www.boost.org/libs/chrono

# uncomment one if the above lines if you build outside the Boost release
#local BOOST_ROOT = /boost_1_41_0 ;
#local BOOST_ROOT = c:/cygwin/boost_1_41_0 ;

import os ;
import feature ;

if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}
#feature.feature chrono_level : sh st hd;
#feature.set-default chrono_level : [ hd ] ;

#feature.feature chrono_stub : yes no;
#feature.set-default chrono_stub : [ no ] ;

project
    : requirements
        <os>LINUX:<threading>multi
        <library>/boost/system//boost_system

        # uncomment the line above if you build outside the Boost release
        #<include>$(BOOST_ROOT)
        # uncomment the line above if you build outside the Boost release
        #<include>../../..

        <toolset>msvc:<asynch-exceptions>on
        <define>BOOST_ENABLE_WARNINGS
        <define>BOOST_CHRONO_USES_MPL_ASSERT
        <define>BOOST_SYSTEM_NO_DEPRECATED
        <warnings>all
        <toolset>gcc:<cxxflags>-Wextra
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>gcc-mingw-4.5.0:<cxxflags>-Wno-missing-field-initializers
        <toolset>gcc-mingw-4.5.0:<cxxflags>-fdiagnostics-show-option
        <toolset>msvc:<cxxflags>/wd4127
    ;

rule chrono-run ( sources )
{
    return
    [ run $(sources) ../build//boost_chrono
        : : : <define>BOOST_USE_WINDOWS_H
        : $(sources[1]:B)_shared ]
    [ run $(sources) ../build//boost_chrono/<link>static
        : : :
        : $(sources[1]:B)_static ]
    [ run $(sources)
        : : : <define>BOOST_CHRONO_INLINED
        : $(sources[1]:B)_header ]
    [ run $(sources)
        : : : <define>BOOST_CHRONO_INLINED <define>BOOST_USE_WINDOWS_H
        : $(sources[1]:B)_header_win ]
    ;
}
rule chrono-run2 ( sources : name )
{
    return
    [ run $(sources) ../build//boost_chrono
        : : : <define>BOOST_USE_WINDOWS_H
        : $(name)_shared ]
    [ run $(sources) ../build//boost_chrono/<link>static
        : : :
        : $(name)_static ]
    [ run $(sources)
        : : : <define>BOOST_CHRONO_INLINED
        : $(name)_header ]
    [ run $(sources)
        : : : <define>BOOST_CHRONO_INLINED <define>BOOST_USE_WINDOWS_H
        : $(name)_header_win ]
    ;
}

rule chrono-compile ( sources )
{
    return
    [ compile $(sources)
        :
        : $(sources[1]:B)_lib ]
    [ compile $(sources)
        :  <define>BOOST_CHRONO_INLINED
        : $(sources[1]:B)_header ]
    [ compile $(sources)
        : <define>BOOST_CHRONO_INLINED <define>BOOST_USE_WINDOWS_H
        : $(sources[1]:B)_header_win ]
    ;
}

rule chrono-compile2 ( sources : name )
{
    return
    [ compile $(sources)
        :
        : $(name)_lib ]
    [ compile $(sources)
        :  <define>BOOST_CHRONO_INLINED
        : $(name)_header ]
    [ compile $(sources)
        : <define>BOOST_CHRONO_INLINED <define>BOOST_USE_WINDOWS_H
        : $(name)_header_win ]
    ;
}



   test-suite "minmax"
        :
        [ chrono-compile test_minmax.cpp ]
        ;

    test-suite "chrono"
        :
        [ chrono-run chrono_unit_test.cpp  ]
        [ chrono-run explore_limits.cpp  ]
        [ chrono-run test_duration.cpp ]
        [ chrono-run test_clock.cpp ]
        [ chrono-run miscellaneous.cpp ]
        [ chrono-run test_special_values.cpp ]
        [ chrono-run manipulate_clock_object.cpp ]
        [ chrono-run chrono_accuracy_test.cpp ]
        ;


    test-suite "examples"
        :
        [ chrono-run ../example/cycle_count.cpp  ]
        [ chrono-run ../example/runtime_resolution.cpp  ]
        [ chrono-run ../example/xtime.cpp ]
        [ chrono-run ../example/saturating.cpp  ]
        [ chrono-run ../example/min_time_point.cpp  ]
        [ chrono-run ../example/i_dont_like_the_default_duration_behavior.cpp ]
        [ chrono-run ../example/simulated_thread_interface_demo.cpp ]
        [ chrono-run ../example/timeval_demo.cpp ]
        ;

    test-suite "timer"
        :
        [ chrono-run ../example/run_timer_example.cpp ]
        [ chrono-run ../example/run_timer_example2.cpp ]
        [ chrono-run run_timer_test.cpp  ]
        ;

    test-suite "other_clocks"
        :
        [ chrono-run test_thread_clock.cpp  ]
        ;

    test-suite "typedefs"
        :
        [ chrono-compile hours.pass.cpp :  :  ]
        [ chrono-compile minutes.pass.cpp :  : ]
        [ chrono-compile seconds.pass.cpp :  : ]
        [ chrono-compile milliseconds.pass.cpp :  : ]
        [ chrono-compile microseconds.pass.cpp :  :  ]
        [ chrono-compile nanoseconds.pass.cpp :  : ]
        ;

    test-suite "traits"
        :
        [ chrono-compile traits/specializations/duration.pass.cpp ]
        [ chrono-compile traits/specializations/time_point.pass.cpp ]
        [ chrono-compile traits/is_fp/treat_as_floating_point.pass.cpp  ]
        [ chrono-run traits/duration_values/max.pass.cpp  ]
        [ chrono-run traits/duration_values/zero.pass.cpp ]
        [ chrono-run traits/duration_values/min.pass.cpp  ]
        ;

    test-suite "duration"
        :
        [ compile-fail duration/duration.fail.cpp  ]
        [ compile-fail duration/ratio.fail.cpp  ]
        [ compile-fail duration/positive_num.fail.cpp  ]
        [ chrono-compile duration/default_ratio.pass.cpp ]
        [ chrono-compile duration/types.pass.cpp ]

        [ chrono-run duration/arithmetic/op_divide_ass.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_minusminusint.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_plus_ass.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_minus.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_mod_ass_duration.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_plusplus.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_minus_ass.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_mod_ass_rep.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_plusplusint.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_minusminus.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_plus.pass.cpp  ]
        [ chrono-run duration/arithmetic/op_times_ass.pass.cpp  ]

        [ chrono-run duration/cast/duration_cast.pass.cpp  ]
        [ compile-fail duration/cast/toduration.fail.cpp  ]

        [ chrono-run duration/comparisons/op_equal.pass.cpp  ]
        [ chrono-run duration/comparisons/op_less.pass.cpp  ]

        [ chrono-run duration/cons/convert_exact.pass.cpp  ]
        [ compile-fail duration/cons/convert_float_to_int.fail.cpp  ]
        [ compile-fail duration/cons/convert_inexact.fail.cpp  ]
        [ chrono-run duration/cons/convert_inexact.pass.cpp  ]
        [ chrono-run duration/cons/convert_int_to_float.pass.cpp  ]
        [ chrono-run duration/cons/default.pass.cpp  ]
        [ chrono-run duration/cons/rep.pass.cpp  ]
        [ compile-fail duration/cons/rep01.fail.cpp  ]
        [ compile-fail duration/cons/rep02.fail.cpp  ]
        [ chrono-run duration/cons/rep02.pass.cpp  ]
        [ compile-fail duration/cons/rep03.fail.cpp  ]

        [ chrono-run2 duration/nonmember/op_plus.pass.cpp  : nonmember_op_plus.pass ]
        [ chrono-run2 duration/nonmember/op_minus.pass.cpp  : nonmember_op_minus.pass ]
        [ chrono-run2 duration/nonmember/op_divide_duration.pass.cpp  : nonmember_op_divide_duration.pass  ]
        [ compile-fail duration/nonmember/op_divide_rep.fail.cpp : : nonmember_op_divide_rep.fail   ]
        [ chrono-run2 duration/nonmember/op_divide_rep.pass.cpp  : nonmember_op_divide_rep.pass  ]
        [ chrono-run2 duration/nonmember/op_mod_duration.pass.cpp  : nonmember_op_mod_duration.pass  ]
        [ chrono-run2 duration/nonmember/op_mod_rep.pass.cpp  : nonmember_op_mod_rep.pass  ]
        [ compile-fail duration/nonmember/op_mod_rep.fail.cpp : : nonmember_op_mod_rep.fail   ]
        [ chrono-run2 duration/nonmember/op_times_rep.pass.cpp  : nonmember_op_times_rep.pass  ]
        [ compile-fail duration/nonmember/op_times_rep1.fail.cpp : : nonmember_op_times_rep1.fail   ]
        [ compile-fail duration/nonmember/op_times_rep2.fail.cpp : : nonmember_op_times_rep2.fail   ]

        [ chrono-run2 duration/special/max.pass.cpp  : duration_special_max.pass  ]
        [ chrono-run2 duration/special/min.pass.cpp  : duration_special_min.pass  ]
        [ chrono-run2 duration/special/zero.pass.cpp  : duration_special_zero.pass  ]
        ;

    test-suite "time_point"
        :
        [ chrono-compile2 time_point/default_duration.pass.cpp : time_point.default_duration.pass ]
        [ compile-fail time_point/duration.fail.cpp : : time_point.duration.fail   ]

        [ chrono-run2 time_point/arithmetic/op_plus_ass.pass.cpp  : time_point.op_plus_ass.pass ]
        [ chrono-run2 time_point/arithmetic/op_minus_ass.pass.cpp  : time_point.op_minus_ass.pass ]

        [ chrono-run2 time_point/cast/time_point_cast.pass.cpp  : time_point.time_point_cast.pass ]
        [ compile-fail time_point/cast/toduration.fail.cpp : : time_point.toduration.fail   ]

        [ compile-fail time_point/comparisons/op_equal.fail.cpp : : time_point.op_equal.fail   ]
        [ chrono-run2 time_point/comparisons/op_equal.pass.cpp  : time_point.op_equal.pass ]
        [ compile-fail time_point/comparisons/op_less.fail.cpp : : time_point.op_less.fail   ]
        [ chrono-run2 time_point/comparisons/op_less.pass.cpp  : time_point.op_less.pass ]

        [ compile-fail time_point/cons/convert.fail.cpp : : time_point.convert.fail   ]
        [ chrono-run2 time_point/cons/convert.pass.cpp  : time_point.convert.pass ]
        [ chrono-run2 time_point/cons/default.pass.cpp  : time_point.default.pass ]
        [ compile-fail time_point/cons/duration.fail.cpp : : time_point.cons.duration.fail   ]
        [ chrono-run2 time_point/cons/duration.pass.cpp  : time_point.duration.pass ]

        [ chrono-run2 time_point/nonmember/op_plus.pass.cpp  : time_point.op_plus.pass ]
        [ chrono-run2 time_point/nonmember/op_minus_time_point.pass.cpp  : time_point.op_minus_time_point.pass ]
        [ chrono-run2 time_point/nonmember/op_minus_duration.pass.cpp  : time_point.op_minus_duration.pass ]

        [ chrono-run2 time_point/special/max.pass.cpp  : time_point.max.pass ]
        [ chrono-run2 time_point/special/min.pass.cpp  : time_point.min.pass ]
        ;

    test-suite "clock"
        :
        [ chrono-compile2 clock/hires/consistency.pass.cpp : clock.hires.consistency.pass ]
        [ chrono-run2 clock/hires/now.pass.cpp  : clock.hires.now.pass ]

        [ chrono-compile2 clock/monotonic/consistency.pass.cpp : clock.monotonic.consistency.pass ]
        [ chrono-run2 clock/monotonic/now.pass.cpp  : clock.monotonic.now.pass ]

        [ chrono-compile2 clock/system/consistency.pass.cpp : clock.system.consistency.pass ]
        [ chrono-run2 clock/system/now.pass.cpp  : clock.system.now.pass ]
        [ chrono-run2 clock/system/from_time_t.pass.cpp  : clock.system.from_time_t.pass ]
        [ chrono-run2 clock/system/rep_signed.pass.cpp  : clock.system.rep_signed.pass ]
        [ chrono-run2 clock/system/to_time_t.pass.cpp  : clock.system.to_time_t.pass ]

        [ chrono-compile2 clock/process/consistency.pass.cpp : clock.process.consistency.pass ]
        [ chrono-run2 clock/process/now.pass.cpp  : clock.process.now.pass ]

        [ chrono-compile2 clock/thread/consistency.pass.cpp : clock.thread.consistency.pass ]
        [ chrono-run2 clock/thread/now.pass.cpp  : clock.thread.now.pass ]

        [ chrono-compile2 clock/errored/consistency.pass.cpp : clock.errored.consistency.pass ]
        [ chrono-run2 clock/errored/now.pass.cpp  : clock.errored.now.pass ]

        ;


    test-suite "io"
        :
        [ chrono-run ../example/io_ex1.cpp  ]
        [ chrono-run ../example/io_ex2.cpp  ]
        [ chrono-run ../example/io_ex3.cpp  ]
        [ chrono-run ../example/io_ex4.cpp  ]
        [ chrono-run ../example/io_ex5.cpp  ]
        ;

    test-suite "win32"
        :
        [ chrono-run win32_test.cpp  ]
        ;
