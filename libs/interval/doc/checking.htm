<!DOCTYPE html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>Checking policies</title>
</head>

<body>
<h1>Checking policies</h1>

<p>A checking policy controls how the <code>interval</code> class will deal
with special cases like : empty intervals, infinite numbers, invalid
values.</p>

<p>For example, let's consider <code>operator+(interval, T)</code>. The
second argument could be an invalid value (for a floating-point number, it is
a NaN). What to do in such a case? First, we could say that the second
argument can never be an invalid number. Second, we could also say such a
situation can arise but is forbidden. Third, we could allow such values and
generate an empty interval when encountered. And there is many other
possibilities.</p>

<p>It is the reason why such a policy is used : there is a lot of interesting
behaviours and it would be sad to arbitrarily select one of these.</p>

<h3>Requirements</h3>

<p>The checking class should satisfy the following requirement (in the form
of an interface):</p>

<blockquote>
  <pre>struct checking
{
  static T inf();
  static T nan();
  static bool is_nan(T);
  static T empty_lower();
  static T empty_upper();
  static bool is_empty(T, T);
};</pre>
</blockquote>

<p>The first function, <code>inf</code> is invoked each time the library need
to create the infinite bound of an interval. For example,
<code>interval::whole</code> computes <code>interval(-checking::inf(),
checking::inf())</code>. If infinite values are allowed and
<code>std::numeric_limits&lt;T&gt;::infinity()</code> returns a correct
value, such a value can be used.</p>

<p>Next comes <code>nan</code>. This function is used each time a function
need to return a value of type <code>T</code> but is unable to compute it.
For example, if you ask what the median value of an interval is,
<code>nan</code> will be used. But please remember: <code>lower</code> and
<code>upper</code> directly return the value; so, if the interval is empty,
<code>lower</code> will not answer <code>by</code> a call to
<code>checking::nan</code> (but will return the same value than
<code>checking::empty_lower</code> could return).</p>

<p><code>empty_lower</code> and <code>empty_upper</code> respectively return
the lower and upper bound of the empty interval. There is no requirements for
<code>empty_lower</code> and <code>empty_upper</code> to return the same
value than <code>checking::nan</code>. For example, if the type
<code>T</code> does not have any invalid value, the <code>empty</code>_
functions can return the [1;0] interval.</p>

<p><code>is_nan</code> is used to test if a value of type <code>T</code> is
invalid or not. <code>is_empty</code> tests if the interval formed by the two
arguments is empty or not. Such tests will generally be at the beginning of
each function which involves an argument of type <code>T</code>. If one of
the inputs is declared invalid, the the function will try to produce an
invalid value or an input interval.</p>

<p></p>
</body>
</html>
