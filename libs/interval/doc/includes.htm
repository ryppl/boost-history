<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="../../../boost.css">
  <title>Headers Inclusion</title>
</head>

<body lang="en">
<h1>Headers Inclusion</h1>

<p>The easiest way to access to the library is by including the main
header:</p>
<pre>#include &lt;boost/interval.hpp&gt;</pre>

<p>This header will include almost all the other headers. However, you may
not want to access all the functionalities of the library. So this page
stands as a reminder for the whole structure of the library.
<code>&lt;boost/interval.hpp&gt;</code> is the only header to be located
directly under <code>boost/</code>; all the other headers are located in the
subdirectory <code>boost/interval/</code>. And each time this documentation
will refer to <code>interval/something.hpp</code>, it is
<code>&lt;boost/interval/something.hpp&gt;</code>.</p>

<p>Please also note that all the following headers are independent and can
easily be pre-compiled if necessary (with compilers which support
pre-compiled headers of course).</p>

<h2>Function definitions</h2>

<p>The following headers contain the definition of the <code>interval</code>
class and all</p>

<h3><code>interval/interval.hpp</code></h3>

<p>This header contains the definition and the declaration of the
<code>interval</code> class. However, this class is templated and the default
template parameters are not available by this header. In particular, this
header does not provide the default specialization of the
<code>interval</code> class for the floating-point types
(<code>interval&lt;float&gt;</code>, <code>interval&lt;double&gt;</code> and
<code>interval&lt;long double&gt;</code>). So, unless you use your own
policies, this header is not really useful on its own.</p>

<h3><code>interval/utility.hpp</code></h3>

<p>In this header are all the functions that do not expect any arithmetic
property from the base number type. It only expects the bounds to be ordered;
but it should not surprise you since it is a requirement of the whole
library. You will find in this header the definitions of access and related
functions: <code>lower</code>, <code>upper</code>,
<code>checked_lower</code>, <code>checked_upper</code>, <code>median</code>,
<code>width</code>, <code>widen</code>. There are also the set-like
functions: <code>in,</code> <code>in_zero</code>, <code>empty</code>,
<code>subset</code>, <code>proper_subset</code>, <code>overlap</code>,
<code>singleton</code>, <code>equal</code>, <code>intersect</code>,
<code>hull</code>, <code>bisect</code>. Finally, <code>abs</code>,
<code>min</code> and <code>max</code> are defined.</p>

<h3><code>interval/arith.hpp</code></h3>

<p>Here are the binary operators <code>+</code>, <code>-</code>,
<code>*</code>, <code>/</code> and the unary operator <code>-</code>.</p>

<h3><code>interval/arith2.hpp</code></h3>

<p>This header defines <code>fmod</code>, <code>square</code>,
<code>sqrt</code> and <code>pow</code>.</p>

<h3><code>interval/transc.hpp</code></h3>

<p>It is the last of the three headers with mathematical functions; it
provides the following functions: <code>cos</code>, <code>sin</code>,
<code>tan</code>, <code>acos</code>, <code>asin</code>, <code>atan</code>,
<code>cosh</code>, <code>sinh</code>, <code>tanh</code>, <code>acosh</code>,
<code>asinh</code>, <code>atanh</code>, <code>exp</code> and
<code>log</code>.</p>

<h2>Policies</h2>

<p></p>

<h2>Comparisons</h2>

<h2>Extensions</h2>

<p></p>
<hr>

<p>Revised: 2002-10-11<br>
Copyright (c) Guillaume Melquiond, Sylvain Pion, Hervé Brönnimann, 2002.<br>
Polytechnic University.</p>
</body>
</html>
