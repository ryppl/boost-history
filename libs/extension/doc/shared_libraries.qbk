[/ Boost.Extension - shared libraries ]
[/ Copyright 2008 Jeremy Pack ]
[/ Distributed under the Boost Software License, Version 1.0. (See]
[/ accompanying file LICENSE_1_0.txt or copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ See http://www.boost.org/ for latest version. ]

[section:shared_libraries Shared Libraries]

A `shared_library` refers to a loadable module, the type of which depends
on the platform:

* Windows: .dll
* Most Linux or Unix: .so
* Mac OS X: .dylib or .bundle (See [link appendix_c Appendix C])


[h4 `shared_library(const char * location, bool auto_close = false)`]
`location` is the relative path of the shared library to laod, and
`auto_close` sets whether or not the library will be automatically
closed when the `shared_library` is destroyed. This function does
not open the library.

[h4 `bool open()`]
Returns true if the library is opened successfully.

[h4 `bool is_open()`]
Returns true if the library is open.

[h4 `void close()`]
Close the library. Note that an OS specific shared library usually keeps a 
reference count, meaning that calling this function will just decrease the
reference count. If the reference count drops to 0, the library will be
ready to actually closed - though the platform is not required to actually
close the library even then. As such, this function can sometimes give a
performance boost, by freeing up RAM, but will often do nothing.
[h4 `ReturnValue (*get(const char * name))(ARGS)`]
This function returns a pointer to a function in a dll with `name`. Note
that a C++ function needs to have `extern "C"` before it in order for this
to work. To get a function like this:
``
extern "C"
int get_value(const char * name) {
  return 0;
}
``
You would call:
``
mySharedLibrary.get<int, const char *>("get_value");
``
[note 
It is recommended that you use Boost.Function to capture the return values
of `get`, but not required.]

[endsect]