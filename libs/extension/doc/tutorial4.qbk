[/ Boost.Extension - fourth tutorial ]
[/ Copyright 2008 Mariano G. Consoni ]
[/ Distributed under the Boost Software License, Version 1.0. (See]
[/ accompanying file LICENSE_1_0.txt or copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ See http://www.boost.org/ for latest version. ]

[section:tutorial04 Tutorial 4 - Type Maps and Paramter Maps]
The _type_map_ class and the _parameter_map_ class are similar - both
used for storing objects of heterogeneous types.

The _type_map_ is the simplest of the two, as it can hold exactly one
element of each type. It can hold multiple objects, but they will each
be of a different type.

Here's an example showing a _type_map_ holding an `int` and a
`std::map<std::string, std::string>`.

``
using namespace boost::extensions;

// A type_map can hold one of each type, constructed
// as needed.
type_map types;
int& first_int(types.get());
first_int = 100;

// This actually points to the same int as first_int.
int& second_int(types.get());

second_int = 500;

// This will print out 500.
std::cout << "first_int: " << first_int << std::endl;

// Arbitrary default-constructible types can be held in a type_map.
std::map<std::string, std::string>& string_pairs(types.get());
``

Note that pulling an integer out of it twice results in two references
to the same integer. The same occurs with any type placed into the _type_map_.

A _parameter_map_ on the other hand, can hold any number of elements of any
type, and can automatically convert objects to compatible types.

[endsect]