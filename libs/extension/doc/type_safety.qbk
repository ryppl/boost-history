[/ Boost.Extension - Type Safety ]
[/ Copyright 2008 Jeremy Pack ]
[/ Distributed under the Boost Software License, Version 1.0. (See]
[/ accompanying file LICENSE_1_0.txt or copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ See http://www.boost.org/ for latest version. ]


[section:type_safety Type Safety of Boost.Extension]

Type-safe classes in Boost.Extension:

* _factory_
* _adaptable_factory_
* _type_map_
* _parameter_map_

Other classes:

* _reflection_, _instance_: An _instance_ must be used only with the _reflection_ from
which it was created. Other than this, these two classes are type safe.
* _shared_library_: The get functions for this class do not guarantee type safety. This
is caused by the fact that the underlying operating system-specific functions return void
pointers that must be converted to function pointers.

To help alleviate type safety issues when using _shared_library_, it is recommended
that a common function signature be used in each shared library. The library provides
shortcuts for this technique, which are used in
[link boost_extension.tutorials.tutorial02].

To help overcome the type safety problems with the _instance_ class, it would be
possible to have each _instance_ contain a reference to the _reflection_ that
created it, and then only allow that functions from that _reflection_ to be
called. The plan is to add this as an option, which can be disabled with
a preprocessor macro, but it may be added permanently, depending on input
from the Boost community.

[endsect]