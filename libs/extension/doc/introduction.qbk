[/ Boost.Extension - intro ]
[/ Copyright 2008 Jeremy Pack ]
[/ Distributed under the Boost Software License, Version 1.0. (See]
[/ accompanying file LICENSE_1_0.txt or copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ See http://www.boost.org/ for latest version. ]

[section:introduction Introduction]

The Boost.Extension library has been developed to ease the development of 
plugins and similar extensions to software using shared libraries. 
Classes, functions and data can be made available from shared
libraries and loaded by the application.

It consists of the following parts:


* Shared library handling
* Heterogeneous data containers
* Factories
* Reflection
 
 
Among others, the library has the following features:


* Multiple and virtual inheritance are supported for factories and reflections.
* Library users do not need to use any macros (besides those required by
Windows for exported functions).
* Only one external function required per shared library to export classes.
* RTTI is used by default, but it is possible to use user-defined type identification.
* Classes do not need to be modified to be loadable through factories or reflection.
* Constructors can be called even when the signature is unknown, for both
factories and reflection.
* Run-time compilation and loading of shared libraries.


This library is currently in development in preparation for a review for inclusion in the
Boost C++ Libraries. For ongoing status updates, check
[@http://boost-extension.blogspot.com/ C++ Plugins and Reflection].

The most up-to-date portions of this documentation are the header references. Other
sections of the documentation will be updated in the coming weeks.

[endsect]
