[/ Boost.Extension - second tutorial ]
[/ Copyright 2007 Jeremy Pack ]
[/ Distributed under the Boost Software License, Version 1.0. (See]
[/ accompanying file LICENSE_1_0.txt or copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ See http://www.boost.org/ for latest version. ]

[section:tutorial02 Tutorial 2]

This tutorial shows more advanced class loading. The example described here is
contrived, and such a convoluted design is not used as an example of good 
object-oriented program, but as a way to illustrate some of the possibilities 
with this library.

Let's design a class hierarchy based on the following:


* There is a vehicle class
* There is a computer class
* A car is a vehicle
* A boat is a vehicle
* A plane is a vehicle
* A flying_car is a plane and a car
* A car_of_the_future is a flying_car, a boat, and a computer.


In addition, we are not going to have any of these classes be interfaces. They 
will each have an implementation in a .cpp file. This will require multiple 
inheritance, as well as virtual inheritance (because otherwise a 
car_of_the_future would consist of three separate vehicle base classes!).


In addition, each class will be compiled into a separate shared library. This 
is not necessary, certainly, but will serve to illustrate some of the more 
advanced capabilities of the library, as well as some of the techniques 
necessary in this situation.


To begin with, let's look at the Jamfile:


``
import type : change-generated-target-suffix ;
import type : change-generated-target-prefix ;
type.change-generated-target-suffix SHARED_LIB : : extension ;
type.change-generated-target-prefix SHARED_LIB : : lib ;
``


First we must rename the generated libraries (this is required for 
cross-platform use - but the prefix and suffix are arbitrary).


``
lib Vehicle : multiple_inheritance/vehicle.cpp : <link>shared ;
lib Car : multiple_inheritance/car.cpp Vehicle : <link>shared ;
``


Notice here that the Car library is linked to the Vehicle library - this is 
necessary because the Car class needs the implementation of the Vehicle class. 
This is unrelated to the Boost.Extension library, but just a standard 
requirement when inheriting from shared library classes. The same will be done 
with the other shared libraries.


``
lib Plane : multiple_inheritance/plane.cpp Vehicle : <link>shared ;
lib Boat : multiple_inheritance/boat.cpp Vehicle : <link>shared ;
lib Computer : multiple_inheritance/computer.cpp : <link>shared ;
lib FlyingCar : multiple_inheritance/flying_car.cpp Plane Car Vehicle
              : <link>shared ;
lib CarOfTheFuture : 
  multiple_inheritance/car_of_the_future.cpp 
  Plane Car Vehicle 
  FlyingCar Computer Boat 
  : 
  <link>shared 
;

install ../bin : 
  HelloWorld HelloWorldLib Vehicle Boat FlyingCar 
  CarOfTheFuture MultipleInheritance 
  :
  ;
``


Refer to the examples/multiple_inheritance folder for the source code of these
classes. Only the most complex will be described here - the rest are similar.


On the Windows platform, there are special declarations that are required when 
a dll must use a class that is defined in another dll. For interface only 
classes this is unnecessary, and is not needed on other platforms. The macros 
BOOST_EXTENSION_IMPORT_DECL and BOOST_EXTENSION_EXPORT_DECL can be used
to insert the proper declaration. This is detailed in the appendix.


``
#define BOOST_EXTENSION_FLYING_CAR_DECL BOOST_EXTENSION_IMPORT_DECL
#define BOOST_EXTENSION_BOAT_DECL BOOST_EXTENSION_IMPORT_DECL
#define BOOST_EXTENSION_COMPUTER_DECL BOOST_EXTENSION_IMPORT_DECL
#include "flying_car.hpp"
#include "boat.hpp"
#include "computer.hpp"
#include <iostream>
#include <typeinfo>
class BOOST_EXTENSION_CAR_OF_THE_FUTURE_DECL 
  car_of_the_future : public flying_car, public boat, public computer
{
public:
  car_of_the_future(void){std::cout << "\nCreated a Car of the Future";}
  ~car_of_the_future(void){std::cout << "\nDestroyed a Car of the Future";}
  virtual std::string list_capabilities(void);
};
``



[endsect]