#~ Copyright Rene Rivera 2008
#~ Distributed under the Boost Software License, Version 1.0.
#~ (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;

project preprocessor_tests : requirements <warnings>on
                                          <toolset>msvc:<warnings>all
                                          <toolset>gcc:<warnings>all
                                          <toolset>gcc-4.3.0:<cxxflags>-Wno-variadic-macros
                                          <toolset>gcc-4.4.0:<cxxflags>-Wno-variadic-macros 
                                          <toolset>gcc-4.5.0:<cxxflags>-Wno-variadic-macros
                                          <toolset>gcc-4.5.0:<linkflags>"-Wl,--enable-auto-import"
                                          <toolset>gcc-4.5.2:<cxxflags>-Wno-variadic-macros
                                          <toolset>gcc-4.6.0:<cxxflags>-Wno-variadic-macros
                                          ;

test-suite preprocessor
   :   
        [ compile arithmetic.cpp ]
        [ compile array.cpp ]
        [ compile comparison.cpp ]
        [ compile control.cpp ]
        [ compile debug.cpp ]
        [ compile facilities.cpp ]
        [ compile iteration.cpp ]
        [ compile list.cpp ]
        [ compile logical.cpp ]
        [ compile repetition.cpp ]
        [ compile selection.cpp ]
        [ compile seq.cpp ]
        [ compile slot.cpp ]
        [ compile tuple.cpp ]
        [ compile variadic.cpp ]
   ;

test-suite preprocessor_gcc 
   :   
        [ compile arithmetic.cpp 
          : <cflags>-std=c++0x
          : arithmetic_gcc 
        ] 
        [ compile array.cpp 
          : <cflags>-std=c++0x 
          : array_gcc 
        ] 
        [ compile comparison.cpp 
          : <cflags>-std=c++0x 
          : comparison_gcc 
        ] 
        [ compile control.cpp 
          : <cflags>-std=c++0x 
          : control_gcc 
        ] 
        [ compile debug.cpp 
          : <cflags>-std=c++0x 
          : debug_gcc 
        ] 
        [ compile facilities.cpp 
          : <cflags>-std=c++0x 
          : facilities_gcc 
        ] 
        [ compile iteration.cpp 
          : <cflags>-std=c++0x 
          : iteration_gcc 
        ] 
        [ compile list.cpp 
          : <cflags>-std=c++0x 
          : list_gcc 
        ] 
        [ compile logical.cpp 
          : <cflags>-std=c++0x 
          : logical_gcc 
        ] 
        [ compile repetition.cpp 
          : <cflags>-std=c++0x 
          : repetition_gcc 
        ] 
        [ compile selection.cpp 
          : <cflags>-std=c++0x 
          : selection_gcc 
        ] 
        [ compile seq.cpp 
          : <cflags>-std=c++0x 
          : seq_gcc 
        ] 
        [ compile slot.cpp 
          : <cflags>-std=c++0x 
          : slot_gcc 
        ] 
        [ compile tuple.cpp 
          : <cflags>-std=c++0x 
          : tuple_gcc 
        ] 
        [ compile variadic.cpp 
          : <cflags>-std=c++0x 
          : variadic_gcc 
        ] 
   :     
   <toolset>gcc-4.3.0
   <toolset>gcc-4.4.0
   <toolset>gcc-4.5.0
   <toolset>gcc-4.5.2
   <toolset>gcc-4.6.0
   ;

test-suite preprocessor_gcc ;

test-suite preprocessor_nvm
   :   
        [ compile arithmetic.cpp : <define>BOOST_PP_VARIADICS=0 : arithmetic_nvm ]
        [ compile array.cpp : <define>BOOST_PP_VARIADICS=0 : array_nvm ]
        [ compile comparison.cpp : <define>BOOST_PP_VARIADICS=0 : comparison_nvm ]
        [ compile control.cpp : <define>BOOST_PP_VARIADICS=0 : control_nvm ]
        [ compile debug.cpp : <define>BOOST_PP_VARIADICS=0 : debug_nvm ]
        [ compile facilities.cpp : <define>BOOST_PP_VARIADICS=0 : facilities_nvm ]
        [ compile iteration.cpp : <define>BOOST_PP_VARIADICS=0 : iteration_nvm ]
        [ compile list.cpp : <define>BOOST_PP_VARIADICS=0 : list_nvm ]
        [ compile logical.cpp : <define>BOOST_PP_VARIADICS=0 : logical_nvm ]
        [ compile repetition.cpp : <define>BOOST_PP_VARIADICS=0 : repetition_nvm ]
        [ compile selection.cpp : <define>BOOST_PP_VARIADICS=0 : selection_nvm ]
        [ compile seq.cpp : <define>BOOST_PP_VARIADICS=0 : seq_nvm ]
        [ compile slot.cpp : <define>BOOST_PP_VARIADICS=0 : slot_nvm ]
        [ compile tuple.cpp : <define>BOOST_PP_VARIADICS=0 : tuple_nvm ]
   ;

# test-suite preprocessor_dbg
#   :   
#        [ compile-fail debug_fail.cpp 
#          : <variant>debug
#            <define>BOOST_PP_VARIADICS=1
#            <toolset>gcc:<cflags>-std=c++0x
#        ]
#   ;

test-suite preprocessor_c
   :   
        [ compile arithmetic.c 
          : <toolset>gcc:<cflags>-std=c99
          : arithmetic_c 
        ]
        [ compile array.c 
          : <toolset>gcc:<cflags>-std=c99
          : array_c 
        ]
        [ compile comparison.c 
          : <toolset>gcc:<cflags>-std=c99
          : comparison_c 
        ]
        [ compile control.c 
          : <toolset>gcc:<cflags>-std=c99
          : control_c 
        ]
        [ compile debug.c 
          : <toolset>gcc:<cflags>-std=c99
          : debug_c 
        ]
        [ compile facilities.c 
          : <toolset>gcc:<cflags>-std=c99
          : facilities_c 
        ]
        [ compile list.c 
          : <toolset>gcc:<cflags>-std=c99
          : list_c 
        ]
        [ compile logical.c 
          : <toolset>gcc:<cflags>-std=c99
          : logical_c 
        ]
        [ compile selection.c 
          : <toolset>gcc:<cflags>-std=c99
          : selection_c 
        ]
        [ compile seq.c 
          : <toolset>gcc:<cflags>-std=c99
          : seq_c 
        ]
        [ compile slot.c 
          : <toolset>gcc:<cflags>-std=c99
          : slot_c 
        ]
        [ compile tuple.c 
          : <toolset>gcc:<cflags>-std=c99
          : tuple_c 
        ]
        [ compile variadic.c 
          : <toolset>gcc:<cflags>-std=c99
          : variadic_c 
        ]
   ;

test-suite preprocessor_c_nvm
   :   
        [ compile arithmetic.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : arithmetic_c_nvm 
        ]
        [ compile array.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : array_c_nvm 
        ]
        [ compile comparison.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : comparison_c_nvm 
        ]
        [ compile control.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : control_c_nvm 
        ]
        [ compile debug.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : debug_c_nvm 
        ]
        [ compile facilities.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : facilities_c_nvm 
        ]
        [ compile list.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : list_c_nvm 
        ]
        [ compile logical.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : logical_c_nvm 
        ]
        [ compile selection.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : selection_c_nvm 
        ]
        [ compile seq.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : seq_c_nvm 
        ]
        [ compile slot.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : slot_c_nvm 
        ]
        [ compile tuple.c 
          : <define>BOOST_PP_VARIADICS=0
            <toolset>gcc:<cflags>-std=c99
          : tuple_c_nvm 
        ]
   ;

# test-suite preprocessor_c_dbg
#   :   
#        [ compile-fail debug_fail.c 
#          : <variant>debug
#            <define>BOOST_PP_VARIADICS=1
#            <toolset>gcc:<cflags>-std=c99
#          : debug_fail_c
#        ]
#   ;
