<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="string_algo.concept" last-revision="$Date$">
    <title>Concepts</title>

    <using-namespace name="boost"/>
    <using-namespace name="boost::string_algo"/>

    <section>   
        <title>Definitions</title>
        <table>
            <title>Associated Types</title>
            <tgroup cols="3" align="left">
                <thead>
                    <row>   
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Iterator Type</entry>
                        <entry></entry>
                        <entry>Type of iterator used for searching.</entry>
                    </row>
                    <row>
                        <entry>Result Type</entry>
                        <entry><code>typename Fmt::result_type</code></entry>
                        <entry>Formatter result type</entry>
                    </row>                      
                </tbody>
            </tgroup>
        </table>

        <table>
            <title>Notation</title>
            <tgroup cols="2" align="left">
                <tbody>
                    <row>
                        <entry><code>F</code></entry>
                        <entry>A type that is a model of Finder</entry>
                    </row>
                    <row>
                        <entry><code>Fmt</code></entry>
                        <entry>A type that is a model of Formatter</entry>
                    </row>
                    <row>
                        <entry><code>Iter</code></entry>
                        <entry>
                            Iterator Type
                        </entry>
                    </row>
                    <row>
                        <entry><code>f</code></entry>
                        <entry>Object of type <code>F</code></entry>
                    </row>
                    <row>
                        <entry><code>fmt</code></entry>
                        <entry>Object of type <code>Fmt</code></entry>
                    </row>
                    <row>
                        <entry><code>i,j</code></entry>
                        <entry>Objects of type <code>Iter</code></entry>
                    </row>
                    </tbody>
            </tgroup>
        </table>
    </section>

    <section id="string_algo.finder_concept">
        <title>Finder Concept</title>

        <para>
            Finder is a functor which searches for an arbitrary part of a container. 
            Result of the search is given as an <classname>iterator_range</classname> 
            pointing to the selected part.
        </para>

        <table>
            <title>Valid Expressions</title>
            <tgroup cols="3" align="left">
                <thead>
                    <row>   
                        <entry>Expression</entry>
                        <entry>Return Type</entry>
                        <entry>Effects</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>f(i,j)</code></entry>
                        <entry>Convertible to <code>iterator_range&lt;Iter&gt;</code></entry>
                        <entry>Perform the search on interval [i,j), return the result of the search</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Various algorithms need to perform a searching in a container. Finder is a generalization of search
            operations. Algorithms can abstract from searching using a finder. For instance generic replace
            algorithm can replace any part of the input, and the finder is used to select the desired one.
        </para>
        <para>
            Note, that it is only required that the finder works with a particular iterator type. However,
            finder operation can be defined as a template, allowing the finder to work with any iterator.
        </para>
    </section>
    <section id="string_algo.formatter_concept">
        <title>Formatter concept</title>

        <para>
            Formatters are used by <link linkend="string_algo.replace">replace algorithms</link>.
            They are used in close conjunction to finders.
            Formatter is a functor, which takes a result from a finder operation and transforms it in a specific way. 
            Operation of the formatter can use additional information provided by a specific finder.
            For example <functionname>regex_formatter</functionname> uses the match information from
            <functionname>regex_finder</functionname> to format an expression.
        </para>
    
        <table>
            <title>Valid Expressions</title>
            <tgroup cols="3" align="left">
                <thead>
                    <row>   
                        <entry>Expression</entry>
                        <entry>Return Type</entry>
                        <entry>Effects</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>typename Fmt::result_type</code></entry>
                        <entry>Type of the formatter operation result</entry>
                        <entry/>
                    </row>
                    <row>
                        <entry><code>fmt(f(i,j))</code></entry>
                        <entry>Result Type</entry>
                        <entry>Format the result of the finder operation</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Similarly to finders, formatters generalize format operations. When a finder is used to 
            select a part of the input, formatter takes this selection and performs some formating
            on it. Algorithms can abstract from formating using a formatter.
        </para>
    </section>
</section>
