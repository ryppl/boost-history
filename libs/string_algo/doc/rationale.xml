<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="string_algo.rationale" last-revision="$Date$">
	<title>Rationale</title>

    <using-namespace name="boost"/>
    <using-namespace name="boost::string_algo"/>
	
	<section id="string_algo.structure">
		<title>Library structure</title>

		<para>
			When designing a library there is always a problem to find a balance between generalization
			and usability. Generic utility can have wider range of usage with more options to extensibility,
			but it can also bring unwanted overhead for everyday usage. 
		</para>
		<para>
			Imagine a library for drawing geometric objects. It can contain one generic function draw(),
			with many parameters specifying what to draw, like size, number of edges, shape etc.
			This would allow you to draw almost anything, but when a user usualy needs to draw 
			only a triangle, or a square, she will have to specify this simple request in a 
			very complicated way. Therefore, for this purpose, two functions, draw_triangle() and
			draw_square() would suit much better then a generic draw() function.
		</para>
		<para>
			String Algorith Library solves this problem by dividing the interface into layers.
			First layer (defined in the namespace boost) contains ready to use algorithms specialized
			for common tasks. They are provided in multiple variant, to better suit the current needs.
			Second layer (defined in the namespace boost::string_algo), provides generic interface with
			a more options for extending and tunning. 
		<para>
		</para>
			For instance, a <functionname>boost::trim</functionname> algorithm trims spaces from 
			an input string. When there is a need to trim something else, there is 
			<functionname>boost::string_algo::trim</functionname>. Its interface allow to specify a 
			predicate which selects the characters to be removed.
		</para>
	</section>
	<section id="string_algo.regex">
        <title>Regular Expressions</title>

        <para>
            Regular expressions are essential part of text processing. For this reason, the library 
            provides also regex variants of some algorithms. The library does not try to replace
            <libraryname>Boost.Regex</libraryname>. It merely wraps its functionality in a new interface.
            As a part of this library regex algorithms integrate smoothly with other components, thus 
            bringing additional value.
        </para>
    </section>
</section>
