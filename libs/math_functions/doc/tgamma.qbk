
[#tgamma][section The Gamma Function]

[caution __caution ]

[h4 Synopsis]

``
#include <boost/math/special_functions/gamma.hpp>
``

  namespace boost{ namespace math{
  
  template <class T>
  T tgamma(T z);
  
  }} // namespaces
  
[h4 Description]

Returns the "true gamma" of value z:

[$../equations/gamm1.png]

[$../graphs/gamma.png]

There are effectively two versions of this function internally: a fully
generic version that is slow, but reasonably accurate, and a much more
efficient approximation that is used where the number of digits in the mantissa
of T correspond to a certain __lanczos.  In practice any built in
floating point type you will encounter has an appropriate __lanczos
defined for it.  It is also possible, given enough machine time, to generate
further __lanczos's using the program libs/math/tools/lanczos_generator.cpp

[h4 Accuracy]

The following table shows the peek errors (in units of epsilon) 
found on various platforms
with various floating point types. Unless otherwise specified any
floating point type that is narrower than the one shown will have
__zero_error.

[table
[[Mantissa Size] [Platform and Compiler] [Factorials and Half factorials] [Values Near Zero] [Values Near 1 or 2] [Values Near a Negative Pole]]
[[53]            [Win32 Visual C++ 8]  [Peek=1.9 Mean=0.7 \n\n(GSL=3.9) \n(Cephes=3.0)] [Peek=2.0 Mean=1.1 \n\n(GSL=4.5) (Cephes=1)]    [Peek=2.0 Mean=1.1 \n\n(GSL=7.9) (Cephes=1.0)] [Peek=2.6 Mean=1.3 \n\n(GSL=2.5) (Cephes=2.7)] ]
[[64]            [Linux IA32 / GCC]  [Peek=300 Mean=49.5 \n\n(Native Peek=395 Mean=89)]           [Peek=3.0 Mean=1.4 \n\n(Native Peek=11 Mean=3.3)]    [Peek=5.0 Mean=1.8 \n\n(Native Peek=0.92 Mean=0.2)]       [Peek=157 Mean=65 \n\n(Native Peek=205 Mean=108)]   ]
[[64]            [Linux IA64 / GCC]  [Peek=2.8 Mean=0.9 \n(Native=0.7)]           [Peek=4.8 Mean=1.5 \n(Native=0)]    [Peek=4.8 Mean=1.5 \n(Native=0)]       [Peek=5.0 Mean=1.7 \n(Native 0)]           ]
[[113]           [HPUX IA64, aCC A.06.06]    [Peek=2.5 Mean=1.1 \n(Native=0)] [Peek=3.5 Mean=1.7 \n(Native=0)]    [Peek=3.5 Mean=1.6 \n(Native=0)] [Peek=5.2 Mean=1.92 \n(Native=0)]  ]
]

[h4 Testing]

The gamma is relatively easy to test: factorials and half integer factorials
can be calculated exactly by other means and compared with the gamma function.
In addition some accuracy tests in known tricky areas were computed at high precision
using the generic version of this function.

[h4 Implementation]

The generic version of this function is implemented by combining the series and 
continued fraction representations for the incomplete gamma function:

[$../equations/gamm2.png]

where /l/ is an arbitrary integration limit: choosing [^l = max(10, a)] 
seems to work fairly well.

For types of known precision the __lanczos is used, a traits class 
`boost::math::lanczos::lanczos_traits` maps type T to an appropriate
approximation.  

For z in the range -20 < z < 1 then recursion is used to shift to z > 1 via:

[$../equations/gamm3.png]

For very small z, this helps to preserve the identity:

[$../equations/gamm4.png]

For z < -20 the reflection formula:

[$../equations/gamm5.png]

is used.  Particular care has to be taken to evaluate the `z * sin(PI * z)` part: 
a special routine is used to reduce z prior to multiplying by PI to ensure that the
result in is the range [0, PI/2]. Without this an excessive amount of error occurs
in this region: which is hard enough already as the rate of change near a negative pole
is /exceptionally/ high.

[endsect]

