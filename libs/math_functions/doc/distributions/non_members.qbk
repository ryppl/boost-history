[section:nmp Non-Member Properties]

Properties that are common to all distributions are accessed via non-member 
getter functions.  This allows more of these functions to be added over time
as the need arises.  Unfortunately the literature uses many different and
confusing names to refer to a rather small number of actual concepts; refer
to the [link concept_index concept index] to find the property you 
want by the name you are most familiar with. 
Or use the [link function_index function index]
to go straight to the function you want if you already know its name.

[h4 [#function_index]Function Index]

* [link math.dist.cdf cdf].
* [link math.dist.ccdf cdf complement].
* [link math.dist.chf chf].
* [link math.dist.hazard hazard].
* __kurtosis.
* __kurtosis_excess
* __mean.
* __mode.
* [link math.dist.pdf pdf].
* [link math.dist.quantile quantile].
* [link math.dist.quantile_c quantile from the complement].
* __skewness.
* [link math.dist.sd standard_deviation].
* __variance.

[h4 [#concept_index]Conceptual Index]

* __ccdf.
* __cdf.
* __chf.
* [link survival_inv Inverse Survival Function].
* __hazard
* [link lower_critical Lower Critical Value].
* __kurtosis.
* __kurtosis_excess
* __mean.
* __mode.
* [link cdfPQ P].
* [link percent Percent Point Function].
* __pdf.
* [link pmf Probability Mass Function].
* [link cdfPQ Q].
* __quantile.
* [link math.dist.quantile_c Quantile from the complement of the probability].
* __skewness.
* __sd
* [link survival Survival Function].
* [link upper_critical Upper Critical Value].
* __variance.

[h4 [#math.dist.cdf]Cumulative Distribution Function]

   template <class RealType>
   RealType cdf(const ``['Distribution-Type]``<RealType>& dist, const RealType& x);
   
The __cdf is the probability that 
the variable takes a value less than or equal to x.  It is equivalent
to the integral from -infinity to x of the __pdf.  
For example the following graph shows the cdf for the
normal distribution:

[$../graphs/cdf.png]

[h4 [#math.dist.ccdf]Complement of the Cumulative Distribution Function]

   template <class Distribution, class RealType>
   RealType cdf(const ``['Unspecified-Complement-Type]``<Distribution, RealType>& comp);
   
The complement of the __cdf 
is the probability that 
the variable takes a value greater than x.  It is equivalent
to the integral from x to infinity of the __pdf, or 1 minus the __cdf of x. 

This is also known as the survival function.

In this library, it is obtained by wrapping the arguments to the `cdf`
function in a call to `complement`, for example:

   // standard normal distribution object:
   boost::math::normal norm;
   // print survival function for x=2.0:
   std::cout << cdf(complement(norm, 2.0)) << std::endl;

For example the following graph shows the complement of the cdf for the
normal distribution:

[$../graphs/survival.png]

[h4 [#math.dist.hazard]Hazard Function]

   template <class RealType>
   RealType hazard(const ``['Distribution-Type]``<RealType>& dist, const RealType& x);

Returns the __hazard of /x/ and distibution /dist/.

[$../equations/hazard.png]

[caution
Some authors refer to this as the conditional failure 
density function rather than the hazard function.]

[h4 [#math.dist.chf]Cumulative Hazard Function]

   template <class RealType>
   RealType chf(const ``['Distribution-Type]``<RealType>& dist, const RealType& x);

Returns the __chf of /x/ and distibution /dist/.

[$../equations/chf.png]

[caution 
Some authors refer to this as simply the "Hazard Function".]

[h4 [#math.dist.mean]mean]

   template<class RealType>
   RealType mean(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the mean of the distribution /dist/.

[h4 [#math.dist.mode]mode]

   template<class RealType>
   RealType mode(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the mode of the distribution /dist/.

[h4 [#math.dist.pdf]Probabilty Density Function]

   template <class RealType>
   RealType pdf(const ``['Distribution-Type]``<RealType>& dist, const RealType& x);
   
For a continuous function, the probability density function (pdf) returns 
the probability that the variate has the value x. 
Since for continuous distributions the probability at a single point is actually zero, 
the probability is better expressed as the integral of the pdf between two points:
see the __cdf.

For a discrete distribution, the pdf is the probability that the 
variate takes the value x.

For example for a standard normal distribution the pdf looks like this:

[$../graphs/pdf.png]

[h4 [#math.dist.quantile]quantile]

   template <class RealType>
   RealType quantile(const ``['Distribution-Type]``<RealType>& dist, const RealType& p);
   
The quantile is best viewed as the inverse of the __cdf, it returns
a value /x/ such that `cdf(dist, x) == p`.

This is also known as the /percent point function/, or a /percentile/.

The following graph shows the quantile function for a standard normal
distribution:

[$../graphs/quantile.png]

[h4 [#math.dist.quantile_c]Quantile from the complement of the probability.]

   template <class Distribution, class RealType>
   RealType quantile(const ``['Unspecified-Complement-Type]``<Distribution, RealType>& comp);
   
This is the inverse of the __ccdf.  It is calculated by wrapping
the arguments in a call to the quantile function in a call to
/complement/.  For example:

   // define a standard normal distribution:
   boost::math::normal norm;
   // print the value of x for which the complement
   // of the probability is 0.05:
   std::cout << quantile(complement(norm, 0.05)) << std::endl;

The function computes a value /x/ such that
`cdf(complement(dist, x)) == q` where /q/ is complement of the
probability.

This function is also called the inverse survival function.

The following graph show the inverse survival function for the normal
distribution:

[$../graphs/survival_inv.png]

[h4 [#math.dist.sd]Standard Deviation]

   template <class RealType>
   RealType standard_deviation(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the standard deviation of distribution /dist/.   

[h4 [#math.dist.variance]variance]

   template <class RealType>
   RealType variance(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the variance of the distribution /dist/.

[h4 [#math.dist.skewness]skewness]

   template <class RealType>
   RealType skewness(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the skewness of the distribution /dist/.

[h4 [#math.dist.kurtosis]kurtosis]

   template <class RealType>
   RealType kurtosis(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the kurtosis of the distribution /dist/.

[h4 [#math.dist.kurtosis_excess]kurtosis excess]

   template <class RealType>
   RealType kurtosis_excess(const ``['Distribution-Type]``<RealType>& dist);
   
Returns the kurtosis excess of the distribution /dist/.

[h4 [#cdfPQ]P and Q]

The terms P and Q are sometimes used to refer to the __cdf
and its [link math.dist.ccdf complement] respectively.
Lowercase p and q are sometimes used to refer to the values returned
by these functions.

[h4 [#percent]Percent Point Function]

The percent point function, also known as the percentiles, is the same as
the __quantile.

[h4 [#survival_inv]Inverse Survival Function.]

The inverse of the survival function, is the same as computing the 
[link math.dist.quantile_c quantile
from the complement of the probability].

[h4 [#pmf]Probability Mass Function]

The Probability Mass Function is the same as the __pdf.

The term Mass Function is usually applied to discrete distributions,
while the term __pdf applies to continuous distributions.

[h4 [#lower_critical]Lower Critical Value.]

The lower critical value calculates the value of the random variable
given the area under the left tail of the distribution.  
It is equivalent to calculating the __quantile.

[h4 [#upper_critical]Upper Critical Value.]

The upper critical value calculates the value of the random variable
given the area under the right tail of the distribution.  It is equivalent to 
calculating the [link math.dist.quantile_c quantile from the complement of the
probability].

[h4 [#survival]Survival Function]

Refer to the __ccdf.

[endsect][/section:nmp Non-Member Properties]


[/ non_members.qbk
  Copyright 2006 John Maddock and Paul A. Bristow.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

