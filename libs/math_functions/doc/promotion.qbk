[section Promotion of Arguments]
[/ TODO remove from CVS - This is now Obselete]

A number of functions useful for statistics,
for example, the almost universally known Student's t,
have arguments of degrees of freedom which can be integers,
but also have meaning, and use, as intermediate values.

So it is a reasonable expectation that
either an integer or a floating-point value can be provided.

With fully templated functions, doing this this might cause 
several instantiations of what is essentially the same code.

To avoid this this, arguments are explicitly promoted,
according to the following rules:

If either T1 or T2 is an integer type, 
pretend it was a double (for the purposes of further analysis).
Then pick the wider of the two floating-point (RealType) types
as the actual signature to forward to.

For example:

	foo(int, short) -> double foo(double, double);
	foo(int, float) -> double foo(double, double);

Note: these do /not/ promote to `float foo(float, float)`

	foo(int, double) -> foo(double, double);
	foo(double, float) -> double foo(double, double);
	foo(double, float) -> double foo(double, double);
	foo(any-int-or-float-type, long double) -> foo(long double, long double);

Therefore the signature is only unchanged if both the arguments are of the 
same floating point type.

So the only way to get an entirely float version is to call `foo(1.F, 2.F)`

But since most (if not all) the math functions convert to double internally,
probably there would not be the hoped-for gain by using float here.

The rationale for the conversion rules is to follow
the TR1 and C-compatible conversion rules of `pow`, and others,
where `pow(int, float)` is converted to `pow(double, double)`.

In promotion.hpp `promote_arg`, `promote_arg2` and `promote_arg3`
do the above promotion for 1, 2 or 3 arguments.

[endsect]

[/ 
  Copyright 2006 John Maddock and Paul A. Bristow.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]
