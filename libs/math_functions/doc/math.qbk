[library Math Toolkit
    [quickbook 1.3]
    [copyright 2006 John Maddock]
    [purpose Various Special Functions and Numerical Tools]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        <ulink url="http://www.boost.org/LICENSE_1_0.txt">
            http://www.boost.org/LICENSE_1_0.txt
        </ulink>)
    ]
    [authors [Maddock, John]]
    [category math]
    [last-revision $Date$]
]

[def __effects [*Effects: ]]
[def __formula [*Formula: ]]
[def __exm1 '''<code>e<superscript>x</superscript> - 1</code>''']
[def __ex '''<code>e<superscript>x</superscript></code>''']
[def __te '''2&#x025B;''']
[def __lanczos [link lanczos Lanczos approximation]]
[def __zero_error [link zero_error effectively zero error]]

[def __godfrey [link godfrey Godfrey]]
[def __pugh [link pugh Pugh]]

[def __caution This is not an official Boost library, it is a library under 
               construction, the code is fully functional and robust, but 
               interfaces, library structure, and function names may be 
               changed without notice.]
               
[def __domain_error [link domain_error domain_error]]
[def __pole_error [link pole_error pole_error]]
[def __overflow_error [link overflow_error overflow_error]]
[def __underflow_error [link underflow_error underflow_error]]
[def __denorm_error [link denorm_error denorm_error]]
[def __logic_error [link logic_error logic_error]]
[def __checked_narrowing_cast [link checked_narrowing_cast checked_narrowing_cast]]

[template super[x]'''<superscript>'''[x]'''</superscript>''']
[template sub[x]'''<subscript>'''[x]'''</subscript>''']

[section:intro Introduction]

This library is work in progress, it is intended to fulfil two needs:

# To provide a small number of high quality special functions, initially
these will be concentrated on functions used in statistical applications.
The functions currently implemented are the gamma/beta/erf functions
along with the incomplete gamma and beta functions (four variants
of each).  All the implementations
are fully generic and support the use of arbitrary "real-number"
types, although they are optimised for use with types with known-about
mantissa sizes: typically `float`, `double` or `long double`.  Use of these
functions with interval arithmetic (Boost.Interval) isn't quite supported
yet, but it's something I want to investigate soon.

# To provide at least some of the tools required to implement 
mathematical special functions, hopefully the presence of 
these will encourage other authors to contribute more special
function implementations in the future.  Currently implemented
are helpers for the evaluation of infinite series, continued
fractions and rational approximations.  There are also classes 
for the manipulation of polynomials, for testing a special function
against tabulated test data, and for the rapid generation of test
data and/or data for output to an external graphing application.

[endsect]

[section Special Functions]

[include tgamma.qbk]
[include lgamma.qbk]
[include gamma_ratios.qbk]
[include factorials.qbk]
[include igamma.qbk]
[include igamma_inv.qbk]
[include erf.qbk]
[include erf_inv.qbk]
[include beta.qbk]
[include ibeta.qbk]
[include ibeta_inv.qbk]
[include fpclassify.qbk]
[include error_handling.qbk]

[endsect]

[section Toolkit]

[include series.qbk]
[include fraction.qbk]
[include rational.qbk]
[include roots.qbk]
[include roots_without_derivatives.qbk]
[include polynomial.qbk]
[include relative_error.qbk]
[include test_data.qbk]


[endsect]

[section Use with Non-Builtin Floating Point Types]

[include concepts.qbk]

[endsect]

[section Backgrounders]

[include lanczos.qbk]
[include error.qbk]
[include promotion.qbk]

[endsect]

[section Status and Roadmap]

[include roadmap.qbk]
[include issues.qbk]

[endsect]
