<header name="poet/future_barrier.hpp">
	<namespace name="poet">
		<overloaded-function name="future_barrier">
			<purpose>construct a future which becomes ready when a group of futures are all ready.</purpose>
			<signature>
				<template>
					<template-type-parameter name="T1"/>
					<template-type-parameter name="T2"/>
				</template>
				<type><classname>future</classname>&lt;void&gt;</type>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
				<parameter name="f2">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<signature>
				<template>
					<template-type-parameter name="T1"/>
					<template-type-parameter name="T2, ..."/>
					<template-type-parameter name="TN"/>
				</template>
				<type><classname>future</classname>&lt;void&gt;</type>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
				<parameter name="f2">
					<paramtype>const <classname>future</classname>&lt;T2&gt; &amp;</paramtype>
				</parameter>
				<parameter name="">
					<paramtype>...</paramtype>
				</parameter>
				<parameter name="fN">
					<paramtype>const <classname>future</classname>&lt;TN&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<description>
				<para>
					The <code>future_barrier</code> functions construct a future which can be used to
					wait on a group of futures until they are all ready (or one has an exception).
				</para>
				<para>
					By default, overloads which accept 2 to 10 future arguments are provided.
					The user may obtain more or fewer overloads by defining the macro
					<code>POET_FUTURE_BARRIER_MAX_ARGS</code> prior to including poet/future_barrier.hpp.
				</para>
				<itemizedlist>
					<title>See also</title>
					<listitem>
						<para>
							<functionname>future_barrier_range</functionname>: Same as <code>future_barrier</code> except it takes iterators to a range of futures as its parameters.
						</para>
					</listitem>
					<listitem>
						<para>
							<functionname>future_combining_barrier</functionname>: A more flexible version of <code>future_barrier</code>
							which allows the user to create an arbitrary value/exception for the returned future based on the
							values/exception of the input futures.
						</para>
					</listitem>
					<listitem>
						<para>
							<functionname>future_select</functionname>: construct a future which becomes ready when any of a group of futures is ready or has an exception.
						</para>
					</listitem>
				</itemizedlist>
			</description>
			<returns>
				<para>
					A future which becomes ready when all of the input futures either become
					ready or one has an exception.  If one of the input futures has an exception, the
					returned future will receive the same exception.
				</para>
			</returns>
		</overloaded-function>
		<function name="future_barrier_range">
			<template>
				<template-type-parameter name="FutureInputIterator"/>
			</template>
			<type><classname>future</classname>&lt;void&gt;</type>
			<parameter name="first">
				<paramtype>FutureInputIterator</paramtype>
			</parameter>
			<parameter name="last">
				<paramtype>FutureInputIterator</paramtype>
			</parameter>
			<description>
				<para>Similar to <functionname>future_barrier</functionname> except this version takes input iterators
					to a range of futures as its input parameters.
				</para>
			</description>
		</function>
		<overloaded-function name="future_combining_barrier">
			<purpose>construct a future based on the values from a group of futures.</purpose>
			<signature>
				<template>
					<template-type-parameter name="R"/>
					<template-type-parameter name="Combiner"/>
					<template-type-parameter name="ExceptionHandler"/>
					<template-type-parameter name="T1"/>
				</template>
				<type><classname>future</classname>&lt;R&gt;</type>
				<parameter name="combiner">
					<paramtype>const Combiner &amp;</paramtype>
				</parameter>
				<parameter name="exception_handler">
					<paramtype>const ExceptionHandler &amp;</paramtype>
				</parameter>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<signature>
				<template>
					<template-type-parameter name="R"/>
					<template-type-parameter name="Combiner"/>
					<template-type-parameter name="ExceptionHandler"/>
					<template-type-parameter name="T1"/>
					<template-type-parameter name="T2"/>
				</template>
				<type><classname>future</classname>&lt;R&gt;</type>
				<parameter name="combiner">
					<paramtype>const Combiner &amp;</paramtype>
				</parameter>
				<parameter name="exception_handler">
					<paramtype>const ExceptionHandler &amp;</paramtype>
				</parameter>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
				<parameter name="f2">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<signature>
				<template>
					<template-type-parameter name="R"/>
					<template-type-parameter name="Combiner"/>
					<template-type-parameter name="ExceptionHandler"/>
					<template-type-parameter name="T1"/>
					<template-type-parameter name="T2, ..."/>
					<template-type-parameter name="TN"/>
				</template>
				<type><classname>future</classname>&lt;R&gt;</type>
				<parameter name="combiner">
					<paramtype>const Combiner &amp;</paramtype>
				</parameter>
				<parameter name="exception_handler">
					<paramtype>const ExceptionHandler &amp;</paramtype>
				</parameter>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
				<parameter name="f2">
					<paramtype>const <classname>future</classname>&lt;T2&gt; &amp;</paramtype>
				</parameter>
				<parameter name="">
					<paramtype>...</paramtype>
				</parameter>
				<parameter name="fN">
					<paramtype>const <classname>future</classname>&lt;TN&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<description>
				<para>
					The <code>future_combining_barrier</code> function constructs a future which can be used to
					wait on a group of futures until they are all ready (or one has an exception).  The user
					must specify the <code>combiner</code> and <code>exception_handler</code> functors,
					which are used to generate the value/exception for the returned future based
					on the values/exception of the input futures.
				</para>
				<para>
					The template type parameter <code>R</code> determines the return type of the
					function, and must be manually specified when calling <code>future_combining_barrier</code>.
					The rest of the template type parameters may be deduced from the types of
					the input parameters.
				</para>
				<para>
					If all the input futures sucessfully become ready, the returned future
					will become ready by obtaining its value from the return value of <code>combiner(v1, v2, ..., vN)</code>
					where the <code>vN</code> parameters are the values associated with the input futures.
					If any of the input futures is a future&lt;void&gt; (and thus has no value),
					the user's <code>combiner</code> functor will
					receive a placeholder value of type <classname>poet::null_type</classname>.
				</para>
				<para>
					If any of the input futures has an exception, the
					returned future will receive an exception based on the return value of
					<code>exception_handler(ex_ptr)</code> where the <code>ex_ptr</code> parameter
					will be an <classname>exception_ptr</classname> holding the exception from the input
					future.  The return value of the user's <code>exception_handler</code> functor
					should be of type <classname>exception_ptr</classname> and hold the
					exception which the user desires to be transported to the returned future.
				</para>
				<para>
					By default, overloads which accept 1 to 10 future arguments are provided.
					The user may obtain more or fewer overloads by defining the macro
					<code>POET_FUTURE_BARRIER_MAX_ARGS</code> prior to including poet/future_barrier.hpp.
				</para>
				<itemizedlist>
					<title>See also</title>
					<listitem>
						<para>
							<functionname>future_combining_barrier_range</functionname>: Same as <code>future_combining_barrier</code> except it takes iterators to a range of futures as its parameters.
						</para>
					</listitem>
					<listitem>
						<para>
							<functionname>future_barrier</functionname>: A simpler, more limited version of
							<code>future_combining_barrier</code> which returns a future&lt;void&gt;.
						</para>
					</listitem>
					<listitem>
						<para>
							<functionname>future_select</functionname>: construct a future which becomes ready when any of a group of futures is ready or has an exception.
						</para>
					</listitem>
				</itemizedlist>
			</description>
			<returns>
				<para>
					A future which becomes ready when all of the input futures either become
					ready or one has an exception.
				</para>
			</returns>
		</overloaded-function>
		<function name="future_combining_barrier_range">
			<template>
				<template-type-parameter name="R"/>
				<template-type-parameter name="Combiner"/>
				<template-type-parameter name="ExceptionHandler"/>
				<template-type-parameter name="FutureInputIterator"/>
			</template>
			<type><classname>future</classname>&lt;R&gt;</type>
			<parameter name="combiner">
				<paramtype>const Combiner &amp;</paramtype>
			</parameter>
			<parameter name="exception_handler">
				<paramtype>const ExceptionHandler &amp;</paramtype>
			</parameter>
			<parameter name="first">
				<paramtype>FutureInputIterator</paramtype>
			</parameter>
			<parameter name="last">
				<paramtype>FutureInputIterator</paramtype>
			</parameter>
			<description>
				<para>Similar to <functionname>future_combining_barrier</functionname> except this version takes input iterators
					to a range of futures as its input parameters.
				</para>
			</description>
		</function>
		<struct name="null_type">
			<description>
				<para><code>poet::null_type</code> is a default-constructible, copy-constructible, and assignable type
					which is sometimes passed as an argument to combiners given to the <functionname>future_combining_barrier</functionname>
					function.  It is used as a placeholder for the non-existant value associated with a future&lt;void&gt;.
				</para>
			</description>
		</struct>
	</namespace>
</header>
