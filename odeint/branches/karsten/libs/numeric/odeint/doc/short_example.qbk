[section Short Example]
This section gives a quick introduction to the most important features of the 
library using a number of instructive examples.
Image, for example, you want to numerically integrate a harmonic oscillator 
with friction. The equations of motion are given by x'' = -x + gamma x'.
This can be transformed to a system of two first-order differential equations 
with new variables x and p=x'. To apply numerical integration one first has to 
design the right hand side of the equation w' = f(w) where in this case 
w = (x,p):

[import ../examples/harmonic_oscillator.cpp]
[rhs_function]

Here we chose [*vector<double>] as the state type, but others are also possible,
for example [*tr1/array<double,2>]. Odeint is designed in such a way that it 
works with basically any container that can be accessed via iterators.
The parameter structure of the function is crucial: the integration methods will
always call them in the form [*f(x, dxdt, t)]. So even if there is no explicit
time dependence, one has to define [*t] as a function parameter.

Now, we have to define the initial state from which the integration should start:

[state_initialization]

For the integration itself we'll use the 
[funcref boost::numeric::odeint::integrate integrate] function, which is a 
convenient way to get quick results. It is based on the error-controlled
[classref boost::numeric::odeint::runge_kutta_rk5_ck runge_kutta_rk5_ck] stepper
(5th order) and uses adaptive stepsize.
The results are stored into two InsertIterators (time and state) that must be 
provided.

[integration]

The integrate function expects as parameters the rhs of the ode as defined 
above, the initial state x, the start- and end-time of the integration and two
InsertIterators for the times and states where the current time and the current
state after each timestep is stored.
Note, that [funcref boost::numeric::odeint::integrate integrate] uses an 
adaptive stepsize during the integration steps so the time points will not be
equally spaced.
The integration returns the number of steps that were applied.
Note, that in total steps+1 elements will be inserted into times and x_t_vec as 
the initial time and state are inserted before the first step.

It is, of course, also possible to implement the ode system as a class. The rhs
must then be defined as the ()-operator:

[rhs_class]

which can be used via

[integration_class]

[endsect]
