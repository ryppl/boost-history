[section Solar system]

[section Gravitation and energy conservation]

The next example in this tutorial is a simulation of the solar system. In the
solar system each planet, and of course also the sun will be represented by
mass points. The interaction force between each object is the gravitational
force which can be written as

F_ij = -gamma m_i m_j (q_i-q_j)/|q_i-q_j|^3

where gamma is the gravitational constant, m_i and m_j are the masses and q_i
and q_j are the locations of the two objects. The equations of motion are then

dq_i/dt = p_i
dp_i/dt = 1/m_i sum_ji F_ij

where pi is the momenta of object i. The equations of motion can also be
derived from the Hamiltonian

H = sum_i p_i^2/(2m_i) + sum_j V( qi , qj ) 

with the interaction potential V(q_i,q_j). The Hamiltonian equations give the
equations of motion

dq_i/dt = dH/dp_i

dp_i = -dH/dq_i.

In time independent Hamiltonian system the energy is conserved and special
integration methods have to be applied in order to ensure energy
conservation. The odeint library provides classes for Hamiltonian
systems, which are separable and can be written in the form H = sum p_i^2/2m_i +
Hq(q), where Hq(q) only depends on the coordinates.

hamiltonian_stepper_euler
hamiltonian_stepper_rk

Alltough this functional form might look a bit arbitrary it covers nearly all
classical mechanical systems with inertia and without dissipation, or where
the equations of motion can be written in the form dqi=mi pi dpi=f(qi).

[endsect]


[section Define the system function]

To implement this system we define a point type which will represent the space
as well as the velocity. Therefore, we use the operators from
<boost/operator.hpp>:

[import ../examples/point_type.hpp]
[point_type]


The next step is to define a container type storing the values of q and p and
to define systems (derivative) functions. As container type we use
std::tr1::array and the state type is then simply 

[import ../examples/solar_system.cpp]
[state_type_definition]

and represents all space coordinates q or all momenta coordinates p. As system
function we have to provide f(p) = dq and f(q) = -dp, which acts only on p or q:


[momentum_function]

[coordinate_function]

In general a three body-system is chaotic, hence we can not expect that
arbitray initial conditions of the system will lead to a dynamic which is
comparable with the solar system. That is we have to define proper initial
conditions, which are taken from the book of Hairer, Wannier, Lubich.

Now, we use the rk stepper to integrate the solar system. To visualize the
motion we save the trajectory of each planet in a circular buffer. The output
can be piped directly into gnuplot and a very nice visualization of the motion
appears.

[integration_solar_system]

[endsect]

[endsect]
