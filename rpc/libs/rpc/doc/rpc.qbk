[library rpc
    [quickbook 1.3]
    [version 2007-05-16]
    [authors [Rajko, Stjepan]]
    [copyright 2007 Stjepan Rajko]
    [purpose Remote Procedure Calls]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section:overview Overview]

[blurb [*DISCLAIMER:] RPC is not an official Boost library.  It is being developed under Boost
guidelines for a possible future submission to boost.]

[section:introduction Introduction]

This is a prototype framework for a Marshal/RPC implementation using Boost libraries,
specifically Boost.Asio for network communication and Boost.Serialization for marshaling.

The framework supplies both server-side and client side components that allow
remote procudure calls to be made, and parameters/results to be marshaled
between the client and the server.

[endsect]

[section:discussion Discussion]

This code is a relatively basic prototype.  Feel free to [link rpc.download download] it and
play with it if you would like.  However, it needs to be extended for any serious use.  I
welcome any suggestions for improvements and changes.

Some of the main outstanding to-dos are:

* add exception handling support for remote calls (marshaling back exceptions which occur during
 a remote call).
* add exceptions to report network / framework issues.
* many, many methods need to be removed from classes' public interface.
* make a nicer user interface to the framework
 - i.e., something better than client(call(id,params))

[endsect]

[section:using Using the Library]

Please see the [@rpc/doxygen/index.html Tutorial and Reference] for some examples of using the library.

[endsect]

[endsect]

[section:tutorial Tutorial and Reference]
The tutorial and reference for this library is available on a [@doxygen/index.html separate page]
generated by Doxygen.

[endsect]

[section:download Download and Change Log]

To use the RPC library, you will need:

* a recent version of [@http://www.boost.org Boost] (I think 1_33_1 or 1_34 should both work)
* [@http://sourceforge.net/project/showfiles.php?group_id=122478 Boost.Asio version 0.3.8 RC2]
* an [@http://braddock.com/~braddock/future/ implementation of futures] put together by Braddock Gaskill

Below are the different versions of the RPC library:

* prototype from 5/16/2007 \[[@marshal_07_05_16.zip download]\]
 * changed the interface to use futures, making the RPC interface completely
   asynchronous (with futures facilitating synchronous behavior)
 * call options are now deduced from the rpc call, rather than specified explicitly

* prototype from 4/23/2007 evening \[[@marshal_07_04_23b.zip download]\]
 * fixed a bug which would unblock a sync call if an async result was received
 * tested on OS X / Darwin GCC
 * fixed a bug on OS X where async_read would overwrite the buffer before receiving anything

* prototype from 4/23/2007 \[[@marshal_07_04_23.zip download]\]
 * fixed the network protocol so it actually works
 * stuck id in with the parameters in marshal::call
 * fixed heap corruption
 * still some memory leaks in Windows (is this due to Boost.Thread?)

[endsect]

[section:acknowledgements Acknowledgements]

Thanks to Hans Larsen and Scott Woods for the
[@http://lists.boost.org/Archives/boost/2007/04/119854.php discussion] on
the Boost developers list which inspired this project, Jeff Garland, Peter Dimov, and
Rene Rivera for a discussion on async vs. sync interfaces, and Braddock Gaskill for
help with the futures library.

[endsect]

[section:license License]

Copyright Stjepan Rajko 2007. Use, modification and
distribution is subject to the Boost Software License, Version
1.0. (See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

[endsect]
