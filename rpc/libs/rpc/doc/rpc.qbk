[library rpc
    [quickbook 1.3]
    [version 0.1]
    [authors [Rajko, Stjepan]]
    [copyright 2007 Stjepan Rajko]
    [purpose Remote Procedure Calls]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section:overview Overview]

[warning RPC is not an official Boost library.  It is being developed under Boost
guidelines for a possible future submission to boost.]

[section:introduction Introduction]

This is a prototype framework for a remote procedure call implementation using Boost libraries,
specifically Boost.Asio for network communication, Boost.Serialization for marshaling,
and futures for handling of returned values.

The framework supplies both server-side and client side components that allow
remote procudure calls to be made, and parameters/results to be marshaled
between the client and the server.  A remote procedure call is executed as follows:

# on the client, the function id and the arguments are serialized and sent over the network
# the server receives the serialized call, unserializes the id and arguments and executes the call
# if applicable, the results of the call are serialized and sent back over the network to the client

[endsect]

[section:discussion Discussion]

The current code is a relatively basic prototype.  Feel free to [link rpc.download download] it and
play with it if you would like.  However, it needs to be extended for any serious use.  I
welcome any suggestions for improvements and changes.

Some of the main outstanding to-dos are:

* add exception handling support for remote calls (marshaling back exceptions which occur during
 a remote call).
* add exceptions to report network / framework issues.
* many, many methods need to be removed from classes' public interface.
* make a nicer user interface to the framework
 - i.e., something better than client(call(id,params)).
* fix the many ugly things currently happening in the code.

[endsect]

[section:using Using the Library]

Please see the [@rpc/doxygen/index.html Tutorial and Reference] for some examples of using the library.

[endsect]

[endsect]

[section:tutorial Tutorial and Reference]
The tutorial and reference for this library is available on a [@doxygen/index.html separate page]
generated by Doxygen.

[endsect]

[section:download Download and Change Log]

To use the RPC library, you will need:

* a recent version of [@http://www.boost.org Boost] (I think 1_33_1 or 1_34 should both work)
* [@http://sourceforge.net/project/showfiles.php?group_id=122478 Boost.Asio version 0.3.8 RC2]
* an [@http://braddock.com/~braddock/future/ implementation of futures] put together by Braddock Gaskill

Below are the different versions of the RPC library:

* version 0.1 5/19/2007 \[[@rpc_07_05_19.zip download]\]
 * first implementation of the library using futures, making the RPC interface completely
   asynchronous (with futures facilitating synchronous behavior).
 * call options are deduced from the rpc call, and how the returned call handler is stored (or ignored).

[endsect]

[section:acknowledgements Acknowledgements]

Thanks to Hans Larsen and Scott Woods for the
[@http://lists.boost.org/Archives/boost/2007/04/119854.php discussion] on
the Boost developers list which inspired this project, Jeff Garland, Peter Dimov, and
Rene Rivera for a discussion on
[@http://lists.boost.org/Archives/boost/2007/04/120255.php async vs. sync interfaces],
Johan Nilsson for pointing out the [@http://www.codeproject.com/threads/Rcf_Ipc_For_Cpp.asp RCF]
library, and Braddock Gaskill for help with the futures library.

[endsect]

[section:license License]

Copyright Stjepan Rajko 2007. Use, modification and
distribution is subject to the Boost Software License, Version
1.0. (See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

[endsect]
