<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:(null)1="http://www.w3.org/TR/REC-html40"><head><!--
    Copyright 2009-2010 Intel Corporation
    license banner
-->
<title>Boost Polygon Library: Polygon 90 Concept</title>
    <meta http-equiv="content-type" content="text/html;charset=ISO-8859-1">
    <!-- <link type="text/css" rel="stylesheet" href="adobe_source.css"> -->
<table style="margin: 0pt; padding: 0pt; width: 100%;" border="0" cellpadding="0" cellspacing="0"><tbody><tr>
<td style="background-color: rgb(238, 238, 238);" nowrap="1" valign="top">
    <div style="padding: 5px;" align="center">
        <img border="0" src="images/boost.png" width="277" height="86"><a title="www.boost.org home page" href="http://www.boost.org/" tabindex="2" style="border: medium none ;">
            </a>
    </div>
    <div style="margin: 5px;">
        <h3 class="navbar">Contents</h3>
        <ul>
            <li><a href="index.htm">Polygon Library Main Page</a></li>
            <li><a href="gtl_design_overview.htm">Polygon 
			Library Design Overview</a></li>
            <li><a href="gtl_isotropy.htm">Isotropy</a></li>
            <li><a href="gtl_coordinate_concept.htm">Coordinate Concept</a></li>
            <li><a href="gtl_interval_concept.htm">Interval Concept</a></li>
			<li><a href="gtl_point_concept.htm">Point Concept</a></li>
			<li><a href="gtl_point_3d_concept.htm">Point 3D Concept</a></li>
			<li><a href="gtl_rectangle_concept.htm">Rectangle Concept</a></li>
			<li><a href="gtl_polygon_90_with_holes_concept.htm">Polygon 90 With Holes Concept</a></li>
			<li><a href="gtl_polygon_45_concept.htm">Polygon 45 Concept</a></li>
			<li><a href="gtl_polygon_45_with_holes_concept.htm">Polygon 45 With Holes Concept</a></li>
			<li><a href="gtl_polygon_concept.htm">Polygon Concept</a></li>
			<li><a href="gtl_polygon_with_holes_concept.htm">Polygon With Holes Concept</a></li>
			<li><a href="gtl_polygon_90_set_concept.htm">Polygon 90 Set Concept</a></li>
			<li><a href="gtl_polygon_45_set_concept.htm">Polygon 45 Set Concept</a></li>
			<li><a href="gtl_polygon_set_concept.htm">Polygon Set Concept</a></li>
			<li><a href="gtl_connectivity_extraction_90.htm">Connectivity Extraction 90</a></li>
			<li><a href="gtl_connectivity_extraction_45.htm">Connectivity Extraction 45</a></li>
			<li><a href="gtl_property_merge_90.htm">Property Merge 90</a></li>
			<li><a href="gtl_property_merge.htm">Property Merge</a></li>
        </ul>
        <h3 class="navbar">Other Resources</h3>
        <ul>
            <li><a href="GTL_boostcon2009.pdf">GTL Boostcon 2009 Paper</a></li>
             <li><a href="GTL_boostcon_draft03.htm">GTL Boostcon 2009 
				Presentation</a></li>
        </ul>
    </div>
        <h3 class="navbar">Polygon Sponsor</h3>
    <div style="padding: 5px;" align="center">
        <img border="0" src="images/intlogo.gif" width="127" height="51"><a title="www.adobe.com home page" href="http://www.adobe.com/" tabindex="2" style="border: medium none ;">
            </a>
    </div>    
</td>
<td style="padding-left: 10px; padding-right: 10px; padding-bottom: 10px;" valign="top" width="100%">

<!-- End Header -->

<br>
<p>
</p><h1>Polygon 90 Concept</h1>

<p> 
<p>The polygon_90 concept type identifier is <font face="Courier New">
polygon_90_concept</font></p>
<p> 
To register a user defined type as a model of  
<font face="Times New Roman">polygon_90 </font>concept, specialize the 
geometry concept meta-function for that type.&nbsp; In the example below CPolygon90 is registered as a model of 
polygon_90&nbsp; concept.<p> 
<font face="Courier New">template &lt;&gt;<br>
struct geometry_concept&lt;CPolygon90&gt; { typedef polygon_90_concept type; };</font><p> 
<font face="Times New Roman">The semantic of a polygon_90 is that it can provide 
iterators over the x and y coordinates that correspond to its horizontal and 
vertical sides, starting with an x coordinate.&nbsp; A mutable polygon_90 must 
also be able to set its geometry based on an interator range over such 
coordinates.&nbsp; Since most polygons use vertex points in internal storage 
iterator adaptors for converting to and from point sequences are provided in 
iterator_points_to_compact.hpp and iterator_compact_to_points.hpp to aid in the 
specialization of polygon_90_traits.&nbsp; A std::vector&lt;int&gt; or std::list&lt;int&gt; 
could be made models of polygon_90_concept by simply providing access to their 
iterators through traits.&nbsp; Library functions that create polygon objects 
require that those objects provide a default constructor.</font><p> 
<font face="Times New Roman">Below is shown the default polygon traits.&nbsp; 
Specialization of these traits is required for types that don't conform to the 
default behavior.&nbsp; Note that these traits are also used by the 
polygon_90_with_holes concept.</font><p><font face="Courier New">template &lt;typename 
T&gt;<br>
struct polygon_90_traits {<br>
&nbsp;&nbsp;&nbsp;&nbsp; typedef typename T::coordinate_type coordinate_type;<br>
&nbsp;&nbsp;&nbsp;&nbsp; typedef typename T::compact_iterator_type 
compact_iterator_type;<br>
&nbsp;&nbsp;&nbsp;&nbsp; static inline compact_iterator_type begin_compact(const 
T&amp; t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return t.begin_compact();<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp; static inline compact_iterator_type end_compact(const 
T&amp; t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return t.end_compact();<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp; static inline unsigned int size(const T&amp; t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return t.size();<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp; static inline winding_direction winding(const T&amp; t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return unknown_winding;<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
};</font></p>
<p><font face="Courier New">template &lt;typename T&gt;<br>
struct polygon_90_mutable_traits { <br>
&nbsp;&nbsp;&nbsp;&nbsp; template &lt;typename iT&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; static inline T&amp; set_compact(T&amp; t, iT input_begin, iT 
input_end) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t.set_compact(input_begin, 
input_end);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return t;<br>
&nbsp;&nbsp;&nbsp;&nbsp; }</font><br>
<font face="Courier New">};</font></p>
<h2>Functions</h2>
<table border="1" width="100%" id="table1">
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		iterator_type <b>begin_compact</b>(const T&amp; polygon)</font></td>
		<td><font face="Times New Roman">Expects a model of polygon_90.&nbsp; 
		Returns the begin iterator over the range of coordinates that correspond 
		to horizontal and vertical edges.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		iterator_type <b>end_compact</b>(const T&amp; polygon)</font></td>
		<td><font face="Times New Roman">Expects a model of polygon_90.&nbsp; 
		Returns the end iterator over the range of coordinates that correspond 
		to horizontal and vertical edges.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		point_iterator_type <b>begin_points</b>(const T&amp; polygon)</font></td>
		<td><font face="Times New Roman">Expects a model of polygon_90.&nbsp; 
		Returns the begin iterator over the range of points that correspond to 
		vertices of the polygon.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		point_iterator_type <b>end_points</b>(const T&amp; polygon)</font></td>
		<td><font face="Times New Roman">Expects a model of polygon_90.&nbsp; 
		Returns the end iterator over the range of points that correspond to 
		vertices of the polygon.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T, typename 
		iterator&gt;<br>
		void <b>set_compact</b>(T&amp; polygon, iterator b, iterator e)</font></td>
		<td><font face="Times New Roman">Expects a model of polygon_90.&nbsp;&nbsp; 
		Sets the polygon to the coordinate data range [b,e) that corresponds to 
		.horizontal and vertical edges.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T, typename 
		iterator&gt;<br>
		void <b>set_points</b>(T&amp; polygon, iterator b, iterator e)</font></td>
		<td><font face="Times New Roman">Expects a model of polygon_90.&nbsp;&nbsp; 
		Sets the polygon to the point data range [b,e) that corresponds to 
		vertices of a manhattan polygon.&nbsp; Non-manhattan edges between 
		successive input points results in undefined behavior.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		unsigned int <b>size</b>(const T&amp; polygon)</font></td>
		<td><font face="Times New Roman">Returns the number of edges in the 
		polygon.</font></td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T1, typename 
		T2&gt;<br>
		T1&amp; <b>assign</b>(T1&amp; left, const T2&amp; right)</font></td>
		<td>Copies data from right object that models polygon_90 into left object 
		that models polygon_90.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T, 
		typename point_type&gt;<br>
		bool <b>contains</b>(const T&amp;, const point_type&amp; point, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		bool consider_touch=true)</font></td>
		<td>Given an object that models polygon_90 and an object that models 
		point, returns true 
		if the polygon contains the point.&nbsp; If the consider_touch 
		flag is true will return true if the point lies along the boundary of 
		the polygon.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">// get the center coordinate<br>
		template &lt;typename T, typename point_type&gt;<br>
		void <b>center</b>(point_type&amp; p, const T&amp; polygon)</font></td>
		<td>Sets object that models point to the center point of the bounding 
		box of an object that models polygon_90.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T, 
		typename rectangle_type&gt;<br>
		bool <b>extents</b>(rectangle_type&amp; bbox, const T&amp; polygon)</font></td>
		<td>Sets object that models rectangle to the bounding box of an object 
		that models polygon_90 and returns true.&nbsp; Returns false and leaves 
		bbox unchanged if polygon is empty.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		manhattan_area_type <b>area</b>(const T&amp; polygon)</font></td>
		<td>Returns the area of an object 
		that models polygon_90.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		direction_1d <b>winding</b>(const T&amp; polygon)</font></td>
		<td>Returns the winding direction of an object 
		that models polygon_90, LOW == CLOCKWISE, HIGH = COUNTERCLOCKWISE.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		coordinate_difference <b>perimeter</b>(const T&amp; polygon)</font></td>
		<td>Returns the perimeter length of an object 
		that models polygon_90.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T, 
		typename transform_type&gt;<br>
		T&amp; <b>transform</b>(T&amp; polygon, const transform_type&amp;)</font></td>
		<td>Applies transform() on the vertices of polygon and sets the polygon to that described by the result of 
		transforming its vertices.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		T&amp; <b>scale_up</b>(T&amp; polygon, unsigned_area_type factor)</font></td>
		<td>Scales up coordinate of an object that models 
		polygon_90 by unsigned factor.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		T&amp; <b>scale_down</b>(T&amp; polygon, unsigned_area_type factor)</font></td>
		<td>Scales down coordinates of an object that models 
		polygon_90 by unsigned factor.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T, scaling_type&gt;<br>
		T&amp; <b>scale</b>(T&amp; rectangle, double scaling) </font></td>
		<td>Scales coordinates of an object that models polygon_90 by floating 
		point factor.</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename T&gt;<br>
		T&amp; <b>move</b>(T&amp; polygon, orientation_2d,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; coordinate_difference displacement)</font></td>
		<td>Adds displacement value to coordinate indicated by orientation_2d of 
		vertices of an object that models polygon_90 .</td>
	</tr>
	<tr>
		<td width="586"><font face="Courier New">template &lt;typename polygon_type, typename point_type&gt;<br>
		polygon_type&amp; <b>convolve</b>(polygon_type&amp; polygon,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		const point_type&amp; point)</font></td>
		<td>Convolves coordinate values of point with vertices of an 
		object that models polygon_90.</td>
	</tr>
	</table>
	<tr>
<td style="background-color: rgb(238, 238, 238);" nowrap="1" valign="top">
    &nbsp;</td>
<td style="padding-left: 10px; padding-right: 10px; padding-bottom: 10px;" valign="top" width="100%">

&nbsp;</html>