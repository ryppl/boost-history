[/ Copyright Kevin Sopp 2008 - 2009.
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / http://www.boost.org/LICENSE_1_0.txt)]

[section Implementation notes]

[section integer structure]

An `integer` is handled in a sign plus magnitude representation which looks like
this:

  struct integer
  {
    digit_type* digits_;
    size_type size_, capacity_;
  };

The sign is stored in the high bit of `capacity_` which is 0 for positive and 1
for negative integers. The least significant digit of the number always lives at `digits_[0]` while the
most significant lives at `digits_[size_ - 1]`.

Libtommath on which this code is ultimately based chose a `digit_type`
representation which does not use all of its bits, instead some bits are
reserved to hold carries in intermediate results. This allows very fast
multiplication routines. I chose a different representation which uses all the
bits in the `digit_type` but needs explicit carry handling in the code. This
makes normal c++ code a tad slower. However it makes it much easier to write
assembler routines since most CPUs provide instructions that allow the handling
of carries in place. It is possible that a `digit_type` representation similar
to libtommath's returns someday which can then be enabled via a different
traits class template.

[endsect][/integer structure]


[section Semantics]

* An `integer` with a value of zero has a `size_` of 1 and `digits_[0]`
holds the value 0.
* An unitialized `integer` has no value and all operations on it except for
initializing or swapping are undefined.

[endsect][/Semantics]


[endsect][/Implementation notes]

