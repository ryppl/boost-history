<?xml version="1.0" standalone="yes"?>
<library-reference id="boost_mylibrary_c___reference"><title>Boost.mylibrary C++ Reference</title><header name="boost/mylibrary/mylibrary.hpp"><para>Template for Boost documentation. </para><para>Header file for use by example. Also using Quickbook, Doxygen and indexed by Auto-index. </para><namespace name="boost"><namespace name="mylibrary"><class name="myclass"><purpose>A test class - a comment description that preceeds the class. </purpose><enum name="test_enum"><enumvalue name="test_enum_val1"><purpose>Enum value TVal1 (not the &lt; to link to the same line). </purpose></enumvalue><enumvalue name="test_enum_val2"><purpose>Enum value TVal2. </purpose></enumvalue><enumvalue name="test_enum_val3"><description><para>Enum value TVal3. (using C style comment markers). </para></description></enumvalue><purpose>An enum. </purpose><description><para>More detailed enum description. needing more than one line so using C style comment markers. </para></description></enum><data-member name="mypublic_var"><type>int</type><purpose>A public variable. </purpose><description><para>Details about the variable. My public class variable. </para></description></data-member><method-group name="public member functions"><method name="test_me" cv=""><type>int</type><parameter name="a"><paramtype>int</paramtype><description><para>an integer argument. </para></description></parameter><parameter name="s"><paramtype>const char *</paramtype><description><para>a constant character pointer. </para></description></parameter><purpose>A normal member function taking two arguments and returning an integer value. </purpose><description><para>

<para>Test(), ~Test(), testMeToo() and publicVar() </para>
</para></description><returns><para>The test result. </para></returns></method><method name="test_me_too" cv=""><type>void</type><parameter name="c1"><paramtype>char</paramtype><description><para>the first argument. </para></description></parameter><parameter name="c2"><paramtype>char</paramtype><description><para>the second argument. </para></description></parameter><description><para>A pure virtual member with descriptions of parameters. And a 'see also' reference to another version of the function.</para><para><para>test_me() </para>

</para></description></method></method-group><constructor><purpose>A constructor. </purpose><description><para>A more elaborate description of the constructor. <para>This constructor does nothing much. </para>
</para></description></constructor><destructor><purpose>A destructor. </purpose><description><para>A more elaborate description of the destructor. <para>This destructor may explode in your face! </para>
</para></description></destructor></class><function name="donowt"><type>int</type><parameter name="i"><paramtype>int</paramtype><description><para>is an argument that is ignored completely.</para></description></parameter><description><para>Non-member free function that does nowt useful at all.</para><para>



</para></description><requires><para>No preconditions. </para></requires><postconditions><para>No side effects.</para></postconditions><returns><para>-1 always </para></returns></function></namespace></namespace><macro name="BOOST_MYLIBRARY_HPP"/></header></library-reference>
