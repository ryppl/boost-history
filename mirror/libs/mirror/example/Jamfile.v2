# Mirror Library Examples Jamfile
# (C) Copyright Matus Chochlik 2008
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or www.boost.org/LICENSE_1_0.txt)
#
# In addition to this Jamfile You will need a Jamroot file
# for specifying the basic project 
# requirements mainly <include>/path/to/boost/root.
# See accompanying _Jamroot_sample file for an example.

project mirror/examples
    : requirements 
      <include>../../../ #the mirror library root
    ;
exe gen_01                      : generators/gen_01.cpp ;
exe gen_02                      : generators/gen_02.cpp ;
#
# basics
#
exe hello_world       : hello_world.cpp ;
exe hello_world_2     : hello_world_2.cpp ;
#
# registering
#
exe reg_namespaces    : registering/namespaces.cpp ;
exe reg_types         : registering/types.cpp ;
exe reg_classes       : registering/classes.cpp ;
exe reg_virtual_bases : registering/virtual_bases.cpp ;
#
# special meta-types
#
exe spec_std_pair     : special/std_pair.cpp ;
exe spec_boost_tuple  : special/boost_tuple.cpp ;
#
# algorithms
#
exe algo_begin_end     : algorithms/begin_end.cpp ;
#
# configurable factories
#
exe fctry_tetrahedron		: factories/tetrahedron.cpp ;
exe fn_call_inserter		: factories/inserter.cpp ;
#
# traversal by visitors
#
exe tvrsl_sample_visitor       : traversal/sample_visitor.cpp ;
exe tvrsl_json_01              : traversal/json_01.cpp ;
exe tvrsl_json_02              : traversal/json_02.cpp ;
exe tvrsl_json_03              : traversal/json_03.cpp ;
exe tvrsl_meta_path_full       : traversal/meta_path_full.cpp ;
exe tvrsl_meta_path_visitor    : traversal/sample_meta_path.cpp ;
#
# class generators
#
#
# cooperation with Boost.Serialization
#
#exe serial_cube       : serialization/cube.cpp ;

