<?xml version="1.0" encoding="utf-8"?>
<feature_doc>
	<overview>
		<paragraph>
			The <feat_ref>REG_TYPE</feat_ref> macro registers the given type or class, declared inside a namespace with the <lib_name_ref/> library. The <feat_ref>REG_TYPEDEFD</feat_ref> can be used to register a <cpp_expr>typedef</cpp_expr> defined types.
		</paragraph>
	</overview>
	<macro name="REG_TYPE">
		<arg name="NAMESPACE_ALIAS">
			<Lib_name_ref/> namespace alias of the namespace, inside of which the type is declared. The namespace must be previously registered with mirror.
		</arg>
		<arg name="SCOPE">
			The scope where the type is declared (i.e. ::toplevel::nested).
		</arg>
		<arg name="TYPE_NAME">
			The (unqualified) name of the type to be registered.
		</arg>
	</macro>
	<overview>
	</overview>
	<requirements>
		<header>meta_type.hpp</header>
	</requirements>
	<example>
		<cpp_source>
			<cpp_line>namespace foo {</cpp_line><cpp_indent>
			<cpp_line>namespace detail {</cpp_line><cpp_indent>
			<cpp_line>struct bar { };</cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace detail</cpp_comment></cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace foo</cpp_comment></cpp_line>
			<cpp_line/>
			<cpp_line><cpp_comment>// the registering must be done </cpp_comment></cpp_line>
			<cpp_line><cpp_comment>// in the boost::mirror namespace</cpp_comment></cpp_line>
			<cpp_line>namespace boost {</cpp_line><cpp_indent>
			<cpp_line>namespace mirror {</cpp_line><cpp_indent>
			<cpp_line><cpp_comment>// register the _foo and _foo_detail namespaces</cpp_comment></cpp_line>
			<cpp_line><feat_ref>REG_NAMESPACE_TOP_LEVEL</feat_ref>(foo)</cpp_line>
			<cpp_line><feat_ref>REG_NAMESPACE</feat_ref>(_foo, detail)</cpp_line>
			<cpp_line><cpp_comment>// register the bar class from the foo::detail namespace</cpp_comment></cpp_line>
			<cpp_line><feat_ref>REG_TYPE</feat_ref>(_foo_detail, ::foo::detail, bar)</cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace mirror</cpp_comment></cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace boost</cpp_comment></cpp_line>
		</cpp_source>
	</example>
</feature_doc>

