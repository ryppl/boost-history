<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
	"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<header name="boost/mirror/traits/reflects_global_scope.hpp">
	<namespace name="boost">
	<namespace name="mirror">
		<class name="reflects_global_scope">
			<template>
				<template-type-parameter name="MetaObject"/>
			</template>
			<purpose>
				<para>If <code>MetaObject</code> is the specialization of <code><classname>meta_namespace</classname></code>,
				reflecting the global scope,
				then <code><classname>reflects_global_scope</classname></code>
				inherits from <code><classname>::boost::true_type</classname></code>. Otherwise it inherits from
				<code><classname>::boost::false_type</classname></code>.
				</para>
			</purpose>
			<inherit access="public">
				<type><classname>false_type</classname>-or-<classname>true_type</classname></type>
			</inherit>
			<description>
				<para>This template can be used to distinguish whether the opaque <code>MetaObject</code> type reflects the global scope
				and thus is an instantiation of <code><classname>meta_namespace</classname></code> for the global scope.
				</para>
				<section id="mirror.reflects_global_scope.reference.samples">
					<title>Examples</title>
<programlisting>
BOOST_STATIC_ASSERT((
	reflects_global_scope&lt; BOOST_MIRRORED_GLOBAL_SCOPE() &gt;::value
));
</programlisting>
<programlisting>
BOOST_STATIC_ASSERT((
	!reflects_global_scope&lt; BOOST_MIRRORED_NAMESPACE(::boost::mirror) &gt;::value
));
</programlisting>
<programlisting>
BOOST_STATIC_ASSERT((
	!reflects_global_scope&lt; BOOST_MIRRORED_TYPE(::std::string) &gt;::value
));
</programlisting>
<programlisting>
BOOST_MPL_ASSERT((
	reflects_global_scope&lt; BOOST_MIRRORED_TYPE(int)::scope &gt;
));
</programlisting>
<programlisting>
BOOST_MPL_ASSERT((
	reflects_global_scope&lt; BOOST_MIRRORED_TYPE(::std::string)::scope::scope &gt;
));
</programlisting>
<programlisting>
BOOST_MPL_ASSERT_NOT((
	reflects_global_scope&lt; BOOST_MIRRORED_TYPE(::std::string)::scope &gt;
));
</programlisting>
				</section>
			</description>
		</class>
	</namespace><!-- mirror -->
	</namespace><!-- boost -->
</header>
