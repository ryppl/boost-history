<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
	"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<header name="boost/mirror/traits/reflects_namespace.hpp">
	<namespace name="boost">
	<namespace name="mirror">
		<class name="reflects_namespace">
			<template>
				<template-type-parameter name="MetaObject"/>
			</template>
			<purpose>
				<para>If <code>MetaObject</code> is an instantiation of <code><classname>meta_namespace</classname></code>,
				then <code><classname>reflects_namespace</classname></code>
				inherits from <code><classname>::boost::mpl::true_</classname></code>. Otherwise it inherits from
				<code><classname>::boost::mpl::false_</classname></code>.
				</para>
			</purpose>
			<inherit access="public">
				<type><classname>mpl::false_</classname>-or-<classname>mpl::true_</classname></type>
			</inherit>
			<description>
				<para>This template can be used to distinguish whether the opaque <code>MetaObject</code> type reflects a namespace
				and thus is an instantiation of <code><classname>meta_namespace</classname></code>.
				</para>
				<section id="mirror.reflects_namespace.reference.samples">
					<title>Examples</title>
<programlisting>
BOOST_STATIC_ASSERT((
	reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::boost::mirror) &gt;::value
));
</programlisting>
<programlisting>
BOOST_STATIC_ASSERT((
	reflects_namespace&lt; <macroname>BOOST_MIRRORED_TYPE</macroname>(::std::string)::scope &gt;::value
));
</programlisting>
<programlisting>
BOOST_STATIC_ASSERT((
	!reflects_namespace&lt; <macroname>BOOST_MIRRORED_TYPE</macroname>(::std::string) &gt;::value
));
</programlisting>
<programlisting>
BOOST_MPL_ASSERT((
	reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::boost::mirror) &gt;
));
</programlisting>
<programlisting>
BOOST_MPL_ASSERT((
	reflects_namespace&lt; <macroname>BOOST_MIRRORED_TYPE</macroname>(::std::string)::scope &gt;
));
</programlisting>
<programlisting>
BOOST_MPL_ASSERT_NOT((
	reflects_namespace&lt; <macroname>BOOST_MIRRORED_TYPE</macroname>(::std::string) &gt;
));
</programlisting>
	<para>The following code sample shows the registering and reflection of namespaces,
	and the use of the <code><classname>reflects_namespace</classname></code> trait template.
	</para>
	
<programlisting>
#include &lt;boost/mirror/meta_namespace.hpp&gt;
#include &lt;boost/mirror/traits/reflects_namespace.hpp&gt;
#include &lt;boost/mpl/assert.hpp&gt;


// define some namespaces
namespace foo {
namespace bar {
} // namespace bar
} // namespace foo

namespace baz {
} // namespace baz

// register them with mirror
namespace boost {
  namespace mirror {
    // ::foo
    <macroname>BOOST_MIRROR_REG_NAMESPACE</macroname>((foo))
    // ::foo::bar
    <macroname>BOOST_MIRROR_REG_NAMESPACE</macroname>((foo)(bar))
    // ::baz
    <macroname>BOOST_MIRROR_REG_NAMESPACE</macroname>((baz))
} // namespace mirror
} // namespace boost    


int main(void)
{
  using ::boost::mirror::reflects_namespace;
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::boost::mirror) &gt;
  ));
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::foo) &gt;
  ));
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::foo)::scope &gt;
  ));
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::foo::bar) &gt;
  ));
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::foo::bar)::scope &gt;
  ));
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::foo::bar)::scope::scope &gt;
  ));
  BOOST_MPL_ASSERT((
    reflects_namespace&lt; <macroname>BOOST_MIRRORED_NAMESPACE</macroname>(::baz) &gt;
  ));
  return 0;
}
</programlisting>
				</section>
			</description>
		</class>
	</namespace><!-- mirror -->
	</namespace><!-- boost -->
</header>
