<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
	"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<programlisting id="mirror.reference.sample.meta_type.usage02">
#include &lt;string&gt;
#include &lt;boost/char_type_switch/iostream.hpp&gt;
#include &lt;boost/typeof/typeof.hpp&gt;
#include &lt;boost/mirror/meta_type.hpp&gt;
#include &lt;boost/mirror/meta_types/std_pair.hpp&gt;
#include &lt;boost/mirror/traits/reflects_global_scope.hpp&gt;

template &lt;class MetaType&gt;
void print_meta_data(void)
{
	using namespace ::std;
	using namespace ::boost;
	using namespace ::boost::mirror;
	cts::<classname>bostream</classname>&amp; bcout = cts::<functionname>bcout</functionname>(); 
	// print out the base type name
	bcout &lt;&lt; 
		<macroname>BOOST_CTS_LIT</macroname>("The type name is: ") &lt;&lt; 
		MetaType::base_name() &lt;&lt; 
	endl;
	// 
	if(<classname>reflects_global_scope</classname>&lt;typename MetaType::scope&gt;::value)
	{
		bcout &lt;&lt; 
		<macroname>BOOST_CTS_LIT</macroname>("It's defined on the global scope") &lt;&lt; 
		endl;
	}
	else 
	{
		bcout &lt;&lt; 
			<macroname>BOOST_CTS_LIT</macroname>("It's defined in the ") &lt;&lt; 
			MetaType::scope::full_name() &lt;&lt; 
			<macroname>BOOST_CTS_LIT</macroname>(" namespace") &lt;&lt; 
		endl;
		bcout &lt;&lt; 
		BOOST_CTS_LIT("--------------------------------------") &lt;&lt; 
		endl;
	}
}

int main(void)
{
	using namespace ::std;
	using namespace ::boost;
	using namespace ::boost::mirror;

	// reflect the type of an expression
	// and print the meta-data
	print_meta_data&lt; <macroname>BOOST_MIRRORED_TYPEOF</macroname>(1+2) &gt;();
	print_meta_data&lt; <macroname>BOOST_MIRRORED_TYPEOF</macroname>(1.0+2.0) &gt;();
	print_meta_data&lt; <macroname>BOOST_MIRRORED_TYPEOF</macroname>("1" "+" "2") &gt;();
	print_meta_data&lt; <macroname>BOOST_MIRRORED_TYPEOF</macroname>(string("1")+string("2")) &gt;();

	// BOOST_MIRRORED_TYPEOF is actually a shorter form of this:
	print_meta_data&lt; <macroname>BOOST_MIRRORED_TYPE</macroname>(
		<macroname>BOOST_TYPEOF</macroname>(L"1" L"+" L"2")
	) &gt;();
	print_meta_data&lt; <macroname>BOOST_MIRRORED_TYPE</macroname>(
		<macroname>BOOST_TYPEOF</macroname>(wstring(L"1")+wstring(L"2"))
	) &gt;();

	return 0;
}
</programlisting>

