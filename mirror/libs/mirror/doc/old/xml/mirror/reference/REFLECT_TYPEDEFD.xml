<?xml version="1.0" encoding="utf-8"?>
<feature_doc>
	<overview>
		<paragraph>
			The <feat_ref>REFLECT_TYPEDEFD</feat_ref> macro expands into a meta_type describing the given <cpp_expr>typedef</cpp_expr>ined type.
		</paragraph>
	</overview>
	<macro name="REFLECT_TYPEDEFD">
		<arg name="NAMESPACE_ALIAS">
			The <lib_name_ref/> alias for the namespace where the type has been defined.
		</arg>
		<arg name="TYPEDEFD_TYPE">
			The <cpp_expr>typedef</cpp_expr>ined name (without nested name specifier) of the type to be reflected.
		</arg>
	</macro>
	<overview>
		<paragraph>
		</paragraph>
	</overview>
	<requirements>
		<header>meta_type.hpp</header>
	</requirements>
	<example>
		<cpp_source>
			<cpp_line>namespace foo {</cpp_line><cpp_indent>
			<cpp_line>namespace detail {</cpp_line><cpp_indent>
			<cpp_line>typedef double foobar;</cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace detail</cpp_comment></cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace foo</cpp_comment></cpp_line>
			<cpp_line/>
			<cpp_line>namespace boost {</cpp_line><cpp_indent>
			<cpp_line>namespace mirror {</cpp_line><cpp_indent>
			<cpp_line><feat_ref>REG_NAMESPACE_TOP_LEVEL</feat_ref>(foo)</cpp_line>
			<cpp_line><feat_ref>REG_NAMESPACE</feat_ref>(_foo, detail)</cpp_line>
			<cpp_line><feat_ref>REG_TYPEDEFD</feat_ref>(_foo_detail, ::foo::detail, foobar)</cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace mirror</cpp_comment></cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace boost</cpp_comment></cpp_line>
			<cpp_line/>
			<cpp_line><cpp_comment>// ...</cpp_comment></cpp_line>
			<cpp_line/>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPEDEFD</feat_ref>(_foo_detail, foobar) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPEDEFD</feat_ref>(_boost, bchar) ::full_name() &lt;&lt; endl;</cpp_line>
		</cpp_source>
	</example>
</feature_doc>

