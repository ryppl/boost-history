<?xml version="1.0" encoding="utf-8"?>
<feature_doc>
	<overview>
		<paragraph>
			The <feat_ref>REFLECT_TYPE</feat_ref> macro expands into a meta_type describing the type given as argument.
		</paragraph>
	</overview>
	<macro name="REFLECT_TYPE">
		<arg name="TYPE">
			The type to be reflected.
		</arg>
	</macro>
	<overview>
		<paragraph>
		</paragraph>
	</overview>
	<requirements>
		<header>meta_type.hpp</header>
	</requirements>
	<example>
		<cpp_source>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(bool) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(double) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(const char*) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(int volatile * const * volatile) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(long const * const [321]) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(const ::std::string&amp;) ::full_name() &lt;&lt; endl;</cpp_line>
			<cpp_line>bcout &lt;&lt; <feat_ref>REFLECT_TYPE</feat_ref>(BOOST_TYPEOF(1+1)) ::full_name() &lt;&lt; endl;</cpp_line>
		</cpp_source>
	</example>
</feature_doc>

