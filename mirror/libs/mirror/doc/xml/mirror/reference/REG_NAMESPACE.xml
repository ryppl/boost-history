<?xml version="1.0" encoding="utf-8"?>
<feature_doc>
	<overview>
		<paragraph>
			The <feat_ref>REG_NAMESPACE</feat_ref> macro registers the given nested namespace with the <lib_name_ref/> library. The 'top-level' namespaces (i.e. not nested) can be registered with the <feat_ref>REG_NAMESPACE_TOP_LEVEL</feat_ref> macro.
		</paragraph>
	</overview>
	<macro name="REG_NAMESPACE">
		<arg name="PARENT_NS_ALIAS">
			<Lib_name_ref/> namespace alias of the parent namespace, that contains the registered namespace. 
			The parent namespace has to be registered with <lib_name_ref/> before any nested namespaces are registered.
		</arg>
		<arg name="NAMESPACE_NAME">
			The name of the registered namespace. The argument must be a valid namespace identifier.
		</arg>
	</macro>
	<overview>
		<paragraph>
			The alias for the registered namespace is defined as <cpp_expr>PARENT_NS_ALIAS##_##NAMESPACE_NAME</cpp_expr>.
		</paragraph>
	</overview>
	<requirements>
		<header>meta_namespace.hpp</header>
	</requirements>
	<example>
		<cpp_source>
			<cpp_line>namespace foo {</cpp_line><cpp_indent>
			<cpp_line>namespace bar {</cpp_line><cpp_indent>
			<cpp_line>namespace detail {</cpp_line><cpp_indent>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace detail</cpp_comment></cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace bar</cpp_comment></cpp_line>
			</cpp_indent><cpp_line>} <cpp_comment>// namespace foo</cpp_comment></cpp_line>
			<cpp_line/>
			<cpp_line><cpp_comment>// register the top-level namespace foo </cpp_comment></cpp_line>
			<cpp_line><feat_ref>REG_NAMESPACE_TOP_LEVEL</feat_ref>(foo)</cpp_line>
			<cpp_line/>
			<cpp_line><cpp_comment>// register nested namespace bar </cpp_comment></cpp_line>
			<cpp_line><cpp_comment>// in the scope of _foo (::foo).</cpp_comment></cpp_line>
			<cpp_line><cpp_comment>// this creates a _foo_bar alias </cpp_comment></cpp_line>
			<cpp_line><feat_ref>REG_NAMESPACE</feat_ref>(_foo, bar)</cpp_line>
			<cpp_line><cpp_comment>// register nested namespace detail </cpp_comment></cpp_line>
			<cpp_line><cpp_comment>// in the scope of _foo_bar (::foo::bar).</cpp_comment></cpp_line>
			<cpp_line><cpp_comment>// this creates a _foo_bar_detail alias </cpp_comment></cpp_line>
			<cpp_line><feat_ref>REG_NAMESPACE</feat_ref>(_foo_bar, detail)</cpp_line>
		</cpp_source>
	</example>
</feature_doc>

