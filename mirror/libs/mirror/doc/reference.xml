<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
	"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library-reference xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Mirror Reference</title>

	<para>
	</para>
	<section id="mirror.reference.registering">
		<using-namespace name="boost::mirror"/>
		<title>Registering</title>
		<para>Constructs like namespaces, types, typedefs, classes, class member attributes, base classes, etc. 
			need to be registered before they can be reflected or otherwise used. To simplify the registration 
			process and to make it more convenient, the <libraryname>Mirror</libraryname> library provides several 
			preprocessor macros described in greater detail in the references pages accessible through the links provided below. 
		</para>
		<para>Preprocessor macros are frowned upon and not without reasons, but they are helpful in many situations non the less
		and with little caution don't cause any problems. One of the reasons for using macros for registering various things in 
		<libraryname>Mirror</libraryname> is, that they hide rather complex definitions of specializations of various templates 
		and other details and are much more readable and understandable. 
		Another reason for using macros is, that mirror needs to "remember" the name of the namespace, type, class, etc.
		and this is where the preprocessor's stringization operator is extremly useful as it removes the necessity to explicitly 
		pass the name in a c-string literal.
		</para>
		<para>The registering macros are listed in the following table together with brief notes and links to reference pages for 
		the individual macros.
		As a general rule of the thumb these macros should be used in the <code>boost::mirror</code> namespace.
		</para>
		<table frame="all"><title>Registering macros</title>
		<tgroup cols="3">
		<thead>
			<row> <entry>Macro</entry> <entry>Purpose</entry> <entry>Notes</entry> </row>
		</thead>
		<tbody>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_NAMESPACE</macroname></code></entry> 
				<entry>Registers a namespace</entry> 
				<entry></entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPE</macroname></code></entry> 
				<entry>Registers a type defined inside of a named namespace</entry> 
				<entry></entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPE_GS</macroname></code></entry> 
				<entry>Registers a type defined in the global scope</entry> 
				<entry>This macro is equivalent to the <code><macroname>BOOST_MIRROR_REG_TYPE_GLOBAL_SCOPE</macroname></code>.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPE_GLOBAL_SCOPE</macroname></code></entry> 
				<entry>Registers a type defined in the global scope</entry> 
				<entry>This macro is equivalent to the <code><macroname>BOOST_MIRROR_REG_TYPE_GS</macroname></code>.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPEDEF</macroname></code></entry> 
				<entry>Registers a <code>typedef</code> defined inside of a named namespace</entry> 
				<entry></entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPEDEF_GS</macroname></code></entry> 
				<entry>Registers a typedef from the global scope</entry> 
				<entry>This macro is equivalent to the <code><macroname>BOOST_MIRROR_REG_TYPEDEF_GLOBAL_SCOPE</macroname></code>.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPEDEF_GLOBAL_SCOPE</macroname></code></entry> 
				<entry>Registers a typedef from the global scope</entry> 
				<entry>This macro is equivalent to the <code><macroname>BOOST_MIRROR_REG_TYPEDEF_GS</macroname></code>.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPE_EMB</macroname></code></entry> 
				<entry>Registers a type nested inside of a class</entry> 
				<entry>This macro is equivalent to the <code><macroname>BOOST_MIRROR_REG_TYPE_EMBEDDED</macroname></code>.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRROR_REG_TYPE_EMBEDDED</macroname></code></entry> 
				<entry>Registers a type nested inside of a class</entry> 
				<entry>This macro is equivalent to the <code><macroname>BOOST_MIRROR_REG_TYPE_EMB</macroname></code>.</entry> 
			</row>
		</tbody>
		</tgroup>
		</table>
	</section>
	<section id="mirror.reference.reflecting">
		<using-namespace name="boost::mirror"/>
		<title>Reflecting</title>
		<para>
		</para>
		<para>The reflecting macros are listed in the following table together with brief notes and links to reference pages for 
		the individual macros.
		</para>
		<table frame="all"><title>Reflection macros</title>
		<tgroup cols="3">
		<thead>
			<row> <entry>Macro</entry> <entry>Purpose</entry> <entry>Notes</entry> </row>
		</thead>
		<tbody>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_NAMESPACE</macroname></code></entry> 
				<entry>Reflects a namespace</entry> 
				<entry>Expands into a <code><classname>meta_namespace</classname></code> specialization providing meta-data about the reflected namespace.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_GLOBAL_SCOPE</macroname></code></entry> 
				<entry>Reflects the global scope</entry> 
				<entry>Expands into a <code><classname>meta_namespace</classname></code> specialization providing meta-data about the global scope.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_TYPE</macroname></code></entry> 
				<entry>Reflects a type</entry> 
				<entry>Expands into a <code><classname>meta_type</classname></code> specialization providing meta-data about a type.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_TYPE_NS</macroname></code></entry> 
				<entry>Reflects a type</entry> 
				<entry>Expands into a <code><classname>meta_type</classname></code> specialization providing meta-data about a (nested) type. This version of the <code><macroname>BOOST_MIRRORED_TYPE</macroname></code> macro takes the scope of the type and the base type name as two separate arguments.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_TYPEDEF</macroname></code></entry> 
				<entry>Reflects a <code>typedef</code>ined type</entry> 
				<entry>Expands into a <code><classname>meta_type</classname></code> specialization providing meta-data about a (nested) typedef.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_TYPEDEF_GS</macroname></code></entry> 
				<entry>Reflects a global-scope <code>typedef</code></entry> 
				<entry>Expands into a <code><classname>meta_type</classname></code> specialization providing meta-data about a typedef defined in the global scope.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_TYPEDEF_GLOBAL_SCOPE</macroname></code></entry> 
				<entry>Reflects a global-scope <code>typedef</code></entry> 
				<entry>Expands into a <code><classname>meta_type</classname></code> specialization providing meta-data about a typedef defined in the global scope. This macro is equivalent to <code><macroname>BOOST_MIRRORED_TYPEDEF_GS</macroname></code>.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_TYPEOF</macroname></code></entry> 
				<entry>Reflects the type of an expression</entry> 
				<entry>Expands into a <code><classname>meta_type</classname></code> specialization providing meta-data about the type of the expression given as an argument.</entry> 
			</row>
			<row> 
				<entry><code><macroname>BOOST_MIRRORED_CLASS</macroname></code></entry> 
				<entry>Reflects a class</entry> 
				<entry>Expands into a <code><classname>meta_class</classname></code> specialization providing meta-data about a class.</entry> 
			</row>
		</tbody>
		</tgroup>
		</table>
	</section>
	<section id="mirror.reference.meta_objects">
		<using-namespace name="boost::mirror"/>
		<title>Meta Objects</title>
		<para>The reflection macros listed above, expand into template class instantiations that provide meta-data about the reflected namespaces, types, classes, etc. These 
		template instantiations are commonly referred to as MetaObjects. Some other MetaObjects can be accessed by applying the intrinsic meta-functions on other MetaObjects.
		</para>
		<table frame="all"><title>Meta objects</title>
		<tgroup cols="3">
		<thead>
			<row> <entry>Meta Object</entry> <entry>Purpose</entry> <entry>Notes</entry> </row>
		</thead>
		<tbody>
			<row> 
				<entry><code><classname>meta_namespace</classname></code></entry> 
				<entry>Reflects a namespace</entry> 
				<entry>Provides information about the scope of the namespace and its name.</entry> 
			</row>
			<row> 
				<entry><code><classname>meta_type</classname></code></entry> 
				<entry>Reflects a type</entry> 
				<entry>Provides information about the scope of the type and its name.</entry> 
			</row>
			<row> 
				<entry><code><classname>meta_class</classname></code></entry> 
				<entry>Reflects a class</entry> 
				<entry>Provides information about the inheritance of the class and about its member attributes.</entry> 
			</row>
			<row> 
				<entry><code><classname>meta_inheritance</classname></code></entry> 
				<entry>Reflects the inheritance of a single base class of another class</entry> 
				<entry>Provides information about the access specifier, the type of inheritance (virtual vs. regular) and about the base class.</entry> 
			</row>
			<row> 
				<entry><code><classname>meta_class_attribute</classname></code></entry> 
				<entry>Reflects a single member attribute of a class</entry> 
				<entry>Provides information about the type and position of the attribute, its name and allows to get and set values of the attribute.</entry> 
			</row>
			<row> 
				<entry><code><classname>meta_class_attributes</classname></code></entry> 
				<entry>Reflects own member attributes of a class</entry> 
				<entry>Instantiations of <code>meta_class_attributes</code> are models of the MetaObjectSequence concept and contain <code><classname>meta_class_attribute</classname></code>s reflecting own member attributes of a class, i.e. those defined by the class, not including the inherited ones.</entry> 
			</row>
			<row> 
				<entry><code><classname>meta_class_all_attributes</classname></code></entry> 
				<entry>Reflects all member attributes of a class</entry> 
				<entry>Instantiations of <code>meta_class_all_attributes</code> are models of the MetaObjectSequence concept and contain <code><classname>meta_class_attribute</classname></code>s reflecting all member attributes of a class, including the inherited ones.</entry> 
			</row>
		</tbody>
		</tgroup>
		</table>
	</section>
	<section id="mirror.reference.traits">
		<using-namespace name="boost"/>
		<using-namespace name="boost::mirror"/>
		<title>Traits</title>
		<para>The trait templates can be used to query the properties of the MetaObjects. Each trait template inherits either from the 
		<code>::boost::<classname>true_type</classname></code> or  <code>::boost::<classname>false_type</classname></code> to
		indicate whether the inspected MetaObject has or has not the trait.  
		</para>
		<table frame="all"><title>Traits</title>
		<tgroup cols="2">
		<thead>
			<row> <entry>Trait template</entry> <entry>Purpose</entry> </row>
		</thead>
		<tbody>
			<row> 
				<entry><code><classname>reflects_namespace</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects a namespace, i.e. whether it is a <code><classname>meta_namespace</classname></code>. </entry> 
			</row>
			<row> 
				<entry><code><classname>reflects_global_scope</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects the global scope, i.e. whether it is a <code><classname>meta_namespace</classname></code> specialization providing meta-information about the global scope. </entry> 
			</row>
			<row> 
				<entry><code><classname>reflects_type</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects a type, i.e. whether it is a <code><classname>meta_type</classname></code>. </entry> 
			</row>
			<row> 
				<entry><code><classname>reflects_class</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects a class, i.e. whether it is a <code><classname>meta_class</classname></code>. </entry> 
			</row>
			<row> 
				<entry><code><classname>reflects_attribute</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects a class member attribute, i.e. whether it is a <code><classname>meta_class_attribute</classname></code>. </entry> 
			</row>
			<row> 
				<entry><code><classname>reflects_inheritance</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects a base class inheritance, i.e. whether it is a <code><classname>meta_inheritance</classname></code>. </entry> 
			</row>
			<row> 
				<entry><code><classname>reflects_virtual_inheritance</classname></code></entry> 
				<entry>Checks whether the given MetaObject reflects a virtual class inheritance, i.e. whether it is a <code><classname>meta_inheritance</classname></code> specialization providing meta-information about a base class that is inherited virtually. </entry> 
			</row>
		</tbody>
		</tgroup>
		</table>

	</section>
	<section id="mirror.reference.intrinsic">
		<using-namespace name="boost::mirror"/>
		<title>Intrinsic Metafunctions</title>
		<para>
		</para>
                <table frame="all"><title>MetaFunctions</title>
                <tgroup cols="2">
                <thead>
                        <row> <entry>Meta-function</entry> <entry>Purpose</entry> </row>
                </thead>
                <tbody>
                        <row>
                                <entry><code><classname>empty</classname></code></entry>
                                <entry>Can be used to check whether a MetaObjectSequence is empty.</entry>
                        </row>
                        <row>
                                <entry><code><classname>size</classname></code></entry>
                                <entry>Returns the size of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>at</classname></code></entry>
                                <entry>Retrieves the i-th element of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>point_to</classname></code></entry>
                                <entry>Returns the iterator pointing to the i-th element of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>begin</classname></code></entry>
                                <entry>Returns an iterator pointing to the first element of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>end</classname></code></entry>
                                <entry>Returns an iterator pointing past the last element of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>rbegin</classname></code></entry>
                                <entry>Returns a reverse iterator pointing to the last element of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>rend</classname></code></entry>
                                <entry>Returns a reverse iterator pointing before the first element of the MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>by_name</classname></code></entry>
                                <entry>Allows to get the individual MetaAttributes in the MetaClassAttributes passed as a parameter 
				by the name of the attributes they are reflecting.</entry>
                        </row>
                </tbody>
                </tgroup>
                </table>

	</section>
	<section id="mirror.reference.algorithms">
		<title>Algorithms</title>
		<para>
		</para>
	</section>
	<section id="mirror.reference.iterators">
		<using-namespace name="boost"/>
		<using-namespace name="boost::mirror"/>
		<title>Iterators</title>
		<para>
		</para>
                <table frame="all"><title>Iterator-related meta-functions</title>
                <tgroup cols="2">
                <thead>
                        <row> <entry>Meta-function</entry> <entry>Purpose</entry> </row>
                </thead>
                <tbody>
                        <row>
                                <entry><code><classname>deref</classname></code></entry>
                                <entry>Can be used to dereference an Iterator.</entry>
                        </row>
                        <row>
                                <entry><code><classname>is_valid</classname></code></entry>
                                <entry>Checks whether an Iterator is valid.</entry>
                        </row>
                        <row>
                                <entry><code><classname>prior</classname></code></entry>
                                <entry>Returns an Iterator pointing to the previous element in a MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>next</classname></code></entry>
                                <entry>Returns an Iterator pointing to the next element in a MetaObjectSequence.</entry>
                        </row>
                        <row>
                                <entry><code><classname>iterator_equal</classname></code></entry>
                                <entry>Iterator equality comparison.</entry>
                        </row>
                        <row>
                                <entry><code><classname>iterator_not_equal</classname></code></entry>
                                <entry>Iterator inequality comparison.</entry>
                        </row>
                        <row>
                                <entry><code><classname>iterator_less</classname></code></entry>
                                <entry>Iterator less than comparison.</entry>
                        </row>
                        <row>
                                <entry><code><classname>iterator_less_equal</classname></code></entry>
                                <entry>Iterator less than or equality comparison.</entry>
                        </row>
                        <row>
                                <entry><code><classname>iterator_greater</classname></code></entry>
                                <entry>Iterator greater than comparison.</entry>
                        </row>
                        <row>
                                <entry><code><classname>iterator_greater_equal</classname></code></entry>
                                <entry>Iterator greater than or equality comparison.</entry>
                        </row>
                </tbody>
                </tgroup>
                </table>

	</section>
	<section id="mirror.reference.traversals">
		<title>Traversals</title>
		<para>
		</para>
	</section>
	<section>
		<title>Header files</title>
		<xi:include href="reference/meta_namespace.xml"/>
		<xi:include href="reference/meta_type.xml"/>
		<xi:include href="reference/meta_class.xml"/>

		<xi:include href="reference/meta_attributes.xml"/>
	
		<xi:include href="reference/meta_inheritance.xml"/>
	
		<xi:include href="reference/traits/reflects_namespace.xml"/>
		<xi:include href="reference/traits/reflects_global_scope.xml"/>
		<xi:include href="reference/traits/reflects_type.xml"/>
		<xi:include href="reference/traits/reflects_class.xml"/>

		<xi:include href="reference/traits/reflects_attribute.xml"/>

		<xi:include href="reference/traits/reflects_inheritance.xml"/>
		<xi:include href="reference/traits/reflects_virtual_inheritance.xml"/>

		<xi:include href="reference/intrinsic/empty.xml"/>
		<xi:include href="reference/intrinsic/size.xml"/>
		<xi:include href="reference/intrinsic/at.xml"/>
		<xi:include href="reference/intrinsic/point_to.xml"/>
		<xi:include href="reference/intrinsic/begin.xml"/>
		<xi:include href="reference/intrinsic/end.xml"/>
		<xi:include href="reference/intrinsic/rbegin.xml"/>
		<xi:include href="reference/intrinsic/rend.xml"/>
		<xi:include href="reference/intrinsic/by_name.xml"/>

		<xi:include href="reference/iterator/deref.xml"/>
		<xi:include href="reference/iterator/is_valid.xml"/>
		<xi:include href="reference/iterator/prior.xml"/>
		<xi:include href="reference/iterator/next.xml"/>
		<xi:include href="reference/iterator/iterator_equal.xml"/>
		<xi:include href="reference/iterator/iterator_not_equal.xml"/>
		<xi:include href="reference/iterator/iterator_less.xml"/>
		<xi:include href="reference/iterator/iterator_less_equal.xml"/>
		<xi:include href="reference/iterator/iterator_greater.xml"/>
		<xi:include href="reference/iterator/iterator_greater_equal.xml"/>
	</section>

</library-reference>
