<?xml version="1.0" encoding="utf-8"?>
<section title="Goals">
	<paragraph>
		The purpose of the <lib_name_ref/> library is to fill in some gaps, that the other <boost/> libraries leave open. It does not try to reinvent the wheels though.
		It's true power is in combination with other <boost/> libraries. For example the <boost_lib_ref name="type_traits"/> allows to query almost every trait of a type that one can think of. However, it does not allow to query platform/compiler independent name of the type (which also <cpp_expr>typeid</cpp_expr> fails to do) or the scope in which the type is defined. This is where <lib_name_ref/> comes in handy. 
	</paragraph>
	<paragraph>
		The <lib_name_ref/> library has the following goals:
	</paragraph>
	<items>
		<item title="Namespace reflection">
			Allow to register and inspect the namespaces at compile-time and query their names.
		</item>
		<item title="Type-related introspection">
			Allow to inspect the base and the full name of a type and the scope in which it is defined (at least namespace and class).
		</item>
		<item title="Class-related introspection">
			Allow to iterate between and to inspect the base classes of a given class, the type of inheritance (virtual vs. regular) the access modifier (private, protected, public). Allow to iterate between the member attributes of a class, to query the type of the attribute and to query it's name. Allow to iterate between the member functions and inspect their properties at compile time. Allow to iterate through the list of constructors of a class and introspect them.
		</item>
		<item title="Container-related introspection">
		</item>
		<item title="Recursive type and instace visitation">
		</item>
		<item title="Custom interface implementations">
			If possible, this library should allow to generate custom interface implementations by combining the meta-data describing the class' interface and a class that says what to do, when a member function is invoked. This way custom proxies and decorators could be generated for every interface registered with the <lib_name_ref/>.
		</item>
		<item title="Cooperation with other libraries">
			The implementation should allow easy cooperation with other (mainly standard and <boost/>) libraries.
			Allow to apply <boost_lib_ref name="_mpl"/> algorithms to the provided meta-data, allow to use <boost_lib_ref name="type_traits"/> and <boost_lib_ref name="call_traits"/>, etc.
		</item>
		<item title="Support for other libraries">
			Allow to automate the process of making classes serializable by the <boost_lib_ref name="serialization"/> library. Allow to automatically enable <link title="SOCI" url="http://soci.sourceforge.net/"/> object-relational mapping for a class, etc.
		</item>
		<item title="More...">
			There is always place for new ideas.
		</item>
	</items>
	<paragraph>
		Some of the mentioned features are already implemented, some are still on the TODO list.
	</paragraph>
</section>
