<?xml version="1.0" encoding="utf-8"?>
<section title="Note on character types" name="char_type">
	<paragraph>
		The <lib_name_ref/> library defines and uses <cpp_expr>::boost::bchar</cpp_expr> (or <cpp_expr>bchar</cpp_expr>) character type and several other types like <cpp_expr>bstring</cpp_expr>, <cpp_expr>bcin</cpp_expr>, <cpp_expr>bcout</cpp_expr>, <cpp_expr>bcerr</cpp_expr>, etc. defined in the <cpp_expr>boost</cpp_expr> namespace. These types are defined as <cpp_expr>char</cpp_expr> (and <cpp_expr>::std::string</cpp_expr>, <cpp_expr>::std::cin</cpp_expr>, <cpp_expr>::std::cout</cpp_expr>, <cpp_expr>::std::cerr</cpp_expr>, respectively) when the preprocessor symbol <cpp_expr>BOOST_USE_WIDE_CHARS</cpp_expr> is <emph>not</emph> defined (this is the default) and defined as <cpp_expr>wchar_t</cpp_expr> (and <cpp_expr>::std::wstring</cpp_expr>, <cpp_expr>::std::wcin</cpp_expr>, <cpp_expr>::std::wcout</cpp_expr>, <cpp_expr>::std::wcerr</cpp_expr>, respectively) otherwise. 
	<paragraph>
		There is also a macro named <cpp_expr>BOOST_STR_LIT(STRING_LITERAL)</cpp_expr> that expands either to <cpp_expr>STRING_LITERAL</cpp_expr> or to <cpp_expr>L##STRING_LITERAL</cpp_expr> based on the <cpp_expr>BOOST_USE_WIDE_CHARS</cpp_expr> not being or being defined.

	</paragraph>
	</paragraph>
	<note>
		The <cpp_expr>BOOST_USE_WIDE_CHARS</cpp_expr> symbol is in the current implementetion automatically defined, if the <cpp_expr>UNICODE</cpp_expr> symbol is defined (this PP symbol switches between narrow/wide chars on Win32). 
	</note>
	<paragraph>
		This approach allows to switch the character type without the need to do any changes to the code. A feature that is handy in some situations. Since the definition of <cpp_expr>bchar</cpp_expr> is always the same as the definition of <cpp_expr>TCHAR</cpp_expr> on Windows, this also allows smooth cooperation between <lib_name_ref/> and WinAPI with both <cpp_expr>char</cpp_expr>s and <cpp_expr>wchar_t</cpp_expr>s.
		Any WinAPI function that takes <cpp_expr>TCHAR</cpp_expr> or a pointer to <cpp_expr>TCHAR</cpp_expr> can be safely used with <cpp_expr>bchar</cpp_expr>. Thus it is better to call <cpp_expr>LoadLibrary</cpp_expr> with a <cpp_expr>bchar*</cpp_expr> argument than to directly call <cpp_expr>LoadLibraryA</cpp_expr> with <cpp_expr>char*</cpp_expr> argument or <cpp_expr>LoadLibraryW</cpp_expr> with <cpp_expr>wchar_t*</cpp_expr> argument.
	</paragraph>
	<note>
		The current implementation is far from perfect. It is more than probable that the functions from <filepath>cstring</filepath> like <cpp_expr>strlen</cpp_expr>/<cpp_expr>wcslen</cpp_expr>, <cpp_expr>strcpy</cpp_expr>/<cpp_expr>wcscpy</cpp_expr> will have to be wrapped by functions like <cpp_expr>bstrlen</cpp_expr>, <cpp_expr>bstrcpy</cpp_expr>, etc taking <cpp_expr>bchar</cpp_expr> as argument instead of <cpp_expr>char</cpp_expr>/<cpp_expr>wchar_t</cpp_expr>.
	</note>
	<paragraph>
		Everything related to <cpp_expr>bchar</cpp_expr> and to the other char-type-related types can be found in the <filepath>boost/char_type_switch</filepath> subdirectory.
	</paragraph>
</section>
