<?xml version="1.0" encoding="utf-8"?>
<section title="Overview">
	<paragraph>
		The <lib_name_ref/> library is a compile-time reflection library, intended to be proposed as a <boost/> library at some point in the future.
	</paragraph>
	<paragraph>
		Reflection is a valuable tool when programming applications where instances of different types and classes need to be treated in a uniform manner. This includes, but is not limited to persistence-related operations like serialization or operations like marshalling. 
		Reflection allows to separate the definition of types from the algorithms that are working on the instances of theese types and vice versa. Thus an existing algorithm can be applied to any type recognized by the reflection facility. Well, at least in theory. There are as always exceptions.
	</paragraph>
	<paragraph>
		An example of this is the <boost_lib_ref name="serialization"/> library, where the archives are implemented separately from the serializable classes and when adding support for serialization to a class no explicit reference to any archive type is made.
	</paragraph>
	<paragraph>
		Here follows a list of several other domains where reflection is applicable:
		<items>
			<item title="object inspection">
				Introspection allows to build user interface components reflecting both the structure and the data of given instances.
			</item>
			<item title="debugging and logging">
				Similar to the above and basically to serialization, a custom debugger or a logging facility can use reflection to log, show and possibly modify the values of examined instances.
			</item>
			<item title="implementation of several design patterns">
				Having a suitable reflection facility, we can easily implement several design patterns like factories, decorators, proxies or mementos (not to be confused with the known freshmaker). 
			</item>
		</items>
	</paragraph>
	<paragraph>
		Currently, <lib_name_ref/> library is focused on compile-time reflection, but might provide support for dynamic reflection facilities built on top of it.
	</paragraph>
	<paragraph>
		A namespace, type, class, class' member attribute or function becomes <emph>reflectible</emph> when it is <emph>registered</emph>. The registration is performed by the means of preprocessor macros.
	</paragraph>
	<paragraph>
		The <lib_name_ref/> library follows the principle of <emph>stratification</emph> and tries to be as non-intrusive as possible. This is however easier said than done and <lib_name_ref/> hits similar difficulties as <boost_lib_ref name="serialization"/> does in this matter. However, there are cases, in which the existing definition of a class (even with non-public members) does not need to be modified to support reflection and in the other cases only on line of code needs to be added to make the class <lib_name_ref/>-friendly.
	</paragraph>
	<paragraph>
		The <lib_name_ref/> library uses several other <boost/> libraries, most notably <boost_lib_ref name="_mpl"/>, <boost_lib_ref name="preprocessor"/>, <boost_lib_ref name="call_traits"/>, <boost_lib_ref name="typeof"/> and several others. It does not use any other external libraries, besides those mentioned here.
	</paragraph>
</section>
