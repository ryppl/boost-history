[/
 / Copyright (c) 2008 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:condition_backdoor_hpp Header `<boost/synchro/condition_backdoor.hpp>`]
[/==========================================================================================]

    template <typename Condition> struct condition_backdoor;

[section Template Class `condition_backdoor`]

Condition Backdoor template. Used by safe lockers as condition_locker.

    template <class Condition>
    struct condition_backdoor {
	    condition_backdoor(condition_safe<Condition>&cnd);
        template <typename Locker>
        void wait(Locker& lock);
        template <typename Locker>
        bool wait_until(Locker& lock, boost::system_time  const&  abs_time);
        template<typename Locker, typename duration_type>
        bool wait_for(Locker& lock, duration_type const& rel_time);

        template <typename Locker, typename Predicate>
        void wait_when(Locker& lock, Predicate pred);
        template<typename Locker, typename predicate_type>
        bool wait_when_until(Locker& lock, predicate_type pred, boost::system_time const& abs_time);
        template<typename Locker, typename predicate_type, typename duration_type>
        bool wait_when_for(Locker& lock, predicate_type pred, duration_type const& rel_time);

        template <typename Locker>
        void notify_one(Locker& lock);
        template <typename Locker>
        void notify_all(Locker& lock);
    };

[endsect]
[endsect]
