[/
 / Copyright (c) 2008-2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:thread_mutex_hpp Header `<boost/synchro/thread/mutex.hpp>`]
[/==========================================================================================]

    namespace boost { namespace synchro {
        class thread_mutex;
        template <> struct unique_lock_type<thread_mutex>;
        template <> struct shared_lock_type<thread_mutex>;
        template <> struct upgrade_lock_type<thread_mutex>;
        template <> struct upgrade_to_unique_locker_type<thread_mutex>;
        template <> struct lock_error_type<boost::mutex>;
        
        class thread_timed_mutex;
    }}
    
[section Class `thread_mutex`]

[*Synopsis]

    class thread_mutex : public lock_traits_base<
            multi_threaded_tag,
            exclusive_lock_tag,
            non_recursive_tag,
            hasnt_timed_interface_tag,
            process_lifetime_tag,
            anonymous_tag,
            mutex
        > {
    public:
        // public types
        typedef boost::condition_variable  best_condition_type;
        typedef boost::condition_variable_any  best_condition_any_type;

        //Non-copyable
        BOOST_COPY_CONSTRUCTOR_DELETE(thread_mutex) /*< disable copy construction >*/
        BOOST_COPY_ASSIGNEMENT_DELETE(thread_mutex) /*< disable copy asignement >*/

        thread_mutex() {}
    };

    template <>
    struct unique_lock_type<thread_mutex> {
        typedef boost::unique_lock<boost::mutex> type;
    };

    template <>
    struct shared_lock_type<thread_mutex> {
        typedef boost::shared_lock<boost::mutex> type;
    };

    template <>
    struct upgrade_lock_type<thread_mutex> {
        typedef boost::upgrade_lock<boost::mutex> type;
    };

    template <>
    struct upgrade_to_unique_locker_type<thread_mutex> {
        typedef boost::upgrade_to_unique_lock<boost::mutex> type;
    };

    template <>
    struct lock_error_type<boost::mutex> {
        typedef boost::lock_error type;
    };




[endsect]

[section Class `thread_timed_mutex`]

    class thread_timed_mutex : public lock_traits_base<
            multi_threaded_tag,
            exclusive_lock_tag,
            non_recursive_tag,
            has_timed_interface_tag,
            process_lifetime_tag,
            anonymous_tag,
            timed_mutex
        > {
    public:
        typedef boost::condition_variable_any  best_condition_type;
        typedef boost::condition_variable_any  best_condition_any_type;

        //Non-copyable
        BOOST_COPY_CONSTRUCTOR_DELETE(thread_timed_mutex) /*< disable copy construction >*/
        BOOST_COPY_ASSIGNEMENT_DELETE(thread_timed_mutex) /*< disable copy asignement >*/
        thread_timed_mutex ();
            
        bool try_lock_until(system_time const & abs_time);
        template<typename TimeDuration>
        bool try_lock_for(TimeDuration const & relative_time);

        void lock_until(system_time const & abs_time);
        template<typename TimeDuration>
        void lock_for(TimeDuration const & relative_time);
    };    

[endsect]
[endsect]
