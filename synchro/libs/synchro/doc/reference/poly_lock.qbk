[/
 / Copyright (c) 2008-2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:poly_lock_hpp Header `<boost/synchro/poly/lock.hpp>`]
[/==========================================================================================]

    namespace boost { namespace synchro {
        namespace poly {
            struct exclusive_lock;
            struct timed_lock;
            struct sharable_lock;
            struct upgradable_lock;
        }
    }}

[section Abstract Class `exclusive_lock`]

Polymorphic exclusive lock interface.

        struct exclusive_lock {
            virtual ~exclusive_lock()=0;
            virtual void lock()=0;
            virtual void unlock()=0;
            virtual bool try_lock()=0;
        };


[endsect]
[section Abstract Class `timed_lock`]

Polymorphic timed lock interface.

        struct timed_lock : exclusive_lock {
            virtual ~timed_lock()=0;
            bool try_lock_until(boost::system_time  const&  abs_time)=0;
            template<typename DurationType>
            bool try_lock_for(DurationType const& rel_time)
            {
                return try_lock_until(get_system_time()+abs_time);
            }
        };


[endsect]
[section Abstract Class `sharable_lock`]

Polymorphic sharable lock interface.

        struct sharable_lock : timed_lock {
            virtual ~sharable_lock();
            virtual void lock_shared()=0;
            virtual bool try_lock_shared()=0;
            virtual bool try_lock_shared_until(boost::system_time  const&  abs_time)=0;
            virtual void unlock_shared()=0;
            template<typename DurationType>
            bool try_lock_shared_for(DurationType const& rel_time)
            {
                return try_lock_shared_until(get_system_time()+abs_time);
            }
        };



[endsect]
[section Abstract Class `upgradable_lock`]

Polymorphic upgradable lock interface.

        struct upgradable_lock : sharable_lock {
            virtual ~upgradable_lock();
            virtual void lock_upgrade()=0;
            virtual void unlock_upgrade()=0;
            virtual void unlock_upgrade_and_lock()=0;
            virtual void unlock_and_lock_upgrade()=0;
            virtual void unlock_and_lock_shared()=0;
            virtual void unlock_upgrade_and_lock_shared()=0;
        };



[endsect]

[endsect]


