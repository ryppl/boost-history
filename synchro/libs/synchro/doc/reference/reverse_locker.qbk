[/
 / Copyright (c) 2008-2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:reverse_locker_hpp Header `<boost/synchro/locker/reverse_locker.hpp>`]
[/==========================================================================================]

        template <typename Lockable>
        class reverse_locker;

[section Class `reverse_lock`]
This is an interesting adapter class that changes a Lockable into a reverse lockable, i.e.,`lock` on this class calls `unlock` on the lockable, and `unlock` on this class calls `lock` on the lock. One motivation for this class is when we temporarily want to unlock a lock (which we have already locked) but then re-lock it soon after.

[*Synopsis]

    template <typename Lockable>
    class reverse_locker
    {
        reverse_locker(Lockable& mtx);
        ~reverse_locker();

    protected:
        Lockable& mtx_;
    };

[endsect]

[endsect]
