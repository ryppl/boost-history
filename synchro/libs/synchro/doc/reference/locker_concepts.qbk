[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:locker_concepts_hpp Header `<boost/synchro/locker_concepts.hpp>`]
[/==========================================================================================]

Locker concepts.

    namespace boost {  namespace synchro {

        template <typename Locker> struct BasicLockerConcept;
        template <typename Locker> struct LockerConcept;
        template <typename Locker> struct TimedLockerConcept;
        template <typename Locker> struct UniqueLockerConcept;
        template <typename Locker> struct SharedLockerConcept;
        template <typename Locker> struct UpgradeLockerConcept;       
        template <typename Locker> struct MovableLockerConcept;

    }}

[section Template Class `BasicLockerConcept<>`]

        template <typename Locker>
        struct BasicLockerConcept {
            typedef typename lockable_type<Locker>::type lockable_type;
            
            BOOST_CONCEPT_USAGE(BasicLockerConcept) {
                const Locker l1(mtx_);
                if (l1.is_locking(mtx_)) return;
                if (l1.owns_lock()) return;
                if (l1) return;
                if (!l1) return;
            }
            lockable_type mtx_;
            system_time t;
        };

[endsect]
[section Template Class `LockerConcept<>`]

        template <typename Locker>
        struct LockerConcept {
            BOOST_CONCEPT_ASSERT((BasicLockerConcept<Locker>));
            typedef typename lockable_type<Locker>::type lockable_type;
            
            BOOST_CONCEPT_USAGE(LockerConcept) {
                Locker l2(mtx_, defer_lock);
                Locker l3(mtx_, adopt_lock);
                Locker l4(mtx_, try_to_lock);
                l2.lock();
                if (l2.try_lock()) return;
                l2.unlock();
                l2.release();
            }
            lockable_type mtx_;
            system_time t;
        };

[endsect]
[section Template Class `TimedLockerConcept<>`]

        template <typename Locker>
        struct TimedLockerConcept {
            BOOST_CONCEPT_ASSERT((LockerConcept<Locker>));
            typedef typename lockable_type<Locker>::type lockable_type;

            BOOST_CONCEPT_USAGE(TimedLockerConcept) {
                const Locker l1(mtx_);
                Locker l5(mtx_, t);
                Locker l6(mtx_, boost::posix_time::seconds(1));
                Locker l7(t, mtx_);
                Locker l8(boost::posix_time::seconds(1), mtx_);
                l5.lock_until(t);
                l5.lock_for(boost::posix_time::seconds(1));
                if (l5.try_lock_until(t)) return;
                if (l5.try_lock_for(boost::posix_time::seconds(1))) return;
            }
            lockable_type mtx_;
            system_time t;
        };


[endsect]
[section Template Class `UniqueLockerConcept<>`]

        template <typename Locker>
        struct UniqueLockerConcept {
            BOOST_CONCEPT_ASSERT((TimedLockerConcept<Locker>));
            
            BOOST_CONCEPT_USAGE(UniqueLockerConcept) {                
            }
        };

[endsect]
[section Template Class `SharedLockerConcept<>`]

        template <typename Locker>
        struct SharedLockerConcept {
            BOOST_CONCEPT_ASSERT((TimedLockerConcept<Locker>));

            BOOST_CONCEPT_USAGE(SharedLockerConcept) {
            }
        };

[endsect]
[section Template Class `UpgradeLockerConcept<>`]

        template <typename Locker>
        struct UpgradeLockerConcept {
            BOOST_CONCEPT_ASSERT((TimedLockerConcept<Locker>));

            BOOST_CONCEPT_USAGE(UpgradeLockerConcept) {
            }
        };

[endsect]
[section Template Class `MovableLockerConcept<>`]

        template <typename Locker>
        struct MovableLockerConcept {
            typedef typename lockable_type<Locker>::type lockable_type;
            BOOST_CONCEPT_ASSERT((LockerConcept<lockable_type>));

            BOOST_CONCEPT_USAGE(MovableLockerConcept) {
                Locker l1(mtx_);
                Locker& l2(l1);
                Locker l3(l1.move());
                BOOST_ASSERT((l2.mutex()!=&mtx_));
                l3.lock();
                l2 = l3.move();
            }
            lockable_type mtx_;
        };

[endsect]
[endsect]



