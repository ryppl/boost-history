[/
 / Copyright (c) 2008-2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:thread_lockable_scope_traits_hpp Header `<boost/synchro/thread/lockable_scope_traits.hpp>`]
[/==========================================================================================]

    namespace boost { namespace synchro {
        template<> struct scope_traits<multi_process_tag>
        template<typename Lockable>
        struct lockable_scope_traits<multi_process_tag, Lockable>;
    }}
    
[section Template Class Specialization `scope_traits<multi_process_tag>`]


    template<>
    struct scope_traits<multi_process_tag> {
        typedef boost::interprocess::lock_exception lock_error;
        
        template <typename T>
        struct moved_object : boost::interprocess::detail::moved_object<T> {
            moved_object(T& t_): boost::interprocess::detail::moved_object<T>(t_) {}
        };

        typedef boost::interprocess::defer_lock_type defer_lock_t;
        typedef boost::interprocess::accept_ownership_type adopt_lock_t;
        typedef boost::interprocess::try_to_lock_type try_to_lock_t;

        static const defer_lock_t& defer_lock()    {return boost::interprocess::defer_lock;}
        static const adopt_lock_t& adopt_lock() {return boost::interprocess::accept_ownership;}
        static const try_to_lock_t& try_to_lock()    {return boost::interprocess::try_to_lock;}
    };
    
[endsect]
[section Template Class Specialization `lockable_scope_traits<multi_process_tag, Lockable>`]

    template<typename Lockable>
    struct lockable_scope_traits<multi_process_tag, Lockable> : scope_traits<multi_process_tag> {
        typedef Lockable                                             lockable_type;
        typedef boost::interprocess::scoped_lock<lockable_type>     scoped_lock;
        typedef boost::interprocess::scoped_lock<lockable_type>     unique_lock;
        typedef boost::interprocess::sharable_lock<lockable_type>   shared_lock;
        typedef boost::interprocess::upgradable_lock<lockable_type> upgrade_lock;

    };
    
[endsect]

[endsect]
