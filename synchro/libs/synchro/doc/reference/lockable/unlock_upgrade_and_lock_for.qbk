[/
  (C) Copyright 2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:unlock_upgrade_and_lock_for_hpp Header `<boost/sychro/lockable/unlock_upgrade_and_lock_for.hpp>`]
[/==========================================================================================]

Defines a free function __unlock_upgrade_and_lock_for__ which locks shared the  __Lockable__ passed as parameter until a given time is elepsed.
The default implementation applies the __unlock_upgrade_and_lock_for__ member function to the __Lockable__. 
A user adapting another __Lockable__ could need 
to specialize the __unlock_upgrade_and_lock_for__ free function if the __Lockable__ do not provides a __unlock_upgrade_and_lock_for__ member function 
with the same prototype.

As for the moment we can not partially specialize a function a trick is used: instead of calling directly 
to the __unlock_upgrade_and_lock_for__ 
member function, __unlock_upgrade_and_lock_for__ calls to the static operation apply on a class with the same name in the namespace __partial_specialization_workaround__. 
So the user can specialize partially this class.


    namespace boost { namespace synchro { namespace lockable {
        namespace result_of {
            template <typename Lockable, class Rep, class Period >
            struct unlock_upgrade_and_lock_for {
                typedef void type;
            };
        }

        namespace partial_specialization_workaround {
            template <typename Lockable, class Rep, class Period >
            struct unlock_upgrade_and_lock_for {
                static typename result_of::template unlock_upgrade_and_lock_for<Lockable,Rep,Period>::type 
                apply( Lockable& lockable, const chrono::duration<Rep, Period>& rel_time );
            };
        }

        template <typename Lockable, class Rep, class Period >
        typename result_of::template unlock_upgrade_and_lock_for<Lockable,Rep,Period>::type 
        unlock_upgrade_and_lock_for(Lockable& lockable, const chrono::duration<Rep, Period>& abs_time);
    }}}



[endsect]
