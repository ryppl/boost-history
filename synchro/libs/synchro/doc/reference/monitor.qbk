[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:monitor_hpp Header `<boost/synchro/monitor.hpp>`]
[/==========================================================================================]

    namespace boost { namespace synchro {
        template <
              typename Lockable=thread_mutex
            , class Condition=condition_safe<typename best_condition<Lockable>::type >
            , typename ScopeTag=typename scope_tag<Lockable>::type
        >
        class exclusive_monitor;

        template <
              typename Lockable=thread_shared_mutex,
            , class Condition=condition_safe<typename best_condition_any<Lockable>::type >
            , typename ScopeTag=typename scope_tag<Lockable>::type
        >
        class shared_monitor;

        template <
              typename Lockable=thread_mutex
            , typename lock_tag=typename category_tag<Lockable>::type
            , typename ScopeTag=typename scope_tag<Lockable>::type
        > 
        struct monitor;
    }}


[section Template Class `exclusive_monitor<>`]

        template <
            typename Lockable=thread_mutex
        ,   class Condition=condition_safe<typename best_condition<Lockable>::type >
        ,   typename ScopeTag=typename scope_tag<Lockable>::type
        >
        class exclusive_monitor : protected lockable_adapter<Lockable> {
            BOOST_CONCEPT_ASSERT((LockableConcept<Lockable>));
        protected:
            typedef Condition condition;
            typedef condition_unique_locker<Lockable, Condition, ScopeTag> synchronizer;
        };

[endsect]
[section Template Class `shared_monitor<>`]

        template <
            typename Lockable=thread_shared_mutex,
        ,   class Condition=condition_safe<typename best_condition_any<Lockable>::type >
        ,   typename ScopeTag=typename scope_tag<Lockable>::type
        >
        class shared_monitor : protected lockable_adapter<Lockable> {
            BOOST_CONCEPT_ASSERT((LockableConcept<Lockable>));
        protected:
            typedef Condition condition;
            typedef condition_unique_locker<Lockable, Condition, ScopeTag> synchronizer;
            typedef condition_shared_locker<Lockable, Condition, ScopeTag> shared_synchronizer;
        };

[endsect]
[section Template Class `monitor<>`]

        template <
              typename Lockable=thread_mutex
            , typename lock_tag=typename category_tag<Lockable>::type
            , typename ScopeTag=typename scope_tag<Lockable>::type
        > struct monitor;

        template <typename Lockable, typename ScopeTag>
        struct monitor<Lockable, exclusive_lock_tag, ScopeTag>
            : protected exclusive_monitor<Lockable, ScopeTag>
        {};

        template <typename Lockable, typename ScopeTag>
        struct monitor<Lockable, sharable_lock_tag, ScopeTag>
            : protected shared_monitor<Lockable, ScopeTag>
        {};

        template <typename Lockable, typename ScopeTag>
        struct monitor<Lockable, upgradable_lock_tag, ScopeTag>
            : protected shared_monitor<Lockable, ScopeTag>
        {};


[endsect]
[endsect]



