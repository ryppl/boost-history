[/
 / Copyright (c) 2008 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:condition_lockable_hpp Header `<boost/synchro/condition_lockable.hpp>`]
[/==========================================================================================]


    namespace boost { namespace synchro {
        template <typename Lockable, typename Condition>
        class condition_lockable
        typedef condition_lockable<thread_mutex> thread_condition_mutex;
        typedef condition_lockable<interprocess_mutex> interprocess_condition_mutex;
    }}

[section Template Class `condition_lockable`]

Allows a condition variable to be associated with a Lockable. Treating condition locking as a property of Lockable rather than viceversa has the benefit of making clear how something is locked and accessed, as it were emphasising it in the first person.

Requiring the user of a condition variable to implement a while loop to verify a condition's predicate is potentially error prone. It can be better encapsulated by passing the predicate as a function object to the locking function.

template <
    typename Lockable=thread_mutex,
    class Condition=condition_safe<typename best_condition<Lockable>::type >
>
class condition_lockable {
    : public Lockable {
    BOOST_CONCEPT_ASSERT((LockableConcept<Lockable>));
public:
    typedef Lockable lockable_type;
    typedef Condition condition;

    condition_lockable();
    ~condition_lockable();
  
    void relock_on(condition & cond);
    void relock_on_until(condition & cond, boost::system_time const& abs_time);
    template<typename duration_type>
    void relock_on_for(condition & cond, duration_type const& rel_time);

    template<typename Predicate>
    void relock_when(condition &cond, Predicate pred);
    template<typename Predicate>
    void relock_when_until(condition &cond, Predicate pred,
            boost::system_time const& abs_time);
    template<typename Predicate, typename duration_type>
    void relock_when_for(condition &cond, Predicate pred,
            duration_type const& rel_time);

private:
    friend class boost::condition_variable;
    friend class boost::condition_variable_any;
    friend class boost::interprocess::condition;
};

[endsect]

[endsect]
