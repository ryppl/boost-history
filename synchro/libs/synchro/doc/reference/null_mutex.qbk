[/
 / Copyright (c) 2008-2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:null_mutex_hpp Header `<boost/synchro/null_mutex.hpp>`]
[/==========================================================================================]

namespace boost { namespace synchro {
class null_condition;
class null_mutex : public lock_traits_base<
    mono_threaded_tag,
    upgradable_lock_tag,
    recursive_tag,
    has_timed_interface_tag,
    kernel_lifetime_tag,
    anonymous_tag,
    void
>
{
   null_mutex(const null_mutex&);
   null_mutex &operator= (const null_mutex&);
public:
    typedef null_condition condition_type;
    typedef null_condition condition_any_type;

   null_mutex();
   ~null_mutex();

   void lock();
   bool try_lock();
   bool try_lock_until(const boost::posix_time::ptime &);
   template<typename TimeDuration>
   bool try_lock_for(TimeDuration const & relative_time);

   void unlock();

   void lock_shared(){};
   bool try_lock_shared();
   bool try_lock_shared_until(const boost::posix_time::ptime &);
   template<typename DurationType>
   bool try_lock_shared_for(DurationType const& rel_time)

   void unlock_shared();

   void lock_upgrade();
   bool try_lock_upgrade();
   bool timed_lock_upgrade(boost::posix_time::ptime const &);

    void unlock_upgrade();

   void unlock_and_lock_upgrade();

   void unlock_and_lock_shared();

   void unlock_upgrade_and_lock_shared();

   void unlock_upgrade_and_lock();

   bool try_unlock_upgrade_and_lock();

   bool timed_unlock_upgrade_and_lock(const boost::posix_time::ptime &);

   bool try_unlock_share_and_lock();

   bool try_unlock_share_and_lock_upgrade();
};

}}

[endsect]

