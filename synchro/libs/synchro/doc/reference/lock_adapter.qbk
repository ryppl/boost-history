[/
 / Copyright (c) 2008-2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License,
 / Version 1.0. (See accompanying file LICENSE_1_0.txt or
 / copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:poly_lock_adpater_hpp Header `<boost/synchro/poly/lock_adpater.hpp>`]
[/==========================================================================================]

namespace boost { namespace synchro {
    namespace poly {
        template <typename Lockable> class exclusive_lock_adapter;
        template <typename TimeLockable> class timed_lock_adapter;
        template <typename ShareLockable> class sharable_lock_adapter;
        template <typename UpgradaLockable> class upgradable_lock_adapter;
    }
}}


[section Template Class `exclusive_lock_adapter`]

    template <typename Lockable>
    class exclusive_lock_adapter
        : public virtual exclusive_lock
    {
        exclusive_lock_adapter();
        ~exclusive_lock_adapter();
        void lock();
        void unlock();
        bool try_lock();
    protected:
        Lockable lock_;
    };


[endsect]
[section Template Class `timed_lock_adapter`]

    template <typename TimeLockable>
    class timed_lock_adapter
            : public exclusive_lock_adapter<TimeLockable>
            , public virtual timed_lock
    {
    public:
        ~timed_lock_adapter();
        bool try_lock_until(boost::system_time  const&  abs_time);
        template<typename DurationType>
        bool try_lock_for(DurationType const& rel_time);
    };


[endsect]
[section Template Class `sharable_lock_adapter`]

    template <typename ShareLockable>
    class sharable_lock_adapter
            : public exclusive_lock_adapter<ShareLockable>
            , public virtual sharable_lock    {
    public:
        ~sharable_lock_adapter();
        void lock_shared();
        bool try_lock_shared();
        void unlock_shared();
    };

[endsect]
[section Template Class `upgradable_lock`]

    template <typename UpgradaLockable>
    class upgradable_lock_adapter
        : public sharable_lock_adapter<UpgradaLockable>
        , public virtual upgradable_lock
    {
    public:
        virtual ~upgradable_lock_adapter();
        virtual void lock_upgrade();

        virtual void unlock_upgrade();

        virtual void unlock_upgrade_and_lock();
        virtual void unlock_and_lock_upgrade();
        virtual void unlock_and_lock_shared();
        virtual void unlock_upgrade_and_lock_shared();
    };


[endsect]

[endsect]


