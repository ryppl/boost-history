[/
  (C) Copyright 2008-2009 Vicente J Botet Escriba.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/========================]
[section:overview Overview]
[/========================]

[/==================]
[heading Description]
[/==================]

To date, C++ multi threaded programs that need to be efficient use the same mutexes, semaphores, and events that Dijkstra described 40 years ago. This unfortunate state of affairs makes multi threaded programs difficult to design, debug, ensure correct, optimize, maintain, and analyze formally. Consequently, building tools that automate detection of race conditions and deadlocks is highly desirable.

I believe that most of the synchronization mechanisms applied to multi-threaded programs works as well for multi-process programs. This can not be done if the basic facilities mutexes and condition variables are not based on common concepts and take a different form depending of the library provider. We need to states these bases through concepts. 

The main sources of inspiration of this library were 

* the papers of Kevlin Henney about asynchronous C++ [@http://www.two-sdg.demon.co.uk/curbralan/papers/accu/MoreC++Threading.pdf More C++ Threading - From Procedural to Generic, by Example] and its C++0x proposal [[@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1883.pdf N1833 - Preliminary Threading Library Proposal for TR2]]. 
* the papers of Andrei Alexandrescu on multi-threading programming [@http://www.ddj.com/cpp/184403766 volatile - Multithreaded Programmer's Best Friend]
* the ACE framework of Douglas C. Schmidt [@http://www.cs.wustl.edu/~schmidt/PDF/ACE-concurrency.pdf An OO Encapsulation of Lightweight OS Concurrency Mechanisms in the ACE Toolkit].

This library is a compilation of what I have found in the literature not yet present in Boost. My main concen has been to boostify all these ideas in a coherent way.

[*Boost.Synchro] provides:

* A uniform usage of Boost.Thread and Boost.Interprocess synchronization mechanisms based on lockables(mutexes) concepts and locker(guards) concepts.

    * lockables traits and lock generators, 
    * generic free functions on lockables as: `lock`, `try_lock`, ... 
    * locker adapters of the Boost.Thread and Boost.Interprocess lockers models,
    * complete them with the corresponding models for single-threaded programms: `null_mutex` and `null_condition` classes,
    * locking families,
    * `semaphore` and `binary_semaphore`, 
    * `condition_lockable` lock which put toghether a lock and its associated conditions.

* A coherent way exception based timed lock approach for functions and constructors,

* A rich palete of lockers as

    * `strict_locker`, `nested_strict_locker`,
    * `condition_locker`,
    * `reverse_locker`, `nested_reverse_locker`,
    * `locking_ptr`, `on_derreference_locking_ptr`,
    * `externally_locked`,
    
* `array_unique_locker` on multiple lockables.

* Generic free functions on multiple lockables `lock`, `try_lock`, `lock_until`, `lock_for`, `try_lock_until`, `try_lock_for`, `unlock`    * lock adapters of the Boost.Thread and Boost.Interprocess lockable models,
    * `lock_until`, `lock_for`, `try_lock_until`, `try_lock_for`

* A polymorphic lockable hierarchy.

* High-level abstractions for handling more complicated synchronization problems, including
    * `monitor` for guaranteeing exclusive access to an object.

* A rendezvous mechanism for handling direct communication between objects `concurrent_components` via `ports` using an accept-synchronize protocol based on the design of the concurrency library in the Beta language.

* Language-like Synchronized Block Macros

[/====================================]
[heading How to Use This Documentation]
[/====================================]

This documentation makes use of the following naming and formatting conventions.

* Code is in `fixed width font` and is syntax-highlighted.
* Replaceable text that you will need to supply is in [~italics].
* If a name refers to a free function, it is specified like this:
  `free_function()`; that is, it is in code font and its name is followed by `()`   to indicate that it is a free function.
* If a name refers to a class template, it is specified like this:   `class_template<>`; that is, it is in code font and its name is followed by `<>`   to indicate that it is a class template.
* If a name refers to a function-like macro, it is specified like this: `MACRO()`;
  that is, it is uppercase in code font and its name is followed by `()` to   indicate that it is a function-like macro. Object-like macros appear without the   trailing `()`.
* Names that refer to /concepts/ in the generic programming sense are   specified in CamelCase.

[note In addition, notes such as this one specify non-essential information that provides additional background or rationale.]

Finally, you can mentally add the following to any code fragments in this document:

    // Include all of Synchro files
    #include <boost/synchro/synchro.hpp>

    // Create a namespace aliases
    namespace bsynchro = boost::synchro;

[include introduction.qbk]
[endsect]
