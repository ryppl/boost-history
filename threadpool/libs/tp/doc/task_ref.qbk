[/
  (C) Copyright 2008 Oliver Kowalke.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:task Class template `task`]

    #include <boost/tp/task.hpp>

    template< typename R >
    class task
    {
    public:
      template< typename Pool >
      task(
        Pool * pool,
        future< R > const& fut,
        detail::interrupter const& intr);

      void interrupt();
      void interrupt_and_wait();
      void interrupt_and_wait( system_time const& abs_time);
      template< typename Duration >
      void interrupt_and_wait( Duration const& rel_time);
      bool interrupt_requested();

      R get() const;

      bool is_ready() const;
      bool has_value() const;
      bool has_exception() const;

      void wait() const; 
      template< typename Duration >
      bool timed_wait( Duration const& rel_time) const;
      bool timed_wait_until( system_time const& abs_time) const; 
    };

[section:constructor Constructor]

    template< typename Pool >
    task(
      Pool * pool,
      future< R > const& fut,
      detail::interrupter const& intr);

[variablelist
[[Effects:] [Constructs a `boost::tp::task< R >` instance.]]
[[Throws:] [Nothing]]
[[Notes:] [task objects should only be constructed by the pool.]]
]
[endsect]


[section:interrupt Member function `interrupt()`]

    void interrupt();

[variablelist
[[Effects:] [Associated __action__ will be interrupted the next time it enters a __interruption_point__ if interruption is not disabled. The function returns immediatly.]]
[[Throws:] [Nothing]]
]
[endsect]


[section:interrupt_and_wait Member function `interrupt_and_wait()`]

    void interrupt_and_wait();

    void interrupt_and_wait( system_time const& abs_time);

    template< typename DurationTime >
    void interrupt_and_wait( DurationTime const& rel_time);

[variablelist
[[Effects:] [Associated __action__ will be interrupted the next time it enters one __interruption_point__ if interruption is not disabled. The function waits until the __action__ has terminated or the specified duration td has elapsed.]]
[[Throws:] [Nothing]]
]
[endsect]


[section:get Member function `get()`]

    R get() const;

[variablelist
[[Effects:] [Returns fulfilled value or throws fulfilled exception.]]
[[Throws:] [`boost::future::broken_promise`]]
]
[endsect]


[section:is_read Member function `is_ready()`]

    bool is_ready() const;

[variablelist
[[Effects:] [Queries if the __action__ has been fulfilled.]]
[[Throws:] [Nothing]]
]
[endsect]


[section:has_value Member function `has_value()`]

    bool has_value() const;

[variablelist
[[Effects:] [Queries if the __action__ has been fulfilled (is ready) and has a value.]]
[[Throws:] [Nothing]]
]
[endsect]


[section:has_exception Member function `has_exception()`]

    bool has_exception() const;

[variablelist
[[Effects:] [Queries if the __action__ has been fulfilled (is ready) and has an exception.]]
[[Throws:] [Nothing]]
]
[endsect]


[section:wait Member function `wait()`]

    void wait() const;

[variablelist
[[Effects:] [Waits until the result is ready.]]
[[Throws:] [Throws thread_interrupted if the result is not ready at the point of the call, and the current thread is interrupted.]]
]
[endsect]


[section:timed_wait Member function `timed_wait()`]

    template< typename Duration >
    bool timed_wait( Duration const& wait_duration);

[variablelist
[[Effects:] [Waits until the result is ready, or returns false if the time specified by wait_duration has elapsed.]]
[[Throws:] [Throws thread_interrupted if the result is not ready at the point of the call, and the current thread is interrupted.]]
]
[endsect]


[section:timed_wait_until Member function `timed_wait_until()`]

    bool timed_wait_until( system_time const& wait_timeout);

[variablelist
[[Effects:] [Waits until the result is ready, or returns false if the time point specified by wait_timeout has passed.]]
[[Throws:] [Throws thread_interrupted if the result is not ready at the point of the call, and the current thread is interrupted.]]
]
[endsect]


[endsect]
