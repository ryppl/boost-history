===================================================================
 A Safety Problem with RValue References (and what to do about it)
===================================================================

:Author: David Abrahams, Doug Gregor
:Contact: dave@boostpro.com, doug.gregor@gmail.com
:organization: `BoostPro Computing`_, Apple
:date: 2008-12-05

:Number: n2812=08-0322

.. _`BoostPro Computing`: http://www.boostpro.com
.. _patch: http://gcc.gnu.org/ml/gcc-patches/2008-10/msg00436.html
.. _884: http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#884

.. contents:: index

-----------------
 Working Section
-----------------

Outline
=======

* Description of problem
* Proposed fix
* Impact of fix
* Implementation Experience
* Pro/con arguments?

Status of This Document
=======================

Currently aggregating comments from a long discussion thread starting
Sept. 19 2008 and just trying to make sure all the important material
is at hand.  We will incorporate this material in the main text next.

Miscellaneous Remarks and Notes
===============================

I've tried to bold-ify what I think are the essential points below

* Peter 
  Dimov:

    I think that we don't need idiom 2 [where we want to modify the
    argument regardless of whether it turns out to be an rvalue] that
    much. If we're going to change && to not bind to lvalues, the
    **principled approach would be to omit the &&& at all**. Yes, idiom 2
    does have its uses, but it also has shown an ability to bite us
    **(issue 884)**.

    I also note that **making && bind only to rvalues probably settles
    the question of whether auto&& should apply the deduction rule** -
    it wouldn't work for lvalues if it did not.

    We'll need some additional wording to **keep std::move working**;
    it binds an rvalue reference to an lvalue.

    **I find the original motivating example (where the
    CopyConstructible concept requirement causes the const& overload
    to be dropped) much better, because it represents neither a
    mistake nor an oversight.**

    The std::move implementation takes advantage of the fact that T&&
    can bind to an lvalue t. The binding can be made explicit, via
    static_cast, but **a blank prohibition could render even that
    illegal.**

    FWIW, **the && change does not affect the three overload free
    swap. It only affects the single &&-taking member swap.**

    Also FWIW, and IMHO, swapping with an rvalue is an anti-idiomatic
    way to express move assignment. **If people feel the need to use
    swap in this way, there's something wrong with the move assignment
    operator for the type.**


* The first version of the paper mentioned back_insert_iterator and
  how the simple workaround for a problem prevents using it with
  initializer lists, something Doug apparently understood.  Worth
  mentioning?

* There was a vote in LWG to roll all swap functions back to the
  single (T&,T&) form because of issue 884.  However, for bureaucratic
  reasons I'm not sure if that vote had any legal force, so we may
  need to do something about it.


-----------------
 Written Section
-----------------

Synopsis
========

This paper describes a safety problem with rvalue references.  The underlying
issue has been known for some time, but recently-discovered examples have made
its seriousness much more apparent.  We also propose a solution to the problem.

Example
=======

Consider::

  template <class T>
  void assign(queue<T>& dest, std::vector<T> const& src); // #1: copy src into dest

  std::vector<int> x;
  queue<int> q;

  assign(q, x);                                    // case A: copy from lvalue
  assign(q, std::vector<int>(10));                 // case B: copy from rvalue


The Move/Copy Overload Idiom
============================

Case B above can be optimized using move semantics.  The idea is to
transfer ownership of the vector's contents into ``q`` instead of
allocating new memory and making a copy.  We can do that in case B
because the vector is an unnamed temporary and thus inaccessible and
invisible to the rest of the program.  If we steal from an rvalue,
nobody can know the difference: that's the key to move semantics.

To add move semantics, we add an ``assign`` overload version that
takes its second parameter by rvalue reference::

  template <class T>
  void assign(queue<T>& dest, std::vector<T>&& src); // #2: move from src into dest

This idiom relies on the presence of *both* overloads.  Overload #2
makes it move, but overload #1 makes it safe.  Without overload
#1, assign will move from lvalues, silently turning a logically
non-mutating operation into a mutating one.

How Move-Only Types Work
========================

A movable but non-copyable argument type follows the same binding pattern as
std::vector<int> does: rvalue arguments, which can be safely moved from, select
overload #2::

  queue<move_only_type> q2;
  assign(q2, vector<move_only_type>());

As before, lvalue arguments select overload #1::

  vector<move_only_type> y;
  assign(q2, y);

However, since the argument type is noncopyable, the body of #1 fails
compilation (as desired) when it attempts to make a copy.

The Problem
===========

The problem is that the lvalue/rvalue overload set doesn't degrade safely.  If
overload #1 is removed from consideration, overload #2 will match both rvalues
and lvalues, moving silently from all mutable arguments.

When Will That Happen? 
======================

There are a number of possible reasons for such a removal, but simple programmer
blunders may be the most likely causes.  For example, an errant finger might hit
the delete key when overload #1 is selected.  

Some mistakes are not nearly so obvious.  For example, suppose we want the
ability to control allocation when we know the source container is going to be
copied.  We might modify overload #1 as follows::

  // #1 with optional allocator
  template <class T>
  void assign(queue<T>& dest, Cont const& src, 
              typename Cont::allocator_type = typename Cont::allocator_type());


.. Warning:: The **above is still wrong** because of the deduction
   rule!!  The rest of the document **still needs to be fixed** so
   that we're not using a bare ``Cont`` argument!!

For all container types that provide a suitable nested allocator_type,
all is well. However, if the container type does not provide a nested
allocator_type, SFINAE eliminates overload #1, causing overload #2 to
silently move from lvalues.

Adding Concept Constraints
==========================

To use our assign function in a constrained context, we'll need to add
concept constraints for the operations performed in the function body::

  template <class Cont>
  requires CopyAssignable<Cont>
  void assign(queue<Cont>& dest, Cont const& src);  #1

  template <class Cont>
  requires MoveAssignable<Cont>
  void assign(queue<Cont>& dest, Cont&& src);       #2

Passing an argument that doesn't meet the CopyAssignable constraint causes
overload #1 to be removed via SFINAE.  In other words, *any* move-only argument,
even an lvalue, will select overload #2... and silently move from lvalues.


Why This Happens
================

There is no precedent in const-correct code for a non-mutating call to become
mutating when an overload is removed from the set.  So why does it happen here?

In C++03 overload sets where only one overload mutates data (see
set<T>::operator[]), the mutating operation always binds less-liberally to
arguments than the non-mutating operation.  Non-const operations never attract
const arguments.  Rvalue references, however, *will* attract lvalues.

.. Admonition:: Doug Writes

  I fear that this paragraph is only understood by the people CC'd on
  this e-mail. In fact, I would probably remove this entire
  subsection.  It *could* be a discussion of the philosophy that
  parameters should only permit arguments that are "safe", and that
  the presence of additional overloads is never a safe way to control
  what arguments a certain parameter permits. C++03 followed this
  philosophy, but rvalue references did not.


Proposed Solution
=================

We propose to prohibit rvalue references from binding to
lvalues. Therefore, an rvalue reference will always refer to an rvalue
or to an lvalue that the user has explicitly transformed into an
rvalue (e.g., through the use of ``std::move``). For example, with
this change, given just a single function template ``enqueue``::

  template <class T, typename Cont>
  void enqueue(queue<T, Cont>& dest, queue<T, Cont>&& src); // #1

calling ``enqueue`` with an rvalue succeeds while calling it with an
lvalue fails::

  void f(queue<int, list<int>> dest, queue<int, list<int>>& src) {
    enqueue(dest, queue<int, list<int>>()); // okay: rvalue reference binds to rvalue
    enqueue(dest, src); // error: rvalue reference cannot bind to lvalue
    enqueue(dest, std::move(src)); // okay: rvalue reference binds to an lvalue that is explicitly treated as an rvalue
  }

We can then add back the previously-problematic overload that allows
one to copy from the source queue while enqueing its elements, and
provide an allocator::

  template <class T, typename Cont>
  void enqueue(queue<T, Cont>& dest, const queue<T, Cont>& src,
               typename Cont::allocator_type alloc = typename Cont::allocator_type()); // #2
  
Now, if we attempt to enqueue elements from an lvalue where the
queue's container does not have an allocator, we receive an error
message stating that no ``enqueue`` function can be called, rather than
silently moving from lvalue::

  void g(queue<int, simple_list<int>>& dest, queue<int, simple_list<int>>& src) {
    enqueue(dest, src); // error: #1 cannot be called because src isn't an lvalue
                        //        #2 fails template argument deduction
  }

Impact on Users
---------------

The most important aspect of this solution is that it does not change
the common idioms that employ rvalue references. For example,
when we want to optimize for rvalues (e.g., by implementing move
semantics), we still implement two overloads: one with an lvalue
reference to const and one with an rvalue reference, e.g.,::

  void push_back(const value_type& x); // copies x
  void push_back(value_type&& x); // moves x

With the proposed change, the introduction of concepts into these
functions does not result in any surprises::

  requires CopyConstructible<value_type>
    void push_back(const value_type& x); // copies x
  requires MoveConstructible<value_type>
    void push_back(value_type&& x); // moves x

For a move-only type ``X``, the first `push_back` will be eliminated
because template argument deduction fails (``X`` does not meet the
``CopyConstructible`` requirements), and the second ``push_back``
only accepts rvalues. Hence, calling `push_back` with an lvalue of
move-only type ``X`` will result in an error.

The proposed change also does not have any impact on the use
of rvalue references for perfect forwarding, e.g.,::

  template <class F, class T>
  void thunk(F f, T&& x) { f(std::forward<T>(x)); }

When an lvalue of type ``U`` is passed to ``f``, the special template
argument deduction rules for ``T&&`` ensure that ``T`` is deduced as
``U&``. Then, when substituting ``T=U&`` into ``T&&``, reference
collapsing transforms the resulting argument type to ``U&``, an lvalue
reference that is able to bind to the lvalue argument of type
``U``. Hence, lvalues bind to lvalue references and rvalues bind to
rvalue references.

The only user code that will be directly affected by the proposed
change is when a function performs the same operation regardless of
whether it receives an lvalue or an rvalue. For example, this approach
has been used with member ``swap`` to permit swapping with rvalues, e.g.,::

  struct mytype {
    void swap(mytype&& other); // other can be an lvalue or rvalue
  };

  void f(mytype& m1, mytype& m2) {
    m.swap(mytype()); // okay: rvalue reference binds to rvalues
    m1.swap(m2); // okay under the existing rules, ill-formed with the proposed rules
  }

With the proposed change, the definition of mytype would have to be
extended to include two ``swap`` overloads, one for lvalues and one for
rvalues. The rvalue-reference version would merely forward to the
lvalue-reference version, e.g.,::

  struct mytype {
    void swap(mytype& other);
    void swap(mytype&& other) { swap(other); } // 'other' is treated as an lvalue
  };

Since the vast majority of uses of rvalue references fall into one of
the first two idioms---paired overloads for move semantics and the use
of ``std::forward`` for perfect forwarding---and the workaround for the
few functions like ``swap`` that depend on the current behavior is very
simple, we do not expect any significant impact on user code. On the
other hand, the proposed change eliminates a particularly vexing
problem with rvalue references that makes them almost unusable with
concepts and somewhat dangerous even without concepts.

Impact on the Standard Library
------------------------------

Note: this section still TODO

* std::move
* std::forward
* swap()
* rvalue operator<<

The existing definition of std::move takes advantage of the current liberal
binding rule, so we'd need to add an overload to support lvalues:

.. Admonition:: Doug Sez

  ::

  > On Sep 24, 2008, at 2:06 PM, David Abrahams wrote:
  >> on Wed Sep 24 2008, Doug Gregor <dgregor-AT-osl.iu.edu> wrote:
  >>> That's
  >>>
  >>> 	template <class T> T&& move(T& t) { return static_cast<T&&>(t); }
  >>>
  >>> without concepts and
  >>>
  >>> 	template <RvalueOf T> RvalueOf<T>::type move(T& t) 
  >>>     { return static_cast<RvalueOf<T>::type>(t); }
  >>>
  >>> with concepts, IIUC.
  >>
  >> Hmm, if we change the argument above to T&&, couldn't we write move
  >> with just this single function?
  >
  > Oh, right. Be sure to put the remove_reference back into the non-
  > concepts version. I momentally forgot about the T&& deduction rule.

We'd also need to decide whether it makes sense to preserve the new
functionality supporting rvalue streams.  If so, all the streaming
operators that were changed for C++0x to take an rvalue reference
first argument would need a second overload.  If not, we should revert
these operators to their original definitions.

.. Admonition:: Doug Sez:

  *I* know this paragraph means, but most readers won't. Please show
  the use of && in the declaration of operator<<, and how it affects
  user code.

  Also, we've changed the &'s to &&'s in a lot of member swap()s
  throughout the library. Those will need to revert back, or be
  overloaded with & and && versions.

  Plus, the new Iterator concept is affected by this change. It'll
  need another overload::

          reference operator*(Iter&);

  to handle dereferencing lvalues.

Impact on Implementations
-------------------------

We have produced an implementation of the proposed solution in the GNU
C++ compiler, which is available as a patch_ against GCC 4.3.2. The
actual implementation of the language change is trivial---we merely
check whether the binding computed would bind an lvalue to an rvalue
reference, and reject the binding in this case. The changes to the
standard library are slightly more involved, because we needed to
implement the changes described in the section 'Impact on the Standard
Library'_. We do not anticipate that this change will have any
significant impact on compilers or standard library
implementations. The GCC implementation required a day's effort to
update both the language and the library, although more effort would
certainly be required to update the test cases associated with this
feature.

Alternative Solutions
======================

Two alternatives to our proposed solution have been proposed. One
alternative is actually an extension to the proposed solution, which
adds a third kind of reference type; the other modifies the behavior
of concepts to preserve more of the overloading behavior of
unconstrained templates. Although we describe these two alternatives
here, we do not propose either of them.

Add A Third Reference Type
--------------------------

With the removal of the binding from rvalue references to lvalues,
certain functions that work equally well on both lvalues and
rvalues---such as ``swap`` or the stream insertion/extraction
operators---will need to provide additional overloads, e.g.,::

  void swap(mytype&&);

becomes::

  void swap(mytype&);
  void swap(mytype&& other) { swap(other); }

If there were multiple parameters that could be either lvalues or
rvalues, the number of required overloads would grow expentially. For
example, a non-member ``swap`` that supports all combinations of lvalues
and rvalues would go from::

  void swap(mytype&&, mytype&&);

to::

  void swap(mytype&, mytype&);
  void swap(mytype&  x, mytype&& y) { swap(x, y); }
  void swap(mytype&& x, mytype&  y) { swap(x, y); }
  void swap(mytype&& x, mytype&& y) { swap(x, y); }

To address this issue, one could extend our proposed resolution to
support a third kind of reference (spelled ``&&&``) that binds to
either lvalues or rvalues, effectively providing the current behavior
of ``&&`` but with a new spelling. Thus, the above swap could be written
as::

  void swap(mytype&&&, mytype&&&);

Interestingly, the current working paper's definition of non-member
``swap`` would not benefit from the addition of ``&&&``. The working
paper provides three overloads of each non-member swap, prohibiting
rvalue-rvalue swaps:: 

  void swap(mytype& , mytype&);
  void swap(mytype&&, mytype&);
  void swap(mytype& , mytype&&);

This overload set works the same way regardless of whether rvalue
references bind to lvalues. Moreover, an LWG straw poll in San
Francisco voted to revert from using three non-member swaps back to
having only a single, lvalue-lvalue swap::

  void swap(mytype&, mytype&);

due to library issue 884_. Thus, ``&&&`` is not likely to be used in the
working paper for non-member ``swap``. For member ``swap``, the number of
extra overloads (one per existing ``swap``) required is not sufficient to
motivate the addition of another kind of reference. 

With the stream insertion and extraction operators, the introduction
of the ``operator>>`` and ``operator>>`` templates described in
section 'Impact on the Standard Library'_ eliminates the need for the
use of ``&&&``. We expect that most other uses of ``&&&`` can be
addressed using this approach.


Deleting Functions that Fail Concept Constraints
------------------------------------------------

Another alternative solution that has been proposed to address the
problem posed by the conceptualized version of ``push_back`` is to
delete functions that fail to meet their concept requirements. That
way, these functions remain in the overload set but any attempt to use
them will result in an error. Recall the ``push_back`` overloads and
their concept constraints::

  requires CopyConstructible<value_type>
    void push_back(const value_type& x); // copies x
  requires MoveConstructible<value_type>
    void push_back(value_type&& x); // moves x

When instantiated with a move-only type ``X`` for ``value_type``, the
proposed solution would result in the following two functions::

  void push_back(const X& x) = delete; // X isn't CopyConstructible
  void push_back(X&& x); // okay: X is MoveConstructible

This approach solves the problem for this example, because lvalues
passed to ``push_back`` will still be attracted to the lvalue
reference, and the compiler will produce a suitable error rather than
silently moving from an lvalue.

The main problem with this approach is that it only solves the problem
in those cases where the concept requirements of a template are not
satisfied but SFINAE does not eliminate the template from
consideration. For example, it does not solve the problem with the
``enqueue`` function described above (which doesn't involve concepts):

  template <class T, typename Cont>
    void enqueue(queue<T, Cont>& dest, queue<T, Cont>&& src); // #1
  template <class T, typename Cont>
    void enqueue(queue<T, Cont>& dest, const queue<T, Cont>& src,
                 typename Cont::allocator_type alloc = typename Cont::allocator_type()); // #2

It also does not solve the problem with a conceptualized version of
the ``enqueue`` function::

  template <class T, Container Cont>
    void enqueue(queue<T, Cont>& dest, queue<T, Cont>&& src); // #1
  template <class T, ContainerWithAllocator Cont>
    void enqueue(queue<T, Cont>& dest, const queue<T, Cont>& src,
                 Cont::allocator_type alloc = Cont::allocator_type()); // #2

The conceptualized formulation of ``enqueue`` suffers from the same
problem as the pre-concepts version: since ``Cont`` is not a
``ContainerWithAllocator``, we cannot form the signature of the
deleted ``enqueue`` function, so only function #1 will enter the
overload set.  Since it is the only function available, it will move
from lvalues. Thus, the proposal to replace functions that fail their
concept requirements with deleted functions does not solve the general
problem, either with or without concepts.
