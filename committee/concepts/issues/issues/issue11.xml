<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="11" status="New">
<title>Semiregular concept is strange</title>
<section><sref ref="[concept.regular]"/></section>
<submitter>LWG</submitter>
<date>27 Feb 2008</date>

<discussion>
  <p>Exactly why does <tt>Semiregular</tt> exist, and what's the
  design criterion for deciding which of the requirements
  in <tt>Regular</tt> should be relaxed for <tt>Semiregular</tt>?
  Matt's first thought was that <tt>Semiregular</tt> was there to
  describe the "almost regular" value type of <tt>std::map</tt>, but
  that's wrong; in this terminology map's value type is
  neither <tt>Regular</tt> nor <tt>Semiregular</tt>. Mat wonders
  whether there are any algorithms that need to distinguish between
    <tt>Regular</tt> and <tt>Semiregular</tt>. A preliminary search
  shows no use of it in the latest revision of the
  concepts-in-clause-25 paper. Can we get rid of <tt>Semiregular</tt>?
  (Note: <tt>Semiregular</tt> is used in the definition of
  the <tt>InputIterator</tt> concept.)
  </p>
</discussion>

<resolution>
  <p><tt>Semiregular</tt> can be very useful for describing types that
    used in <tt>valarray</tt> and <tt>complex</tt>, if we
    add <tt>DefaultConstructible</tt> and <tt>Addressable</tt> to
    it. <tt>Semiregular</tt> then describes types that can be
    initialized and assigned in a natural way, and from there we add
    equality into <tt>Regular</tt>. </p>

  <p>Change the definition of <tt>Semiregular</tt> in [concept.regular] as follows:</p>

  <pre>
auto concept Semiregular&lt;typename T&gt; 
  : CopyConstructible&lt;T&gt;, CopyAssignable&lt;T&gt;, HeapAllocatable&lt;T&gt;<ins>, DefaultConstructible&lt;T&gt;, Addressable&lt;T&gt;</ins> {
  requires SameType&lt;CopyAssignable&lt;T&gt;::result_type, T&amp;&gt;<del>;</del><ins>&amp;&amp;</ins> 
           <ins>SameType&lt;Addressable&lt;T&gt;::pointer, T*&gt; &amp;&amp;</ins>
           <ins>SameType&lt;Addressable&lt;T const&gt;::pointer, T const*&gt;</ins>
 
  <ins>requires EqualityComparable&lt;T&gt; 
  axiom InitializationConsistency(T x) {
    (T() = x) == T(x);
  }</ins>
} 
  </pre>

  <p>Add the following paragraph after the description of <tt>Semiregular</tt> in [concept.regular]:</p>
  
  <ol start="2">
    <li><ins>[ <i>Note</i>: The <tt>InitializationConsistency</tt>
        axiom states that there shall not be any subtle differences in
        the semantics of initialization versus assignment. This gives
        an implementation considerable flexibility in how data are
        initialized.</ins>
        <p>
        <ins>[ <i>Example</i>: An implementation is allowed to initialize data by allocating storage using the new operator 
(which implies a call to the default constructor for the element) and then assigning each element its value. Or the 
        implementation can allocate raw storage and use the copy constructor to initialize the element. -- <i>end example</i> ] -- <i>end note</i>]</ins></p> </li>
  </ol>

  <p>Change the definition of the <tt>Regular</tt> concept in [concept.regular] as follows:</p>

  <pre>
auto concept Regular&lt;typename T&gt;
: Semiregular&lt;T&gt;<del>, DefaultConstructible&lt;T&gt;</del>, EqualityComparable&lt;T&gt; { } 
  </pre>

  <ol start="2">
    <li><i>Note</i>: describes semi-regular types that <del>are default constructible,</del> have equality comparison operators<del>, and can be 
        allocated on the heap</del>. </li>
  </ol>

  <p>Modify the definition of the <tt>InputIterator</tt> concept in [input.iterators] as follows:</p>

  <pre>
concept InputIterator&lt;typename X&gt; : <del>Semiregular&lt;X&gt;,</del> <ins>CopyConstructible&lt;T&gt;, CopyAssignable&lt;T&gt;, HeapAllocatable&lt;T&gt;,</ins> EqualityComparable&lt;X&gt; {
  <ins>requires SameType&lt;CopyAssignable&lt;T&gt;::result_type, T&amp;&gt;;</ins>
  <i>// ...</i>
}
  </pre>
</resolution>

</issue>
