<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="37" status="New">
<title>Relation between move/swap concepts and <code>Regular</code></title>
<section><sref ref="[concept.regular]"/></section>
<submitter>Chris Jefferson</submitter>
<date>30 May 2008</date>

<discussion>
  <p>I've been thinking about rearranging these things:</p>

  <ol>
    <li>Have a 'move equivalent' version of <code>Regular</code>/<code>SemiRegular</code>.</li>
    <li>Move <code>Swappable</code> into <code>Regular</code>/<code>SemiRegular</code>.</li>
  </ol>

  <p>The reason for 2 is I expect for many people (it has been for me)
    <code>Regular</code> will be their standard concept to use for
    "types which are normal / sensible". The fact you can't sort
    a <code>Regular</code> type (as it isn't <code>Swappable</code>)
    seems a bit bizarre.</p>

  <p>[<i>Doug</i>: there aren't any algorithms or data structures in the standard library that need a move-equivalent version of <code>Regular</code> or <code>Semiregular</code>, so we shouldn't make up these concepts.]</p>
</discussion>

<resolution>
  <p>In [concept.regular], update the definition of <tt>Semiregular</tt>  as follows:</p>

  <pre>
auto concept Semiregular&lt;typename T&gt; 
  : CopyConstructible&lt;T&gt;, CopyAssignable&lt;T&gt;, FreeStoreAllocatable&lt;T&gt;<ins>, Swappable&lt;T&gt;</ins> { 
  requires SameType&lt;CopyAssignable&lt;T&gt;::result_type, T&amp;&gt;; 
} 
  </pre>
</resolution>

</issue>
