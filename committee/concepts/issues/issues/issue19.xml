<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="19" status="WP">
<title>IteratorBase is an implementation detail</title>
<section><sref ref="[iterator.concepts]"/></section>
<submitter>LWG</submitter>
<date>28 Feb 2008</date>

<discussion>
  <p>We're not very happy about <tt>IteratorBase</tt>. It doesn't seem
  like anything that anyone would ever want to constrain a template
  on; there's no text following its definition to say what it is and
  what it's for; it appears unused except as, well, a base; it seems
  more like a macro to save a few lines of typing in the real
  concepts. Can we get rid of it? Or can we strengthen it into
    <tt>TrivialIterator</tt> and base all other iterator concepts on
    <tt>TrivialIterator</tt> instead?
  </p>
</discussion>

<resolution>
  <p>In [iterator.concepts], remove the <code>IteratorBase</code>
  concept from the synopsis (in paragraph 1) and from paragraph 2.</p>

  <p>In [input.iterators], change the <code>InputIterator</code>
  concept as follows:</p>
  <pre>
concept InputIterator&lt;typename X&gt; : <del>IteratorBase&lt;X&gt;, </del>Semiregular&lt;X&gt;, EqualityComparable&lt;X&gt; { 
  <ins>typename value_type = typename X::value_type;</ins>
  <ins>MoveConstructible reference = typename X::reference;</ins> 
  <ins>MoveConstructible pointer = typename X::pointer;</ins>

  // ...
}
  </pre>

  <p>In [output.iterators], change
  the <code>BasicOutputIterator</code> concept as follows:</p>
  <pre>
concept BasicOutputIterator&lt;typename X&gt; : <del>IteratorBase&lt;X&gt;, </del>CopyConstructible&lt;X&gt; { 
  <ins>typename value_type = typename X::value_type;</ins>
  <ins>MoveConstructible reference = typename X::reference;</ins> 

  // ...
}
  </pre>

  <p>In [forward.iterators], modify
  the <code>MutableForwardIterator</code> concept definition as
  follows:</p>
  <pre>
concept MutableForwardIterator&lt;typename X&gt; : ForwardIterator&lt;X&gt;, BasicOutputIterator&lt;X&gt; { 
  <ins>requires SameType&lt;ForwardIterator&lt;X&gt;::value_type, BasicOutputIterator&lt;X&gt;::value_type&gt; &amp;&amp;
           SameType&lt;ForwardIterator&lt;X&gt;::reference, BasicOutputIterator&lt;X&gt;::reference&gt;;</ins>
} 
  </pre>
</resolution>

</issue>
