import scons_tools
import os

targets = {"boost.python.extensions":{}}

scons_tools.LocalConfiguration(
    name="boost.python.extensions",
    libraries=["boost_python_extensions"],
    dependencies=("boost.python",)
    )

bp_extensions_env = scons_tools.GetEnvironment().Clone()
bp_extensions_env.Append(CPPPATH=["#"])
libpath = os.path.abspath("%s/python/src" % scons_tools.GetBuildDir())
if os.environ.has_key("LD_LIBRARY_PATH"):
    bp_extensions_env["ENV"]["LD_LIBRARY_PATH"] = "%s:%s" % (libpath, os.environ["LD_LIBRARY_PATH"])
else:
    bp_extensions_env["ENV"]["LD_LIBRARY_PATH"] = libpath
bp_extensions_env.Append(LIBPATH=[libpath])
bp_extensions_env.SetupPackages(["boost.python"])
Export("bp_extensions_env")

targets["boost.python.extensions"]["lib"] = SConscript("libs/python/src/SConscript")
targets["boost.python.extensions"]["install"] = (
    bp_extensions_env.RecursiveInstall(
        os.path.join(bp_extensions_env["INSTALL_HEADERS"], "boost"), 
        "boost", 
        regex="(.*\.hpp)")
    + bp_extensions_env.Install(bp_extensions_env["INSTALL_LIB"], targets["boost.python.extensions"]["lib"])
    )
targets["boost.python.extensions"]["test"] = SConscript("libs/python/test/SConscript")

Return("targets")
