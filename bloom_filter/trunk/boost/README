This prototype uses the public domain library MurmurHash3 to get its 
work done. 

===== Compression =====

(Lossless) Compression policies to investigate:
- LZ (Lempel-Ziv), e.g., DEFLATE
- LZR (LZ-Renau), Zip
- LZX, MSFT Cab format
- Burrows-Wheeler
- check wiki page on compression

A compression policy looks as below:
template <size_t Size>
struct CompressionPolicy {
  size_t compress(const char *const in, char *out, const size_t insize);
  void decompress(const char *const in, char *out, const size_t insize);
};

compress() returns the size of the data when compressed.

Since compress and decompress will only ever used in association
with the bits of a Bloom filter, the Size parameter can be embedded in
the policy template. This represents the uncompressed size of the Bloom
filter.

===== Deleting Variants =====

Deletion should not be embedded as a policy. Inherently,
Bloom filters that use a deletion policy have different data layouts.
For example, Scalable Bloom filters must be grown to always satisfy
the desired false positive rate. There are also Counting Bloom filters,
that instead of storing a bit array, require storing an array of 3-4 bit
counters.

A few deleting variants:
- Scalable Counting Bloom filter
- Counting Bloom filter
- Bloomier filters

-Alejandro Cabrera
