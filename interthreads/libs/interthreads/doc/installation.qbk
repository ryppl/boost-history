[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[/======================================]
[section:install Installing InterThreads]
[/======================================]

[/=================================]
[heading Getting Boost.InterThreads]
[/=================================]

You can get the last stable release of __Boost_InterThreads__ by downloading [^interthreads.zip] from the
[@http://www.boost-consulting.com/vault/index.php?directory=Concurrent%20Programming Boost Vault]

You can also access the latest (unstable?) state from the [@https://svn.boost.org/svn/boost/sandbox/interthreads Boost Sandbox].

[/==================================]
[heading Building Boost.InterThreads]
[/==================================]

__Boost_InterThreads__ is not a header only library. You need to compile it before use.

    cd libs/interthreads/build
    bjam

[/=========================]
[heading Build Requirements]
[/=========================]


[*Boost.InterThreads] depends on Boost. You must use either Boost version 1.38.x
or the version in SVN trunk. In particular, __Boost_InterThreads__ depends on:

[variablelist
[
    [[@http://www.boost.org/libs/array [*Boost.Array]]] [for array, ...]
]
[
    [[@http://www.boost.org/libs/bind [*Boost.Bind]]] [for bind, ...]
]
[
    [[@http://www.boost.org/libs/config [*Boost.Config]]] [for ??? and abi_prefic_sufix, ...]
]
[
    [[@http://www.boost.org/libs/function [*Boost.Function]]] [for function, ...]
]
[
    [[@http://www.boost.org/libs/fusion [*Boost.Fusion]]] [for tuples, and sequence algorithms ...]
]
[
    [[@http://www.boost.org/libs/mpl [*Boost.MPL]]] [for transform, ...]
]
[
    [[@http://www.boost.org/libs [*Boost.Preprocesor]]] [to simulate variadic templates , ...]
]
[
    [[@http://www.boost.org/libs/smart_ptr [*Boost.SmartPtr]]] [for shared_ptr, ...]
]
[
    [[@http://www.boost.org/libs/thread [*Boost.Threads]]] [for thread, thread_specific_ptr, call_once, mutex, condition_variable, ...]
]
[
    [[@http://www.boost.org/libs/typeof [*Boost.TypeOf]]] [to register the ACT types.]
]
[
    [[@http://www.boost.org/libs/type_traits [*Boost.TypeTrais]]] [for is_void, remove_references, ...]
]
[
    [[@http://www.boost.org/libs [*Boost.Utility]]] [for result_of, enable_if...]
]
]

In addition it depends on the following libraries that are not yet accepted on Boost
[variablelist
[
    [[@http://www.boost.org/libs/futures [*Boost.Futures]]] [for futures]
]
[
    [[@http://www.boost.org/libs/tp [*Boost.ThreadPool]]] [Only when using the __AE_ boost::tp::pool and the __ACT__ boost::tp::task]
]
]

And also could depend conditionaly on the following libraries that even not submited on Boost.
[variablelist
[
    [[@http://www.boost.org/libs/chrono [*Boost.Chrono]]] [for time and duration]
]
[
    [[@http://www.boost.org/libs/move [*Boost.Move]]] [to emulate the move semantic.]
]
[
    [[@https://svn.boost.org/trac/boost/wiki/LibrariesUnderConstruction#Boost.SmartPtr.UniquePtr [*Boost.SmartPtr.UniquePtr]]] [for unique_ptr, ...]
]

]

[/========================]
[heading Exceptions safety]
[/========================]

All functions in the library are exception-neutral and provide strong guarantee of exception safety as long as
the underlying parameters provide it.

[/====================]
[heading Thread safety]
[/====================]

All functions in the library are thread-unsafe except when noted explicitly.

[/=======================]
[heading Tested compilers]
[/=======================]

Currently, __Boost_InterThreads__ has been tested in the following compilers/platforms:

*  GCC 3.4.4 Cygwin
*  GCC 3.4.6 Linux
[/*  GCC 4.3.2 Cygwin]
*  GCC 4.1.2 Linux

[note Please send any questions, comments and bug reports to boost <at> lists <dot> boost <dot> org.]

[endsect]