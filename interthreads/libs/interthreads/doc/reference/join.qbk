[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:join_hpp Header `<boost/interthreads/algorithm/join.hpp>`]
[/==========================================================================================]

Defines a free function __join__ which joins  the  __ACT__ passed as parameter.
The default implementation applies the __join__ member function to the __ACT__. A user adapting another __ACT__ could need 
to specialize the __join__ free function if the __ACT__ do not provides a join function with the same prototype.

As for the moment we can not partially specialize a function a trick is used: instead of calling directly to the __join__ 
member function join calls to the static operation apply on a class with the same name in the namespace __partial_specialization_workaround__. 
So the user can specialize partially this class.

The template parameter ACT must be a model of __ThreadBasedACT__.


    namespace boost { namespace interthreads {
        namespace result_of {
            template <typename ACT> struct join {
                typedef void type;
            };
        }

        namespace partial_specialization_workaround {
            template <typename ACT> struct join {
                static typename result_of::join<ACT>::type apply( ACT& act );
            };
        }

        template <typename ACT>
        typename boost::enable_if<has_thread_if<ACT>,
            typename result_of::join<ACT>::type
        >::type
        join(ACT& act) {
            return partial_specialization_workaround::join<ACT>::apply(act);
        }
    }}

[endsect]

