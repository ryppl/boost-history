[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:thread_specific_shared_ptr_hpp Header `<boost/interthreads/thread_specific_shared_ptr.hpp>`]
[/==========================================================================================]

    namespace boost {
    namespace interthreads {
    
        template <typename T>
        class thread_specific_shared_ptr;
    
    }
    }
    

[section:thread_specific_shared_ptr_reference_thread_specific_shared_ptr Template Class `thread_specific_shared_ptr<>`]
[/==========================================================================================]

`bith::thread_specific_shared_ptr<>` is an extension of the thread_specific_ptr providing access 
to the thread specific context from other threads.

    template <typename T>
    class thread_specific_shared_ptr : private noncopyable
    {
    public:
        typedef shared_ptr<T>               shared_ptr_type;
        typedef 'implementation defined'    map_type;
        typedef 'implementation defined'    mutex_type;
        typedef 'implementation defined'    lock_type;

        thread_specific_shared_ptr();
        explicit thread_specific_shared_ptr(void (*cleanup_)(shared_ptr_type));
        ~thread_specific_shared_ptr();

        T*                      get() const;
        T*                      operator->() const;        
        T&                      operator*() const;
        void                    reset();
        template<class Y> 
        void                    reset(Y * p);
        template<class Y, class D> 
        void                    reset(Y * p, D d);
        template<class Y, class D, class A> 
        void                    reset(Y * p, D d, A a);
        
        mutex_type&             get_mutex();
        const map_type&         get_map(lock_type&) const;
        shared_ptr_type   operator[](thread::id id) const;
        shared_ptr_type   wait_and_get(thread::id id) const;
    private:        
        shared_ptr_type         get_shared_ptr() const;
    };

[section:thread_specific_shared_ptr_reference_parameters Template parameters]
[/==========================================================================================]

`thread_specific_shared_ptr<>` is instantiated with the following types:

* T The type of the pointeed object

[endsect]

[section:thread_specific_shared_ptr_reference_types  Public types]
[/==========================================================================================]

`thread_specific_shared_ptr<>` defines the following types:

* [*`shared_ptr_type`] The shared pointed type.
* [*`map_type`] The mapping type from `thread::id` to `shared_ptr_type`
* [*`mutex_type`] The protecting mutext type follwing the Lockable Concept
* [*`lock_type`] The lock used to get the map follwing the unique_lock subjacent Concept

[endsect]

[section:thread_specific_shared_ptr_default_constructor Constructor]
[/==========================================================================================]

    thread_specific_shared_ptr();

[variablelist

[[Effects:] [Construct a `thread_specific_shared_ptr<>` object for storing a pointer to an object of type `T` specific to each thread.]]

[[Throws:] [`std::bad_alloc` when resources unavailable.]]

[[Thread safety:][safe.]]

]

[endsect]

[section:thread_specific_shared_ptr_constructor_with_custom_cleanup Cleanup Constructor]
[/==========================================================================================]

    explicit thread_specific_shared_ptr(void (*cleanup_)(shared_ptr_type));

[variablelist

[[Requires:] [`cleanup_function(this->get())` does not throw any exceptions.]]

[[Effects:] [Construct a `thread_specific_shared_ptr<>` object for storing a pointer to an object of type `T` specific to each thread. The
supplied `cleanup_function` will be called at thread exit.]]

[[Throws:] [`std::bad_alloc` when resources unavailable.]]

[[Thread safety:][safe.]]

]

[endsect]

[section:thread_specific_shared_ptr_destructor Destructor]
[/==========================================================================================]

    ~thread_specific_shared_ptr();

[variablelist

[[Effects:] [Remove from the static map the current thread::id and destroys `*this`.]]

[[Throws:] [Nothing.]]

[[Thread safety:][safe.]]

]

[note Care needs to be taken to ensure that any threads still running after an instance of `boost::thread_specific_shared_ptr<>` has been
destroyed do not call any member functions on that instance. Is for this raison that usualy instance of this class are static.]

[endsect]


[section:thread_specific_shared_ptr_get Member Function `get()`]
[/==========================================================================================]

    shared_ptr_type get() const;

[variablelist

[[Returns:] [The pointer associated with the current thread.]]

[[Throws:] [Nothing.]]

[[Thread safety:][safe.]]

]

[note The initial value associated with an instance of `boost::thread_specific_shared_ptr<>` is `0` for each thread.]

[endsect]

[section:thread_specific_shared_ptr_operator_arrow Member Function `operator->()`]
[/==========================================================================================]

    T* operator->() const;        

[variablelist

[[Requires:] [`this->get()` is not `0`.]]

[[Returns:] [`this->get()`]]

[[Throws:] [Nothing.]]

[[Thread safety:][safe.]]

]

[endsect]

[section:thread_specific_shared_ptr_operator_star Member Function `operator*()`]
[/==========================================================================================]

    T& operator*() const;

[variablelist

[[Requires:] [`this->get()` is not `0`.]]

[[Returns:] [`*(this->get())`]]

[[Throws:] [Nothing.]]

[[Thread safety:][safe.]]

]

[endsect]

[section:thread_specific_shared_ptr_reset Member Function `reset()`]
[/==========================================================================================]

    void reset();

[variablelist
[[Effects:] [Equivalent to `shared_ptr().swap(this->get_shared_ptr())`. Update the mapping.]]
[[Postcondition:] [`this->get()==0`]]
[[Throws:] [`std::bad_alloc` when resources unavailable.]]
[[Thread safety:][safe.]]

]

    template<class Y> void reset(Y * new_value);

[variablelist
[[Effects:] [Equivalent to `shared_ptr(new_value).swap(this->get_shared_ptr())`. Update the mapping.]]
[[Postcondition:] [`this->get()==new_value`]]
[[Throws:] [`std::bad_alloc` when resources unavailable.]]
[[Thread safety:][safe.]]
]

    template<class Y, class D> void reset(Y * new_value, D deleter);

[variablelist
[[Effects:] [Equivalent to `shared_ptr(new_value, deleter).swap(this->get_shared_ptr())`. Update the mapping.]]
[[Postcondition:] [`this->get()==new_value`]]
[[Throws:] [`std::bad_alloc` when resources unavailable.]]
[[Thread safety:][safe.]]
]

    template<class Y, class D, class A> void reset(Y * new_value, D deleter, A a);

[variablelist
[[Effects:] [Equivalent to `shared_ptr(new_value, deleter, a).swap(this->get_shared_ptr())`. Update the mapping.]]
[[Postcondition:] [`this->get()==new_value`]]
[[Throws:] [`std::bad_alloc` when resources unavailable.]]
[[Thread safety:][safe.]]
]

[variablelist

[[Effects:] [If `this->get()!=new_value` and `this->get()` is non-`NULL`, invoke `delete this->get()` or
`deleter(this->get())` as appropriate. Store `new_value` as the pointer associated with the current thread.]]


]

[endsect]

[section:thread_specific_shared_ptr_wait_and_get Member Function `wait_and_get()`]
[/==========================================================================================]
        
    shared_ptr_type wait_and_get(thread::id id) const;

[variablelist

[[Effects:] [Waits until the specific shared pointer has been set and returns a shared pointer to this context.]]

[[Throws:] [`boost::thread_interrupted` if the current thread of execution is interrupted.]]

]

[endsect]

[section:thread_specific_shared_ptr_operatora Member Function `operator[]()`]
[/==========================================================================================]

    shared_ptr_type operator[](thread::id id) const;

[variablelist

[[Effects:] [Returns a copy of the specific shared_ptr of the thread of execution identified by the `thread::id`.]]

[[Throws:] [Nothing.]]

]

[endsect]


[section:get_mutex Member Function `get_mutex()`]
[/==========================================================================================]
        
    mutex_type&             get_mutex();

[variablelist

[[Effects:] [Returns a reference to the protection mutex.]]

[[Throws:] [Nothing.]]

]

[endsect]

[section:get_map Member Function `get_map()`]
[/==========================================================================================]
        
    const map_type&         get_map(lock_type&) const;

[variablelist

[[Effects:] [Returns a reference to the mapping from `thread::id` to the specific pointers provided the user gives a lock on the motext get using `get_mutex()`.]]

[[Throws:] [Nothing.]]

]
[endsect]




[endsect]

[endsect]

