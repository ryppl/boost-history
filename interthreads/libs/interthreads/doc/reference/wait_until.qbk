[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:wait_until_hpp Header `<boost/interthreads/algorithm/wait_until.hpp>`]
[/==========================================================================================]

Defines a free function __wait_until__ which wait until the  __ACT__ passed as parameter is ready or the given time is reached.
The default implementation applies the __wait_until__ member function to the __ACT__. A user adapting another __ACT__ could need 
to specialize the __wait_until__ free function if the __ACT__ do not provides a wait_until function with the same prototype.

As for the moment we can not partially specialize a function a trick is used: instead of calling directly to the __wait_until__ 
member function, __wait_until__ calls to the static operation apply on a class with the same name in the namespace __partial_specialization_workaround__. 
So the user can specialize partially this class.

Defines a free function __wait_for__ which wait until the  __ACT__ passed as parameter is ready or the given time is elapsed.
The default implementation applies the __wait_for__ member function to the __ACT__. A user adapting another __ACT__ could need 
to specialize the __wait_for__ free function if the __ACT__ do not provides a __wait_for__ function with the same prototype.

As for the moment we can not partially specialize a function a trick is used: instead of calling directly to the __wait_until__ 
member function, __wait_for__ calls to the static operation apply on a class with the same name in the namespace __partial_specialization_workaround__. 
So the user can specialize partially this class.

The template parameter ACT must be a model of __FutureBasedACT__.

    namespace boost { namespace interthreads {
        namespace result_of {
            template <typename ACT> struct wait_until {
                typedef bool type;
            };
            template <typename ACT, typename Duration> struct wait_for {
                typedef bool type;
            };
        }

        namespace partial_specialization_workaround {
            template <typename ACT> struct wait_until {
                static typename result_of::template wait_until<ACT>::type apply( ACT& act, const system_time& abs_time );
            };
            template< typename ACT, typename Duration> struct wait_for {
                static typename result_of::template wait_for<ACT,Duration>::type apply( ACT& act, Duration abs_time );
            };
        }

        template <typename ACT>
        typename boost::enable_if<has_future_if<ACT>,
            typename result_of::template wait_until<ACT>::type
        >::type wait_until(ACT& act, const system_time& abs_time);

        template <typename ACT, typename Duration>
        typename boost::enable_if<has_future_if<ACT>,
            typename result_of::template wait_for<ACT,Duration>::type
        >::type wait_for(ACT& act, Duration rel_time);

    }
    }   // namespace boost

[endsect]

