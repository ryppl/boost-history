[/
  (C) Copyright 2008-2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/==========================================================================================]
[section:is_ready_hpp Header `<boost/interthreads/algorithm/is_ready.hpp>`]
[/==========================================================================================]

Defines a free function __is_ready__ which states if __ACT__ passed as parameter is ready.
The default implementation applies the __is_ready__ member function to the __ACT__. A user adapting another __ACT__ could need 
to specialize the __is_ready__ free function if the __ACT__ do not provides a is_ready function with the same prototype.

As for the moment we can not partially specialize a function a trick is used: instead of calling directly to the __is_ready__ 
member function __is_ready__ calls to the static operation __apply__ on a class with the same name in the namespace __partial_specialization_workaround__. 
So the user can specialize partially this class.

The template parameter ACT must be a model of __FutureBasedACT__.


    namespace boost { namespace interthreads {
      
        namespace result_of {
            template <typename ACT> struct is_ready {
                typedef bool type;
            };
        }

        namespace partial_specialization_workaround {
            template <typename ACT> struct is_ready {
                static typename result_of::is_ready<ACT>::type apply( ACT& act );
            };
        }

        template <typename ACT>
        typename boost::enable_if<has_future_if<ACT>,
            typename result_of::template is_ready<ACT>::type
        >::type is_ready(ACT& act);

    }}

[endsect]

