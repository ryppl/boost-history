[/
  (C) Copyright 2008-2009 Vicente J Botet Escriba.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]
[/=============================================================================]

[/===============]
[section Concepts]
[/===============]


[/=============================================]
[section Decorator]
[/=============================================]
[endsect]

[/=============================================]
[section Asynchronous Completion Token Concepts]
[/=============================================]

[/==================]
[section:ACT Concept `ACT` ]
[/==================]

[heading Description]
An __ACT__ allows to  wait for the completion of an asynchronous executed operation.
An __ACT__  should be __Movable__ or __CopyConstructible__.
The completion of the __ACT__ is undefined at this level. Different models could signal this completion when setting a value or an exception.

[heading Notation]

[variablelist 
    [[`act`]        [An __ACT__]]
    [[`f`]          [A __Nullary__ function with type F]]
    [[`abs_time`]   [A __system_time__]]
    [[`rel_time`]   [A __Duration__]]
    [[`b`]          [A bool]]
]

[heading Expression requirements]
A type models a __ACT__ if, the following expressions are valid:

[table
    [[Expression]                       [Return type]   [Runtime Complexity]]
    [[`wait(act)`]                      [void]          [Constant]]
    [[`b = wait_until(act, abs_time)`]  [bool]          [Constant]]
    [[`b = wait_for(act, rel_time)`]    [bool]          [Constant]]
]

[heading Meta Expressions]
[table
    [[Expression]                          [Type]           [Compile Time Complexity]]
    [[`act_traits<ACT>::move_dest_type`]   [Any]            [Constant]]
    [[`act_traits<ACT>::move_result`]      [MPL boolean]    [Constant]]
    [[`is_movable<ACT>::type`]             [MPL boolean]    [Constant]]
    [[`has_future_if<ACT>::type`]          [MPL boolean]    [Constant]]
    [[`has_thread_if<ACT>::type`]          [MPL boolean]    [Constant]]
]



[heading Expression Semantics]
[
table
    [[Expression]                       [Semantics]]
    [[`wait(act)`]                      [Blocks until the `act` completes]]
    [[`b = wait_until(act,abs_time)`]   [Blocks until the `act` completes or `abs_time` is reached]]
    [[`b = wait_for(act,rel_time)`]     [Blocks until the `act` completes or `rel_time` has been elapsed]]
]


[heading Expression `wait(act)`]
[/==========================================================================================]


[variablelist
[[Effects:] [Blocks until the `act` completes.]]
[[Sychronization:][The completion of `act` happens before wait() returns.]]
[[Throws:] [the stored exception, if an exception was stored and not retrieved before.]]
[[Postconditions:] [is_ready(act) == true.]]
[[Thread safety:][unsafe]]
]

[heading Expression `b = wait_until(act,abs_time)`]
[/==========================================================================================]

    bool wait_until(const system_time& abs_time);
    template<typename TimeDuration>
    bool wait_for(TimeDuration const& rel_time);


[variablelist
[[Effects:] [Blocks until the `act` completes or `abs_time` is not reached.]]
[[Sychronization:][The completion of the `act` happens before wait() returns.]]
[[Returns:] [true only if the function returns because `act` is ready.]]
[[Throws:] [the stored exception, if an exception was stored and not retrieved before.]]
[[Postconditions:] [is_ready() == true.]]
[[Thread safety:][unsafe]]
]

[heading Expression `b = wait_for(act,rel_time)`]
[/==========================================================================================]



[variablelist
[[Effects:] [blocks until the `act` completes or `rel_time` has elapsed.]]
[[Sychronization:][The completion of the `act` happens before wait() returns.]]
[[Returns:] [true only if the function returns because `act` is ready.]]
[[Throws:] [the stored exception, if an exception was stored and not retrieved before.]]
[[Postconditions:] [is_ready() == true.]]
[[Thread safety:][unsafe]]
]

[heading Models]

* __unique_future__
* __shared_future__
* __unique_joiner__
* __shared_joiner__
* __tp_task__
* __thread__

[endsect]

[/=============================]
[section:FutureBasedACT Concept `FutureBasedACT` ]
[/=============================]
The completion of the __FutureBasedACT__ is undefined at this level but occurs usualy after a set_calue or set_exception on the associated promise.


[heading Description]

An __FutureBasedACT__ is a __ACT__ that associates a value expected on the its completion.

[heading Notation]

[variablelist 
    [[`act`]        [An __ACT__]]
    [[`cact`]       [An const __ACT__]]
    [[`f`]          [A __Nullary__ function with type F]]
    [[`abs_time`]   [A __system_time__]]
    [[`rel_time`]   [A __Duration__]]
    [[`b`]          [A bool]]
    [[`v`]          [`act_traits<typeof(act)>::move_dest_type`]]
]

[heading Expression requirements]

A type models an __FutureBasedACT__ if, in adition to being an __ACT__, 
the following expressions are valid:

[table
    [[Expression]                   [Return type]   [Runtime Complexity]]
    [[`v = get(act)`]               [`act_traits<typeof(act)>::move_dest_type`]          [Constant]]
    [[`b = is_ready(cact)`]         [bool]          [Constant]]
    [[`b = has_exception(cact)`]    [bool]          [Constant]]
    [[`b = has_value(cact)`]        [bool]          [Constant]]
]

[heading Expression Semantics]
[table
    [[Expression]                  [Semantics]]
    [[`v = get(act)`]              [Blocks until `act` contains  a value and returns the stored value]]
    [[`b = is_ready(cact)`]        [Is true only if `cact` holds a value or an exception ready for retrieval.]]
    [[`b = has_exception(cact)`]   [Is true only if `cact` contains an exception.]]
    [[`b = has_value(cact)`]       [Is true only if `cact` contains a value]]
]

[heading Expression `v=get(act)`]
[/==========================================================================================]


[variablelist
[[Effects:] [Retrieves the value returned by the Nullary function.]]
[[Sychronization:][The completion of the `act` happens before get() returns.]]
[[Returns:] [Depending on the nature of the ACT returns a `act_traits<ACT>::move_dest_type`.]]
[[Throws:] [the stored exception, if an exception was stored and not retrieved before.]]
[[Postconditions:] [if `act_traits<ACT>::move_result` is `true` it is unspecified what happens when `get()` is called a second time on the same shared_joiner.]]
[[Thread safety:][unsafe]]
]

[heading Expression `b = is_ready(cact)`]
[/==========================================================================================]

[variablelist
[[Returns:] [true only if `cact` holds a value or an exception ready for retrieval.]]
[[Remark:] [if `act_traits<ACT>::move_result` is true the return value could be unspecified after a call to `get(act)`.]]
]

[heading Expression `b = has_exception(cact)`]
[/==========================================================================================]


[variablelist
[[Returns:] [true only if `is_ready(cact)` == true and `cact` contains an exception.]]
]

[heading Expression `b = has_value(cact)`]
[/==========================================================================================]

[variablelist
[[Returns:] [true only if `is_ready(cact)` == true and  `cact` contains a value.]]
]

[heading Models]

* __unique_future__
* __shared_future__
* __unique_joiner__
* __shared_joiner__
* __tp_task__

[endsect]

[/=============================]
[section:ThreadBasedACT Concept `ThreadBasedACT` ]
[/=============================]

The completion of the __ThreadBasedACT__ is undefined at this level but occurs usualy after a function finish.

[heading Description]

An __ThreadBasedACT__ is a __ACT__ that provides a thread like interface.

[heading Notation]

[variablelist 
    [[`act`]        [An __ACT__]]
    [[`cact`]        [A const __ACT__]]
    [[`cact`]       [An const __ACT__]]
    [[`f`]          [A __Nullary__ function with type F]]
    [[`abs_time`]   [A __system_time__]]
    [[`rel_time`]   [A __Duration__]]
    [[`b`]          [A bool]]
    [[`id`]         [An `act_traits<__ACT__>::id_type`]]
]

[heading Expression requirements]
A type models an __FutureBasedACT__ if, in adition to being an __ACT__, 
the following expressions are valid:

[table
    [[Expression]                          [Return type]   [Runtime Complexity]]
    [[`b = joinable(cact)`]                [bool]          [Constant]]
    [[`join(act)`]                         [void]          [Constant]]
    [[`b = join_until(act, abs_time)`]     [bool]          [Constant]]
    [[`b = join_for(act, rel_time)`]       [bool]          [Constant]]
    [[`detach(act)`]                       [void]          [Constant]]
    [[`interrupt(act)`]                    [void]          [Constant]]
    [[`b = interruption_requested(cact)`]  [bool]          [Constant]]
    [[`id = get_id(cact)`]                 [`act_traits<__ACT__>::id_type`]          [Constant]]
]

[heading Expression Semantics]
[table
    [[Expression]                          [Semantics]]
    [[`b = joinable(cact)`]                [true if `cact` refers to a 'thread of execution', false  otherwise]]
    [[`join(act)`]                         [waits for the assoiated 'thread of execution' to complete]]
    [[`b = join_until(act, abs_time)`]     [waits for the assoiated 'thread of execution' to complete or the time `wait_until` has been reach.]]
    [[`b = join_for(act, rel_time)`]       [waits for the assoiated 'thread of execution' to complete or the specified duration `rel_time` has elapsed ]]
    [[`detach(act)`]                       [the associated 'thread of execution' becomes detached, and no longer has an associated one]]
    [[`interrupt(act)`]                    [request that the associated 'thread of execution' be interrupted the next time it enters 
    one of the predefined interruption points with interruption enabled, or if it is currently blocked in a call to one of the 
    predefined interruption points with interruption enabled]]
    [[`b = interruption_requested(cact)`]  [true if interruption has been requested for the associated 'thread of execution', false  otherwise. ]]
    [[`id = get_id(cact)`]                 [an instance of `act_traits<__ACT__>::id_type` that represents the associated 'thread of execution'.]]
]

[heading Expresion `b=joinable(act)`]
[/==========================================================================================]

[variablelist
[[Returns:] [true if `act` refers to a 'thread of execution', false  otherwise]]
[[Throws:] [Nothing]]
]


[heading Expresion `join()`]
[/==========================================================================================]

[variablelist
[[Preconditions:] [`get_id(act)!=boost::interthreads::get_current_id<ACT>()`]]
[[Effects:] [If `act` refers to a thread of execution, waits for that 'thread of execution' to complete.]]
[[Postconditions:] [If `act` refers to a 'thread of execution' on entry, that 'thread of execution' has completed. 
`act` no longer refers to any 'thread of execution'.]]
[[Throws:] [__thread_interrupted__ if the current thread of execution is interrupted.]]
[[Notes:] [`join()` is one of the predefined __interruption_points__.]]
]

[heading Expresion `b=join_until(act)|b=join_for(act)`]
[/==========================================================================================]

    bool join_until(const system_time& wait_until);

    template<typename TimeDuration>
    bool join_for(TimeDuration const& rel_time);

[variablelist
[[Preconditions:] [`get_id(act)!=boost::interthreads::get_current_id<ACT>()`]]
[[Effects:] [If `act` refers to a 'thread of execution', waits for that thread of execution to complete, the time `wait_until` has
been reach or the specified duration `rel_time` has elapsed. If `act` doesn't refer to a 'thread of execution', returns immediately.]]
[[Returns:] [`true` if `act` refers to a thread of execution on entry, and that thread of execution has completed before the call
times out, `false` otherwise.]]
[[Postconditions:] [If `act` refers to a thread of execution on entry, and `timed_join` returns `true`, that thread of execution
has completed, and `act` no longer refers to any thread of execution. If this call to `timed_join` returns `false`, `*this` is
unchanged.]]
[[Throws:] [__thread_interrupted__ if the current thread of execution is interrupted.]]
[[Notes:] [`join_until()` is one of the predefined __interruption_points__.]]
]

[heading Expresion `detach(act)`]
[/==========================================================================================]

[variablelist
[[Effects:] [If `act` refers to a 'thread of execution', that 'thread of execution' becomes detached, and no longer has an associated thread object.]]
[[Postconditions:] [`act` no longer refers to any 'thread of execution'.]]
[[Throws:] [Nothing]]
]

[heading Expresion `get_id(cact)`]
[/==========================================================================================]


[variablelist
[[Returns:] [If `act` refers to a 'thread of execution', an instance of `act_traits<__ACT__>::id_type` that represents that __ACT__. 
Otherwise returns a default-constructed `act_traits<__ACT__>::id_type`.]]
[[Throws:] [Nothing]]
]

[heading Expresion `interrupt(act)`]
[/==========================================================================================]


[variablelist
[[Effects:] [If `act` refers to a 'thread of execution', request that the 'thread of execution' will be interrupted the next time it enters one of
the predefined __interruption_points__ with interruption enabled, or if it is currently __blocked__ in a call to one of the
predefined __interruption_points__ with interruption enabled .]]
[[Throws:] [Nothing]]
]

[heading Expresion `h = native_handle(act)`]
[/==========================================================================================]


[variablelist
[[Effects:] [Returns an instance of `native_handle_type` that can be used with platform-specific APIs to manipulate the underlying
implementation. If no such instance exists, `native_handle()` and `native_handle_type` are not present.]]
[[Throws:] [Nothing.]]
]



[heading Models]

* __unique_joiner__
* __shared_joiner__
* __thread__
* __tp_task__

[endsect]

[endsect]

[/======================================]
[section Asynchronous Executors Concepts]
[/======================================]

[/==========================================================================================]
[section Concept `AsynchronousExecutor`]
[/==========================================================================================]

[heading Description]

An __AsynchronousExecutor__ executes asynchronously a function and returns an __ACT__ when calling the fork function on it.

[heading Notation]

[variablelist 
    [[`ae`]             [An __AE__]]
    [[`f`]              [A __Nullary__ function with type F]]
    [[`act`]            [An __ACT__]]
]

[heading Expression requirements]
A type models a __AE__ if, the following expressions are valid:

[table
    [[Expression]               [Return type]   [Runtime Complexity]]
    [[`__fork__(ae, f)`]        [__ACT__]       [Constant]]
    [[`get_future<AE>()(act)`]  [__Future__]    [Constant]]
    [[`asynchronous_completion_token<AE, T>::type`] [Model of __ACT__ satisfying `__act_value<ACT>::type` is `T`]             [Constant]]
]

[heading Expression Semantics]
[
table
    [[Expression]               [Semantics]]
    [[`act = __fork__(ae, f)`]  [request `ae` to execute asynchronously the function `f`and returns an __ACT__ ]]
    [[`get_future<AE>()(act)`]  [gets a reference to a __Future__]]
]

[heading Constraints]
The following constraints applies:

* `act_value<__ACT__>::type == boost::result_of<F()::type>`

[heading Models]

* __basic_threader__
* __unique_threader__
* __shared_threader__
* __launcher__
* __shared_launcher__
* __scheduler__
* __tp_pool__


[endsect]


[/==========================================================================================]
[section Concept `IntrinsicAsynchronousExecutor`]
[/==========================================================================================]

[heading Description]

The default fork implementation put some requirements in its __AE__ parameter. This concept is related to this.
An __IAE__ is __AE__ that works well with the default implementation of __fork__.

[heading Notation]

[variablelist 
    [[`ae`]         [An __IAE__]]
    [[`f`]          [A __Nullary__ function]]
]

[heading Expression requirements]
A type models an __IAE__ if, in adition to being an __AE__, 
the following expressions are valid:

[table
    [[Expression]        [Return type]                           [Runtime Complexity]]
    [[`ae.fork(f)`]      [`handle<boost::result_of<F()>::type`]  [Constant]]
]

[heading Meta Expressions]
[table
    [[Expression]                               [Model Of] [Compile Time Complexity]]
    [[`handle<boost::result_of<F()>::type`]     [__ACT__]  [Constant ]]
]

[heading Expression Semantics]
[
table
    [[Expression]              [Semantics]]
    [[`ae.fork(f)`]            [executes asynchronously the function `f` and returns a __handle__ ]]
]


[heading Models]
* __basic_threader__
* __unique_threader__
* __shared_threader__
* __launcher__
* __shared_launcher__
* __scheduler__



[endsect]

[endsect]

[endsect]
