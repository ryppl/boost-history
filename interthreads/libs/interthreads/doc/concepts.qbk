[/
  (C) Copyright 2008-20009 Vicente J Botet Escriba.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]
[/=============================================================================]

[/===============]
[section Concepts]
[/===============]


[/=============================================]
[section Asynchronous Completion Token Concepts]
[/=============================================]

[/==================]
[section Concept `ACT` ]
[/==================]

[heading Description]
An __ACT__ allows to to wait for the completion of an asynchronous executed operation.
An __ACT__  should be __Movable__ or __CopyConstructible__.

[heading Notation]

[variablelist 
    [[`act`]        [An __ACT__]]
    [[`f`]          [A __Nullary__ function with type F]]
    [[`abs_time`]   [A __system_time__]]
    [[`rel_time`]   [A __Duration__]]
    [[`b`]          [A bool]]
]

[heading Expression requirements]
A type models a __AE__ if, the following expressions are valid:

[table
    [[Expression]                       [Return type]   [Runtime Complexity]]
    [[`act.wait()`]                     [void]          [Constant]]
    [[`b = act.wait_until(abs_time)`]   [bool]          [Constant]]
    [[`b = act.wait_for(rel_time)`]     [bool]          [Constant]]
]

[heading Meta Expressions]
[table
    [[Expression]                       [Type]           [Compile Time Complexity]]
    [[`is_movable<ACT>::type`]      [MPL boolean]    [Constant]]
    [[`has_future_if<ACT>::type`]   [MPL boolean]    [Constant]]
    [[`has_thread_if<ACT>::type`]   [MPL boolean]    [Constant]]
]

[heading Expression Semantics]
[
table
    [[Expression]                       [Semantics]]
    [[`act.wait()`]                     [Waits until the `act` completes]]
    [[`b = act.wait_until(abs_time)`]   [Waits until the `act` completes until `abs_time` is not reached]]
    [[`b = act.wait_for(rel_time)`]     [Waits until the `act` completes for a `rel_time` duration]]
]

[heading Models]

* __unique_future__
* __shared_future__
* __unique_joiner__
* __shared_joiner__
* __tp_task__
* __thread__

[endsect]

[/=============================]
[section Concept `FutureBasedACT` ]
[/=============================]

[heading Description]
An __FutureBasedACT__ is a __ACT__ that associates a value expected on the its completion.

[heading Notation]

[variablelist 
    [[`act`]        [An __ACT__]]
    [[`f`]          [A __Nullary__ function with type F]]
    [[`abs_time`]   [A __system_time__]]
    [[`rel_time`]   [A __Duration__]]
    [[`b`]          [A bool]]
    [[`v`]          [T]]
]

[heading Expression requirements]

[heading Description]
A type models an __FutureBasedACT__ if, in adition to being an __ACT__, 
the following expressions are valid:

[table
    [[Expression]                   [Return type]   [Runtime Complexity]]
    [[`b = act.is_ready()`]         [bool]          [Constant]]
    [[`b = act.has_exception()`]    [bool]          [Constant]]
    [[`b = act.has_value()`]        [bool]          [Constant]]
]

[heading Expression Semantics]
[table
    [[Expression]                   [Semantics]]
    [[`b = act.is_ready()`]         [Is true only if the associated state holds a value or an exception ready for retrieval.]]
    [[`b = act.has_exception()`]    [true only if the associated state contains an exception.]]
    [[`b = act.has_value()`]        [true only if the associated state contains a value]]
    [[`v = act.get()`]              [returns the stored value]]
]

[heading Models]

* __unique_future__
* __shared_future__
* __unique_joiner__
* __shared_joiner__
* __tp_task__

[endsect]

[/=============================]
[section Concept `ThreadBasedACT` ]
[/=============================]

[heading Description]

An __ThreadBasedACT__ is a __ACT__ that that provides a thread like interface.

[heading Notation]

[variablelist 
    [[`act`]        [An __ACT__]]
    [[`f`]          [A __Nullary__ function with type F]]
    [[`abs_time`]   [A __system_time__]]
    [[`rel_time`]   [A __Duration__]]
    [[`b`]          [A bool]]
    [[`id`]         [A thread::id]]
]

[heading Expression requirements]
A type models an __FutureBasedACT__ if, in adition to being an __ACT__, 
the following expressions are valid:

[table
    [[Expression]                           [Return type]   [Runtime Complexity]]
    [[`b = act.joinable()`]                 [bool]          [Constant]]
    [[`act.join()`]                         [void]          [Constant]]
    [[`b = act.join_until(abs_time)`]       [bool]          [Constant]]
    [[`b = act.join_for(rel_time)`]         [bool]          [Constant]]
    [[`act.detach()`]                       [void]          [Constant]]
    [[`act.interrupt()`]                    [void]          [Constant]]
    [[`b = act.interruption_requested()`]   [bool]          [Constant]]
]

[heading Expression Semantics]
[table
    [[Expression]                           [Semantics]]
    [[`b = act.joinable()`]                 [true if *this refers to a thread of execution, false  otherwise]]
    [[`act.join()`]                         [waits for the assoiated thread of execution to complete]]
    [[`b = act.join_until(abs_time)`]       [waits for the assoiated thread of execution to complete or the time wait_until has been reach.]]
    [[`b = act.join_for(rel_time)`]         [waits for the assoiated thread of execution to complete or the specified duration rel_time has elapsed ]]
    [[`act.detach()`]                       [the associated thread of execution becomes detached, and no longer has an associated one]]
    [[`act.interrupt()`]                    [request that the associated thread of execution be interrupted the next time it enters 
    one of the predefined interruption points with interruption enabled, or if it is currently blocked in a call to one of the 
    predefined interruption points with interruption enabled]]
    [[`b = act.interruption_requested()`]   [true if interruption has been requested for the associated thread of execution, false  otherwise. ]]
    [[`is = act.get_id()`]                  [an instance of boost::thread::id that represents the associated thread of execution.]]
]

[heading Models]

* __unique_joiner__
* __shared_joiner__
* __thread__
* __tp_task__

[endsect]

[endsect]

[/======================================]
[section Asynchronous Executors Concepts]
[/======================================]

[/==========================================================================================]
[section Concept `AsynchronousExecutor`]
[/==========================================================================================]

[heading Description]

An __AsynchronousExecutor__ executes asynchronously a function and returns an __ACT__ when calling the fork function on it.

[heading Notation]

[variablelist 
    [[`ae`]             [An __AE__]]
    [[`f`]              [A __Nullary__ function with type F]]
    [[`act`]            [An __ACT__]]
]

[heading Expression requirements]
A type models a __AE__ if, the following expressions are valid:

[table
    [[Expression]               [Return type]   [Runtime Complexity]]
    [[`__fork__(ae, f)`]        [__ACT__]       [Constant]]
    [[`get_future<AE>()(act)`]  [__Future__]    [Constant]]
    [[`asynchronous_completion_token<AE, T>::type`] [Model of __ACT__ satisfying `__act_value<ACT>::type` is `T`]             [Constant]]
]

[heading Expression Semantics]
[
table
    [[Expression]               [Semantics]]
    [[`act = __fork__(ae, f)`]  [request `ae` to execute asynchronously the function `f`and returns an __ACT__ ]]
    [[`get_future<AE>()(act)`]  [gets a reference to a __Future__]]
]

[heading Constraints]
The following constraints applies:

* `act_value<__ACT__>::type == boost::result_of<F()::type>`

[heading Models]

* __basic_threader__
* __unique_threader__
* __shared_threader__
* __launcher__
* __shared_launcher__
* __scheduler__
* __tp_pool__


[endsect]


[/==========================================================================================]
[section Concept `IntrinsicAsynchronousExecutor`]
[/==========================================================================================]

[heading Description]

The default fork implementation put some requirements in its __AE__ parameter. This concept is related to this.
An __IAE__ is __AE__ that works well with the default implementation of __fork__.

[heading Notation]

[variablelist 
    [[`ae`]         [An __IAE__]]
    [[`f`]          [A __Nullary__ function]]
]

[heading Expression requirements]
A type models an __IAE__ if, in adition to being an __AE__, 
the following expressions are valid:

[table
    [[Expression]        [Return type]                           [Runtime Complexity]]
    [[`ae.fork(f)`]      [`handle<boost::result_of<F()>::type`]  [Constant]]
]

[heading Meta Expressions]
[table
    [[Expression]                               [Model Of] [Compile Time Complexity]]
    [[`handle<boost::result_of<F()>::type`]     [__ACT__]  [Constant ]]
]

[heading Expression Semantics]
[
table
    [[Expression]              [Semantics]]
    [[`ae.fork(f)`]            [executes asynchronously the function `f` and returns a __handle__ ]]
]


[heading Models]
* __basic_threader__
* __unique_threader__
* __shared_threader__
* __launcher__
* __shared_launcher__
* __scheduler__


[endsect]

[endsect]

[endsect]
