[section:vmd_comparison Variadic Macro Data Library and Boost PP]

Boost PP already has the ability to pass variadic data
as a single macro argument through any of its data types. 
It may then be reasonably asked why there is any need to 
use variadic macros to pass preprocessor data instead.

There are two considerations for using variadic macros:

# The syntax for using variadic macros is the more natural 
  syntax for passing macro arguments. Providing a comma-separated 
  list of data mimics the way macro arguments are usually passed.
# The length of the variadic data does not have to be passed.
  In Boost PP the length does not have to be passed for the 
  sequences and lists, but it is specified as part of an array, and 
  must be separately passed, or known in advance, for tuples. 
  Functionality in this library, however, alleviates this last 
  requirement for tuples.
  
On the other hand there are considerations for using 
Boost PP data types for passing variadic data to macros:

# Boost PP data types can be passed multiple times in any macro 
  whereas variadic macros can only pass its variadic macro data 
  a single time as the final set of arguments to a macro. 
# Boost PP data types are single macro arguments, which fits 
  in well with Boost PP functionality.
# Boost PP data types have a rich set of functionality for 
  manipulating the data in the data type.

Nonetheless I feel that the more natural syntax of 
variadic macro data still provides enough importance for using 
this library's facilities from the end-user's point of view. 
A macro writer can design macros for the end-user which take 
variadic data using variadic macros while internally using 
Boost PP data types to manipulate that data and pass that data 
to other Boost PP macros. This library provides functionality 
to do just that with its macros which convert from variadic macro 
data to Boost PP data types.

[endsect]
