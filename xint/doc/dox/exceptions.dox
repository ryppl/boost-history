/*! \page exceptions Exceptions and Exception-Blocking

\section blocking Exception Blocking

This library includes a mechanism for preventing most exceptions from being
thrown. This was added to give you, the developer using the library, maximum
flexibility in dealing with its functions. You can choose to deal with errors
by catching exceptions or by checking returned values for error codes, on a
case-by-case basis, depending on which would make for easier or more readable
code.

\section howitworks How it Works

When exceptions are blocked, any function from the \c xint::blockable namespace
that would normally throw an exception will return a special value indicating
failure instead. For functions that return an integer, this will be \ref nan
"the Not-a-Number value"; for other functions, the value will be noted in the
documentation.

\warning

When exceptions are blocked, \e any function in the \c xint::blockable namespace
can return Not-a-Number under certain conditions, not just the ones listed as
throwing exceptions directly. An insufficient-memory exception
(<code>xint::overflow_error</code>), for instance, can happen nearly anywhere.

\section howtouse How to Use the Functions

By default, the library throws exceptions when it can't complete the task you've
asked it to do, and there's no other logical way to indicate an error. But when
it is more convenient, most of those exceptions can be blocked, by holding the
\c xint::token object returned by the \c xint::block_exceptions function, and
using the \c blockable::integer type. Here's an example, which can be found in
the \c examples subdirectory as exceptions.cpp:

\include exceptions.cpp

If you need to ensure that exceptions are allowed, in one of your own functions
that might be called with them blocked, you can hold the \c xint::token object
returned by \c xint::allow_exceptions. It works the same way. Alternatively, you
can use the functions in the \c xint::core namespace, which are immune to
exception-blocking.

\c xint::token objects should always be created on the stack, so that they are
guaranteed to be destroyed in reverse order. If they are not, or if they are
copied elsewhere, the results are undefined.
*/
