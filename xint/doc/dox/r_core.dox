/*! \page r_core What's with the \c core namespace?

Several people on the Boost developers' mailing list expressed reservations
about the exception-blocking mechanism and the Not-a-Number value. After a
spirited debate, two indisputable points emerged:

- The existence of a Not-a-Number value forced every function to check its
parameters for it.
- The exception blocking mechanism would cause problems with any library built
on this one, such as the arbitrary-precision real type that I'm certain someone
will build.

I believe that the exception-blocking feature is useful, so I proposed a
compromise: an alternate class mirroring the xint::integer class, but that would
always contain a valid %integer value, and a set of functions to operate on it
that were immune to exception-blocking. Those items now reside in the \c
xint::core namespace.

Functions in the \c core namespace will always throw an exception on any error,
and will only call other functions within the \c core namespace. That ensures
that the Not-a-Number value only needs to be checked for in the \c
xint::core::integer constructor, all but eliminating any speed penalty from it.
It also gives a base of functions that are immune to the exception-blocking
mechanism, which provides firm ground to build other libraries on.

Every function in the \c xint namespace calls its \c core counterpart in a
try/catch construct, allowing it to intercept any exceptions and either pass
them through (if exceptions are allowed) or take some alternate action, such as
returning a Not-a-Number value. That preserves the exception-blocking feature as
well.
*/
