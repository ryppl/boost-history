/*! \page r_cow Why use copy-on-write? I've heard that causes problems with multi-threaded code.

It's the best way I found to return large \c integer objects from functions
efficiently. Some of these numbers can get huge, making copying an expensive
proposition, and even move semantics (at least as emulated by Boost.Move at the
time of this writing) aren't as fast. Copy-on-write also works when storing
items in the standard containers; Boost.Move emulation requires special
move-aware containers.

It \e does cause problems when you try to use the library from multiple threads
at the same time. To deal with that, the library can be compiled in a \ref
threadsafe "thread-safe mode", which ensures that every \c integer gets its own
unique storage and turns on Boost.Move move semantics, among other things. You
still have to ensure that only one thread accesses a particular \c integer at a
time.
*/
