/*! \page threadsafe The \c Threadsafe Template Parameter

The \c Threadsafe parameter, on the integer_t, nothrow_integer_t, and
fixed_integer templates, controls the copy-on-write behavior of the program.
When set to \c false, identical %integer objects are allowed to share storage,
which is more efficient for both CPU power and memory, but which is generally
not safe for multithreaded programs.

That's a simplification though. The only problem multithreaded programs have
with copy-on-write is that one thread might change an object while another is
reading from it. Since the copy-on-write behavior is entirely internal to the
class, no other code can tell when it's safe to make changes to an object. This
is only a problem when more than one thread can access a specific object. So
long as an %integer object is only accessed from the thread that it's created
in, there's no danger.

If you want the speed of copy-on-write (which can be noticeable if you're
dealing with very large numbers), but need to use %integer objects from multiple
threads when one or more might alter them, you can use the \c
force_thread_safety parameter on the object's copy constructor to make a
duplicate of an object with its own unique storage, even if the \c Threadsafe
template parameter is \c false. You'll only need to do that when crossing thread
boundaries.
*/
