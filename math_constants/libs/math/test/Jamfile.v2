

# Copyright Daryle Walker, Hubert Holin, John Maddock 2006 - 2007
# copyright Paul A. Bristow 2006 - 2010
# Distributed under the Boost Software License, Version 1.0. 
# (See accompanying file LICENSE_1_0.txt or copy at 
# http://www.boost.org/LICENSE_1_0.txt.
# \math_toolkit\libs\math\test\jamfile.v2
# Runs all math toolkit tests, functions & distributions,
# and build math examples.

# bring in the rules for testing
import testing ;
import modules ;
import path ;

local ntl-path = [ modules.peek : NTL_PATH ] ;
local gmp_path = [ modules.peek : GMP_PATH ] ;

local boost-path = [ modules.peek : BOOST ] ;

project  
    : requirements 
      <toolset>intel-win:<cxxflags>-nologo 
      <toolset>intel-win:<linkflags>-nologo 
      <toolset>msvc:<warnings>all
      <toolset>msvc:<asynch-exceptions>on
      <toolset>msvc:<cxxflags>/wd4701 # needed for lexical cast - temporary.
      <toolset>borland:<link>static
      <toolset>borland:<runtime-link>static
      <include>../../..
      <toolset>sun:<link>static
      <define>BOOST_ALL_NO_LIB=1
      <include>.
      <include>$(boost-path)/libs/math/test
      <include>$(ntl-path)/include
      <include>$(gmp_path) 
      <include>$(gmp_path)/win32/release
      <include>$(gmp_path)/mpfr 
      <include>$(gmp_path)/mpfr/win32/release
      <include>$(gmp_path)/../mpfr/win32/release
      <include>$(gmp_path)/gmpfrxx
      <include>$(gmp_path)/../gmpfrxx
    ;

if $(ntl-path)
{
   lib ntl : [ GLOB $(ntl-path)/src : *.cpp ] ;
}
else
{
   lib ntl ;
}

explicit ntl ;

if $(gmp_path)
{
   lib mpfr_class : $(gmp_path)/gmpfrxx/gmpfrxx.cpp ;
}
else
{
   lib mpfr_class ;
}

explicit mpfr_class ;

lib gmp : : <search>$(gmp_path)/lib <search>$(gmp_path)/bin 
   <variant>debug:<search>$(gmp_path)/win32/debug <variant>release:<search>$(gmp_path)/win32/release ;
lib mpfr : : <search>$(gmp_path)/mpfr/lib <search>$(gmp_path)/mpfr/bin 
   <variant>debug:<search>$(gmp_path)/mpfr/win32/debug <variant>release:<search>$(gmp_path)/mpfr/win32/release 
   <variant>debug:<search>$(gmp_path)/../mpfr/win32/debug <variant>release:<search>$(gmp_path)/../mpfr/win32/release ;


run test_constants.cpp $(boost-path)/libs/test/build//boost_test_exec_monitor $(boost-path)/libs/thread/build//boost_thread ;
run test_print_info_on_type.cpp ;
run test_constant_generate.cpp ntl/<link>static $(boost-path)/libs/regex/build//boost_regex : : : [ check-target-builds ../config//has_ntl_rr : : <build>no ] : test_constant_generate_ntl ;
run test_constant_generate.cpp mpfr_class/<link>static mpfr gmp $(boost-path)/libs/regex/build//boost_regex : : : [ check-target-builds ../config//has_mpfr_class : : <build>no ] <define>USE_MPFR : test_constant_generate_mpfr ;
