// Generic Geometry Library test file
//
// Copyright Barend Gehrels, 1995-2009, Geodan Holding B.V. Amsterdam, the Netherlands.
// Copyright Bruno Lalande 2008, 2009
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include <boost/array.hpp>
#include <boost/test/included/test_exec_monitor.hpp>
#include <boost/test/floating_point_comparison.hpp>

#include <ggl/core/is_linear.hpp>
#include <ggl/core/point_type.hpp>

#include <ggl/algorithms/assign.hpp>
#include <ggl/algorithms/centroid.hpp>
#include <ggl/algorithms/make.hpp>
#include <ggl/extensions/gis/io/wkt/read_wkt.hpp>
#include <ggl/geometries/geometries.hpp>

#include <ggl/multi/geometries/multi_polygon.hpp>
#include <ggl/multi/algorithms/centroid.hpp>
#include <ggl/extensions/gis/io/wkt/read_wkt_multi.hpp>


#include <test_common.hpp>

struct check_result
{
    template <typename Point, typename T>
    static void apply(Point const& p, T const& x, T const& y)
    {
        BOOST_CHECK_CLOSE(double(ggl::get<0>(p)), double(x), 0.001);
        BOOST_CHECK_CLOSE(double(ggl::get<1>(p)), double(y), 0.001);
    }
};



template <typename Geometry, typename T>
void test_centroid(std::string const& wkt, T const& x, T const& y)
{
    Geometry geometry;
    ggl::read_wkt(wkt, geometry);
    typedef typename ggl::point_type<Geometry>::type point_type;
    point_type c;
    ggl::centroid(geometry, c);

    check_result::apply(c, x, y);
    std::cout << std::setprecision(16) << ggl::get<0>(c) << " " << ggl::get<1>(c) << std::endl;

    ggl::centroid(geometry, c, ggl::strategy::centroid::bashein_detmer
        <
            point_type,
            point_type,
            float
        >());
    check_result::apply(c, x, y);
}


template <typename P>
void test_2d()
{
    test_centroid<ggl::multi_polygon<ggl::polygon<P> > >(
"MULTIPOLYGON(((426062.718750 4527794.500000,426123.593750 4527731.500000"
",426113.000000 4527700.000000,426113.500000 4527693.500000,426115.156250 4527671.500000"
",426133.562500 4527584.500000,426135.093750 4527569.000000,426124.781250 4527558.000000"
",426103.531250 4527547.000000,426072.937500 4527538.000000,426003.500000 4527535.000000"
",425972.125000 4527532.500000,425950.968750 4527531.000000,425918.750000 4527528.500000"
",425894.031250 4527517.000000,425876.062500 4527504.500000,425870.718750 4527484.000000"
",425858.406250 4527442.500000,425842.812500 4527414.500000,425816.343750 4527397.500000"
",425752.687500 4527384.500000,425692.468750 4527369.500000,425658.312500 4527349.500000"
",425624.781250 4527307.000000,425605.593750 4527260.500000,425598.218750 4527213.500000"
",425595.968750 4527167.500000,425582.750000 4527125.000000,425548.187500 4527064.000000"
",425535.843750 4527027.000000,425537.062500 4526990.000000,425534.812500 4526943.500000"
",425525.843750 4526904.000000,425500.750000 4526856.000000,425461.031250 4526811.000000"
",425450.468750 4526798.500000,425381.281250 4526823.500000,425362.468750 4526830.500000"
",425329.531250 4526848.000000,425298.218750 4526883.500000,425291.375000 4526897.000000"
",425268.781250 4526923.000000,425243.656250 4526945.500000,425209.218750 4526971.000000"
",425172.312500 4526990.000000,425118.531250 4527028.000000,425104.062500 4527044.500000"
",425042.250000 4527090.500000,424980.875000 4527126.500000,424925.312500 4527147.500000"
",424881.250000 4527148.000000,424821.156250 4527147.000000,424698.937500 4527125.500000"
",424610.843750 4527121.000000,424566.687500 4527126.500000,424468.906250 4527139.000000"
",424426.312500 4527141.000000,424410.562500 4527142.000000,424333.343750 4527130.500000"
",424261.093750 4527110.500000,424179.406250 4527073.000000,424024.593750 4527012.000000"
",423947.250000 4526987.500000,423902.187500 4526973.500000,423858.093750 4526961.000000"
",423842.156250 4526951.000000,423816.281250 4526935.000000,423799.000000 4526910.500000"
",423776.968750 4526905.500000,423765.125000 4526911.500000,423739.093750 4526927.000000"
",423692.781250 4526946.500000,423636.500000 4526976.500000,423608.093750 4527008.000000"
",423570.937500 4527016.000000,423537.000000 4527011.500000,423505.500000 4526996.000000"
",423480.875000 4526994.500000,423457.375000 4527012.000000,423434.656250 4527021.000000"
",423367.625000 4527008.500000,423263.375000 4526998.000000,423210.843750 4526993.500000"
",423157.531250 4526996.500000,423110.937500 4526994.000000,423071.031250 4526984.000000"
",423048.968750 4526984.500000,423032.218750 4526994.500000,423254.968750 4527613.500000"
",423889.906250 4528156.000000,424585.656250 4528050.500000,425479.375000 4527974.000000"
",425795.562500 4527867.000000,426062.718750 4527794.500000)))",
        424531.181281519, 4527519.8123329);
}



int test_main(int, char* [])
{
    test_2d<ggl::point_xy<double> >();
//    test_2d<boost::tuple<float, float> >();
    test_2d<ggl::point_xy<float> >();

    return 0;
}
