[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Concepts]
[heading Introduction]
In C++, concepts are essentially an expression of /requirement/ on types. Such
requirements may state, for example, that a type have a default or copy
constructor, should support pre- and post-increment operators, or a have
a `swap()` member function. A type type is said to be a /model/ of a concept
if it meets that concept's requirements.

For example, the concept [StdDefaultConstructible] requires that a type has a
default constructor. Types that model this concept include (but are not limited
to) `int`, `float`, `std::complex`, `std::pair`, `std::string`, etc. Note that
the concept makes no mention of the /initial values/ of default constructible
objects, only that the expression of default construction is valid (and compiles).

Concepts are developed explicitly for a library. As such, the standard library
has groups of concepts for containers and iterators, and general purpose concepts
used by both of these groups. Within each group concepts are typically designed
/hierarchically/, where more specific concepts /refine/ general concepts. The
notion of /refinement/ is similar to /inheritance/ with the specific concept
including all of the requirements of the general.

[heading C++0x]
The newest version of C++ introduces explicit language support for concepts
and concept checking. Additionally, many concepts are explicitly realized
in the standard library itself. These concepts further refine those originally
defined for the Standard Template Library, and the type requirements in the
C++ standard. For example, the current [StdCopyConstructible] concept also
requires that a type have a destructor. In the future the concept is made
explicit as `Destructible`.

Where appropriate, these documents describe the differences between the current
and future standards. These sections are informative (i.e., non-normative) and
are only provided for perspective, not reference.

[section Utilities]
[include utilities/utilities.qbk]
[endsect]

[section Containers]
[include containers/containers.qbk]
[endsect]

[section Iterators]
[include iterators/iterators.qbk]
[endsect]

[section Functors]
[include functors/functors.qbk]
[endsect]

[section Streams]
[note
Curiously, there is not concept documentation for streams - at least none that
I've ever seen. It might be a nice  exercise to provide concept documents for
stream types (e.g. InputStreamable and OutputStreamable).
]
[endsect]

[endsect]