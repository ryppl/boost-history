[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Assignable]
A type `T` is said to be /assignable/ if the value of one instance, `u`, can be copied
to the value of another, `t` through an assignment expression. The type of `u` must
be `T` or `const T`.

[heading Notation]
[table
    [[Expression] [Description]]
    [[T] [An [StdAssignable] type.]]
    [[t] [An instance of type `T`.]]
    [[u] [An instance of type 'const `T`.]]
]

[heading Requirements]
[table
    [[Expression] [Return Type] [Post-condition]]
    [
        [`t = u`]
        [`T&`]
        [`t` is equivalent to `u`.]
    ]
]

[heading C++0x]
In the next version of the C++ standards, the [StdAssignable] concept has been refined
into a set of two distinct concepts: `CopyAssignable` and `MoveAssignable`. The
`CopyAssignable` concept is defined as:

    auto concept CopyAssignable<typename T, typename U = T>
    {
        typename result_type;
        result_type operator =(T&, const U&);
    }

The `result_type` associated type is used to indicate that the return type is not
required (as above) to be `T&` and could be any type.

[endsect]