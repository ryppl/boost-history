[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Default Constructible]
A type `T` is /default constructible/ if objects of type `T` can be constructed
without providing any arguments to a constructor. A type that is default
constructible has either a compiler-generated or user-defined constructor
that can be called without arguments.

[note
[DefaultConstructible] types may or may not initialize objects to a default value
or state depending on the type itself and the syntax used for construction. Objects
that are not initialized to a default are /uninitialized. Reading from or otherwise
using uninitialized objects often results in undefined behavior.
]

[heading Refinement of]
[Destructible]

[heading Notation]
The following expressions are used in this document:
[table
    [[Expression] [Description]]
    [[T] [A [DefaultConstructible] type.]]
    [[x] [An object of type `T`.]]
]

[heading Requirements]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Default Constructor]
        [`T x;`]
        []
        [
            The object `x` is constructed as an object of type `T` and may or may not
            initialized to a default value[footnote This syntax leaves fundamental
            types uninitialized while class types are default-initialized.].
        ]
    ]
    [
        [Default Constructor]
        [`T()`]
        [`T`]
        [
            Constructs an object of type `T` and is initializes it to its default
            value[footnote This syntax will zero-initialize scalar and other
            fundamental types and default-initialize others.].
        ]
    ]
]

[heading Notes]
If the default constructor of a class type `T` is `private`, then the `T` does not
model the [DefaultConstructible] concept.

[heading Examples]
A type `T` is required to be [DefaultConstructible] when an object of type `T` is
declared or when the default constructor of `T` is invoked without arguments.

    // Declaring a variable without explicitly calling a constructor requires a
    // T to be DefaultConstructible.
    template <typename T>
    void default_declare()
    {
        T x;
    }

    // Explcitly invoking the default constructor (or a constructor that can
    // be invoked without arguments) requires T to be DefaultConstructible.
    template <typename T>
    T default_construct()
    {
        return T();
    }

    // Allocating a new object of type T, invoking the default constructor
    // requires T to be DefaultConstructible.
    template <typename T>
    T* dynamic_default_construct()
    {
        return new T(); // This is equivalent to "new T"
    }

[endsect]