[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Container]
A type `C` is a /container/ if an object of type `C` is capble of storing other 
objects. Types modeling the container concept are associated with an /iterator/,
a type of object that can be used to iterate over the elements of the container.

The elements of a container are not guaranteed to be stored in any particular
order, nor is the order of visitation guaranteed to be the same between 
iterations. 

[heading Refinement Of]
[StdAssignable]

[heading Notation]
[table
    [[Expression] [Description]]
    [[`C`] [A type that models the [StdContainer] concept.]]
    [[`c`, `d`] [Objects of type `C`.]]
    [[`T`] [An object stored by `C`.]]
]

[heading Associated Types]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Value Type]
        [`C::value_type`]
        [`T`]
        [
            The type of the stored object or value.
            
            *Requirements:* `T` must model the [StdAssignable] concept.
        ]
    ]
    [
        [Reference Type]
        [`C::reference`]
        [lvalue of `T`]
        [
            A reference type to the stored value type.
        ]
    ]
    [
        [Const Reference Type]
        [`C::connst_reference`]
        [`const` lvalue of `T`]
        [
            A `const` reference type to the stored value type.
        ]
    ]
    [
        [Iterator Type]
        [`C::iterator`]
        [iterator type pointing to `T`]
        [
            The type of object used to iterate over elements of `C`.
            The iterator type is convertible to the const iterator type. 
            
            *Requirements:* The iterator type may not be a model of the 
            [StdOutputIterator] concept.
        ]
    ]
    [
        [Const Iterator Type]
        [`C::const_iterator`]
        [iterator type pointing to `const T`]
        [
            The type of object used to iterate over elements of `C`.
            
            *Requirements:* The iterator type may not be a model of the 
            [StdOutputIterator] concept.
        ]
    ]
]

[heading Requirements]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Default Constructor]
        [
            C c;[br]
            C()
        ]
        []
        [
            Construct a new container of type `C` with no sotred elements.
            
            *Postcondition:* The created container has `size() == 0`.
            
            *Complexity:* Constant.
        ]
    ]
    [
        [Default Constructor]
        [
            C c(d);[br]
            C c = d;[br]
            C(d)
        ]
        []
        [
            Construct a new container of type `C` with a copy of the contents
            of container `d`.
            
            *Postcondition:* The constructed container `c` is equivalent to `d`,
            containing a copy of each of `d`'s elements.
            
            *Complexity:* Linear in `d.size()`.
        ]
    ]
    [
        [Destructor]
        [`c.~C()`]
        [`void`]
        [
            The destructor of every element in `c` is called and any memory
            allocated by the container is deallocated.
            
            *Complexity:* Linear in `c.size()`.
        ]
    ]
    [
        [Beginning of Range]
        [`c.begin()`]
        [
            `iterator` if `c` is mutable.[br]
            `const_iterator if `c` is `const`.
        ]
        [
            Returns an iterator pointing to the first element in the container.
            
            *Postcondition:* If `c` is not empty, `c.begin()` is dereferenceable.
            Otherwise, it is past the end.
            
            *Complexity:* Amortized constant.
        ]
    ]
    [
        [End of Range]
        [`c.end()`]
        [
            `iterator` if `c` is mutable.[br]
            `const_iterator if `c` is `const`.
        ]
        [
            Returns an iterator pointing past the end of the container.
            
            *Postcondition:* `c.end()` is past the edn of the array.
            
            *Complexity:* Amortized constant.
        ]
    ]
    [
        [Size]
        [`c.size()`]
        [
            `size_type`
        ]
        [
            Returns the size of the container `c`, frequently meaning the number
            of elements stored in the container.
            
            *Postcondition:* `c.size() >= 0` and `c.size() <= `c.max_size()`.
            
            *Complexity:* Lineaar in `c.size()`.
        ]
    ]
    [
        [Maximum Size]
        [`c.max_size()`]
        [
            `size_type`
        ]
        [
            Returns the largest possible size of the container, also the
            maximum number of elements that `c` can store.
            
            *Postcondition:* `c.max_size() >= 0` and `c.max_size() >= c.size()`.
            
            *Complexity:* Amortized constant.
        ]
    ]
    [
        [Empty]
        [`c.empty()`]
        [
            Convertible to `bool`.
        ]
        [
            Returns `true` if the container `c` is empty, also equivalent to
            `c.size() == 0`.
            
            *Complexity:* Amortized constant.
        ]
    ]
    [
        [Swap]
        [`c.empty(d)`]
        []
        [
            Swap the contents of container `c` with `d`.
            
            *Requirements:* `d` must be of type `C`.
        ]
    ]
]

[heading Examples]

    template <typename C>
    typename C::size_type container_size()
    {
        return c.size();
    }

[endsect]