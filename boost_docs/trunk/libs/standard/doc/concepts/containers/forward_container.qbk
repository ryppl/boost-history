[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Forward Container]
A type `C` is a /forward container/ if an object of type `C` is a [StdContainer]
that stores its objects in a definite order, and the order of objects do not
spontaneously change from iteration to iteration. The definite ordering of objects
within the forward container allows the definition of equality and lexicographical
ordering (if the contained type is [StdEqualityComparable] and [StdLessThanComparable]
respectively).

[heading Refinement Of]
[StdEqualityComparable], [StdLessThanComparable], [StdContainer]

[heading Notation]
[table
    [[Expression] [Description]]
    [[`C`] [A type that models the [StdContainer] concept.]]
    [[`c`, `d`] [Objects of type `C`.]]
    [[`T`] [The type of an object stored by `C`.]]
]

[heading Requirements]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Equality Comparison]
        [
            `c == d`
        ]
        [Convertible to `bool`]
        [
            Returns `true` if the container `c` is element-wise equivalent
            to `d`.
            
            *Requirements:* The type of stored objects `T` is [StdEqualityComparable].
            
            *Complexity:* Linear in `c.size()`.
        ]
    ]
    [
        [Less-Than Comparison]
        [
            `c < d`
        ]
        [Convertible to `bool`]
        [
            Returns `true` if the container `c` is element-wise less-than `d`.
            
            *Requirements:* The type of stored objects `T` is [StdLessThanComparable].
            
            *Complexity:* Linear in `c.size()`.
        ]
    ]
]

[heading Examples]

[endsect]