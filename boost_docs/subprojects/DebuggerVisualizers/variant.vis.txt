;------------------------------------------------------------------------------
;  boost::variant
;
;  Copyright (c) 2009 Dmitry Vinogradov
;  Copyright (c) 2009 Steven Watanabe
;
;  Distributed under the Boost Software License, Version 1.0. (See
;  accomapnying file LICENSE_1_0.txt or copy at
;  http://www.boost.org/LICENSE_1_0.txt)
;------------------------------------------------------------------------------

boost::variant<boost::detail::variant::over_sequence<*>,*> {
    preview ([$e,!])
    children (
        #(
            which_ : $e.which_,
            #(storage_ : $e.storage_)
        )
    )
}

boost::variant<boost::detail::variant::recursive_flag<boost::detail::variant::over_sequence<*> >,*> {
    preview ([$e,!])
    children (
        #(
            which_ : $e.which_,
            #(storage_ : $e.storage_)
        )
    )
}

boost::variant<boost::detail::variant::recursive_flag<*>,*,*,*,*,*,*,*,*,*>|boost::variant<*,*,*,*,*,*,*,*,*,*> {
    preview (
        #(
            #switch($e.which_)
            #case 0 ( *($T1 *)&($e.storage_.data_) )
            #case 1 ( *($T2 *)&($e.storage_.data_) )
            #case 2 ( *($T3 *)&($e.storage_.data_) )
            #case 3 ( *($T4 *)&($e.storage_.data_) )
            #case 4 ( *($T5 *)&($e.storage_.data_) )
            #case 5 ( *($T6 *)&($e.storage_.data_) )
            #case 6 ( *($T7 *)&($e.storage_.data_) )
            #case 7 ( *($T8 *)&($e.storage_.data_) )
            #case 8 ( *($T9 *)&($e.storage_.data_) )
            #case -1 ( **($T1 **)&($e.storage_.data_) )
            #case -2 ( **($T2 **)&($e.storage_.data_) )
            #case -3 ( **($T3 **)&($e.storage_.data_) )
            #case -4 ( **($T4 **)&($e.storage_.data_) )
            #case -5 ( **($T5 **)&($e.storage_.data_) )
            #case -6 ( **($T6 **)&($e.storage_.data_) )
            #case -7 ( **($T7 **)&($e.storage_.data_) )
            #case -8 ( **($T8 **)&($e.storage_.data_) )
            #case -9 ( **($T9 **)&($e.storage_.data_) )
            #default (#([actual members] : [$e,!]))
            #except (#([actual members] : [$e,!]))
        )
    )
    children
    (
        #(
        value :
            #switch($e.which_)
            #case 0 ( *($T1 *)&($e.storage_.data_) )
            #case 1 ( *($T2 *)&($e.storage_.data_) )
            #case 2 ( *($T3 *)&($e.storage_.data_) )
            #case 3 ( *($T4 *)&($e.storage_.data_) )
            #case 4 ( *($T5 *)&($e.storage_.data_) )
            #case 5 ( *($T6 *)&($e.storage_.data_) )
            #case 6 ( *($T7 *)&($e.storage_.data_) )
            #case 7 ( *($T8 *)&($e.storage_.data_) )
            #case 8 ( *($T9 *)&($e.storage_.data_) )
            #case -1 ( **($T1 **)&($e.storage_.data_) )
            #case -2 ( **($T2 **)&($e.storage_.data_) )
            #case -3 ( **($T3 **)&($e.storage_.data_) )
            #case -4 ( **($T4 **)&($e.storage_.data_) )
            #case -5 ( **($T5 **)&($e.storage_.data_) )
            #case -6 ( **($T6 **)&($e.storage_.data_) )
            #case -7 ( **($T7 **)&($e.storage_.data_) )
            #case -8 ( **($T8 **)&($e.storage_.data_) )
            #case -9 ( **($T9 **)&($e.storage_.data_) )
            #default ( *(void*)0 )
            #except ( *(void*)0 ),
            #([actual members] : [$e,!])
        )
    )
}

boost::recursive_wrapper<*> {
    preview ([*$e.p_])
}
