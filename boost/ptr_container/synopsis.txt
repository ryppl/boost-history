namespace boost
{
    template< typename T, typename  Allocator = std::allocator<T*> >
    class ptr_container 
    {
    public: // typedefs
        typedef  std::auto_ptr<T>                             auto_type;
        typedef  const auto_type                              const_auto_type;
        typedef  T                                            value_type;
        typedef  T&                                           reference;
        typedef  const T&                                     const_reference;
        typedef  <b>implementation defined</b>                iterator;
        typedef  <b>implementation defined</b>                const_iterator;
        typedef  <b>implementation defined</b>                difference_type; 
        typedef  <b>implementation defined</b>                size_type;
	typedef  Allocator                                    allocator_type;
	typedef  typename Allocator::pointer                  pointer;
	typedef  typename Allocator::const_pointer            const_pointer; 
        typedef  std::reverse_iterator<iterator>              reverse_iterator;
        typedef  std::reverse_iterator<const_iterator>        const_reverse_iterator;
        
    public: // construct/copy/destroy
        ptr_vector();
        ptr_vector( size_type n );
        ptr_vector( ptr_vector& r );
        ptr_vector( release_type r );
        template< typename InputIterator >
        ptr_vector( InputIterator first, InputIterator last );
        ~ptr_vector();
        ptr_vector& operator=( ptr_vector& r );	
	template< typename InputIterator >
        assign( InputIterator first, InputIterator last );
        template< typename InputIterator >
        assign( size_type n, const value_type u );
        allocator_type get_allocator();                                      

    public: // iterators
        iterator                begin();
        const_iterator          begin() const;
        iterator                end();
        const_iterator          end() const;
        reverse_iterator        rbegin();
        const_reverse_iterator  rbegin();
        reverse_iterator        rend();
        const_reverse_iterator  rend();
	
    public: // capacity
        size_type  size() const;
        size_type  max_size() const;
        //void     resize( size_type sz, ptr_type = new value_type() );
        size_type  capacity() const;
	bool       empty() const;	
        void       reserve( size_type n );
  
    public: // element access
        reference        operator[]( size_type n );
        const_reference  operator[]( size_type n ) const;
        reference        at( size_type n );
        const_reference  at( size_type n ) const;
        reference        front();
        const_reference  front() const;
        reference        back();
        const_reference  back() const;
    
    public: // modifiers
        void      push_back( ptr_type x );
        void      pop_back();
	iterator  insert( iterator position, const_reference x );
	void      insert( iterator position, size_type n, ptr_type x );
        template< typename InputIterator >
        void      insert( iterator position, InputIterator first, InputIterator last ); 
        iterator  erase( iterator position );
        iterator  erase( iterator first, iterator last );
        void      swap( ptr_vector& r );
        void      clear():
	
    public: // pointer container requirements
	
        ptr_vector  clone();
        auto_type   release_back();
        auto_type   release( iterator position );
  
    }; //  class 'ptr_vector'

    template <typename T, typename Allocator>
    bool operator==( const ptr_vector<T,Allocator>& x,
	             const ptr_vector<T,Allocator>& y);
    
    template <typename T, typename Allocator>
    bool operator<( const ptr_vector<T,Allocator>& x,
		    const ptr_vector<T,Allocator>& y);
    
    template <typename T, typename Allocator>
    bool operator!=( const ptr_vector<T,Allocator>& x,
	             const ptr_vector<T,Allocator>& y);
    
    template <typename T, typename Allocator>
    bool operator>( const ptr_vector<T,Allocator>& x,
		    const ptr_vector<T,Allocator>& y);
   
    template <typename T, typename Allocator>
    bool operator>=( const ptr_vector<T,Allocator>& x,
	             const ptr_vector<T,Allocator>& y);
    
    template <typename T, typename Allocator>
    bool operator<=( const ptr_vector<T,Allocator>& x,
	             const ptr_vector<T,Allocator>& y);

    template< typename T, typaname Allocator  >
    void swap( ptr_vector<T,Allocator>& x, ptr_vector<T,Allocator>& y );
} // namespace 'boost'  

#endif
