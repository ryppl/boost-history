// Copyright (c) 2003 Daniel Wallin

// Permission is hereby granted, free of charge, to any person or organization 
// obtaining a copy of the software covered by this license (the "Software") 
// to use, reproduce, display, distribute, execute, and transmit the Software, 
// and to prepare derivative works of the Software, and to permit others
// to do so, all subject to the following:

// The copyright notice in the Software and this entire statement, including 
// the above license grant, this restriction and the following disclaimer, 
// must be included in all copies of the Software, in whole or in part, and 
// all derivative works of the Software, unless such copies or derivative 
// works are solely in the form of machine-executable object code generated by 
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

#ifndef BOOST_LANGBINDING_REGISTRY
#define BOOST_LANGBINDING_REGISTRY

#include <memory>
#include <boost/langbinding/config.hpp>
#include <boost/enable_shared_from_this.hpp>

// language descriptor concept
//
// typedef /* impl */ type_info
// typedef /* impl */ param_type
// typedef /* impl */ args_type
//
// param_type extract_param(args_type, index_type)

namespace boost { namespace langbinding {

   namespace detail {

      template<class T>
      struct registry_impl;

      template<class T>
      struct lvalue_chain;

      template<class T>
      struct rvalue_chain;

      template<class T>
      struct registration;
   }
  
   template<class T> 
   struct rvalue_data_base;

   template<class T>
   class BOOST_LANGBINDING_DECL registry_base
   {
   public:
      typedef typename T::type_info type_info_;
      typedef typename T::param_type param_type;

      typedef void*(*lvalue_from_function)(const param_type&, int&);
      typedef void*(*rvalue_from_stage1)(const param_type&, int&);
      typedef void(*rvalue_from_stage2)(const param_type&, rvalue_data_base<T>*);

      const detail::registration<T>* lookup(const type_info_&);

      const detail::registration<T>* query(const type_info_&);

      void insert(const type_info_&, lvalue_from_function);

      void insert(const type_info_& x, 
         rvalue_from_stage1 convertible, rvalue_from_stage2 convert);

      void export_converters(const type_info_&, registry_base&);

      void export_converters(registry_base&);

      registry_base(const registry_base&);
      registry_base& operator=(const registry_base&);

      virtual ~registry_base();

   protected:
      registry_base();

   private:
      std::auto_ptr<detail::registry_impl<T> > m_pimpl;
   };

   template<class T>
   class registry 
      : public registry_base<T>
      , public enable_shared_from_this<registry<T> >
   {
   public:
      static registry& instance();
      ~registry();

   private:
      registry();
   };

}}

#endif

