<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Sparse Vector Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Sparse Vector Related</h1>

<h2><a name="sparse_vector"></a>Sparse Vector</h2>

<h4>Description</h4>

<p>The templated class <code>sparse_vector&lt;T, F, A&gt; </code>is
the base container adaptor for sparse vectors.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::sparse_vector&lt;double&gt; v (3, 3);
    for (int i = 0; i &lt; v.size (); ++ i) 
        v (i) = i;
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header vector_sp.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>T</tt> </td>
        <td>The type of object stored in the sparse vector. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>F</tt></td>
        <td>Functor describing the storage organization.</td>
        <td><tt>forward</tt></td>
    </tr>
    <tr>
        <td><tt>A</tt></td>
        <td>The type of the adapted array.</td>
        <td><tt>compressed_array&lt;std::size_t, T&gt;</tt></td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;sparse_vector&lt;T, F, A&gt; &gt;</code>
</p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>sparse_vector ()</code> </td>
        <td>Allocates a <code>sparse_vector </code>that holds at
        most zero elements.</td>
    </tr>
    <tr>
        <td><code>sparse_vector (size_type size, size_type
        non_zeroes)</code></td>
        <td>Allocates a <code>sparse_vector </code>that holds at
        most <code>size</code> elements.</td>
    </tr>
    <tr>
        <td><code>sparse_vector (const sparse_vector &amp;v)</code></td>
        <td>The copy constructor.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector (size_type non_zeroes, const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended copy constructor.</td>
    </tr>
    <tr>
        <td><code>void resize (size_type size, size_type
        non_zeroes)</code></td>
        <td>Reallocates a <code>sparse_vector </code>to hold at
        most <code>size</code> elements. The content of the <code>sparse_vector
        </code>is preserved.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the <code>sparse_vector</code>. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>vector_range_type project (size_type start,
        size_type stop)</code></td>
        <td>Returns a sub vector ranging from the <tt>start</tt>-th
        to the <tt>stop</tt>-th element.</td>
    </tr>
    <tr>
        <td><code>vector_range_type project (const range &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>sparse_vector &amp;operator = (const
        sparse_vector &amp;v)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>sparse_vector &amp;assign_temporary
        (sparse_vector &amp;v)</code></td>
        <td>Assigns a temporary. May change the sparse vector <code>v</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector &amp;assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a vector expression to the sparse vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sparse vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sparse vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sparse vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        sparse_vector &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sparse vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        sparse_vector &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sparse
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (sparse_vector &amp;v)</code></td>
        <td>Swaps the contents of the sparse vectors. </td>
    </tr>
    <tr>
        <td><code>void clear ()</code></td>
        <td>Clears the sparse vector.</td>
    </tr>
    <tr>
        <td><code>void insert (size_type i, const_reference_type
        t)</code></td>
        <td>Inserts the value <tt>t</tt> at the <tt>i</tt>-th
        element.</td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <tt>sparse_vector</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <tt>sparse_vector</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <tt>sparse_vector</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <tt>sparse_vector</tt>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Array based sparse vector class 
    template&lt;class T, class F, class A&gt;
    class sparse_vector: 
        public vector_expression&lt;sparse_vector&lt;T, F, A&gt; &gt; {
    public:      
        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T &amp;const_reference_type;
        typedef T &amp;reference_type;
        typedef F functor_type;
        typedef A array_type;
        typedef sparse_vector&lt;T, F, A&gt; self_type;
        typedef vector_const_reference&lt;self_type&gt; const_closure_type;
        typedef vector_reference&lt;self_type&gt; closure_type;
        typedef vector_range&lt;self_type&gt; vector_range_type;
        typedef typename A::const_iterator const_iterator_type;
        typedef typename A::iterator iterator_type;
        typedef sparse_tag storage_category;

        // Construction and destruction
        sparse_vector ();
        sparse_vector (size_type size, size_type non_zeroes);
        sparse_vector (const sparse_vector &amp;v);
        template&lt;class AE&gt;
        sparse_vector (size_type non_zeroes, const vector_expression&lt;AE&gt; &amp;ae);

        // Resizing
        void resize (size_type size, size_type non_zeroes);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        vector_range_type project (size_type start, size_type stop);
        vector_range_type project (const range &amp;r);

        // Assignment
        sparse_vector &amp;operator = (const sparse_vector &amp;v);
        sparse_vector &amp;assign_temporary (sparse_vector &amp;v);
        template&lt;class AE&gt;
        sparse_vector &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_vector &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_vector &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_vector &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_vector &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_vector &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        sparse_vector &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (sparse_vector &amp;v);
	friend void swap (sparse_vector &amp;v1, sparse_vector &amp;v2);

        // Element insertion
        void clear ();
        void insert (size_type i, const_reference_type t);

        class const_iterator;
        class iterator;

        // Element lookup
        const_iterator_type find (size_type i) const;
        iterator_type find (size_type i);

        // Iterators simply are pointers.

        class const_iterator:
            public container_const_reference&lt;sparse_vector&gt;,
            public bidirectional_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef std::bidirectional_iterator_tag iterator_category;

            // Construction and destruction
            const_iterator (const sparse_vector &amp;v, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;sparse_vector&gt;,
            public bidirectional_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef std::bidirectional_iterator_tag iterator_category;

            // Construction and destruction
            iterator (sparse_vector &amp;v, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>
</body>
</html>
