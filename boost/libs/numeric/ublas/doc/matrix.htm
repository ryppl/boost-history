<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Matrix Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Matrix Related</h1>

<h2><a name="matrix"></a>Matrix</h2>

<h4>Description</h4>

<p>The templated class <code>matrix&lt;T, F, A&gt; </code>is the
base container adaptor for dense matrices.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    for (int i = 0; i &lt; m.size1 (); ++ i) 
        for (int j = 0; j &lt; m.size2 (); ++ j) 
	    m (i, j) = 3 * i + j;
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>T</tt> </td>
        <td>The type of object stored in the matrix. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>F</tt></td>
        <td>Functor describing the storage organization.</td>
        <td><tt>row_major&lt;&gt;</tt></td>
    </tr>
    <tr>
        <td><tt>A</tt></td>
        <td>The type of the adapted array.</td>
        <td><tt>unbounded_array&lt;T&gt;</tt></td>
    </tr>
</table>

<h4>Model of</h4>

<p>Matrix. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Matrix.</p>

<h4>Public base classes</h4>

<p><code>matrix_expression&lt;matrix&lt;T, F, A&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix ()</code> </td>
        <td>Allocates an uninitialized <code>matrix </code>that
        holds at most zero rows of zero elements.</td>
    </tr>
    <tr>
        <td><code>matrix (size_type size1, size_type size2)</code></td>
        <td>Allocates an uninitialized <code>matrix </code>that
        holds at most <code>size1 </code>rows of <code>size2 </code>elements.</td>
    </tr>
    <tr>
        <td><code>matrix (const matrix &amp;m)</code></td>
        <td>The copy constructor.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix (const matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended copy constructor.</td>
    </tr>
    <tr>
        <td><code>void resize (size_type size1, size2)</code></td>
        <td>Reallocates a <code>matrix </code>to hold at most <code>size1
        </code>rows of <code>size2 </code>elements. The content
        of the <code>matrix </code>is not preserved.</td>
    </tr>
    <tr>
        <td><code>size_type size1 () const</code></td>
        <td>Returns the number of rows. </td>
    </tr>
    <tr>
        <td><code>size_type size2 () const</code></td>
        <td>Returns the number of columns. </td>
    </tr>
    <tr>
        <td><code>const_reference_type operator () (size_type i,
        size_type j) const</code></td>
        <td>Returns a <code>const </code>reference of the <tt>j</tt>-th
        element in the<tt> i</tt>-th row. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i,
        size_type j)</code></td>
        <td>Returns a reference of the <tt>j</tt>-th element in
        the<tt> i</tt>-th row. </td>
    </tr>
    <tr>
        <td><code>matrix_row_type operator [] (size_type i)</code></td>
        <td>Returns a sub vector containing the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>matrix_row_type row (size_type i)</code></td>
        <td>Returns a sub vector containing the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>matrix_column_type column (size_type j)</code></td>
        <td>Returns a sub vector containing the <tt>j</tt>-th
        column.</td>
    </tr>
    <tr>
        <td><code>matrix_range_type project (size_type start1,
        size_type stop1, size_type start2, size_type stop2)</code></td>
        <td>Returns a sub matrix ranging from the <tt>start1</tt>-th
        to the <tt>stop1</tt>-th row and from the <tt>start2</tt>-th
        to the <tt>stop2</tt>-th column. </td>
    </tr>
    <tr>
        <td><code>matrix_range_type project (const range &amp;r1,
        const range &amp;r2)</code></td>
        <td>Returns a sub matrix.</td>
    </tr>
    <tr>
        <td><code>matrix &amp;operator = (const matrix &amp;m)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix &amp;assign_temporary (matrix &amp;m)</code></td>
        <td>Assigns a temporary. May change the matrix <code>m</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix &amp;operator = (const matrix_expression&lt;AE&gt;
        &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix &amp;assign (const matrix_expression&lt;AE&gt;
        &amp;ae)</code></td>
        <td>Assigns a matrix expression to the matrix. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix &amp;operator += (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the matrix
        expression to the matrix.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix &amp;plus_assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a matrix expression to the matrix. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix &amp;operator -= (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the matrix
        expression from the matrix.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix &amp;minus_assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a matrix expression from the matrix. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the matrix
        with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrix &amp;m)</code></td>
        <td>Swaps the contents of the matrices. </td>
    </tr>
    <tr>
        <td><code>void clear ()</code></td>
        <td>Fills the matrix with the value <tt>0</tt>.</td>
    </tr>
    <tr>
        <td><code>void insert (size_type i, size_type j,
        const_reference_type t)</code></td>
        <td>Inserts the value <tt>t</tt> at the <tt>j</tt>-th
        element of the <tt>i</tt>-th row.</td>
    </tr>
    <tr>
        <td><code>const_iterator1 find1 (size_type i, size_type
        j) const</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>iterator1 find1 (size_type i, size_type j)</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>const_iterator2 find2 (size_type i, size_type
        j) const</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>iterator2 find2 (size_type i, size_type j)</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>const_iterator1 begin1 () const</code></td>
        <td>Returns a <tt>const_iterator1</tt> pointing to the
        beginning of the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator1 end1 () const</code></td>
        <td>Returns a <tt>const_iterator1</tt> pointing to the
        end of the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator1 begin1 () </code></td>
        <td>Returns a <tt>iterator1</tt> pointing to the
        beginning of the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator1 end1 () </code></td>
        <td>Returns a <tt>iterator1</tt> pointing to the end of
        the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator2 begin2 () const</code></td>
        <td>Returns a <tt>const_iterator2</tt> pointing to the
        beginning of the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator2 end2 () const</code></td>
        <td>Returns a <tt>const_iterator2</tt> pointing to the
        end of the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator2 begin2 () </code></td>
        <td>Returns a <tt>iterator2</tt> pointing to the
        beginning of the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator2 end2 () </code></td>
        <td>Returns a <tt>iterator2</tt> pointing to the end of
        the <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_reverse_iterator1 rbegin1 () const</code></td>
        <td>Returns a <tt>const_reverse_iterator1</tt> pointing
        to the beginning of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_reverse_iterator1 rend1 () const</code></td>
        <td>Returns a <tt>const_reverse_iterator1</tt> pointing
        to the end of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>reverse_iterator1 rbegin1 () </code></td>
        <td>Returns a <tt>reverse_iterator1</tt> pointing to the
        beginning of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>reverse_iterator1 rend1 () </code></td>
        <td>Returns a <tt>reverse_iterator1</tt> pointing to the
        end of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_reverse_iterator2 rbegin2 () const</code></td>
        <td>Returns a <tt>const_reverse_iterator2</tt> pointing
        to the beginning of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>const_reverse_iterator2 rend2 () const</code></td>
        <td>Returns a <tt>const_reverse_iterator2</tt> pointing
        to the end of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>reverse_iterator2 rbegin2 () </code></td>
        <td>Returns a <tt>reverse_iterator2</tt> pointing to the
        beginning of the reversed <tt>matrix</tt>. </td>
    </tr>
    <tr>
        <td><code>reverse_iterator2 rend2 () </code></td>
        <td>Returns a <tt>reverse_iterator2</tt> pointing to the
        end of the reversed <tt>matrix</tt>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Array based matrix class 
    template&lt;class T, class F, class A&gt;
    class matrix: 
        public matrix_expression&lt;matrix&lt;T, F, A&gt; &gt; {
    public:      
        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T &amp;const_reference_type;
        typedef T &amp;reference_type;
        typedef F functor_type;
        typedef A array_type;
        typedef matrix&lt;T, F, A&gt; self_type;
        typedef matrix_const_reference&lt;self_type&gt; const_closure_type;
        typedef matrix_reference&lt;self_type&gt; closure_type;
        typedef matrix_row&lt;self_type&gt; matrix_row_type;
        typedef matrix_column&lt;self_type&gt; matrix_column_type;
        typedef matrix_range&lt;self_type&gt; matrix_range_type;
        typedef typename A::const_iterator const_iterator_type;
        typedef typename A::iterator iterator_type;
        typedef struct dense_tag storage_category;
        typedef struct major_tag orientation_category;

        // Construction and destruction
        matrix ();
        matrix (size_type size1, size_type size2);
        matrix (const matrix &amp;m);
        template&lt;class AE&gt;
        matrix (const matrix_expression&lt;AE&gt; &amp;ae);

        // Resizing
        void resize (size_type size1, size_type size2);

        size_type size1 () const;
        size_type size2 () const;

        // Element access
        const_reference_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_range_type project (size_type start1, size_type stop1, size_type start2, size_type stop2);
        matrix_range_type project (const range &amp;r1, const range &amp;r2);

        // Assignment
        matrix &amp;operator = (const matrix &amp;m);
        matrix &amp;assign_temporary (matrix &amp;m);
        template&lt;class AE&gt;
        matrix &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix &amp;m);
	friend void swap (matrix &amp;m1, matrix &amp;m2);

        // Element insertion
        void clear ();
        void insert (size_type i, size_type j, const_reference_type t);

        class const_iterator1;
        class iterator1;
        class const_iterator2;
        class iterator2;

        // Element lookup
        const_iterator1 find1 (size_type i, size_type j) const;
        iterator1 find1 (size_type i, size_type j);
        const_iterator2 find2 (size_type i, size_type j) const;
        iterator2 find2 (size_type i, size_type j);

        // Iterators simply are pointers.

        class const_iterator1:
            public container_const_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            const_iterator1 (const matrix &amp;m, const const_iterator_type &amp;it);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();
            const_iterator1 &amp;operator += (difference_type n);
            const_iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator1 &amp;it) const;

            // Dereference
            const_reference_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator1:
            public container_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            iterator1 (matrix &amp;m, const iterator_type &amp;it);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();
            iterator1 &amp;operator += (difference_type n);
            iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator1 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator2 begin () {
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            const_iterator2 (const matrix &amp;m, const const_iterator_type &amp;it);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();
            const_iterator2 &amp;operator += (difference_type n);
            const_iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator2 &amp;it) const;

            // Dereference
            const_reference_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            iterator2 (matrix &amp;m, const iterator_type &amp;it);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();
            iterator2 &amp;operator += (difference_type n);
            iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator2 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator1 begin ();
            iterator1 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();

        // Reverse iterators

        typedef std::reverse_iterator&lt;const_iterator1, value_type, const_reference_type&gt; const_reverse_iterator1;

        const_reverse_iterator1 rbegin1 () const;
        const_reverse_iterator1 rend1 () const;

        typedef std::reverse_iterator&lt;iterator1, value_type, reference_type&gt; reverse_iterator1;

        reverse_iterator1 rbegin1 ();
        reverse_iterator1 rend1 ();

        typedef std::reverse_iterator&lt;const_iterator2, value_type, const_reference_type&gt; const_reverse_iterator2;

        const_reverse_iterator2 rbegin2 () const;
        const_reverse_iterator2 rend2 () const;

        typedef std::reverse_iterator&lt;iterator2, value_type, reference_type&gt; reverse_iterator2;

        reverse_iterator2 rbegin2 ();
        reverse_iterator2 rend2 ();
    };</code></pre>
</body>
</html>
