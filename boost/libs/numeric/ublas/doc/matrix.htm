<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Matrix Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Matrix Related</h1>

<h2><a name="matrix"></a>Matrix</h2>

<p>The templated class <code>matrix </code>is the base container
adaptor for dense matrices.</p>

<pre><code>    // Array based matrix class 
    template&lt;class T, class A, class F&gt;
    class matrix: 
        public matrix_expression&lt;matrix&lt;T, A, F&gt; &gt; {
    public:      
        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T &amp;const_reference_type;
        typedef T &amp;reference_type;
        typedef A array_type;
        typedef F functor_type;
        typedef matrix&lt;T, A, F&gt; self_type;
        typedef matrix_const_reference&lt;self_type&gt; const_closure_type;
        typedef matrix_reference&lt;self_type&gt; closure_type;
        typedef matrix_row&lt;self_type&gt; matrix_row_type;
        typedef matrix_column&lt;self_type&gt; matrix_column_type;
        typedef matrix_range&lt;self_type&gt; matrix_range_type;
        typedef typename A::const_iterator const_iterator_type;
        typedef typename A::iterator iterator_type;
        typedef struct dense_tag storage_category;
        typedef struct major_tag orientation_category;

        // Construction and destruction
        matrix ();
        matrix (size_type size1, size_type size2);
        matrix (const matrix &amp;m);
        template&lt;class AE&gt;
        matrix (const matrix_expression&lt;AE&gt; &amp;ae);

        // Resizing
        void resize (size_type size1, size_type size2);

        size_type size1 () const;
        size_type size2 () const;

        // Element access
        value_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_range_type project (size_type start1, size_type stop1, size_type start2, size_type stop2);
        matrix_range_type project (const range &amp;r1, const range &amp;r2);

        // Assignment
        matrix &amp;operator = (const matrix &amp;m);
        matrix &amp;assign_temporary (matrix &amp;m);
        template&lt;class AE&gt;
        matrix &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix &amp;m);
	friend void swap (matrix &amp;m1, matrix &amp;m2);

        // Element insertion
        void clear ();
        void insert (size_type i, size_type j, const T &amp;t);

        class const_iterator1;
        class iterator1;
        class const_iterator2;
        class iterator2;

        // Element lookup
        const_iterator1 find1 (size_type i, size_type j) const;
        iterator1 find1 (size_type i, size_type j);
        const_iterator2 find2 (size_type i, size_type j) const;
        iterator2 find2 (size_type i, size_type j);

        // Iterators simply are pointers.

        class const_iterator1:
            public container_const_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            const_iterator1 (const matrix &amp;m, const const_iterator_type &amp;it);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();
            const_iterator1 &amp;operator += (difference_type n);
            const_iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator1 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator1:
            public container_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            iterator1 (matrix &amp;m, const iterator_type &amp;it);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();
            iterator1 &amp;operator += (difference_type n);
            iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator1 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator2 begin () {
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            const_iterator2 (const matrix &amp;m, const const_iterator_type &amp;it);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();
            const_iterator2 &amp;operator += (difference_type n);
            const_iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator2 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;matrix&gt;,
            public random_access_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            iterator2 (matrix &amp;m, const iterator_type &amp;it);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();
            iterator2 &amp;operator += (difference_type n);
            iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator2 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator1 begin ();
            iterator1 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();

        // Reverse iterators

        typedef std::reverse_iterator&lt;const_iterator1, value_type, const_reference_type&gt; const_reverse_iterator1;

        const_reverse_iterator1 rbegin1 () const;
        const_reverse_iterator1 rend1 () const;

        typedef std::reverse_iterator&lt;iterator1, value_type, reference_type&gt; reverse_iterator1;

        reverse_iterator1 rbegin1 ();
        reverse_iterator1 rend1 ();

        typedef std::reverse_iterator&lt;const_iterator2, value_type, const_reference_type&gt; const_reverse_iterator2;

        const_reverse_iterator2 rbegin2 () const;
        const_reverse_iterator2 rend2 () const;

        typedef std::reverse_iterator&lt;iterator2, value_type, reference_type&gt; reverse_iterator2;

        reverse_iterator2 rbegin2 ();
        reverse_iterator2 rend2 ();
    };</code></pre>

<h2><a name="matrix_row"></a>Matrix Row</h2>

<p>The templated class <code>matrix_row </code>allows to address
a row of a matrix.</p>

<pre><code>    // Matrix based row vector class
    template&lt;class M&gt;
    class matrix_row:
	public vector_expression&lt;matrix_row&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_row&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_row&lt;M&gt; &gt; closure_type;
        typedef vector_range&lt;matrix_row&lt;M&gt; &gt; vector_range_type;
        typedef typename M::const_iterator2 const_iterator_type;
        typedef typename M::iterator2 iterator_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_row (matrix_type &amp;data, size_type i);

        size_type size () const;

        // Element access
        value_type operator () (size_type j) const;
        reference_type operator () (size_type j);

        value_type operator [] (size_type j) const;
        reference_type operator [] (size_type j);

        vector_range_type project (size_type start, size_type stop);
        vector_range_type project (const range &amp;r);

        // Assignment
        matrix_row &amp;operator = (const matrix_row &amp;mr);
        matrix_row &amp;assign_temporary (matrix_row &amp;mr);
        template&lt;class AE&gt;
        matrix_row &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_row &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_row &amp;mr);
	friend void swap (matrix_row &amp;mr1, matrix_row &amp;mr2);

        class const_iterator;
        class iterator;

        // Element lookup
        const_iterator find (size_type j) const;
        iterator find (size_type j);

        // Iterators simply are pointers.

        class const_iterator:
            public container_const_reference&lt;matrix_row&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename M::const_iterator2::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const matrix_row &amp;mr, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_row&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename M::iterator2::iterator_category iterator_category;

            // Construction and destruction
            iterator (matrix_row &amp;mr, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="matrix_column"></a>Matrix Column</h2>

<p>The templated class <code>matrix_column </code>allows to
address a column of a matrix.</p>

<pre><code>    // Matrix based column vector class
    template&lt;class M&gt;
    class matrix_column:
	public vector_expression&lt;matrix_column&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_column&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_column&lt;M&gt; &gt; closure_type;
        typedef vector_range&lt;matrix_column&lt;M&gt; &gt; vector_range_type;
        typedef typename M::const_iterator1 const_iterator_type;
        typedef typename M::iterator1 iterator_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_column (matrix_type &amp;data, size_type j);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        vector_range_type project (size_type start, size_type stop);
        vector_range_type project (const range &amp;r);

        // Assignment
        matrix_column &amp;operator = (const matrix_column &amp;mc);
        matrix_column &amp;assign_temporary (matrix_column &amp;mc);
        template&lt;class AE&gt;
        matrix_column &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_column &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_column &amp;mc);
	friend void swap (matrix_column &amp;mc1, matrix_column &amp;mc2);

        class const_iterator;
        class iterator;

        // Element lookup
        const_iterator find (size_type i) const;
        iterator find (size_type i);

        // Iterators simply are pointers.

        class const_iterator:
            public container_const_reference&lt;matrix_column&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename M::const_iterator1::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const matrix_column &amp;mc, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_column&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename M::iterator1::iterator_category iterator_category;

            // Construction and destruction
            iterator (matrix_column &amp;mc, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="vector_range"></a>Vector Range</h2>

<p>The templated class <code>matrix_vector_range </code>allows to
address a sub vector of a matrix.</p>

<pre><code>    // Matrix based vector range class
    template&lt;class M&gt;
    class matrix_vector_range:
		public vector_expression&lt;matrix_vector_range&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_vector_range&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_vector_range&lt;M&gt; &gt; closure_type;
        typedef range::const_iterator const_iterator1_type;
        typedef range::const_iterator iterator1_type;
        typedef range::const_iterator const_iterator2_type;
        typedef range::const_iterator iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_vector_range (matrix_type &amp;data, const range &amp;r1, const range &amp;r2);
        matrix_vector_range (matrix_type &amp;data, size_type start1, size_type stop1, size_type start2, size_type stop2);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        matrix_vector_range project (size_type start, size_type stop);
        matrix_vector_range project (const range &amp;r);

        // Assignment
        matrix_vector_range &amp;operator = (const matrix_vector_range &amp;mvr);
        matrix_vector_range &amp;assign_temporary (matrix_vector_range &amp;mvr);
        template&lt;class AE&gt;
        matrix_vector_range &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_vector_range &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_vector_range &amp;mvr);
	friend void swap (matrix_vector_range &amp;mvr1, matrix_vector_range &amp;mvr2);

        // Iterators simply are indexes.

        class iterator;

        class const_iterator:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::const_iterator1::iterator_category,
	                                     typename M::const_iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            const_iterator (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type  index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::iterator1::iterator_category,
	                                     typename M::iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            iterator (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="vector_slice"></a>Vector Slice</h2>

<p>The templated class <code>matrix_vector_slice </code>allows to
address a sliced sub vector of a matrix.</p>

<pre><code>    // Matrix based vector slice class
    template&lt;class M&gt;
    class matrix_vector_slice:
		public vector_expression&lt;matrix_vector_slice&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_vector_slice&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_vector_slice&lt;M&gt; &gt; closure_type;
        typedef slice::const_iterator const_iterator1_type;
        typedef slice::const_iterator iterator1_type;
        typedef slice::const_iterator const_iterator2_type;
        typedef slice::const_iterator iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_vector_slice (matrix_type &amp;data, const slice &amp;s1, const slice &amp;s2);
        matrix_vector_slice (matrix_type &amp;data, size_type start1, size_type stride1, size_type size1, size_type start2, size_type stride2, size_type size2);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        matrix_vector_slice project (const range &amp;r);
        matrix_vector_slice project (const slice &amp;s);

        // Assignment
        matrix_vector_slice &amp;operator = (const matrix_vector_slice &amp;mvs);
        matrix_vector_slice &amp;assign_temporary (matrix_vector_slice &amp;mvs);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_vector_slice &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_vector_slice &amp;mvs);
	friend void swap (matrix_vector_slice &amp;mvs1, matrix_vector_slice &amp;mvs2);

        // Iterators simply are indexes.

        class iterator;

        class const_iterator:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::const_iterator1::iterator_category,
                                    	     typename M::const_iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            const_iterator (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type  index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::iterator1::iterator_category,
	                                     typename M::iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            iterator (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="matrix_range"></a>Matrix Range</h2>

<p>The templated class <code>matrix_range </code>allows to
address a sub matrix of a matrix.</p>

<pre><code>    // Matrix based range class
    template&lt;class M&gt;
    class matrix_range:
	public matrix_expression&lt;matrix_range&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef matrix_const_reference&lt;matrix_range&lt;M&gt; &gt; const_closure_type;
        typedef matrix_reference&lt;matrix_range&lt;M&gt; &gt; closure_type;
        typedef matrix_row&lt;matrix_range&lt;M&gt; &gt; matrix_row_type;
        typedef matrix_column&lt;matrix_range&lt;M&gt; &gt; matrix_column_type;
        typedef typename M::const_iterator1 const_iterator1_type;
        typedef typename M::iterator1 iterator1_type;
        typedef typename M::const_iterator2 const_iterator2_type;
        typedef typename M::iterator2 iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;
        typedef typename M::orientation_category orientation_category;

        // Construction and destruction
        matrix_range (matrix_type &amp;data, const range &amp;r1, const range &amp;r2);
        matrix_range (matrix_type &amp;data, size_type start1, size_type stop1, size_type start2, size_type stop2);

        size_type start1 () const;
        size_type size1 () const;
        size_type start2() const;
        size_type size2 () const;

        // Element access
        value_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_range project (size_type start1, size_type stop1, size_type start2, size_type stop2);
        matrix_range project (const range &amp;r1, const range &amp;r2);

        // Assignment
        matrix_range &amp;operator = (const matrix_range &amp;mr);
        matrix_range &amp;assign_temporary (matrix_range &amp;mr);
        template&lt;class AE&gt;
        matrix_range &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_range&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_range &amp;mr);
	friend void swap (matrix_range &amp;mr1, matrix_range &amp;mr2);

        class const_iterator1;
        class iterator1;
        class const_iterator2;
        class iterator2;

        // Element lookup
        const_iterator1 find1 (size_type i, size_type j) const;
        iterator1 find1 (size_type i, size_type j);
        const_iterator2 find2 (size_type i, size_type j) const;
        iterator2 find2 (size_type i, size_type j);

        // Iterators simply are pointers.

        class const_iterator1:
            public container_const_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef typename M::const_iterator1::iterator_category iterator_category;

            // Construction and destruction
            const_iterator1 (const matrix_range &amp;mr, const const_iterator1_type &amp;it);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();
            const_iterator1 &amp;operator += (difference_type n);
            const_iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator1 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator1:
            public container_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef typename M::iterator1::iterator_category iterator_category;

            // Construction and destruction
            iterator1 (matrix_range &amp;mr, const iterator1_type &amp;it);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();
            iterator1 &amp;operator += (difference_type n);
            iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator1 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator2 begin ();
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef typename M::const_iterator2::iterator_category iterator_category;

            // Construction and destruction
            const_iterator2 (const matrix_range &amp;mr, const const_iterator2_type &amp;it);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();
            const_iterator2 &amp;operator += (difference_type n);
            const_iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator2 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef typename M::iterator2::iterator_category iterator_category;

            // Construction and destruction
            iterator2 (matrix_range &amp;mr, const iterator2_type &amp;it);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();
            iterator2 &amp;operator += (difference_type n);
            iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator2 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator1 begin ();
            iterator1 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();
    };</code></pre>

<h2><a name="matrix_slice"></a>Matrix Slice</h2>

<p>The templated class <code>matrix_slice </code>allows to
address a sliced sub matrix of a matrix.</p>

<pre><code>    // Matrix based slice class
    template&lt;class M&gt;
    class matrix_slice:
	public matrix_expression&lt;matrix_slice&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef matrix_const_reference&lt;matrix_slice&lt;M&gt; &gt; const_closure_type;
        typedef matrix_reference&lt;matrix_slice&lt;M&gt; &gt; closure_type;
        typedef matrix_row&lt;matrix_slice&lt;M&gt; &gt; matrix_row_type;
        typedef matrix_column&lt;matrix_slice&lt;M&gt; &gt; matrix_column_type;
        typedef slice::const_iterator const_iterator1_type;
        typedef slice::const_iterator iterator1_type;
        typedef slice::const_iterator const_iterator2_type;
        typedef slice::const_iterator iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;
        typedef typename M::orientation_category orientation_category;

        // Construction and destruction
        matrix_slice (matrix_type &amp;data, const slice &amp;s1, const slice &amp;s2);
        matrix_slice (matrix_type &amp;data, size_type start1, size_type stride1, size_type size1, size_type start2, size_type stride2, size_type size2);

        size_type size1 () const;
        size_type size2 () const;

        // Element access
        value_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_slice project (const range &amp;r1, const range &amp;r2);
        matrix_slice project (const slice &amp;s);

        // Assignment
        matrix_slice &amp;operator = (const matrix_slice &amp;ms);
        matrix_slice &amp;assign_temporary (matrix_slice &amp;ms);
        template&lt;class AE&gt;
        matrix_slice &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_slice&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_slice &amp;ms);
	friend void swap (matrix_slice &amp;ms1, matrix_slice &amp;ms2);

        // Iterators simply are indexes.

        class iterator1;

        class const_iterator2;

        class const_iterator1:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef typename M::const_iterator1::iterator_category iterator_category;

            // Construction and destruction
            const_iterator1 (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();
            const_iterator1 &amp;operator += (difference_type n);
            const_iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator1 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator2;

        class iterator1:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef typename M::iterator1::iterator_category iterator_category;

            // Construction and destruction
            iterator1 (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();
            iterator1 &amp;operator += (difference_type n);
            iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator1 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator2 begin ();
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef typename M::const_iterator2::iterator_category iterator_category;

            // Construction and destruction
            const_iterator2 (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();
            const_iterator2 &amp;operator += (difference_type n);
            const_iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator2 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef typename M::iterator2::iterator_category iterator_category;

            // Construction and destruction
            iterator2 (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();
            iterator2 &amp;operator += (difference_type n);
            iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator2 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator1 begin () const;
            iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();
    };</code></pre>
</body>
</html>
