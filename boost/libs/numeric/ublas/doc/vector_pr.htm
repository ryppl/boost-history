<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Vector Proxy Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Vector Proxy Related</h1>

<h2><a name="vector_range"></a>Vector Range</h2>

<h4>Description</h4>

<p>The templated class <code>vector_range&lt;V&gt; </code>allows
to address a range of a vector.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::vector&lt;double&gt; v (3);
    numerics::vector_range&lt;numerics::matrix&lt;double&gt; &gt; vr (v, range (0, 3));
    for (int i = 0; i &lt; vr.size (); ++ i)
        vr (i) = i;
    std::cout &lt;&lt; vr &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header vector_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>V</tt> </td>
        <td>The type of vector referenced. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_range&lt;V&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_range (vector_type &amp;data, const
        range &amp;r)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>vector_range (vector_type &amp;data, size_type
        start, size_type stop)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type start () const</code></td>
        <td>Returns the start of the sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the sub vector.</td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>vector_range project (size_type start,
        size_type stop)</code></td>
        <td>Returns a sub vector ranging from the <tt>start</tt>-th
        to the <tt>stop</tt>-th element.</td>
    </tr>
    <tr>
        <td><code>vector_range project (const range &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>vector_range &amp;operator = (const
        vector_range &amp;vr)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>vector_range &amp;assign_temporary
        (vector_range &amp;vr)</code></td>
        <td>Assigns a temporary. May change the vector range <code>vr</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_range &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_range &amp;assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a vector expression to the sub vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_range &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_range &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sub vector. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_range &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_range &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sub vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        vector_range &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (vector_range &amp;vr)</code></td>
        <td>Swaps the contents of the sub vectors. </td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <tt>vector_range</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <tt>vector_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <tt>vector_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <tt>vector_range</tt>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Vector based range class
    template&lt;class V&gt;
    class vector_range:
	public vector_expression&lt;vector_range&lt;V&gt; &gt; {
    public:      
        typedef V vector_type;
        typedef typename V::size_type size_type;
        typedef typename V::difference_type difference_type;
        typedef typename V::value_type value_type;
        typedef typename V::const_reference_type const_reference_type;
        typedef typename V::reference_type reference_type;
        typedef vector_range&lt;V&gt; const_closure_type;
        typedef vector_range&lt;V&gt; closure_type;
        typedef typename V::const_iterator const_iterator_type;
        typedef typename V::iterator iterator_type;
        typedef typename proxy_traits&lt;typename V::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        vector_range (vector_type &amp;data, const range &amp;r);
        vector_range (vector_type &amp;data, size_type start, size_type stop);

        size_type start () const;
        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        vector_range project (size_type start, size_type stop);
        vector_range project (const range &amp;r);

        // Assignment
        vector_range &amp;operator = (const vector_range &amp;vr);
        vector_range &amp;assign_temporary (vector_range &amp;vr);
        template&lt;class AE&gt;
        vector_range &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_range &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_range &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_range &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_range &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_range &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        vector_range &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (vector_range &amp;vr);
	friend void swap (vector_range &amp;vr1, vector_range &amp;vr2);

        class const_iterator;
        class iterator;

        // Element lookup
        const_iterator find (size_type i) const;
        iterator find (size_type i);

        // Iterators simply are pointers.

        class const_iterator:
            public container_const_reference&lt;vector_range&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename V::const_iterator::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const vector_range &amp;vr, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;vector_range&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename V::iterator::iterator_category iterator_category;

            // Construction and destruction
            iterator (vector_range &amp;vr, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="vector_slice"></a>Vector Slice</h2>

<h4>Description</h4>

<p>The templated class <code>vector_slice&lt;V&gt; </code>allows
to address a slice of a vector.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::vector&lt;double&gt; v (3);
    numerics::vector_slice&lt;numerics::vector&lt;double&gt; &gt; vs (v, slice (0, 1, 3));
    for (int i = 0; i &lt; vs.size (); ++ i) 
        vs (i) = i;
    std::cout &lt;&lt; vs &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header vector_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>V</tt> </td>
        <td>The type of vector referenced. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_slice&lt;V&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_slice (vector_type &amp;data, const
        slice &amp;s)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>vector_slice (vector_type &amp;data, size_type
        start, size_type stride, size_type size)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the sub vector.</td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>vector_slice project (const range &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>vector_slice project (const slice &amp;s)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>vector_slice &amp;operator = (const
        vector_slice &amp;vs)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>vector_slice &amp;assign_temporary
        (vector_slice &amp;vs)</code></td>
        <td>Assigns a temporary. May change the vector slice <code>vs</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_slice &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_slice &amp;assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a vector expression to the sub vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_slice &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_slice &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sub vector. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_slice &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        vector_slice &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sub vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        vector_slice &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (vector_slice &amp;vs)</code></td>
        <td>Swaps the contents of the sub vectors. </td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <code>vector_slice</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <code>vector_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <code>vector_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <code>vector_slice</code>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Vector based slice class
    template&lt;class V&gt;
    class vector_slice:
	public vector_expression&lt;vector_slice&lt;V&gt; &gt; {
    public:      
        typedef V vector_type;
        typedef typename V::size_type size_type;
        typedef typename V::difference_type difference_type;
        typedef typename V::value_type value_type;
        typedef typename V::const_reference_type const_reference_type;
        typedef typename V::reference_type reference_type;
        typedef vector_slice&lt;V&gt; const_closure_type;
        typedef vector_slice&lt;V&gt; closure_type;
        typedef slice::const_iterator const_iterator_type;
        typedef slice::const_iterator iterator_type;
        typedef typename proxy_traits&lt;typename V::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        vector_slice (vector_type &amp;data, const slice &amp;s);
        vector_slice (vector_type &amp;data, size_type start, size_type stride, size_type size);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        vector_slice project (const range &amp;r);
        vector_slice project (const slice &amp;s);

        // Assignment
        vector_slice &amp;operator = (const vector_slice &amp;vs);
        vector_slice &amp;assign_temporary (vector_slice &amp;vs);
        template&lt;class AE&gt;
        vector_slice &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_slice &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_slice &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_slice &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_slice &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        vector_slice &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        vector_slice &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (vector_slice &amp;vs);
	friend void swap (vector_slice &amp;vs1, vector_slice &amp;vs2);

        // Iterators simply are indexes.

        class iterator;

        class const_iterator:
            public container_const_reference&lt;vector_type&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            const_iterator (const vector_type &amp;v, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;vector_type&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef std::random_access_iterator_tag iterator_category;

            // Construction and destruction
            iterator (vector_type &amp;v, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>
</body>
</html>
