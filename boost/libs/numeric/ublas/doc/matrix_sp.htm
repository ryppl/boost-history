<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Sparse Matrix Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Sparse Matrix Related</h1>

<h2><a name="sparse_matrix"></a>Sparse Matrix</h2>

<p>The templated class <code>sparse_matrix </code>is the base
container adaptor for sparse matrices.</p>

<pre><code>    // Array based sparse matrix class 
    template&lt;class T, class A, class F&gt;
    class sparse_matrix: 
        public matrix_expression&lt;sparse_matrix&lt;T, A, F&gt; &gt; {
    public:      
        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T &amp;const_reference_type;
        typedef T &amp;reference_type;
        typedef T *pointer_type;
        typedef const A const_array_type;
        typedef A array_type;
        typedef F functor_type;
        typedef sparse_matrix&lt;T, A, F&gt; self_type;
        typedef matrix_const_reference&lt;self_type&gt; const_closure_type;
        typedef matrix_reference&lt;self_type&gt; closure_type;
        typedef matrix_row&lt;self_type&gt; matrix_row_type;
        typedef matrix_column&lt;self_type&gt; matrix_column_type;
        typedef matrix_range&lt;self_type&gt; matrix_range_type;
        typedef typename A::const_iterator const_iterator_type;
        typedef typename A::iterator iterator_type;
        typedef sparse_tag storage_category;
        typedef typename F::orientation_category orientation_category;

        // Construction and destruction
        sparse_matrix ();
        sparse_matrix (size_type size1, size_type size2, size_type non_zeroes);
        sparse_matrix (const sparse_matrix &amp;m);
        template&lt;class AE&gt;
        sparse_matrix (size_type non_zeroes, const matrix_expression&lt;AE&gt; &amp;ae);

        // Resizing
        void resize (size_type size1, size_type size2, size_type non_zeroes);

        size_type size1 () const;
        size_type size2 () const;

        // Element access
        value_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_range_type project (size_type start1, size_type stop1, size_type start2, size_type stop2);
        matrix_range_type project (const range &amp;r1, const range &amp;r2);

        // Assignment
        sparse_matrix &amp;operator = (const sparse_matrix &amp;m);
        sparse_matrix &amp;assign_temporary (sparse_matrix &amp;m);
        template&lt;class AE&gt;
        sparse_matrix &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_matrix &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_matrix&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_matrix &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_matrix&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        sparse_matrix &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        sparse_matrix&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (sparse_matrix &amp;m);
	friend void swap (sparse_matrix &amp;m1, sparse_matrix &amp;m2);

        // Element insertion
        void clear ();
        void insert (size_type i, size_type j, const T &amp;t);

        class const_iterator1;
        class iterator1;
        class const_iterator2;
        class iterator2;

        // Element lookup
        const_iterator1 find1 (size_type i, size_type j) const;
        iterator1 find1 (size_type i, size_type j);
        const_iterator2 find2 (size_type i, size_type j) const;
        iterator2 find2 (size_type i, size_type j);

        // Iterators simply are pointers.

        class const_iterator1:
            public container_const_reference&lt;sparse_matrix&gt;,
            public bidirectional_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef typename functor_type::functor1_type functor1_type;

            // Construction and destruction
            const_iterator1 (const sparse_matrix &amp;m, size_type i, size_type j, const const_iterator_type &amp;it);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();

            // Dereference
            value_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type  index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator1:
            public container_reference&lt;sparse_matrix&gt;,
            public bidirectional_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef typename functor_type::functor1_type functor1_type;

            // Construction and destruction
            iterator1 (sparse_matrix &amp;m, size_type i, size_type j, const iterator_type &amp;it);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();

            // Dereference
            reference_type operator * () const;

            iterator2 begin ();
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type  index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;sparse_matrix&gt;,
            public bidirectional_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef typename functor_type::functor2_type functor2_type;

            // Construction and destruction
            const_iterator2 (const sparse_matrix &amp;m, size_type i, size_type j, const const_iterator_type &amp;it);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();

            // Dereference
            value_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type  index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;sparse_matrix&gt;,
            public bidirectional_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef std::bidirectional_iterator_tag iterator_category;
            typedef typename functor_type::functor2_type functor2_type;

            // Construction and destruction
            iterator2 (sparse_matrix &amp;m, size_type i, size_type j, const iterator_type &amp;it);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();

            // Dereference
            reference_type operator * () const;

            iterator1 begin ();
            iterator1 end ();

            // Indices
            size_type index1 () const;
            size_type  index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();
    };</code></pre>
</body>
</html>
