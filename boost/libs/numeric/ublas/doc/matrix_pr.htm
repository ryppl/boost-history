<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Matrix Proxy Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Matrix Proxy Related</h1>

<h2><a name="matrix_row"></a>Matrix Row</h2>

<h4>Description</h4>

<p>The templated class <code>matrix_row&lt;M&gt; </code>allows to
address a row of a matrix.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    for (int i = 0; i &lt; m.size1 (); ++ i) {
        numerics::matrix_row&lt;numerics::matrix&lt;double&gt; &gt; mr (m, i);
        for (int j = 0; j &lt; mr.size (); ++ j) 
            mr (j) = 3 * i + j;
        std::cout &lt;&lt; mr &lt;&lt; std::endl;
    }
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>M</tt> </td>
        <td>The type of matrix referenced. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;matrix_row&lt;M&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix_row (matrix_type &amp;data, size_type i)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the sub vector.</td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>vector_range_type project (size_type start,
        size_type stop)</code></td>
        <td>Returns a sub vector ranging from the <tt>start</tt>-th
        to the <tt>stop</tt>-th element.</td>
    </tr>
    <tr>
        <td><code>vector_range_type project (const range &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_row &amp;operator = (const matrix_row
        &amp;mr)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix_row &amp;assign_temporary (matrix_row
        &amp;mr)</code></td>
        <td>Assigns a temporary. May change the matrix row <code>mr</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_row &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_row &amp;assign (const vector_expression&lt;AE&gt;
        &amp;ae)</code></td>
        <td>Assigns a vector expression to the sub vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_row &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_row &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sub vector. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_row &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_row &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sub vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix_row &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrix_row &amp;mr)</code></td>
        <td>Swaps the contents of the sub vectors. </td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <code>matrix_row</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <code>matrix_row</code>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <code>matrix_row</code>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <code>matrix_row</code>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Matrix based row vector class
    template&lt;class M&gt;
    class matrix_row:
	public vector_expression&lt;matrix_row&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_row&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_row&lt;M&gt; &gt; closure_type;
        typedef vector_range&lt;matrix_row&lt;M&gt; &gt; vector_range_type;
        typedef typename M::const_iterator2 const_iterator_type;
        typedef typename M::iterator2 iterator_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_row (matrix_type &amp;data, size_type i);

        size_type size () const;

        // Element access
        value_type operator () (size_type j) const;
        reference_type operator () (size_type j);

        value_type operator [] (size_type j) const;
        reference_type operator [] (size_type j);

        vector_range_type project (size_type start, size_type stop);
        vector_range_type project (const range &amp;r);

        // Assignment
        matrix_row &amp;operator = (const matrix_row &amp;mr);
        matrix_row &amp;assign_temporary (matrix_row &amp;mr);
        template&lt;class AE&gt;
        matrix_row &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_row &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_row &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_row &amp;mr);
	friend void swap (matrix_row &amp;mr1, matrix_row &amp;mr2);

        class const_iterator;
        class iterator;

        // Element lookup
        const_iterator find (size_type j) const;
        iterator find (size_type j);

        // Iterators simply are pointers.

        class const_iterator:
            public container_const_reference&lt;matrix_row&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename M::const_iterator2::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const matrix_row &amp;mr, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_row&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename M::iterator2::iterator_category iterator_category;

            // Construction and destruction
            iterator (matrix_row &amp;mr, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="matrix_column"></a>Matrix Column</h2>

<h4>Description</h4>

<p>The templated class <code>matrix_column&lt;M&gt; </code>allows
to address a column of a matrix.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    for (int j = 0; j &lt; m.size2 (); ++ j) {
        numerics::matrix_column&lt;numerics::matrix&lt;double&gt; &gt; mc (m, j);
        for (int i = 0; i &lt; mc.size (); ++ i)
            mc (i) = 3 * i + j;
        std::cout &lt;&lt; mc &lt;&lt; std::endl;
    }
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>M</tt> </td>
        <td>The type of matrix referenced. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;matrix_column&lt;M&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix_column (matrix_type &amp;data, size_type
        j)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the sub vector.</td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>vector_range_type project (size_type start,
        size_type stop)</code></td>
        <td>Returns a sub vector ranging from the <tt>start</tt>-th
        to the <tt>stop</tt>-th element.</td>
    </tr>
    <tr>
        <td><code>vector_range_type project (const range &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_column &amp;operator = (const
        matrix_column &amp;mc)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix_column &amp;assign_temporary
        (matrix_column &amp;mc)</code></td>
        <td>Assigns a temporary. May change the matrix column <code>mc</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_column &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_column &amp;assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a vector expression to the sub vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_column &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_column &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sub vector. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_column &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_column &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sub vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix_column &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrix_column &amp;mc)</code></td>
        <td>Swaps the contents of the sub vectors. </td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <code>matrix_column</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <code>matrix_column</code>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <code>matrix_column</code>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <code>matrix_column</code>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Matrix based column vector class
    template&lt;class M&gt;
    class matrix_column:
	public vector_expression&lt;matrix_column&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_column&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_column&lt;M&gt; &gt; closure_type;
        typedef vector_range&lt;matrix_column&lt;M&gt; &gt; vector_range_type;
        typedef typename M::const_iterator1 const_iterator_type;
        typedef typename M::iterator1 iterator_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_column (matrix_type &amp;data, size_type j);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        vector_range_type project (size_type start, size_type stop);
        vector_range_type project (const range &amp;r);

        // Assignment
        matrix_column &amp;operator = (const matrix_column &amp;mc);
        matrix_column &amp;assign_temporary (matrix_column &amp;mc);
        template&lt;class AE&gt;
        matrix_column &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_column &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_column &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_column &amp;mc);
	friend void swap (matrix_column &amp;mc1, matrix_column &amp;mc2);

        class const_iterator;
        class iterator;

        // Element lookup
        const_iterator find (size_type i) const;
        iterator find (size_type i);

        // Iterators simply are pointers.

        class const_iterator:
            public container_const_reference&lt;matrix_column&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename M::const_iterator1::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const matrix_column &amp;mc, const const_iterator_type &amp;it);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_column&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename M::iterator1::iterator_category iterator_category;

            // Construction and destruction
            iterator (matrix_column &amp;mc, const iterator_type &amp;it);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="vector_range"></a>Vector Range</h2>

<h4>Description</h4>

<p>The templated class <code>matrix_vector_range&lt;M&gt; </code>allows
to address a sub vector of a matrix.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    for (int i = 0; i &lt; m.size1 (); ++ i) 
	for (int j = 0; j &lt; m.size2 (); ++ j) 
            m (i, j) = 3 * i + j;

    numerics::matrix_vector_range&lt;numerics::matrix&lt;double&gt; &gt; mvr (m, range (0, 3), range (0, 3));
    std::cout &lt;&lt; mvr &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>M</tt> </td>
        <td>The type of matrix referenced. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;matrix_vector_range&lt;M&gt; &gt;</code>
</p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix_vector_range (matrix_type &amp;data,<br>
        &nbsp;const range &amp;r1, const range &amp;r2)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_range (matrix_type &amp;data,<br>
        &nbsp;size_type start1, size_type stop1,<br>
        &nbsp;size_type start2, size_type stop2)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the sub vector.</td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>matrix_vector_range project (size_type start,
        size_type stop)</code></td>
        <td>Returns a sub vector ranging from the <tt>start</tt>-th
        to the <tt>stop</tt>-th element.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_range project (const range
        &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_range &amp;operator = (const
        matrix_vector_range &amp;mvr)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_range &amp;assign_temporary (matrix_vector_range
        &amp;mvr)</code></td>
        <td>Assigns a temporary. May change the matrix vector
        range <code>mvr</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_range &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_range &amp;assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a vector expression to the sub vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_range &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_range &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sub vector. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_range &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_range &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sub vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix_vector_range &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrixvector_range &amp;mvr)</code></td>
        <td>Swaps the contents of the sub vectors. </td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <tt>matrix_vector_range</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <tt>matrix_vector_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <tt>matrix_vector_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <tt>matrix_vector_range</tt>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Matrix based vector range class
    template&lt;class M&gt;
    class matrix_vector_range:
		public vector_expression&lt;matrix_vector_range&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_vector_range&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_vector_range&lt;M&gt; &gt; closure_type;
        typedef range::const_iterator const_iterator1_type;
        typedef range::const_iterator iterator1_type;
        typedef range::const_iterator const_iterator2_type;
        typedef range::const_iterator iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_vector_range (matrix_type &amp;data, const range &amp;r1, const range &amp;r2);
        matrix_vector_range (matrix_type &amp;data, size_type start1, size_type stop1, size_type start2, size_type stop2);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        matrix_vector_range project (size_type start, size_type stop);
        matrix_vector_range project (const range &amp;r);

        // Assignment
        matrix_vector_range &amp;operator = (const matrix_vector_range &amp;mvr);
        matrix_vector_range &amp;assign_temporary (matrix_vector_range &amp;mvr);
        template&lt;class AE&gt;
        matrix_vector_range &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_range &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_vector_range &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_vector_range &amp;mvr);
	friend void swap (matrix_vector_range &amp;mvr1, matrix_vector_range &amp;mvr2);

        // Iterators simply are indexes.

        class iterator;

        class const_iterator:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::const_iterator1::iterator_category,
	                                     typename M::const_iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            const_iterator (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type  index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::iterator1::iterator_category,
	                                     typename M::iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            iterator (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="vector_slice"></a>Vector Slice</h2>

<h4>Description</h4>

<p>The templated class <code>matrix_vector_slice&lt;M&gt; </code>allows
to address a sliced sub vector of a matrix.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    for (int i = 0; i &lt; m.size1 (); ++ i) 
	for (int j = 0; j &lt; m.size2 (); ++ j) 
            m (i, j) = 3 * i + j;

    numerics::matrix_vector_range&lt;numerics::matrix&lt;double&gt; &gt; mvs (m, slice (0, 1, 3), slice (0, 1, 3));
    std::cout &lt;&lt; mvs &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>M</tt> </td>
        <td>The type of matrix referenced. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;matrix_vector_slice&lt;M&gt; &gt;</code>
</p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix_vector_slice (matrix_type &amp;data, <br>
        &nbsp;const slice &amp;s1, const slice &amp;s2)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_slice (matrix_type &amp;data, <br>
        &nbsp;size_type start1, size_type stride1, size_type size1,<br>
        &nbsp;size_type start2, size_type stride2, size_type
        size2)</code></td>
        <td>Constructs a sub vector.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the sub vector.</td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>value_type operator [] (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator [] (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>matrix_vector_slice project (const range
        &amp;r)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_slice project (const slice
        &amp;s)</code></td>
        <td>Returns a sub vector.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_slice &amp;operator = (const
        matrix_vector_slice &amp;mvs)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix_vector_slice &amp;assign_temporary (matrix_vector_slice
        &amp;mvs)</code></td>
        <td>Assigns a temporary. May change the matrix vector
        slice <code>vs</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_slice &amp;operator = (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_slice &amp;assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a vector expression to the sub vector. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_slice &amp;operator += (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the vector
        expression to the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_slice &amp;plus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a vector expression to the sub vector. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_slice &amp;operator -= (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the vector
        expression from the sub vector.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_vector_slice &amp;minus_assign (const
        vector_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a vector expression from the sub vector.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix_vector_slice &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        vector with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrix_vector_slice &amp;mvs)</code></td>
        <td>Swaps the contents of the sub vectors. </td>
    </tr>
    <tr>
        <td><code>const_iterator find (size_type i) const</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>iterator find (size_type i)</code></td>
        <td>Finds the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the <code>matrix_vector_slice</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the <code>matrix_vector_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the <code>matrix_vector_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the <code>matrix_vector_slice</code>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Matrix based vector slice class
    template&lt;class M&gt;
    class matrix_vector_slice:
		public vector_expression&lt;matrix_vector_slice&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef vector_const_reference&lt;matrix_vector_slice&lt;M&gt; &gt; const_closure_type;
        typedef vector_reference&lt;matrix_vector_slice&lt;M&gt; &gt; closure_type;
        typedef slice::const_iterator const_iterator1_type;
        typedef slice::const_iterator iterator1_type;
        typedef slice::const_iterator const_iterator2_type;
        typedef slice::const_iterator iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;

        // Construction and destruction
        matrix_vector_slice (matrix_type &amp;data, const slice &amp;s1, const slice &amp;s2);
        matrix_vector_slice (matrix_type &amp;data, size_type start1, size_type stride1, size_type size1, size_type start2, size_type stride2, size_type size2);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        value_type operator [] (size_type i) const;
        reference_type operator [] (size_type i);

        matrix_vector_slice project (const range &amp;r);
        matrix_vector_slice project (const slice &amp;s);

        // Assignment
        matrix_vector_slice &amp;operator = (const matrix_vector_slice &amp;mvs);
        matrix_vector_slice &amp;assign_temporary (matrix_vector_slice &amp;mvs);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;operator = (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;operator += (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;plus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;operator -= (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_vector_slice &amp;minus_assign (const vector_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_vector_slice &amp;operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_vector_slice &amp;mvs);
	friend void swap (matrix_vector_slice &amp;mvs1, matrix_vector_slice &amp;mvs2);

        // Iterators simply are indexes.

        class iterator;

        class const_iterator:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::const_iterator1::iterator_category,
                                    	     typename M::const_iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            const_iterator (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator (const iterator &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type  index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;

        class iterator:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator, value_type&gt; {
        public:
            typedef typename restrict_traits&lt;typename M::iterator1::iterator_category,
	                                     typename M::iterator2::iterator_category&gt;::iterator_category iterator_category; 

            // Construction and destruction
            iterator (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator &amp;operator ++ ();
            iterator &amp;operator -- ();
            iterator &amp;operator += (difference_type n);
            iterator &amp;operator -= (difference_type n);
            difference_type operator - (const iterator &amp;it) const;

            // Dereference
            reference_type operator * ();

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const iterator &amp;it) const;
        };

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="matrix_range"></a>Matrix Range</h2>

<h4>Description</h4>

<p>The templated class <code>matrix_range&lt;M&gt; </code>allows
to address a sub matrix of a matrix.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    numerics::matrix_range&lt;numerics::matrix&lt;double&gt; &gt; mr (m, range (0, 3), range (0, 3));
    for (int i = 0; i &lt; mr.size1 (); ++ i) 
        for (int j = 0; j &lt; mr.size2 (); ++ j) 
	    mr (i, j) = 3 * i + j;
    std::cout &lt;&lt; mr &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>M</tt> </td>
        <td>The type of matrix referenced.</td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Matrix. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Matrix.</p>

<h4>Public base classes</h4>

<p><code>matrix_expression&lt;matrix_range&lt;M&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix_range (matrix_type &amp;data,<br>
        &nbsp;const range &amp;r1, const range &amp;r2)</code></td>
        <td>Constructs a sub matrix.</td>
    </tr>
    <tr>
        <td><code>matrix_range (matrix_type &amp;data,<br>
        &nbsp;size_type start1, size_type stop1,<br>
        &nbsp;size_type start2, size_type stop2)</code></td>
        <td>Constructs a sub matrix.</td>
    </tr>
    <tr>
        <td><code>size_type start1 () const</code></td>
        <td>Returns the index of the first row.</td>
    </tr>
    <tr>
        <td><code>size_type size1 () const</code></td>
        <td>Returns the number of rows. </td>
    </tr>
    <tr>
        <td><code>size_type start2 () const</code></td>
        <td>Returns the index of the first column.</td>
    </tr>
    <tr>
        <td><code>size_type size2 () const</code></td>
        <td>Returns the number of columns. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i, size_type
        j) const</code></td>
        <td>Returns the value of the <tt>j</tt>-th element in the<tt>
        i</tt>-th row. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i,
        size_type j)</code></td>
        <td>Returns a reference of the <tt>j</tt>-th element in
        the<tt> i</tt>-th row. </td>
    </tr>
    <tr>
        <td><code>matrix_row_type operator [] (size_type i)</code></td>
        <td>Returns a sub vector containing the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>matrix_row_type row (size_type i)</code></td>
        <td>Returns a sub vector containing the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>matrix_column_type column (size_type j)</code></td>
        <td>Returns a sub vector containing the <tt>j</tt>-th
        column.</td>
    </tr>
    <tr>
        <td><code>matrix_range project (size_type start1,
        size_type stop1, size_type start2, size_type stop2)</code></td>
        <td>Returns a sub matrix ranging from the <tt>start1</tt>-th
        to the <tt>stop1</tt>-th row and from the <tt>start2</tt>-th
        to the <tt>stop2</tt>-th column. </td>
    </tr>
    <tr>
        <td><code>matrix_range project (const range &amp;r1,
        const range &amp;r2)</code></td>
        <td>Returns a sub matrix.</td>
    </tr>
    <tr>
        <td><code>matrix_range &amp;operator = (const matrix_range
        &amp;mr)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix_range &amp;assign_temporary (matrix_range
        &amp;mr)</code></td>
        <td>Assigns a temporary. May change the matrix range <code>mr</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_range &amp;operator = (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_range &amp;assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a matrix expression to the sub matrix. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_range &amp;operator += (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the matrix
        expression to the sub matrix.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_range &amp;plus_assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a matrix expression to the sub matrix. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_range &amp;operator -= (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the matrix
        expression from the sub matrix.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_range &amp;minus_assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a matrix expression from the sub matrix.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix_range &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        matrix with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrix_range &amp;mr)</code></td>
        <td>Swaps the contents of the sub matrices. </td>
    </tr>
    <tr>
        <td><code>const_iterator1 find1 (size_type i, size_type
        j) const</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>iterator1 find1 (size_type i, size_type j)</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>const_iterator2 find2 (size_type i, size_type
        j) const</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>iterator2 find2 (size_type i, size_type j)</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>const_iterator1 begin1 () const</code></td>
        <td>Returns a <tt>const_iterator1</tt> pointing to the
        beginning of the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator1 end1 () const</code></td>
        <td>Returns a <tt>const_iterator1</tt> pointing to the
        end of the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator1 begin1 () </code></td>
        <td>Returns a <tt>iterator1</tt> pointing to the
        beginning of the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator1 end1 () </code></td>
        <td>Returns a <tt>iterator1</tt> pointing to the end of
        the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator2 begin2 () const</code></td>
        <td>Returns a <tt>const_iterator2</tt> pointing to the
        beginning of the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>const_iterator2 end2 () const</code></td>
        <td>Returns a <tt>const_iterator2</tt> pointing to the
        end of the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator2 begin2 () </code></td>
        <td>Returns a <tt>iterator2</tt> pointing to the
        beginning of the <tt>matrix_range</tt>. </td>
    </tr>
    <tr>
        <td><code>iterator2 end2 () </code></td>
        <td>Returns a <tt>iterator2</tt> pointing to the end of
        the <tt>matrix_range</tt>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Matrix based range class
    template&lt;class M&gt;
    class matrix_range:
	public matrix_expression&lt;matrix_range&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef matrix_const_reference&lt;matrix_range&lt;M&gt; &gt; const_closure_type;
        typedef matrix_reference&lt;matrix_range&lt;M&gt; &gt; closure_type;
        typedef matrix_row&lt;matrix_range&lt;M&gt; &gt; matrix_row_type;
        typedef matrix_column&lt;matrix_range&lt;M&gt; &gt; matrix_column_type;
        typedef typename M::const_iterator1 const_iterator1_type;
        typedef typename M::iterator1 iterator1_type;
        typedef typename M::const_iterator2 const_iterator2_type;
        typedef typename M::iterator2 iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;
        typedef typename M::orientation_category orientation_category;

        // Construction and destruction
        matrix_range (matrix_type &amp;data, const range &amp;r1, const range &amp;r2);
        matrix_range (matrix_type &amp;data, size_type start1, size_type stop1, size_type start2, size_type stop2);

        size_type start1 () const;
        size_type size1 () const;
        size_type start2() const;
        size_type size2 () const;

        // Element access
        value_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_range project (size_type start1, size_type stop1, size_type start2, size_type stop2);
        matrix_range project (const range &amp;r1, const range &amp;r2);

        // Assignment
        matrix_range &amp;operator = (const matrix_range &amp;mr);
        matrix_range &amp;assign_temporary (matrix_range &amp;mr);
        template&lt;class AE&gt;
        matrix_range &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_range &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_range&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_range &amp;mr);
	friend void swap (matrix_range &amp;mr1, matrix_range &amp;mr2);

        class const_iterator1;
        class iterator1;
        class const_iterator2;
        class iterator2;

        // Element lookup
        const_iterator1 find1 (size_type i, size_type j) const;
        iterator1 find1 (size_type i, size_type j);
        const_iterator2 find2 (size_type i, size_type j) const;
        iterator2 find2 (size_type i, size_type j);

        // Iterators simply are pointers.

        class const_iterator1:
            public container_const_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef typename M::const_iterator1::iterator_category iterator_category;

            // Construction and destruction
            const_iterator1 (const matrix_range &amp;mr, const const_iterator1_type &amp;it);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();
            const_iterator1 &amp;operator += (difference_type n);
            const_iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator1 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator1:
            public container_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef typename M::iterator1::iterator_category iterator_category;

            // Construction and destruction
            iterator1 (matrix_range &amp;mr, const iterator1_type &amp;it);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();
            iterator1 &amp;operator += (difference_type n);
            iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator1 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator2 begin ();
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef typename M::const_iterator2::iterator_category iterator_category;

            // Construction and destruction
            const_iterator2 (const matrix_range &amp;mr, const const_iterator2_type &amp;it);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();
            const_iterator2 &amp;operator += (difference_type n);
            const_iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator2 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;matrix_range&gt;,
            public random_access_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef typename M::iterator2::iterator_category iterator_category;

            // Construction and destruction
            iterator2 (matrix_range &amp;mr, const iterator2_type &amp;it);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();
            iterator2 &amp;operator += (difference_type n);
            iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator2 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator1 begin ();
            iterator1 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();
    };</code></pre>

<h2><a name="matrix_slice"></a>Matrix Slice</h2>

<h4>Description</h4>

<p>The templated class <code>matrix_slice&lt;M&gt; </code>allows
to address a sliced sub matrix of a matrix.</p>

<h4>Example</h4>

<pre>int main () {
    numerics::matrix&lt;double&gt; m (3, 3);
    numerics::matrix_slice&lt;numerics::matrix&lt;double&gt; &gt; ms (m, slice (0, 1, 3), slice (0, 1, 3));
    for (int i = 0; i &lt; ms.size1 (); ++ i) 
        for (int j = 0; j &lt; ms.size2 (); ++ j) 
	    ms (i, j) = 3 * i + j;
    std::cout &lt;&lt; ms &lt;&lt; std::endl;
}</pre>

<h4>Definition</h4>

<p>Defined in the header matrix_pr.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>M</tt> </td>
        <td>The type of matrix referenced.</td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Matrix. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Matrix.</p>

<h4>Public base classes</h4>

<p><code>matrix_expression&lt;matrix_slice&lt;M&gt; &gt;</code> </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>matrix_slice (matrix_type &amp;data,<br>
        &nbsp;const slice &amp;s1, const slice &amp;s2)</code></td>
        <td>Constructs a sub matrix.</td>
    </tr>
    <tr>
        <td><code>matrix_slice (matrix_type &amp;data,<br>
        &nbsp;size_type start1, size_type stride1, size_type
        size1<br>
        &nbsp;size_type start2, size_type stride2, size_type
        size2)</code></td>
        <td>Constructs a sub matrix.</td>
    </tr>
    <tr>
        <td><code>size_type size1 () const</code></td>
        <td>Returns the number of rows. </td>
    </tr>
    <tr>
        <td><code>size_type size2 () const</code></td>
        <td>Returns the number of columns. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i, size_type
        j) const</code></td>
        <td>Returns the value of the <tt>j</tt>-th element in the<tt>
        i</tt>-th row. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i,
        size_type j)</code></td>
        <td>Returns a reference of the <tt>j</tt>-th element in
        the<tt> i</tt>-th row. </td>
    </tr>
    <tr>
        <td><code>matrix_row_type operator [] (size_type i)</code></td>
        <td>Returns a sub vector containing the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>matrix_row_type row (size_type i)</code></td>
        <td>Returns a sub vector containing the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>matrix_column_type column (size_type j)</code></td>
        <td>Returns a sub vector containing the <tt>j</tt>-th
        column.</td>
    </tr>
    <tr>
        <td><code>matrix_slice project (const range &amp;r1,
        const range &amp;r2)</code></td>
        <td>Returns a sub matrix.</td>
    </tr>
    <tr>
        <td><code>matrix_slice project (const slice &amp;s1,
        const slice &amp;s2)</code></td>
        <td>Returns a sub matrix.</td>
    </tr>
    <tr>
        <td><code>matrix_slice &amp;operator = (const
        matrix_slice &amp;ms)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>matrix_slice &amp;assign_temporary (matrix_slice
        &amp;ms)</code></td>
        <td>Assigns a temporary. May change the matrix slice <code>ms</code>.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_slice &amp;operator = (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>The extended assignment operator.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_slice &amp;assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Assigns a matrix expression to the sub matrix. Left
        and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_slice &amp;operator += (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Adds the matrix
        expression to the sub matrix.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_slice &amp;plus_assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Adds a matrix expression to the sub matrix. Left and
        right hand side of the assignment should be independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_slice &amp;operator -= (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>A computed assignment operator. Subtracts the matrix
        expression from the sub matrix.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AE&gt;<br>
        matrix_slice &amp;minus_assign (const
        matrix_expression&lt;AE&gt; &amp;ae)</code></td>
        <td>Subtracts a matrix expression from the sub matrix.
        Left and right hand side of the assignment should be
        independent.</td>
    </tr>
    <tr>
        <td><code>template&lt;class AT&gt;<br>
        matrix_slice &amp;operator *= (const AT &amp;at)</code></td>
        <td>A computed assignment operator. Multiplies the sub
        matrix with a scalar.</td>
    </tr>
    <tr>
        <td><code>void swap (matrix_slice &amp;ms)</code></td>
        <td>Swaps the contents of the sub matrices. </td>
    </tr>
    <tr>
        <td><code>const_iterator1 find1 (size_type i, size_type
        j) const</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>iterator1 find1 (size_type i, size_type j)</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>const_iterator2 find2 (size_type i, size_type
        j) const</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>iterator2 find2 (size_type i, size_type j)</code></td>
        <td>Finds the <tt>j</tt>-th element of the <tt>i</tt>-th
        row.</td>
    </tr>
    <tr>
        <td><code>const_iterator1 begin1 () const</code></td>
        <td>Returns a <tt>const_iterator1</tt> pointing to the
        beginning of the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator1 end1 () const</code></td>
        <td>Returns a <tt>const_iterator1</tt> pointing to the
        end of the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator1 begin1 () </code></td>
        <td>Returns a <tt>iterator1</tt> pointing to the
        beginning of the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator1 end1 () </code></td>
        <td>Returns a <tt>iterator1</tt> pointing to the end of
        the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator2 begin2 () const</code></td>
        <td>Returns a <tt>const_iterator2</tt> pointing to the
        beginning of the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator2 end2 () const</code></td>
        <td>Returns a <tt>const_iterator2</tt> pointing to the
        end of the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator2 begin2 () </code></td>
        <td>Returns a <tt>iterator2</tt> pointing to the
        beginning of the <code>matrix_slice</code>. </td>
    </tr>
    <tr>
        <td><code>iterator2 end2 () </code></td>
        <td>Returns a <tt>iterator2</tt> pointing to the end of
        the <code>matrix_slice</code>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Matrix based slice class
    template&lt;class M&gt;
    class matrix_slice:
	public matrix_expression&lt;matrix_slice&lt;M&gt; &gt; {
    public:      
        typedef M matrix_type;
        typedef typename M::size_type size_type;
        typedef typename M::difference_type difference_type;
        typedef typename M::value_type value_type;
        typedef typename M::const_reference_type const_reference_type;
        typedef typename M::reference_type reference_type;
        typedef matrix_const_reference&lt;matrix_slice&lt;M&gt; &gt; const_closure_type;
        typedef matrix_reference&lt;matrix_slice&lt;M&gt; &gt; closure_type;
        typedef matrix_row&lt;matrix_slice&lt;M&gt; &gt; matrix_row_type;
        typedef matrix_column&lt;matrix_slice&lt;M&gt; &gt; matrix_column_type;
        typedef slice::const_iterator const_iterator1_type;
        typedef slice::const_iterator iterator1_type;
        typedef slice::const_iterator const_iterator2_type;
        typedef slice::const_iterator iterator2_type;
        typedef typename proxy_traits&lt;typename M::storage_category&gt;::storage_category storage_category;
        typedef typename M::orientation_category orientation_category;

        // Construction and destruction
        matrix_slice (matrix_type &amp;data, const slice &amp;s1, const slice &amp;s2);
        matrix_slice (matrix_type &amp;data, size_type start1, size_type stride1, size_type size1, size_type start2, size_type stride2, size_type size2);

        size_type size1 () const;
        size_type size2 () const;

        // Element access
        value_type operator () (size_type i, size_type j) const;
        reference_type operator () (size_type i, size_type j);

        matrix_row_type operator [] (size_type i);
        matrix_row_type row (size_type i);
        matrix_column_type column (size_type j);

        matrix_slice project (const range &amp;r1, const range &amp;r2);
        matrix_slice project (const slice &amp;s1, const slice &amp;s2);

        // Assignment
        matrix_slice &amp;operator = (const matrix_slice &amp;ms);
        matrix_slice &amp;assign_temporary (matrix_slice &amp;ms);
        template&lt;class AE&gt;
        matrix_slice &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AE&gt;
        matrix_slice &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);
        template&lt;class AT&gt;
        matrix_slice&amp; operator *= (const AT &amp;at);

        // Swapping
	void swap (matrix_slice &amp;ms);
	friend void swap (matrix_slice &amp;ms1, matrix_slice &amp;ms2);

        // Iterators simply are indexes.

        class iterator1;

        class const_iterator2;

        class const_iterator1:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {
        public:
            typedef typename M::const_iterator1::iterator_category iterator_category;

            // Construction and destruction
            const_iterator1 (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator1 (const iterator1 &amp;it);

            // Arithmetic
            const_iterator1 &amp;operator ++ ();
            const_iterator1 &amp;operator -- ();
            const_iterator1 &amp;operator += (difference_type n);
            const_iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator1 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator2 begin () const;
            const_iterator2 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator1 &amp;it) const;
        };

        const_iterator1 begin1 () const;
        const_iterator1 end1 () const;

        class iterator2;

        class iterator1:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator1, value_type&gt; {
        public:
            typedef typename M::iterator1::iterator_category iterator_category;

            // Construction and destruction
            iterator1 (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator1 &amp;operator ++ ();
            iterator1 &amp;operator -- ();
            iterator1 &amp;operator += (difference_type n);
            iterator1 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator1 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator2 begin ();
            iterator2 end ();

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator1 &amp;it) const;
        };

        iterator1 begin1 ();
        iterator1 end1 ();

        class const_iterator2:
            public container_const_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {
        public:
            typedef typename M::const_iterator2::iterator_category iterator_category;

            // Construction and destruction
            const_iterator2 (const matrix_type &amp;m, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            const_iterator2 (const iterator2 &amp;it);

            // Arithmetic
            const_iterator2 &amp;operator ++ ();
            const_iterator2 &amp;operator -- ();
            const_iterator2 &amp;operator += (difference_type n);
            const_iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator2 &amp;it) const;

            // Dereference
            value_type operator * () const;

            const_iterator1 begin () const;
            const_iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const const_iterator2 &amp;it) const;
        };

        const_iterator2 begin2 () const;
        const_iterator2 end2 () const;

        class iterator2:
            public container_reference&lt;matrix_type&gt;,
            public random_access_iterator_base&lt;iterator2, value_type&gt; {
        public:
            typedef typename M::iterator2::iterator_category iterator_category;

            // Construction and destruction
            iterator2 (matrix_type &amp;m, const iterator1_type &amp;it1, const iterator2_type &amp;it2);

            // Arithmetic
            iterator2 &amp;operator ++ ();
            iterator2 &amp;operator -- ();
            iterator2 &amp;operator += (difference_type n);
            iterator2 &amp;operator -= (difference_type n);
            difference_type operator - (const iterator2 &amp;it) const;

            // Dereference
            reference_type operator * ();

            iterator1 begin () const;
            iterator1 end () const;

            // Indices
            size_type index1 () const;
            size_type index2 () const;

            // Comparison
            bool operator == (const iterator2 &amp;it) const;
        };

        iterator2 begin2 ();
        iterator2 end2 ();
    };</code></pre>
</body>
</html>
