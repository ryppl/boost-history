<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Vector Expression Related</title>
</head>

<body bgcolor="#FFFFFF">

<h1>Vector Expression Related</h1>

<h2><a name="vector_expression"></a>Vector Expression</h2>

<h4>Description</h4>

<p>The templated class <code>vector_expression&lt;E&gt; </code>forms
the base for all static derived vector expression classes
including class <code>vector</code> itself.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>E</tt> </td>
        <td>The type of the vector expression. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>None. </p>

<h4>Type requirements</h4>

<p>None.</p>

<h4>Public base classes</h4>

<p>None.</p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>const expression_type &amp;operator () () const</code></td>
        <td>Returns a <code>const </code>reference of the
        expression. </td>
    </tr>
    <tr>
        <td><code>expression_type &amp;operator () ()</code></td>
        <td>Returns a reference of the expression. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Base class for the Barton Nackman trick
    template&lt;class E&gt;
    struct vector_expression {
        typedef E expression_type;

        // This class could define an common interface for all 
        // statically derived expression type classes.
        // Due to a compiler deficiency - one can not reference class typedefs of E 
        // on MSVC 6.0 (error C2027) - we only implement the casts.

        const expression_type &amp;operator () () const;
        expression_type &amp;operator () ();
    };</code></pre>

<h2><a name="vector_references"></a>Vector References</h2>

<h3>Constant Reference</h3>

<h4>Description</h4>

<p>The templated class <code>vector_const_reference&lt;E&gt; </code>contains
a constant reference to a vector expression.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>E</tt> </td>
        <td>The type of the vector expression. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_const_reference&lt;E&gt;
&gt;</code></p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_const_reference (const expression_type
        &amp;e)</code> </td>
        <td>Constructs a constant reference of the expression.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the expression. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the expression. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the expression. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    template&lt;class E&gt;
    class vector_const_reference:
        public vector_expression&lt;vector_const_reference&lt;E&gt; &gt; {
    public:
        typedef E expression_type;
        typedef typename E::size_type size_type;
        typedef typename E::difference_type difference_type;
        typedef typename E::value_type value_type;
        typedef typename E::const_iterator const_iterator_type;

        // Construction and destruction
        vector_const_reference (const expression_type &amp;e);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;

        // Iterator is the iterator of the referenced expression.

        typedef const_iterator_type const_iterator;

        const_iterator begin () const;
        const_iterator end () const;
    };</code></pre>

<h3>Reference</h3>

<h4>Description</h4>

<p>The templated class <code>vector_reference&lt;E&gt; </code>contains
a reference to a vector expression.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>E</tt> </td>
        <td>The type of the vector expression. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_reference&lt;E&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_reference (expression_type &amp;e)</code></td>
        <td>Constructs a reference of the expression.</td>
    </tr>
    <tr>
        <td><code>void resize (size_type size)</code></td>
        <td>Resizes the expression to hold at most <code>size</code>
        elements. </td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the expression. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>reference_type operator () (size_type i)</code></td>
        <td>Returns a reference of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the expression. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the expression. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the beginning
        of the expression. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <tt>iterator</tt> pointing to the end of
        the expression. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    template&lt;class E&gt;
    class vector_reference: 
        public vector_expression&lt;vector_reference&lt;E&gt; &gt; {
    public:
        typedef E expression_type;
        typedef typename E::size_type size_type;
        typedef typename E::difference_type difference_type;
        typedef typename E::value_type value_type;
        typedef typename E::reference_type reference_type;
        typedef typename E::const_iterator const_iterator_type;
        typedef typename E::iterator iterator_type;

        // Construction and destruction
        vector_reference (expression_type &amp;e);

        // Resizing
        void resize (size_type size);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;
        reference_type operator () (size_type i);

        // Iterator is the iterator of the referenced expression.

        typedef const_iterator_type const_iterator;

        const_iterator begin () const;
        const_iterator end () const;

        typedef iterator_type iterator;

        iterator begin ();
        iterator end ();
    };</code></pre>

<h2><a name="vector_operations"></a>Vector Operations</h2>

<h3>Unary Operation Description</h3>

<h4>Description</h4>

<p>The templated class <code>vector_unary&lt;E, F&gt; </code>describes
a unary vector operation.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>E</tt> </td>
        <td>The type of the vector expression. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>F</tt></td>
        <td>The type of the operation.</td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_unary&lt;E, F&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_unary (const expression_type &amp;e)</code></td>
        <td>Constructs a description of the expression.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the expression. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the expression. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the expression. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    template&lt;class E, class F&gt;
    class vector_unary: 
        public vector_expression&lt;vector_unary&lt;E, F&gt; &gt; {
    public:
        typedef E expression_type;
        typedef F functor_type;
        typedef typename E::size_type size_type;
        typedef typename E::difference_type difference_type;
        typedef typename F::value_type value_type;
        typedef vector_unary&lt;E, F&gt; const_closure_type;
        typedef typename E::const_iterator const_iterator_type;

        // Construction and destruction
        vector_unary (const expression_type &amp;e);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;

        // Iterator enhances the iterator of the referenced expression 
        // with the unary functor.

        class const_iterator:
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename E::const_iterator::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const const_iterator_type &amp;it);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;
    };</code></pre>

<h3>Unary Operations</h3>

<h4>Prototypes</h4>

<pre><code>    template&lt;class E, class F&gt;
    struct vector_unary_traits {
        typedef vector_unary&lt;typename E::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type; 
    };

    // (- v) [i] = - v [i]
    template&lt;class E&gt; 
    typename vector_unary_traits&lt;E, scalar_negate&lt;typename E::value_type&gt; &gt;::result_type
    operator - (const vector_expression&lt;E&gt; &amp;e);

    // (conj v) [i] = conj (v [i])
    template&lt;class E&gt; 
    typename vector_unary_traits&lt;E, scalar_conj&lt;typename E::value_type&gt; &gt;::result_type
    conj (const vector_expression&lt;E&gt; &amp;e);

    // (trans v) [i] = v [i]
    template&lt;class E&gt; 
    typename vector_unary_traits&lt;E, scalar_identity&lt;typename E::value_type&gt; &gt;::result_type
    trans (const vector_expression&lt;E&gt; &amp;e);

    // (herm v) [i] = conj (v [i])
    template&lt;class E&gt; 
    typename vector_unary_traits&lt;E, scalar_conj&lt;typename E::value_type&gt; &gt;::result_type
    herm (const vector_expression&lt;E&gt; &amp;e);</code></pre>

<h4>Description</h4>

<p><code>operator -</code> computes the additive inverse of a
vector expression. <code>conj </code>computes the complex
conjugate of a vector expression.<code> trans </code>computes the
transpose of a vector expression. <code>herm </code>computes the
hermitean, i.e. the complex conjugate of the transpose of a
vector expression.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Type requirements</h4>

<dir>
    <li><code>E</code> is a model of Vector.</li>
</dir>

<h4>Preconditions</h4>

<p>None.</p>

<h4>Complexity</h4>

<p>Linear depending from the size of the vector expression.</p>

<h4>Examples</h4>

<pre>int main () {
    numerics::vector&lt;std::complex&lt;double&gt; &gt; v (3);
    for (int i = 0; i &lt; v.size (); ++ i) 
        v (i) = std::complex (i, i);

    std::cout &lt;&lt; - v &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::conj (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::trans (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::herm (v) &lt;&lt; std::endl;
}</pre>

<h3>Binary Operation Description</h3>

<h4>Description</h4>

<p>The templated class <code>vector_binary&lt;E1, E2, F&gt; </code>describes
a binary vector operation.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>E1</tt> </td>
        <td>The type of the first vector expression. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>E2</tt></td>
        <td>The type of the second vector expression. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>F</tt></td>
        <td>The type of the operation.</td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_binary&lt;E1, E2, F&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_binary (const expression1_type &amp;e1,
        const expression2_type &amp;e2)</code></td>
        <td>Constructs a description of the expression.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the expression. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the expression. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the expression. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    template&lt;class E1, class E2, class F&gt;
    class vector_binary:
        public vector_expression&lt;vector_binary&lt;E1, E2, F&gt; &gt; {
    public:
        typedef E1 expression1_type;
        typedef E2 expression2_type;
        typedef F functor_type;
        typedef typename promote_traits&lt;typename E1::size_type, typename E2::size_type&gt;::promote_type size_type;
        typedef typename promote_traits&lt;typename E1::difference_type, typename E2::difference_type&gt;::promote_type difference_type;
        typedef typename F::value_type value_type;
        typedef vector_binary&lt;E1, E2, F&gt; const_closure_type;
        typedef typename E1::const_iterator const_iterator1_type;
        typedef typename E2::const_iterator const_iterator2_type;

        // Construction and destruction
        vector_binary (const expression1_type &amp;e1, const expression2_type &amp;e2);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;

        // Iterator merges the iterators of the referenced expressions and  
        // enhances them with the binary functor.

        class const_iterator:
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef </code>typename <code>restrict_traits&lt;typename E1::const_iterator::iterator_category, 
                                    	     typename E2::const_iterator::iterator_category&gt;::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (size_type i, const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);
            
            // Random access specializations
            void increment (std::random_access_iterator_tag);
            void decrement (std::random_access_iterator_tag);
            value_type dereference (std::random_access_iterator_tag) const;

            // Bidirectional specializations
            void increment (std::bidirectional_iterator_tag);
            void decrement (std::bidirectional_iterator_tag);
            value_type dereference (std::bidirectional_iterator_tag) const;

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;
    };</code></pre>

<h3>Binary Operations</h3>

<h4>Prototypes</h4>

<pre><code>    template&lt;class E1, class E2, class F&gt;
    struct vector_binary_traits {
        typedef vector_binary&lt;typename E1::const_closure_type, 
                              typename E2::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type; 
    };

    // (v1 + v2) [i] = v1 [i] + v2 [i]
    template&lt;class E1, class E2&gt;
    typename vector_binary_traits&lt;E1, E2, scalar_plus&lt;typename E1::value_type, 
                                                      typename E2::value_type&gt; &gt;::result_type
    operator + (const vector_expression&lt;E1&gt; &amp;e1, 
                const vector_expression&lt;E2&gt; &amp;e2);

    // (v1 - v2) [i] = v1 [i] - v2 [i]
    template&lt;class E1, class E2&gt;
    typename vector_binary_traits&lt;E1, E2, scalar_minus&lt;typename E1::value_type, 
                                                       typename E2::value_type&gt; &gt;::result_type
    operator - (const vector_expression&lt;E1&gt; &amp;e1, 
                const vector_expression&lt;E2&gt; &amp;e2);</code></pre>

<h4>Description</h4>

<p><code>operator +</code> computes the sum of two vector
expressions. <code>operator - </code>computes the difference of
two vector expressions.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Type requirements</h4>

<dir>
    <li><code>E1</code> is a model of Vector.</li>
    <li><code>E2</code> is a model of Vector.</li>
</dir>

<h4>Preconditions</h4>

<dir>
    <li><code>e1 ().size () == e2 ().size ()</code></li>
</dir>

<h4>Complexity</h4>

<p>Linear depending from the size of the vector expressions.</p>

<h4>Examples</h4>

<pre>int main () {
    numerics::vector&lt;double &gt; v1 (3), v2 (3);
    for (int i = 0; i &lt; std::min (v1.size (), v2.size ()); ++ i) 
        v1 (i) = v2 (i) = std::complex (i, i);

    std::cout &lt;&lt; v1 + v2 &lt;&lt; std::endl;
    std::cout &lt;&lt; v1 - v2 &lt;&lt; std::endl;
}</pre>

<h3>Scalar Vector Operation Description</h3>

<h4>Description</h4>

<p>The templated class <code>vector_binary_scalar&lt;E1, E2,
F&gt; </code>describes a binary operation between a scalar and a
vector.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><tt>E1</tt> </td>
        <td>The type of the scalar expression. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>E2</tt></td>
        <td>The type of the vector expression. </td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><tt>F</tt></td>
        <td>The type of the operation.</td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Vector. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of Vector.</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector_binary_scalar&lt;E1, E2,
F&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>vector_binary_scalar (const expression1_type
        &amp;e1, const expression2_type &amp;e2)</code></td>
        <td>Constructs a description of the expression.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the expression. </td>
    </tr>
    <tr>
        <td><code>value_type operator () (size_type i) const</code></td>
        <td>Returns the value of the <tt>i</tt>-th element. </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the
        beginning of the expression. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <tt>const_iterator</tt> pointing to the end
        of the expression. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    template&lt;class E1, class E2, class F&gt;
    class vector_binary_scalar:
        public vector_expression&lt;vector_binary_scalar&lt;E1, E2, F&gt; &gt; {
    public:
        typedef E1 expression1_type;
        typedef E2 expression2_type;
        typedef F functor_type;
        typedef typename E2::size_type size_type;
        typedef typename E2::difference_type difference_type;
        typedef typename F::value_type value_type;
        typedef vector_binary_scalar&lt;E1, E2, F&gt; const_closure_type;
        typedef typename E1::value_type const_iterator1_type;
        typedef typename E2::const_iterator const_iterator2_type;

        // Construction and destruction
        vector_binary_scalar (const expression1_type &amp;e1, const expression2_type &amp;e2);

        size_type size () const;

        // Element access
        value_type operator () (size_type i) const;

        // Iterator enhances the iterator of the referenced vector expression
        // with the binary functor.

        class const_iterator:
            public random_access_iterator_base&lt;const_iterator, value_type&gt; {
        public:
            typedef typename E2::const_iterator::iterator_category iterator_category;

            // Construction and destruction
            const_iterator (const const_iterator1_type &amp;it1, const const_iterator2_type &amp;it2);

            // Arithmetic
            const_iterator &amp;operator ++ ();
            const_iterator &amp;operator -- ();
            const_iterator &amp;operator += (difference_type n);
            const_iterator &amp;operator -= (difference_type n);
            difference_type operator - (const const_iterator &amp;it) const;

            // Dereference
            value_type operator * () const;

            // Index
            size_type index () const;

            // Comparison
            bool operator == (const const_iterator &amp;it) const;
        };

        const_iterator begin () const;
        const_iterator end () const;
    };</code></pre>

<h3>Scalar Vector Operations </h3>

<h4>Prototypes</h4>

<pre><code>    template&lt;class T1, class E2, class F&gt;
    struct vector_binary_scalar_traits {
        typedef vector_binary_scalar&lt;scalar_const_reference&lt;T1&gt;, 
                                     typename E2::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type; 
    };

    // (t * v) [i] = t * v [i]
    template&lt;class T1, class E2&gt;
    typename vector_binary_scalar_traits&lt;T1, E2, scalar_multiplies&lt;T1, typename E2::value_type&gt; &gt;::result_type
    operator * (const T1 &amp;e1, 
                const vector_expression&lt;E2&gt; &amp;e2);</code></pre>

<h4>Description</h4>

<p><code>operator *</code> computes the product of a scalar and a
vector expression. </p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Type requirements</h4>

<dir>
    <li><code>T1</code> is a model of Scalar.</li>
    <li><code>E2</code> is a model of Vector.</li>
</dir>

<h4>Preconditions</h4>

<p>None.</p>

<h4>Complexity</h4>

<p>Linear depending from the size of the vector expression.</p>

<h4>Examples</h4>

<pre>int main () {
    numerics::vector&lt;double &gt; v (3);
    for (int i = 0; i &lt; v.size (); ++ i) 
        v (i) = i;

    std::cout &lt;&lt; 2.0 * v &lt;&lt; std::endl;
}</pre>

<h2><a name="vector_reductions"></a>Vector Reductions</h2>

<h3>Unary Reductions</h3>

<h4>Prototypes</h4>

<pre><code>    template&lt;class E, class F&gt;
    struct vector_scalar_unary_traits {
        typedef typename F::value_type result_type;
    };

    // sum v = sum (v [i])
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_sum&lt;typename E::value_type&gt; &gt;::result_type
    sum (const vector_expression&lt;E&gt; &amp;e);

    // norm_1 v = sum (abs (v [i]))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_norm_1&lt;typename E::value_type&gt; &gt;::result_type
    norm_1 (const vector_expression&lt;E&gt; &amp;e);

    // norm_2 v = sqrt (sum (v [i] * v [i]))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_norm_2&lt;typename E::value_type&gt; &gt;::result_type
    norm_2 (const vector_expression&lt;E&gt; &amp;e);

    // norm_inf v = max (abs (v [i]))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_norm_inf&lt;typename E::value_type&gt; &gt;::result_type
    norm_inf (const vector_expression&lt;E&gt; &amp;e);

    // index_norm_inf v = min (i: abs (v [i]) == max (abs (v [i])))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_index_norm_inf&lt;typename E::value_type&gt; &gt;::result_type
    index_norm_inf (const vector_expression&lt;E&gt; &amp;e);</code></pre>

<h4>Description</h4>

<p><code>sum </code>computes the sum of the vector expression's
elements. <code>norm_1</code>, <code>norm_2</code> and <code>norm_inf
</code>compute the corresponding <em>||.||</em><sub><em>1</em></sub>,
<em>||.||</em><sub><em>2</em></sub> and <em>||.||</em><sub><em>inf</em></sub>
vector norms.<code> index_norm_1 </code>computes the index of the
vector expression's first element having maximal absolute value.</p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Type requirements</h4>

<dir>
    <li><code>E</code> is a model of Vector.</li>
</dir>

<h4>Preconditions</h4>

<p>None.</p>

<h4>Complexity</h4>

<p>Linear depending from the size of the vector expression.</p>

<h4>Examples</h4>

<pre>int main () {
    numerics::vector&lt;double &gt; v (3);
    for (int i = 0; i &lt; v.size (); ++ i) 
        v (i) = i;

    std::cout &lt;&lt; numerics::sum (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::norm_1 (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::norm_2 (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::norm_inf (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; numerics::index_norm_inf (v) &lt;&lt; std::endl;
}</pre>

<h3>Binary Reductions</h3>

<h4>Prototypes</h4>

<pre><code>    template&lt;class E1, class E2, class F&gt;
    struct vector_scalar_binary_traits {
        typedef typename F::value_type result_type;
    };

    // inner_prod (v1, v2) = sum (v1 [i] * v2 [i]
    template&lt;class E1, class E2&gt;
    typename vector_scalar_binary_traits&lt;E1, E2, vector_inner_prod&lt;typename E1::value_type, 
                                                                   typename E2::value_type,
                                                                   typename promote_traits&lt;typename E1::value_type, 
                                                                                           typename E2::value_type&gt;::promote_type&gt; &gt;::result_type 
    inner_prod (const vector_expression&lt;E1&gt; &amp;e1, 
                const vector_expression&lt;E2&gt; &amp;e2);

    template&lt;class E1, class E2&gt;
    typename vector_scalar_binary_traits&lt;E1, E2, vector_inner_prod&lt;typename E1::value_type, 
                                                                   typename E2::value_type,
                                                                   typename type_traits&lt;typename promote_traits&lt;typename E1::value_type, 
                                                                                                                typename E2::value_type&gt;::promote_type&gt;::precision_type&gt; &gt;::result_type 
    prec_inner_prod (const vector_expression&lt;E1&gt; &amp;e1, 
                     const vector_expression&lt;E2&gt; &amp;e2);</code></pre>

<h4>Description</h4>

<p><code>inner_prod </code>computes the inner product of the
vector expressions. <code>prec_inner_prod </code>computes the
double precision inner product of the vector expressions<code>.</code></p>

<h4>Definition</h4>

<p>Defined in the header vector_et.h.</p>

<h4>Type requirements</h4>

<dir>
    <li><code>E1</code> is a model of Vector.</li>
    <li><code>E2</code> is a model of Vector.</li>
</dir>

<h4>Preconditions</h4>

<dir>
    <li><code>e1 ().size () == e2 ().size ()</code></li>
</dir>

<h4>Complexity</h4>

<p>Linear depending from the size of the vector expressions.</p>

<h4>Examples</h4>

<pre>int main () {
    numerics::vector&lt;double &gt; v1 (3), v2 (3);
    for (int i = 0; i &lt; std::min (v1.size (), v2.size ()); ++ i) 
        v1 (i) = v2 (i) = i;

    std::cout &lt;&lt; numerics::inner_prod (v1, v2) &lt;&lt; std::endl;
}</pre>
</body>
</html>
