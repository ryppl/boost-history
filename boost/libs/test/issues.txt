Boost Test Library Issues List

Overview of changes
-------------------

*  Added unit tests to the Boost Test Library.

*  Changed catch_exceptions to execution_monitor and exposed the interface.

*  Changed test_tools.hpp and test_main.cpp to use unit test as the framework.

*  Changed cpp_main.cpp to optionally suppress confirmation message.

*  Added test and example programs.

Issues for Boost members
------------------------

*  Macro names.

    The test tools library has four function-sytle macros:
    
       BOOST_TEST()             // continue semantics
       BOOST_ERROR()            // continue semantics

       BOOST_CRITICAL_TEST()    // abort semantics
       BOOST_CRITICAL_ERROR()   // abort semantics

    The unit test library has a whole series of function-sytle macros with either continue or abort sematics.

       BOOST_CHECK()             // continue semantics
       BOOST_CHECK_EQUAL()       // continue semantics
       BOOST_CHECK_REAL()        // continue semantics
       BOOST_ERROR()             // continue semantics

       BOOST_REQUIRE()           // abort semantics
       BOOST_REQUIRE_EQUAL()     // abort semantics
       BOOST_REQUIRE_REAL()      // abort semantics
       BOOST_FAIL()              // abort semantics

     Ullrich has provided synonyms:

       BOOST_CHECK   == BOOST_TEST
       BOOST_REQUIRE == BOOST_CRITICAL_TEST
       BOOST_FAIL    == BOOST_CRITICAL_ERROR
       
     Although that might be helpful in the short term, it will just cause confusion in the long term.  We should settle on one form or the other.  I agree that CRITICAL is a bit much, so would find the following acceptable:

       BOOST_TEST()             // continue semantics
       BOOST_TEST_EQUAL()       // continue semantics
       BOOST_TEST_REAL()        // continue semantics
       BOOST_ERROR()            // continue semantics

       BOOST_REQUIRE()          // abort semantics
       BOOST_REQUIRE_EQUAL()    // abort semantics
       BOOST_REQUIRE_REAL()     // abort semantics
       BOOST_FAIL()             // abort semantics

*  The regression tests need to be run on more platforms.

Issues for both Beman and Ullrich
---------------------------------

*  Boost.Build for library creation.

*  Boost.Build for regression tests.

*  execution_monitor.cpp
   // for testing on Win32, GCC thinks it is a unix platform
   // TODO: figure out how to tell when it is really unix

Issues for Beman
----------------

*  Execution Monitor Documentation

*  execution_monitor.cpp for Win32 complilers needs to include some MS header, but windows.h is overkill.

*  execution_monitor.hpp should have a "#ifdef BOOST_INCLUDE_MAIN" or similar way to include execution_monitor.cpp for use in testing when no library is available. See next comment.

*  Verify test_main.cpp removal of --loglevel works correctly.

*  Check Eudora Boost Test folder for additional issues.

*  No attempt at integration of Win32 timeout feature.  Enough trouble with execution_monitor as it is.

Issues for Ullrich
------------------

*  Unit Test Documentation

*  Should the non-templated implementation portions of unit_test.hpp be moved to a separate unit_test.cpp?

*  Destructors are handled differently in two ways:

   -- All destructor errors are considered fatal.
   -- The log level threshold is reduced for destructors.

   While the rationale for these behaviors is understandable, the unfortunate
   effect is that program behavior appears inconsistent.  Also, many constructor
   errors are similarly serious, yet they are not treated specially.
   I did a usability test, and think both destructor special behaviors
   should be eliminated.

*  Unit tests might benefit from having argc and argv available (although possibly via explicit call to a function, rather than being passed by arguments.)

*  There are many int counters in unit_test.hpp - these should be changed to long or int_least32_t?  Otherwise automatic test case generators may well gnerate enough cases to exceed the 65K size of an int on some platforms.   
-- end --
  