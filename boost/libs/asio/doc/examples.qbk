[/
 / Copyright (c) 2003-2007 Christopher M. Kohlhoff (chris at kohlhoff dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:examples Examples]


[heading Allocation]

This example shows how to customise the allocation of memory associated with
asynchronous operations.

* [@../../example/allocation/server.cpp]


[heading Buffers]

This example demonstrates how to create reference counted buffers that can be
used with socket read and write operations.

* [@../../example/buffers/reference_counted.cpp]


[heading Chat]

This example implements a chat server and client. The programs use a custom
protocol with a fixed length message header and variable length message body.

* [@../../example/chat/chat_message.hpp]
* [@../../example/chat/chat_client.cpp]
* [@../../example/chat/chat_server.cpp]


[heading Echo]

A collection of simple clients and servers, showing the use of both synchronous
and asynchronous operations.

* [@../../example/echo/async_tcp_echo_server.cpp]
* [@../../example/echo/async_udp_echo_server.cpp]
* [@../../example/echo/blocking_tcp_echo_client.cpp]
* [@../../example/echo/blocking_tcp_echo_server.cpp]
* [@../../example/echo/blocking_udp_echo_client.cpp]
* [@../../example/echo/blocking_udp_echo_server.cpp]


[heading HTTP Client]

Example programs implementing simple HTTP 1.0 clients. These examples show how
to use the [link boost_asio.reference.read_until] and [link
boost_asio.reference.async_read_until] functions.

* [@../../example/http/client/sync_client.cpp]
* [@../../example/http/client/async_client.cpp]


[heading HTTP Server]

This example illustrates the use of asio in a server implementation of HTTP 1.0.
It demonstrates how to perform a clean shutdown by cancelling all outstanding
asynchronous operations.

* [@../../example/http/server/connection.cpp]
* [@../../example/http/server/connection.hpp]
* [@../../example/http/server/connection_manager.cpp]
* [@../../example/http/server/connection_manager.hpp]
* [@../../example/http/server/header.hpp]
* [@../../example/http/server/mime_types.cpp]
* [@../../example/http/server/mime_types.hpp]
* [@../../example/http/server/posix_main.cpp]
* [@../../example/http/server/reply.cpp]
* [@../../example/http/server/reply.hpp]
* [@../../example/http/server/request.hpp]
* [@../../example/http/server/request_handler.cpp]
* [@../../example/http/server/request_handler.hpp]
* [@../../example/http/server/request_parser.cpp]
* [@../../example/http/server/request_parser.hpp]
* [@../../example/http/server/server.cpp]
* [@../../example/http/server/server.hpp]
* [@../../example/http/server/win_main.cpp]


[heading Iostreams]

Two examples showing how to use [link boost_asio.reference.ip__tcp.iostream].

* [@../../example/iostreams/daytime_client.cpp]
* [@../../example/iostreams/daytime_server.cpp]


[heading Multicast]

An example showing the use of multicast to transmit packets to a group of
subscribers.

* [@../../example/multicast/receiver.cpp]
* [@../../example/multicast/sender.cpp]


[heading Serialization]

This example shows how Boost.Serialization can be used with asio to encode and
decode structures for transmission over a socket.

* [@../../example/serialization/client.cpp]
* [@../../example/serialization/connection.hpp]
* [@../../example/serialization/server.cpp]
* [@../../example/serialization/stock.hpp]


[heading Services]

This example demonstrates how to integrate custom functionality (in this case,
for logging) into asio's [link boost_asio.reference.io_service io_service], and
how to use a custom service with [link
boost_asio.reference.basic_stream_socket].

* [@../../example/services/basic_logger.hpp]
* [@../../example/services/daytime_client.cpp]
* [@../../example/services/logger.hpp]
* [@../../example/services/logger_service.cpp]
* [@../../example/services/logger_service.hpp]
* [@../../example/services/stream_socket_service.hpp]


[heading SSL]

Example client and server programs showing the use of the [link
boost_asio.reference.ssl__stream] template with asynchronous operations.

* [@../../example/ssl/client.cpp]
* [@../../example/ssl/server.cpp]


[heading Timeouts]

A collection of examples showing how to cancel long running asynchronous
operations after a period of time.

* [@../../example/timeouts/accept_timeout.cpp]
* [@../../example/timeouts/connect_timeout.cpp]
* [@../../example/timeouts/datagram_receive_timeout.cpp]
* [@../../example/timeouts/stream_receive_timeout.cpp]


[heading Timers]

Examples showing how to customise deadline_timer using different time types.

* [@../../example/timers/tick_count_timer.cpp]
* [@../../example/timers/time_t_timer.cpp]


[endsect]
