
[library Boost.Proto
    [quickbook 1.3]
    [authors [Niebler, Eric]]
    [copyright 2006 Eric Niebler]
    [category template]
    [id proto]
    [dirname proto]
    [purpose
        Generic expression template, meta-grammar and
        tree-transformation framework.
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/
 / Copyright (c) 2006 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/ QuickBook Document version 1.3 ]

[/  Images   ]

[def __note__               [$images/note.png]]
[def __alert__              [$images/caution.png]]
[def __detail__             [$images/note.png]]
[def __tip__                [$images/tip.png]]

[/  Links   ]

[def _spirit_fx_            [@http://spirit.sourceforge.net Spirit Parser Framework]]
[def _spirit_               [@http://spirit.sourceforge.net Spirit]]
[def _xpressive_            [@../../../libs/xpressive/doc/index.html Boost.Xpressive]]
[def _expr_                 [classref boost::proto::expr<Tag,Args,1> `expr<>`]]
[def _ref_                  [classref boost::proto::ref_ `ref_<>`]]
[def _unref_                [classref boost::proto::functional::unref `unref()`]]
[def _deep_copy_            [classref boost::proto::functional::deep_copy `deep_copy()`]]
[def _extends_              [classref boost::proto::extends `extends<>`]]
[def _as_expr_              [classref boost::proto::functional::as_expr `as_expr()`]]
[def _as_arg_               [classref boost::proto::functional::as_arg `as_arg()`]]
[def _make_expr_            [funcref boost::proto::make_expr `make_expr()`]]
[def _unpack_expr_          [funcref boost::proto::unpack_expr `unpack_expr()`]]
[def _matches_              [classref boost::proto::matches `matches<>`]]
[def _or_                   [classref boost::proto::or_ `or_<>`]]
[def _and_                  [classref boost::proto::and_ `and_<>`]]
[def _if_                   [classref boost::proto::if_ `if_<>`]]
[def _exact_                [classref boost::proto::exact `exact<>`]]
[def _convertible_to_       [classref boost::proto::convertible_to `convertible_to<>`]]
[def _is_expr_              [classref boost::proto::is_expr `is_expr<>`]]
[def _tag_of_               [classref boost::proto::tag_of `tag_of<>`]]
[def _arg_                  [funcref boost::proto::arg `arg()`]]
[def _arg_c_                [funcref boost::proto::arg_c `arg_c()`]]
[def _eval_                 [classref boost::proto::functional::eval `eval()`]]
[def _left_                 [classref boost::proto::functional::left `left()`]]
[def _right_                [classref boost::proto::functional::right `right()`]]
[def _terminal_             [classref boost::proto::terminal `terminal<>`]]
[def _unary_expr_           [classref boost::proto::unary_expr `unary_expr<>`]]
[def _binary_expr_          [classref boost::proto::binary_expr `binary_expr<>`]]
[def _literal_              [classref boost::proto::literal `literal<>`]]
[def _lit_                  [funcref boost::proto::lit `lit()`]]
[def _vararg_               [classref boost::proto::vararg `vararg<>`]]
[def _default_context_      [classref boost::proto::default_context `default_context`]]
[def _callable_context_     [classref boost::proto::callable_context `callable_context<>`]]

[include preface.qbk]

[section User's Guide]

This section describes how to use Boost.Proto to build an expression template library.
If you are looking for detailed information regarding specific components in Boost.Proto,
check the [link proto.reference Reference] section.

[include installation.qbk]

[include quick_start.qbk]

[include calculator.qbk]

[include grammars.qbk]

[include transforms.qbk]

[include extensibility.qbk]

[include examples.qbk]

[endsect]

[/ xinclude protodoc.xml]

[include acknowledgements.qbk]

