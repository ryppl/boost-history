[/
 / Copyright (c) 2008-2009 Jared McIntyre
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:custom_delimeters Custom Delimiters]

Explore provides the ability to change the strings used in the container streaming process through the use of several new stream manipulators.

[table Explore Stream Manipulators
    [[Manipulator]                 [Default][Description]]
    [[start(char*)]                ['\[']   [Changes the string output at the beginning of a container.]]
    [[end(char*)]                  ['\]']   [Changes the string output at the end of a container.]]
    [[seperator(char*)]            [', ']   [Changes the string output in between elements.]]
    [[assoc_item_start(char*)]     ['']     [Changes the string output at the front of an association item.]]
    [[assoc_item_end(char*)]       ['']     [Changes the string output at the end of an association item.]]
    [[assoc_item_seperator(char*)] [':']    [Changes the string output in between elements of an association item.]]
    [[rows(size_t)]                [???]    [???]]
    [[item_wdth(size_t)]           [???]    [???]]
]

[important There are both char* and wchar_t* versions of all string manipulator functions. However, you can only use char manipulators with ostreams and
wchar_t manipulators with wostreams. Using the wrong type with the wrong stream will cause a compile error.]

For example, to change the beginning and end output of a container to be the greater and less than symbols, you would do the following.

   std::vector<int> vi;
   vvi.push_back(1);
   vvi.push_back(2);
   vvi.push_back(3);
   std::cout << explore::start("<") << explore::end(">") << vi;

prints

   <1, 2, 3>
   
[heading Manipulator Helper Functions]

There are several helper functions that will set multiple manipulators with one call.

[table Explore Stream Manipulator Helpers
    [[Manipulator]                                                    [Description]]
    [[begin_end(char* begin, char* end)]                              [Changes the string output of the beginning and end of a container.]]
    [[delimeters(char* begin, char* separator, char* end)]            [Changes the string output of the beginning, eseparator, and end of a container.]]
    [[assoc_item_begin_end(char* begin, char* end)]                   [Changes the string output of the beginning and end of an association item.]]
    [[assoc_item_delimeters(char* begin, char* separator, char* end)] [Changes the string output of the beginning, eseparator, and end of an association item.]]
]

The previous code could have been written

   std::cout << explore::begin_end("<", ">") << vi;

[heading Delimeters by Level]

Sometimes you need to output your code differently for nested containers. To do this, create a custom formatter and define different formatting rules for different levels. The following formatter prints all child containers on a new line, and those child containers have custom delimeters.

   std::ostream& format_2d(std::ostream& ostr)
   {
       using namespace explore;
   
       // level 0
       ostr << start("") << explore::end("") << separator("\n");
   
       // level 1
       ostr << start("|", 1) << explore::end("|", 1) << separator(" ", 1);
   
       return ostr;
   }

The following example uses the above formatter against a vector containing a vector of int.

   std::vector<int> vi;
   vi.push_back(1);
   vi.push_back(2);
   vi.push_back(3);
   std::vector<std::vector<int> > vvi;
   vvi.push_back(vi);
   vvi.push_back(vi);
   vvi.push_back(vi);
   std::cout << format_2d << vvi;

This prints

   |1 2 3|
   |1 2 3|
   |1 2 3|
   
TODO: HTML list output example:
    
    // manipulator
    template<typename Elem, typename Tr>
    std::basic_ostream<Elem, Tr>& format_html_list(std::basic_ostream<Elem, Tr>& ostr)
    {
        return ostr
        << start("<ul>\n   <li>")
        << separator("\n   <li>")
        << end("\n</ul>");
    }
    
[heading Item Width]

TODO: finish this section

[heading Retrieving Manipulator Values]

TODO: finish this section

[endsect]
