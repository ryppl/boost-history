[library Empirical Cumulative Distribution Function
	[quickbook 1.5]
	[purpose Tentative addition Boost.Accumulators' statistics]
	[category Boost.Accumulator]
	[authors [Erwann Rogard],[Eric Niebler]]
    [copyright 2005 Eric Niebler, 2011 Erwann Rogard]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [id boost_acc_ecdf]
]

[/Support]

[def __ER__												[@mailto:erDOTciDOT2020ATgmailDOTcom ER]]

[/  Links   ]

[def __boost__											Boost]


[def _sample_type_           '''<replaceable>sample-type</replaceable>''']
[def _weight_type_           '''<replaceable>weight-type</replaceable>''']
[def _variate_type_          '''<replaceable>variate-type</replaceable>''']
[def _variate_tag_           '''<replaceable>variate-tag</replaceable>''']
[def _left_or_right_         '''<replaceable>left-or-right</replaceable>''']
[def _implementation_defined_ '''<replaceable>implementation-defined</replaceable>''']
[def _boost_                 [@http://www.boost.org Boost]]
[def _mpl_                   [@../../libs/mpl/index.html MPL]]
[def _mpl_lambda_expression_ [@../../libs/mpl/doc/refmanual/lambda-expression.html MPL Lambda Expression]]
[def _parameter_             [@../../libs/parameter/index.html Boost.Parameter]]
[def _accumulator_set_       [classref boost::accumulators::accumulator_set `accumulator_set<>`]]
[def _accumulator_base_      [classref boost::accumulators::accumulator_base `accumulator_base`]]
[def _depends_on_            [classref boost::accumulators::depends_on `depends_on<>`]]
[def _feature_of_            [classref boost::accumulators::feature_of `feature_of<>`]]
[def _as_feature_            [classref boost::accumulators::as_feature `as_feature<>`]]
[def _features_              [classref boost::accumulators::features `features<>`]]
[def _external_              [classref boost::accumulators::external `external<>`]]
[def _droppable_             [classref boost::accumulators::droppable `droppable<>`]]
[def _droppable_accumulator_ [classref boost::accumulators::droppable_accumulator `droppable_accumulator<>`]]
[def _extractor_             [classref boost::accumulators::tag::extractor `extractor<>`]]
[def _tail_                  [classref boost::accumulators::tag::tail `tail`]]
[def _tail_variate_          [classref boost::accumulators::tag::tail_variate `tail_variate<>`]]
[def _extract_result_        [funcref boost::accumulators::extract_result `extract_result()`]]
[def _ZKB_                   [@http://www.zkb.com Z'''&uuml;'''rcher Kantonalbank]]

[template tpl_rand_gen[var] [@http://www.boost.org/doc/libs/release/libs/random/index.html [var]]]
[template tpl_stat_dist[var] [@http://www.boost.org/doc/libs/1_46_1/libs/math/doc/sf_and_dist/html/index.html [var]]]
[template tpl_iid[var] [@http://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables [var]]]

[section:intro Introduction]

Empirical distribution assuming [tpl_iid iid] observations. Includes the Kolmogorov-Smirnov statistic and tools to assess
convergence of a [tpl_rand_gen random generator] to a given [tpl_stat_dist statistical distribution].

Given some variable [^X], let [^F] denote its cumulative distribution function on the real line [footnote Since [^F] fully characterizes the
distribution of  [^X], it may be called the distribution of X i.e. the term ['cumulative] may be omitted]. Equivalently,
[^F(X <= x)] is the probability that [^X] is less than or equal to [^x]. Let [^X1,...,Xn] denote a numbered random sample of X. The ['empirical distribution] function is defined as 
[: [^Fn(t) = (1/n) sum{1{Xi <= t} : i=1,...,n}] ]

[endsect][/intro]
[section:cdf cdf]

This feature, in terms of our definition of an empirical distribution, is function [^Fn].

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/cdf.hpp [^boost/accumulators/statistics/ecdf/cdf.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/cdf.hpp]
[syntax_ecdf_cdf]

[heading Example]
[import ../test/cdf.cpp]
[test_ecdf_cdf]

[endsect][/cdf]
[section:count count]

This feature maps a value, [^x], in the domain of [^X], to its number of occurences. Not to be confused with `accumulators::tag::count`.

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/count.hpp [^boost/accumulators/statistics/ecdf/count.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/count.hpp]
[syntax_ecdf_count]

[heading Example]
[import ../test/count.cpp]
[test_ecdf_count]

[endsect][/count]

[section:cumulative_count cumulative_count]

This feature maps a value, [^x], in the domain of [^X] to the number of occurences of values that are less than or equal to [^x].

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/cumulative_count.hpp [^boost/accumulators/statistics/ecdf/cumulative_count.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/cumulative_count.hpp]
[syntax_ecdf_cumulative_count]

[heading Example]
[import ../test/cumulative_count.cpp]
[test_ecdf_cumulative_count]

[endsect][/cumulative_count]
[section:kolmogorov_smirnov_statistic kolmogorov_smirnov_statistic]

The Kolmogorov-Smirnov statistic between a known distribution [^F] and, and empirical distribution, [^Fn], is the infinity-norm distance
between them: [:[^max{|Fn( x ) - F( x )|: x = X1,...,Xn}]]

If [^Xi] is [tpl_iid iid] drawn from F, then this distance converges to zero. Refer to the [link ecdf_bib bibliography] for precise mode of convergence and bounds.

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/kolmogorov_smirnov_statistic.hpp [^boost/accumulators/statistics/ecdf/kolmogorov_smirnov_statistic.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/kolmogorov_smirnov_statistic.hpp]
[syntax_ecdf_kolmogorov_smirnov_statistic]

[heading Example]
[import ../test/kolmogorov_smirnov_statistic.cpp]
[test_ecdf_kolmogorov_smirnov_statistic]

[endsect][/kolmogorov_smirnov_statistic]
[section:pdf pdf]

This empirical pdf, evaluated at x, is the number of observed x in the sample, divided by the total number of observations, known
as `accumulators::count`.

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/pdf.hpp [^boost/accumulators/statistics/ecdf/pdf.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/pdf.hpp]
[syntax_ecdf_pdf]

[heading Example]
[import ../test/pdf.cpp]
[test_ecdf_pdf]

[endsect][/pdf]

[section:aux_ aux_]

Miscellanea tools

[section:simulator simulator]

A functor that binds an accumulator to a random generator. Typically, it is to be used in a loop : at each iteration the simulator
generates a random sample of a given size, [^n], and updates the accumulator. Size n can be specified manually or generated automatically.
By default, the sequence of [^n]'s are powers of 2.

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/aux_/simulator.hpp [^boost/accumulators/statistics/ecdf/aux_/simulator.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/aux_/simulator.hpp]
[syntax_ecdf_aux_simulator]

[endsect][/simulator]

[section:ks_gen kolmogorov_smirnov_generator]

A generator for producing a sequence of Kolmogorov-Smirnov statistics between a given [tpl_stat_dist distribution] and a random sample 
generated by a [tpl_rand_gen random generator]. This sequence is supposed to converge to zero (ignoring floating point error) if the samples are generated
from the same distribution as that specified. 

[heading Header]
[@../../../../../boost/accumulators/statistics/ecdf/aux_/kolmogorov_smirnov_generator.hpp [^boost/accumulators/statistics/ecdf/aux_/kolmogorov_smirnov_generator.hpp]]

[heading Synopsis]
[import ../../../../boost/accumulators/statistics/ecdf/aux_/kolmogorov_smirnov_generator.hpp]
[syntax_ecdf_aux_kolmogorov_smirnov_generator]

[heading Example]
[import ../test/ks_gen.cpp]
[*Example1]
[test_ks_gen1]
[*Example2]
[test_ks_gen2]

[endsect][/ks_gen]

[endsect][/aux_]

[section:bib Bibliography]
[#ecdf_bib]

[@http://www.citeulike.org/user/ctacmo/article/556271 Asymptotic Statistics] 
(Cambridge Series in Statistical and Probabilistic Mathematics), van der Vaart, A. W., 2000, Cambridge University Press.

[endsect][/bib]
[section:port Portability]

[template tpl_test[var] 		[@../../test/ [var]] ] 
[def __ubuntu__ 				[@http://releases.ubuntu.com/lucid/ Ubuntu 10.04]]
[def __osx__					[@http://support.apple.com/kb/HT4250 Mac OS X 10.6.5]]
[def __ms__     				[@http://www.microsoft.com/windowsxp/pro/default.mspx Windows XP ]]
[def __msvc__					[@http://www.microsoft.com/express/Downloads/#2010-Visual-CPP MSVC 10.0]]
[def __icc__					[@http://software.intel.com/en-us/articles/intel-compilers/ Intel (R) C++ Compiler XE 12.0]]

[def __na__						Not available]
[def __ok__						passed]
[def __osx_boost_rev__			[^v1.45]]
[def __ms_boost_rev__			[^v1.46]]
[def __ubu_boost_rev__			[^v1.45]]
[def __osx_as2_rev__			r72896]
[def __ms_as2_rev__				__na__]
[def __ubu_as2_rev__			__na__]

Click [tpl_test here] to view the test suite. 

[/

OSX
 sudo bjam darwin-4.0 variant=debug,release -a
 sudo bjam darwin-4.2 variant=debug,release -a
Unix
 sudo bjam darwin-4.4 variant=debug,release -a
 sudo bjam darwin-4.4 variant=debug,release cxxflags=-std=c++0x -a
Ubuntu
 sudo bjam gcc variant=debug,release -a
 sudo bjam gcc variant=debug,release cxxflags=-std=c++0x -a
 sudo bjam intel variant=debug,release -a
MSVC
 bjam toolset=msvc-10.0 variant=debug,release cflags=-D_SCL_SECURE_NO_WARNINGS

]

[table
	[
		[ OS]
		[ Compiler ]
		[ Option(s) ]
		[__boost__]
		[ Revision ]
		[ Result ]
	]
	[
		[ __osx__]
		[ gcc-4.0 ]
		[ ]
		[ __osx_boost_rev__ ]
		[ __osx_as2_rev__]
		[ __ok__ ] 
	]
]

[endsect][/port]
