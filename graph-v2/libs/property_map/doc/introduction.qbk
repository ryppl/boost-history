[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Introduction]
The Boost.Property_Map library consists mainly of interface specifications in the
form of concepts - similar to the iterator concepts in the Standard Template Library
(STL) [bibref stl Hewlett-Packard'1994]. The Boost.Property_Map concepts define a
general purpose interface for mapping key objects to corresponding value objects,
thereby hiding the details of how the mapping is implemented from algorithms.
These interface specifications are intended for use by implementors of generic
libraries because they decouple the interface and implementation of a mapping
(e.g., a `std::map`) from the algorithms that require it.  The implementation of
types fulfilling the property map interface is up to the client of the algorithm
to provide. The property map requirements are purposefully vague on the type of
the key and value objects to allow for the utmost genericity in the function
templates of the generic library.

The need for the property map interface came from the Boost.Graph library (BGL),
which contains many examples of algorithms that use the property map concepts to
specify their interface. For an example, note the `ColorMap` template parameter of
the `breadth_first_search`. In addition, the BGL contains many examples of concrete
types that implement the property map interface. The `adjacency_list` class implements
property maps for accessing objects (properties) that are attached to vertices
and edges of the graph.

The Boost.Property_Map library also contains a few adaptors that convert commonly
used data-structures that implement a mapping operation, such as builtin arrays
(pointers), iterators, and `std::map`, to have the property map interface. These
adaptors are not meant to fulfill all mapping needs, but are to serve as an
example of how to implement the interface as well as covering a few common cases.
See the header files for details.

Property maps are statically-typed entities. If you need to access property maps
in a more dynamic setting (e.g., because you're reading an unknown set of attributes
from a file), you can use the `dynamic_properties` class to access a set of property
maps through a dynamically-typed interface.

[heading History]
The property map interface originated as data accessors in Dietmar Kühl's Masters
Thesis on generic graph algorithms. The property map idea also appeared under the
guise of decorators in early versions of the Generic Graph Component Library (GGCL),
which is now the Boost.Graph library. The main motivation for the property map
interface was to support the access of data associated with vertices and edges in a
graph, though the applicability of property maps goes beyond this.

[heading Acknowledgments]
Thanks go to Dietmar Kühl for coming up with this mechanism, and thanks go to the
Boost members who helped refine and improve the property map interface. Thanks to
Dave Abrahams for managing the formal review of the BGL which included the property
map library.
[endsect]
