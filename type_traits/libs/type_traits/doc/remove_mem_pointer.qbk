[/ 
  Copyright 2008 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:remove_member_pointer remove_member_pointer]

   template <class T>
   struct remove_member_pointer
   {
      typedef __below type;
   };
  
__type The same type as `T`, but with any pointer-to-member modifier removed.

__std_ref 8.3.3.

__compat Requires that the compiler supports partial specialization of class-templates.

__header ` #include <boost/type_traits/remove_member_pointer.hpp>` or ` #include <boost/type_traits.hpp>`

[table Examples

[ [Expression] [Result Type]]

[[`remove_member_pointer<int>::type`][`int`]]

[[`remove_member_pointer<int const*>::type`] [`int const*`]]

[[`remove_member_pointer<int (myclass::*)>::type`] [`int`]]

[[`remove_member_pointer<int (myclass::*)(short)>::type`] [`int (short)`]]

[[`remove_member_pointer<int (myclass::*const)(short)>::type`] [`int (short)`]]

[[`remove_member_pointer<int (myclass::*)(short)const>::type`] [`int (short)`]]
]

[endsect]

