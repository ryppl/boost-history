[/
  (C) Copyright 2009-2011  Frederic Bron.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:can_call_post_decrement can_call_post_decrement]
   template <class LHS, class RET=dont_care>
   struct can_call_post_decrement : public __tof {};

__inherit
If (i) `lhs` of type `LHS` can be used in expression `lhs--`,
and (ii) `RET=dont_care` or the result of expression `lhs--` is convertible to `RET`
then inherits from __true_type,
otherwise inherits from __false_type.

The default behaviour (`RET=dont_care`) is to not check for the return value of postfix `operator--`.
If `RET` is different from the default `dont_care` type, the return value is checked to be convertible to `RET`.
Convertible to `RET` means that the return value of the operator can be used as argument to a function expecting `RET`:
``
void f(RET);
LHS lhs;
f(lhs--); // is valid if can_call_post_decrement<LHS, RET>::value==true
``
If `RET=void`, the return type is checked to be exactly `void`.

__header `#include <boost/type_traits/can_call_post_decrement.hpp>` or `#include <boost/type_traits/can_call.hpp>`

__examples

[:`can_call_post_decrement<LHS, RET>::value_type` is the type `bool`.]
[:`can_call_post_decrement<LHS, RET>::value` is a `bool` integral constant expression.]
[:`can_call_post_decrement<int>::value` is a `bool` integral constant expression that evaluates to `true`.]
[:`can_call_post_decrement<long>` inherits from `__true_type`.]

[:`can_call_post_decrement<int, int>` inherits from `__true_type`.]
[:`can_call_post_decrement<int, long>` inherits from `__true_type`.]
[:`can_call_post_decrement<double, double>` inherits from `__true_type`.]
[:`can_call_post_decrement<double, int>` inherits from `__true_type`.]

[:`can_call_post_decrement<bool>` inherits from `__false_type`.]
[:`can_call_post_decrement<const int>` inherits from `__false_type`.]
[:`can_call_post_decrement<void*>` inherits from `__false_type`.]
[:`can_call_post_decrement<int, std::string>` inherits from `__false_type`.]


[*Known issues:]

This trait cannot detect whether postfix `operator--` is public or not:
if `operator--` is defined as a private member of `LHS` then
instantiating `can_call_post_decrement<LHS>` will produce a compiler error.
For this reason `can_call_post_decrement` cannot be used to determine whether a type has a public `operator--` or not.
``
struct A { private: void operator--(int); };
boost::can_call_post_decrement<A>::value; // error: A::operator--(int) is private
``

There is an issue if the operator exists only for type `A` and `B` is
convertible to `A`. In this case, the compiler will report an ambiguous overload.
``
struct A { };
void operator--(const A&, int);
struct B { operator A(); };
boost::can_call_post_decrement<A>::value; // this is fine
boost::can_call_post_decrement<B>::value; // error: ambiguous overload
``

[endsect]

