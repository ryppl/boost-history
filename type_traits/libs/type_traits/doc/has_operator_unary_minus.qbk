[/
  Copyright 2009-2011  Frédéric Bron.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:has_operator_unary_minus has_operator_unary_minus]
   template <class RHS, class RET=void>
   struct has_operator_unary_minus : public __tof {};

__inherit
If (i) `rhs` of type `RHS` can be used in expression `-rhs`,
and (ii) `RET=void` or the result of expression `-rhs` is convertible to `RET`
then inherits from __true_type,
otherwise inherits from __false_type.

The default behaviour (`RET=void`) is to not check for the return value of prefix `operator-`.
Be careful that it does not mean that `operator-` must return `void` to have the trait derive from __true_type.
If `RET` is different from the default `void` type, the return value is checked to be convertible to `RET`.
Convertible to `RET` means that the return value of the operator can be used as argument to a function expecting `RET`:
``
void f(RET);
RHS rhs;
f(-rhs); // is valid if has_operator_unary_minus<RHS, RET>::value==true
``

This trait cannot detect whether prefix `operator-` is public or not:
if `operator-` is defined as a private member of `RHS` then
instantiating `has_operator_unary_minus<RHS>` will produce a compiler error.
For this reason `has_operator_unary_minus` cannot be used to determine whether a type has a public `operator-` or not.

__header `#include <boost/type_traits/has_operator_unary_minus.hpp>` or `#include <boost/type_traits/operators.hpp>`

__examples


[:`has_operator_unary_minus<RHS, RET>::value_type` is the type `bool`.]
[:`has_operator_unary_minus<RHS, RET>::value` is a `bool` integral constant expression.]
[:`has_operator_unary_minus<int>::value` is a `bool` integral constant expression that evaluates to `true`.]
[:`has_operator_unary_minus<long>` inherits from `__true_type`.]

[:`has_operator_unary_minus<int, int>` inherits from `__true_type`.]
[:`has_operator_unary_minus<int, long>` inherits from `__true_type`.]
[:`has_operator_unary_minus<double, double>` inherits from `__true_type`.]
[:`has_operator_unary_minus<double, int>` inherits from `__true_type`.]
[:`has_operator_unary_minus<const int>` inherits from `__true_type`.]

[:`has_operator_unary_minus<int, std::string>` inherits from `__false_type`.]

[endsect]
