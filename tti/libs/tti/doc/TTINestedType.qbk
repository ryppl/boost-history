[section:tti_nested_type Nested Types]

[heading The Problem]

The goal of the TTI library is never to produce a compiler error by just 
using the functionality in the library, whether it is invoking its function-like macros 
or instantiating the macro metafunctions created by them, and whether the inner element exists 
or not. In this sense The TTI library macros for introspecting an enclosing type for 
an inner element work very well. But there is one exception to this general case.
That exception is the crux of the discussion regarding nested types which follows, 
and explains the reason for the separate group of TTI nested type metafunctions which mirror the 
functionality of the macros and their generated macro metafunctions.

The metafunctions generated by the TTI macros all work with types, whether in specifying
an enclosing type or in specifying the type of some inner element, which may also involve 
types in the signature of that element. The C++ notation for
a nested type, given an enclosing type 'T' and an inner type 'InnerType', is 'T::InnerType'. If either 
the enclosing type 'T' does not exist, or the inner type 'InnerType' does not exist within 'T', 
the expression 'T::InnerType' will give a compiler error if we attempt to use it in our template 
instantiation of one of TTI's macro metafunctions. 

We want to be able to introspect for the existence of inner elements to an enclosing type 
without producing compiler errors. Of course if we absolutely know what types we have and 
that a nested type exists, and these declarations are within our scope, we can always use 
an expression like T::InnerType without error. But this is often not the case when doing template 
programming since the type being passed to us at compile-time in a class or function template 
is chosen at instantiation time.

One solution to this is afforded by the library itself. Given an enclosing type 'T' 
which we know must exist, either because it is a top-level type we know about or 
it is passed to us in some template as a 'class T' or 'typename T', and given an inner type 
named 'InnerType' whose existence we would like ascertain, we can use a TTI_HAS_TYPE(InnerType) macro and it's related 
tti::has_type_InnerType metafunction to determine if the nested type 'InnerType' exists. This solution is perfectly valid 
and, with Boost MPL's selection metafunctions, we can do compile-time selection to generate the 
correct template code. 

However this does not scale that well syntactically if we need to drill down further from a 
top-level enclosing type to a deeply nested type, or even to look for some deeply nested type's 
inner elements. We are going to be generating a great deal of boost::mpl::if_ and/or 
boost::mpl::eval_if type selection statements to get to some final condition where we know we 
can generate the compile-time code which we want.

[heading The Solution]

The TTI library offers a better solution in the form of a set of constructs which work with 
nested types without producing a compiler error if the nested type does not exist, but still 
are able to do the introspecting for inner elements that our TTI macro metafunctions do.

We have already seen one of those constructs, the macro TTI_MEMBER_TYPE 
( and equivalent TTI_TRAIT_MEMBER_TYPE ), which generates a metafunction based on the name 
of an inner type. But instead of telling us whether that inner type exists it instead returns
a typedef 'type' which is that inner type if it exists, else it is an unspecified type if it 
does not. In this way we have created a metafunction, very similar in functionality to 
boost::mpl::identity, but which still returns some marker 'type' if our nested type is invalid.

The remaining nested type metafunctions in the TTI library use this concept of a nested type which does 
not exist not producing a compiler error to introspect the same things that our macro metafunctions 
do, but without having to use the notation 'T::InnerType' to express a nested type. Because of this we 
can avoid a compiler error when attempting to introspect enclosing types, where they may be nested types,
or specifying the signature of inner elements which may involve nested types.

These nested type metafunctions,and how they work, are more fully explained in our next section.

[endsect]
