[section:communicating Communicating with child processes]

The two most interesting stream behaviors are _behavior_pipe_ and _behavior_named_pipe_. You use them to exchange data between a parent and a child process. 

[create_child_context_pipe]

It depends on the stream behavior classes whether parameters can be passed to constructors. _behavior_pipe_ requires a parameter as it needs to know whether the pipe will be attached to an input or output stream of the child process. 

If a parent process wants to communicate with a child process the return value of _create_child_ should not be discarded. The return value of type _child_ provides access to the newly created child process. Among others, the member functions _child_get_stdin_, _child_get_stdout_ and _child_get_stderr_ are provided to access the other ends of the child process' standard streams. 

[caution You must not call _child_get_stdin_, _child_get_stdout_ and _child_get_stderr_ if you didn't configure the standard streams to be redirected to the parent process.]

The streams returned by _child_get_stdin_, _child_get_stdout_ and _child_get_stderr_ are used similarly to streams from the C++ standard library. The type of the return values is either _pistream_ and _postream_ (depending on whether they are input or output streams). These classes are derived from `std::istream` and `std::ostream` and provide two additional member functions `close()` and `handle()`. You use the latter member function for asynchronous I/O. 

[endsect]
