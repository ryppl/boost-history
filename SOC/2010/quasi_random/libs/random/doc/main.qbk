[/
Copyright (c) 2010 Justinas Vygintas Daugmaudis

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[library Boost.Random Quasi-random number generators extension
    [quickbook 1.5]
    [copyright 2010 Justinas Vygintas Daugmaudis]
    [purpose Generation of low discrepancy sequences]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [authors [Daugmaudis, Justinas]]
]


[section Quasi-Random Number Generator]

A quasi-random number generator is a __PseudoRandomNumberGenerator which
provides a deterministic sequence of quasi-random numbers, based on some
algorithm and internal state. [classref boost::random::niederreiter_base2
Niederreiter Base 2] generator is an example of such a [qrng quasi-random
number generator]. The "quasi" modifier is used to denote more clearly that the
values produced by such a generator are neither random nor pseudo-random, but
they form a low discrepancy sequence. The intuitive idea is that a low discrepancy 
sequence is more evenly distributed than a pseudo random sequence would be.
For example, if we generate a low discrepancy sequence of 2D points on a square,
this square would be covered more evenly, and the number of points falling to any
part of the square would be proportional to the number of points in the whole square.
Such sequences share some properties of  random variables and in certain applications 
such as the quasi-Monte Carlo method  their lower discrepancy is an important advantage.

[note Quasi-random sequences are known to give efficient numerical integration 
rules in many Bayesian statistical problems where the posterior distribution can be 
transformed into periodic functions on the n-dimensional hypercube.]

Harold Niederreiter gives an extensive overview on random number generation
and quasi-Monte Carlo methods in his book "Random number generation and
quasi-Monte Carlo methods, Society for Industrial and Applied Mathematics, 1992". 

In addition to the __PseudoRandomNumberGenerator requirements,
a quasi-random number generator has some additional requirements. In the
following table, `X` denotes a quasi-random number generator class, and `v` is 
a const value of `X`.

[table QuasiRandomNumberGenerator requirements
  [[expression] [return type] [pre/post-condition]]
  [[`X::dimension()`] [std::size_t] [the dimension of quasi-random domain. It must be no less than 1.
                        The return value of this function shall not change during the lifetime of the object.]]
 ]

[note The `operator()` returns a successive element of an n-dimensional (n = `X::dimension`) vector 
at each invocation. When all elements are exhausted, `operator()` begins anew with the starting
element of a subsequent n-dimensional vector.]

The class __niederreiter_base2 is a model for a quasi-random number generator.

[endsect]


[section:HeaderSummary Header File Summary]
The following table contains header files used within the quasi-random number generators library extension.
For additional information please use the table of contents above.
[table
   [[Component][Header][Contence]]
   [
      [`niederreiter_base2` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/quasi_random/boost/random/niederreiter_base2.hpp <boost/random/niederreiter_base2.hpp>]]]
      [ Header contains `niederreiter_base2` template. ]
   ]
   [
      [`sobol` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/quasi_random/boost/random/sobol.hpp <boost/random/sobol.hpp>]]]
      [ Header contains `sobol` template. ]
   ]
   [
      [`faure` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/quasi_random/boost/random/faure.hpp <boost/random/faure.hpp>]]]
      [ Header contains `faure` template. ]
   ]
]

[endsect]


[section Reference]

[xinclude reference.xml]

[endsect]
