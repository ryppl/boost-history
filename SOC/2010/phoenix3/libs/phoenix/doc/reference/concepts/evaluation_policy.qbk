[/==============================================================================
    Copyright (C) 2001-2010 Joel de Guzman
    Copyright (C) 2001-2005 Dan Marsden
    Copyright (C) 2001-2010 Thomas Heller

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section EvaluationPolicy]

[heading Description]

Evaluation Policies are the classes which decide how the composite is to be evaluated with respect to the default evaluator.
They are completly independent of the [link phoenix.reference.concepts.actor Actor].

[variablelist Notation
   [[`F`] [Type fulfilling this concept]]
	[[`f`] [Object of type F]]
	[[`Env`]     [Type fulfilling the [link phoenix.reference.concepts.environment Environment concept]]]
	[[`env`] [Object of type Env]]
	[[`A0...AN`] [Types fulfilling the [link phoenix.reference.concepts.actor Actor Concept]]]
	[[`a0...aN`] [Objects of type A0, ...AN]]
]

[heading Valid Expressions]

[table
	[[Expression] [Return Type] [Run time Complexity]]
	[[`f(env, a0...aN)`] [Any Type] [unspecified]]
]

[heading Result Type Expressions]
[table
	[[Expression] [Result Type] [Compile time Complexity]]
	[[`boost::result_of<F(Env, A0...AN)>::type|`] [Result of the evaluation] [unspecified]]
]

[heading Expression Semantics]

[table
	[[Expression] [Semantics]]
	[[`f(env, a0...aN)`] [Evaluates the Composite with the given attached data]]
]

[heading Models]

* `boost::phoenix::value`
* `boost::phoenix::reference`
* `boost::phoenix::argument`
* `boost::phoenix::null_eval`
* `boost::phoenix::if_eval`
* `boost::phoenix::if_else_eval`
* `boost::phoenix::switch_eval`
* `boost::phoenix::while_eval`
* `boost::phoenix::do_while_eval`
* `boost::phoenix::for_eval`
* `boost::phoenix::try_catch_eval`
* `boost::phoenix::try_catch_all_eval`
* `boost::phoenix::throw_eval`
* `boost::phoenix::construct_eval`
* `boost::phoenix::new_eval`
* `boost::phoenix::delete_eval`
* `boost::phoenix::static_cast_eval`
* `boost::phoenix::dynamic_cast_eval`
* `boost::phoenix::reinterpret_cast_eval`
* `boost::phoenix::const_cast_eval`
* `boost::phoenix::local_variable`
* `boost::phoenix::let_eval`
* `boost::phoenix::lambda_eval`
* `boost::phoenix::lambda_actor_eval`

[endsect]
