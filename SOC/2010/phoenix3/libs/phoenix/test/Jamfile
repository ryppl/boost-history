#==============================================================================
#    Copyright (c) 2003-2006 Joel de Guzman
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

# bring in rules for testing
import testing ;

local multi-threading = <library>/boost/thread
                        <threading>multi <define>BOOST_ALL_NO_LIB=1 ;

#test-suite phoenix_detail :
#    [ run detail/type_deduction_tests.cpp ] 
#    ;

test-suite phoenix_core :
    [ run core/primitives_tests.cpp ] 
#    [ run core/function_composition.cpp ] 
    ;

test-suite phoenix_operator :
    [ run operator/arithmetic_tests.cpp ] 
    [ run operator/bitwise_tests.cpp ]
    [ run operator/comparison_tests.cpp ] 
    [ run operator/if_else_tests.cpp ]
    [ run operator/io_tests.cpp ]
    [ run operator/logical_tests.cpp ]
    [ run operator/misc_binary_tests.cpp ]
    [ run operator/self_tests.cpp ]
    [ run operator/unary_tests.cpp ] 
    [ run operator/member.cpp ]
    ;

test-suite phoenix_object :
    [ run object/cast_tests.cpp ] 
    [ run object/new_delete_tests.cpp ] 
    ;

test-suite phoenix_function :
    [ run function/function_tests.cpp ] 
    ;

test-suite phoenix_bind :
    [ run bind/bind_function_tests.cpp ] 
    [ run bind/bind_function_object_tests.cpp ]
    [ run bind/bind_member_function_tests.cpp ]
    [ run bind/bind_member_variable_tests.cpp ]
    ;
    
test-suite phoenix_statement :
    [ run statement/if_tests.cpp ] 
    [ run statement/loops_tests.cpp ] 
    [ run statement/switch_tests.cpp ] 
    [ run statement/exceptions.cpp ]
    ;
        
test-suite phoenix_container :
    [ run container/container_tests1a.cpp ] 
    [ run container/container_tests1b.cpp ] 
    [ run container/container_tests2a.cpp ] 
    [ run container/container_tests2b.cpp ] 
    [ run container/container_tests3a.cpp ] 
    [ run container/container_tests3b.cpp ] 
    [ run container/container_tests4a.cpp ] 
    [ run container/container_tests4b.cpp ] 
    [ run container/container_tests5a.cpp ] 
    [ run container/container_tests5b.cpp ] 
    [ run container/container_tests6a.cpp ] 
    [ run container/container_tests6b.cpp ] 
    ;

test-suite phoenix_scope :
#    [ run scope/lambda_tests.cpp ] 
    [ run scope/let_tests.cpp ] 
#    [ run scope/dynamic_tests.cpp ] 
#    [ run scope/bug_000008.cpp : : : $(multi-threading) ] 
    ;

test-suite phoenix_algorithm :
    [ run algorithm/iteration.cpp ]
    [ run algorithm/transformation1.cpp ]
    [ run algorithm/transformation2.cpp ]
    [ run algorithm/transformation3.cpp ]
    [ run algorithm/transformation4.cpp ]
    [ run algorithm/querying.cpp ]
    [ run algorithm/querying2.cpp ]
    ;

test-suite phoenix_boost_bind_compatibility :
    [ run boost_bind_compatibility/bind_and_or_test.cpp ]
    #[ run boost_bind_compatibility/bind_cdecl_mf_test.cpp ]
    [ run boost_bind_compatibility/bind_const_test.cpp ]
    [ run boost_bind_compatibility/bind_cv_test.cpp ]
    [ run boost_bind_compatibility/bind_dm_test.cpp ]
    [ run boost_bind_compatibility/bind_dm2_test.cpp ]
    [ run boost_bind_compatibility/bind_dm3_test.cpp ]
    [ run boost_bind_compatibility/bind_eq_test.cpp ]
    [ run boost_bind_compatibility/bind_eq2_test.cpp ]
    [ run boost_bind_compatibility/bind_eq3_test.cpp ]
	#[ run boost_bind_compatibility/bind_fastcall_mf_test.cpp ]
	#[ run boost_bind_compatibility/bind_fastcall_test.cpp ]
    [ run boost_bind_compatibility/bind_fn2_test.cpp ]
    [ run boost_bind_compatibility/bind_function_test.cpp ]
    [ run boost_bind_compatibility/bind_mf2_test.cpp ]
    [ run boost_bind_compatibility/bind_not_test.cpp ]
    [ run boost_bind_compatibility/bind_placeholder_test.cpp ]
    [ run boost_bind_compatibility/bind_ref_test.cpp ]
    [ run boost_bind_compatibility/bind_rel_test.cpp ]
    [ run boost_bind_compatibility/bind_rvalue_test.cpp ]
    [ run boost_bind_compatibility/bind_rv_sp_test.cpp ]
    [ run boost_bind_compatibility/bind_stateful_test.cpp ]
	#[ run boost_bind_compatibility/bind_stdcall_mf_test.cpp ]
	#[ run boost_bind_compatibility/bind_stdcall_test.cpp ]
    [ run boost_bind_compatibility/bind_test.cpp ]
	 ;

test-suite phoenix_include :
#    [ run include/bind_bind.cpp ]
#    #[ run include/bind_bind_member_function.cpp ]
#    #[ run include/bind_bind_member_variable.cpp ]
#    [ run include/bind.cpp ]
#    [ run include/core_actor.cpp ]
#    [ run include/core_argument.cpp ]
#    [ run include/core_arity.cpp ]
#    [ run include/core_compose.cpp ]
#    [ run include/core.cpp ]
#    [ run include/core_domain.cpp ]
#    [ run include/core_environment.cpp ]
#    [ run include/core_is_actor.cpp ]
#    [ run include/core_limits.cpp ]
#    [ run include/core_mem_obj_ptr.cpp ]
#    [ run include/core_meta_grammar.cpp ]
#    [ run include/core_no_nullary.cpp ]
#    [ run include/core_nothing.cpp ]
#    [ run include/core_reference.cpp ]
#    [ run include/core_value.cpp ]
#    [ run include/function.cpp ]
#    [ run include/function_function.cpp ]
#    [ run include/fusion_at.cpp ]
#    [ run include/fusion.cpp ]
#    [ run include/object_const_cast.cpp ]
#    [ run include/object_construct.cpp ]
#    [ run include/object.cpp ]
#    [ run include/object_delete.cpp ]
#    [ run include/object_dynamic_cast.cpp ]
#    [ run include/object_new.cpp ]
#    [ run include/object_reinterpret_cast.cpp ]
#    [ run include/object_static_cast.cpp ]
#    [ run include/operator.cpp ]
#    [ run include/operator_if_else.cpp ]
#    [ run include/operator_io.cpp ]
#    [ run include/operator_member.cpp ]
#    [ run include/operator_operator.cpp ]
#    [ run include/scope.cpp ]
#    [ run include/scope_dynamic.cpp ]
#    [ run include/scope_lambda.cpp ]
#    [ run include/scope_let.cpp ]
#    [ run include/scope_local_variable.cpp ]
#    [ run include/scope_scoped_environment.cpp ]
#    [ run include/statement.cpp ]
#    [ run include/statement_do_while.cpp ]
#    [ run include/statement_for.cpp ]
#    [ run include/statement_if.cpp ]
#    [ run include/statement_switch.cpp ]
#    [ run include/statement_throw.cpp ]
#    [ run include/statement_try_catch.cpp ]
#    [ run include/statement_while.cpp ]
#    [ run include/stl_algorithm.cpp ]
#    [ run include/stl_algorithm_iteration.cpp ]
#    [ run include/stl_algorithm_querying.cpp ]
#    [ run include/stl_algorithm_transformation.cpp ]
#    [ run include/stl_container_container.cpp ]
#    [ run include/stl_container.cpp ]
#    [ run include/stl.cpp ]
#    [ run include/support_element_at.cpp ]
#    [ run include/support_iterate.cpp ]
#    [ run include/version.cpp ]
    ;
