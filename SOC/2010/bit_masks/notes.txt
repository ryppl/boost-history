--------------------------------------------------------------------------------
                    General Notes/Things to fix for Documentation
--------------------------------------------------------------------------------
1)  Get the image replacement for notes, warnings, suggestions,... etc working.






--------------------------------------------------------------------------------
                        Project Documentation Status
--------------------------------------------------------------------------------

Current topics inside of documentation

1)  Header file summary
    Links to add:
        1)  Create links for each of the types within the columns component
            linking them to their respective places in the documentation.

    *   Add bitfield_vector to the list of header files (post implementation)
        *   create section for it.


2)  Bit Masks

    A)  Overview

        I)  Description
            Links to add:
                1) Create link for Boost.Integer 
                2) Create link for Boost.Type Traits
                3) Create link for Boost.MPL

        II) rationale

**** TODO STILL **** B1) Getting started section <- NEW **** TODO STILL **** 


    B)  integral_mask_type
        Links to add:
            1)  Create link for Boost.Type Traits
            2)  Create a link to the header file

 
    C)  high_bits_mask
        Links to add:
            1)  Create a link to the header file

    D)  low_bits_mask 
        Links to add:
            1)  Create a link to the header file


    E)  bits_mask
        Links to add:
            1)  Create a link to the header file

    D)  bit_width
        Links to add:
            1)  Create a link to the header file

**** TODO STILL ****
    E)  MPL integration example <- NEW
        *   Show how the different bit mask's can be used for creating more
            complex masks by using the MPL bitwise operations.
        *   This may be better suited to a different section.
**** TODO STILL ****


3)  bitfield_tuple
    A)  Overview
        I)  Description
        Links to add:
            1)  Create a link to the example section in last paragraph.
        II) rationale
            Links to add:
                1)  Add links to the red-black tree, Boost.fusion and clang
                    these are to be used as reference material where these things
                    are actually being used.

    B)  Users Guide       
        I)   Getting Started
            a)  Installation
            b)  Dependencies
                Links to add:
                    1)  Create a link to the Files section in last paragraph.
            c)  Building With bitfield_tuple
            d)  Testing

        II)  Tutorial
            Links to add:
                1)  Create a link for all of the different members that make up
                    the interface. (theres a table with a list of them inside
                    of it, that is where the links need to go).
                2)  Create a link for pointer in the "part 5"s intro paragraph.


        III) External Resources
            *   Add relevant links here. Need to think about more relevant links
                and add them!!!!

        IV)  Glossary - maybe switch this with external resources?
            *   Add a link to Vicente's Bitfield within boost vault / sandbox.

    C)  Reference
        I)  Concepts
            Links to add:
                1)  Under the get function explanation:
                        add links for free and member get functions.

        II)  bitfield_tuple Class Reference
            a)  bitfield_tuple and bitfield_reference
            b)  struct padding
            c)  struct member
            d)  struct flag
            e)  struct align
            f)  struct storage
            g)  struct pointer
            h)  struct custom
        III) bitfield_tuple Macro Reference
        IV)  Function Reference
            b)  get as a free function
        V)   Meta-Function Reference


            b)  find_by_element_name <- NEW
            c)  find_by_element_index <- NEW
            d)  get_proxy_reference_type_by_name <- NEW
            e)  get_proxy_reference_type_by_index <- NEW

            a)  name_exists
            f)  element
            g)  element_n

        VI)  Boost.Fusion Sequence Extension
            a)  tag_of <- NEW
            b)  bitfield_tuple_iterator <- NEW
            c)  at <- NEW
            d)  begin <- NEW
            e)  category_of <- NEW
            f)  end <- NEW
            g)  is_sequence <- NEW
            h)  is_view <- NEW
            i)  size <- NEW

        VII) Files
            *   Add a list of files and their locations here.

    D)  Appendices
        I)  Design Rationale
        II) Implementation Details
            a) Internal documentation
                1)  Macros
                2)  Class Templates
                3)  Function Templates
        III) Acknowledgments
        VI)  Future Work

--------------------------------------------------------------------------------
                            bitfield_vector
--------------------------------------------------------------------------------
list of header files
1) bitfield_vector.hpp
2) mask_creator.hpp
3) bitfeild_vector_base.hpp
4) bitfield_vector_member_impl.hpp



list of test files.
1) bitfield_vector_test.cpp
2) bitfield_vector_base_test.cpp
3) proxy_reference_test.cpp
4) member_impl_test.cpp
5) mask_creator_test.cpp


--------------------------------------------------------------------------------
                            Tests to add
--------------------------------------------------------------------------------
1)  Compile failure test for mask_size meta function.
2)  Compile failure test for both pointer, custom and flag to test for not using
the same name more then once.
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
                            bitfield_tuple
--------------------------------------------------------------------------------
TODO From Email Responses
--------------------------------------------------------------------------------

5) Documentation for align -
    "Ensures the offset of the next bit field is divisible by the supplied value."

-> 6) consider renaming member to field or bitfield
-> 7) Consider moving everything from bitfield_tuple into its own library.

9) Create a VIEW version of the bitfield_tuple.
--------------------------------------------------------------------------------
List of TODO's throughout the bitfield_tuple

1) template_expansion_macros.hpp
2) reference_builder.hpp
3) proxy_reference_policy.hpp
4)  pointer_parsing_meta_functions.hpp
5)  pointer_packing_policy.hpp
6)  name_lookup.hpp
7)  make_bitfield_tuple.hpp
8)  bitfield_tuple_impl.hpp
9)  bitfield_element.hpp
10) arg_parse_impl.hpp
12) bitfield_iterator.hpp - Fusion Extension
14) bitfield_tuple.hpp
16) interface_meta_functions.hpp



--------------------------------------------------------------------------------
                                Test File Review
--------------------------------------------------------------------------------
1)  variadic_sequence_testing.cpp
3)  template_expansion_marco_test.cpp
4)  reference_builder_test.cpp
*) interface_meta_function_test.cpp
5)  pointer_parsing_meta_function_test.cpp
6)  pointer_member_test.cpp
7)  name_accessor_test.cpp
10) get_interface_test.cpp
11) fusion_iterator_testing.cpp
12) fusion_integration_testing.cpp
13) flag_test.cpp
14) filler_test.cpp
15) deduced_storage_type_test.cpp
16) deduced_storage_type_long_long_test.cpp
18) bitfield_tuple_test.hpp
19) align_test.cpp
17) custom_member_test.cpp

9)  make_bft_testing.cpp
    c)  This may need additional test to make sure that the macros are correctly
        generating the code for the correct number of valid parameters.





                        TO BE ADDED TO TESTS SECTION
    Test which need to be created as a result of modifications or additions!
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


                  THINGS TO CREATE EXTERNAL DOCUMENTATION FOR
--------------------------------------------------------------------------------

inside of file <boost/integer/bitfield_tuple/interface_meta_functions.hpp>
1) template <typename BitfieldTuple, typename Name>
   struct name_exists;

2) template <typename BitfieldTuple, typename Name>
   struct find_by_element_name;

3) template <typename BitfieldTuple, std::size_t Index>
   struct find_by_element_index;

4) template <typename BitfieldTuple, typename Name>
   struct get_proxy_reference_type_by_name;

5) template <typename BitfieldTuple, std::size_t Index>
   struct get_proxy_reference_type_by_index;

no particular file yet.
6) How to make your own custom policy (After I finish the pointer/custom stuff)


General Topic
Make note of the issue with retrieving a proxy reference type in a 
const scope and how to deal with it if they wish to create their own 
proxy reference type OR if they wish to actually return the proxy
reference type.


*) Update documentation for filler -> padding 
*) update documentation for bit_align -> align
*)  Create documentation for how to create your own policy.
*)  proxy_reference_policy may need additional documentation however it looks
    good currently.
--------------------------------------------------------------------------------


                          Future Testing Work
--------------------------------------------------------------------------------

*   make_bitfield_tuple - Do testing similar to the variadic template parameter 
    tests, testing to make sure that this works for all cases.
--------------------------------------------------------------------------------



    return boost::report_errors();
