TODO From Email Responses
--------------------------------------------------------------------------------

1) create element metafunction for returning the return type of a field.
2) Create a get free function which takes a bitfield_tuple.

5) Documentation for align -
    "Ensures the offset of the next bit field is divisible by the supplied value."

-> 6) consider renaming member to field or bitfield
-> 7) Consider moving everything from bitfield_tuple into its own library.

8) begin relocating all parts of the interface into the bitfield_tuple file.
    Things which I know need to eventually move.
    I   )   Fusion extension .
        A)  Basically the entire ext directory.
    II  )   make_bitfield_tuple
        A)  relocate the single macro which actually generates all of the
            functions into its own file.
        B)  Rename the file which previously held the make_bitfield_tuple into
            make_bitfield_tuple_impl


9) Create a VIEW version of the bitfield_tuple.
--------------------------------------------------------------------------------
List of TODO's throughout the bitfield_tuple

1) template_expansion_macros.hpp
2) reference_builder.hpp
3) proxy_reference_policy.hpp
4)  pointer_parsing_meta_functions.hpp
5)  pointer_packing_policy.hpp
6)  name_lookup.hpp
7)  make_bitfield_tuple.hpp
8)  bitfield_tuple_impl.hpp
9)  bitfield_element.hpp
10) arg_parse_impl.hpp
12) bitfield_iterator.hpp - Fusion Extension
14) bitfield_tuple.hpp
16) interface_meta_functions.hpp



--------------------------------------------------------------------------------
                                Test File Review
--------------------------------------------------------------------------------
1)  variadic_sequence_testing.cpp
3)  template_expansion_marco_test.cpp
4)  reference_builder_test.cpp
*) interface_meta_function_test.cpp
5)  pointer_parsing_meta_function_test.cpp
6)  pointer_member_test.cpp
7)  name_accessor_test.cpp
10) get_interface_test.cpp
11) fusion_iterator_testing.cpp
12) fusion_integration_testing.cpp
13) flag_test.cpp
14) filler_test.cpp
15) deduced_storage_type_test.cpp
16) deduced_storage_type_long_long_test.cpp
18) bitfield_tuple_test.hpp
19) align_test.cpp




9)  make_bft_testing.cpp
    c)  This may need additional test to make sure that the macros are correctly
        generating the code for the correct number of valid parameters.

17) custom_member_test.cpp
    b)  Implement test suite.



                        TO BE ADDED TO TESTS SECTION
    Test which need to be created as a result of modifications or additions!
--------------------------------------------------------------------------------
7)  Create test for element and element_n
8)  Create test for get_free_function.
--------------------------------------------------------------------------------


                  THINGS TO CREATE EXTERNAL DOCUMENTATION FOR
--------------------------------------------------------------------------------

inside of file <boost/integer/bitfield_tuple/interface_meta_functions.hpp>
1) template <typename BitfieldTuple, typename Name>
   struct name_exists;

2) template <typename BitfieldTuple, typename Name>
   struct find_by_element_name;

3) template <typename BitfieldTuple, std::size_t Index>
   struct find_by_element_index;

4) template <typename BitfieldTuple, typename Name>
   struct get_proxy_reference_type_by_name;

5) template <typename BitfieldTuple, std::size_t Index>
   struct get_proxy_reference_type_by_index;

no particular file yet.
6) How to make your own custom policy (After I finish the pointer/custom stuff)


General Topic
Make note of the issue with retrieving a proxy reference type in a 
const scope and how to deal with it if they wish to create their own 
proxy reference type OR if they wish to actually return the proxy
reference type.


*) Update documentation for filler -> padding 
*) update documentation for bit_align -> align
*)  Create documentation for how to create your own policy.
*)  proxy_reference_policy may need additional documentation however it looks
    good currently.
--------------------------------------------------------------------------------



                          Future Testing Work
--------------------------------------------------------------------------------

*   make_bitfield_tuple - Do testing similar to the variadic template parameter 
    tests, testing to make sure that this works for all cases.
--------------------------------------------------------------------------------
    return boost::report_errors();
