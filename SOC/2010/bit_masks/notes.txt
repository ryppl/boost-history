TODO From Email Responses
--------------------------------------------------------------------------------

1) create element metafunction for returning the return type of a field.
2) Create a get free function which takes a bitfield_tuple.
3) Change bit_align to align.
4) Change filler to padding.

5) Documentation for align -
"Ensures the offset of the next bit field is divisible by the supplied value."

-> 6) consider renaming member to field or bitfield
7) Move bitfield_tuple into namespace bitfields.

--------------------------------------------------------------------------------
List of TODO's throughout the bitfield_tuple

1) template_expansion_macros.hpp
    b) MAYBE: Rename some of the internal use only macros so they don't
    get confused with macros for external use.


2) reference_builder.hpp


3) proxy_reference_policy.hpp
    a)  Create the custom member.
    b)  Create documentation for how to create your own policy.
    c)  This may need additional documentation however it looks good currently.


4)  pointer_parsing_meta_functions.hpp
    a) typedef mpl::if_c<(4<sizeof(void*)),uint64_t,uint32_t>::type ptr_mask_type
        I   )   Add support for 16 bit systems. Eventually.


5)  pointer_packing_policy.hpp
6)  name_lookup.hpp
7)  make_bitfield_tuple.hpp
8)  bitfield_tuple_impl.hpp


9)  bft_element.hpp
    a) change name to bitfield_element.hpp - eventually.


10) arg_parse_impl.hpp
    b)  Implement the specialization for custom members.
        I   )   This could be more of a pain, however it seems quite simple
                after implementing the pointer stuff.

12) bitfield_iterator.hpp - Fusion Extension
    A)  Add OR remove const functions. Fusion may be a non const only
        thing. Other option is to make a const iterator but that could be more
        complex then I'm willing to deal with at the moment.
 

14) bitfield_tuple.hpp
15) Remove old pointer plus bits stuff
16) interface_meta_functions.hpp
    a)  Move all of the meta functions in side of time into namespace bitfields

Test file review
1)  variadic_sequence_testing.cpp

    a)  Replicate this test all the way up to 50 at intervals of 10.
    b)  Switch to using <boost/detail/lightweight_test.hpp> framework.
    c)  Add test to test the limit of the bitfield_tuple so that I can be
        assured that the limit is working correctly.
    d)  remove testing from the end of file name.

2)  to_string_testing.cpp
    a) Remove this its not part of bitfield_tuple any more.

3)  template_expansion_marco_test.cpp
    a)  Make this an actual test to make sure that everything is correctly
        getting expanded.
    b)  Find a better way to test this.
    c)  remove test from name.
    d)  Change to using the <boost/detail/lightweight_test.hpp> framework.

4)  reference_builder_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  test the rest of the reference builder functions
        I   )   Name exists
        II  )   find_by_element_name
        III )   find_by_element_index
        IV  )   make_reference_type_by_name <-- Maybe, if its actually being 
                used then I'll make a test for it other wise its going to be
                removed.
        V   )   enable_if_reference_type_by_index
        VI  )   get_reference_type_by_name
        VII )   get_reference_type_by_index

5)  pointer_parsing_meta_function_test.cpp
    a)  Remove test from name.
    c)  Other then name this is pretty complete.

6)  pointer_member_test.cpp
    a)  remove test from name.
    b)  This test is incomplete because the implementation isn't completed yet.
    c)  I need a macro which will tell me if the test is 32 bit or 64 bit
        Currently the _LP64 should only work for GCC however I need a more
        universal one.

7)  name_accessor_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.

8)  make_bft_testing.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  

9)  make_bft_testing.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  This may need additional test to make sure that the macros are correctly
        generating the code for the correct number of valid parameters.

10) get_interface_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  Need to do more const interface testing.

11) fusion_iterator_testing.cpp
    a)  remove testing from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  Not sure just how I should test the iterator. This may be good as it
        however that doesn't mean that it should just stay as is. Look into
        other fusion iterator tests.

12) fusion_integration_testing.cpp
    a)  remove testing from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.

13) flag_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.

14) filler_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.

15) deduced_storage_type_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.

16) deduced_storage_type_long_long_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  Maybe merge this with the other storage type.

17) custom_member_test.cpp
    a)  remove test from name.
    b)  Implement before testing this.

18) bitfield_tuple_test.hpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.
    c)  remove previous dependency on test_list_type.hpp

19) align_test.cpp
    a)  remove test from name.
    b)  Change to using the <boost/detail/lightweight_test.hpp> framework.

20) fails_on_64_bit.cpp
    a) Move the contents into boost_endian_integration_test.cpp

21) Remove the ppb_testing folder and tests from the jam file.

                        TO BE ADDED TO TESTS SECTION
    Test which need to be created as a result of modifications or additions!
--------------------------------------------------------------------------------
1)  !DONE! Add interface test for the interface macros. !DONE!
2)  interface meta-function test suite.
3)  Create additional tests for count leading and trailing zero meta-functions.
4)  Create compile failure test for pointer member mask being 0.
5)  Create compile failure test for pointer member mask not being same size as
    pointer.
6)  Create compile Failure test for custom member mask being 0.
7)  Create test for element and element_n
8)  Create test for get_free_function.
--------------------------------------------------------------------------------


                  THINGS TO CREATE EXTERNAL DOCUMENTATION FOR
--------------------------------------------------------------------------------

inside of file <boost/integer/bitfield_tuple/interface_meta_functions.hpp>
1) template <typename BitfieldTuple, typename Name>
   struct name_exists;

2) template <typename BitfieldTuple, typename Name>
   struct find_by_element_name;

3) template <typename BitfieldTuple, std::size_t Index>
   struct find_by_element_index;

4) template <typename BitfieldTuple, typename Name>
   struct get_proxy_reference_type_by_name;

5) template <typename BitfieldTuple, std::size_t Index>
   struct get_proxy_reference_type_by_index;

no particular file yet.
6) How to make your own custom policy (After I finish the pointer/custom stuff)


General Topic
Make note of the issue with retrieving a proxy reference type in a 
const scope and how to deal with it if they wish to create their own 
proxy reference type OR if they wish to actually return the proxy
reference type.


*) Update documentation for filler -> padding 
*) update documentation for bit_align -> align
--------------------------------------------------------------------------------

