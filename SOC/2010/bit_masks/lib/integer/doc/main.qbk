[article Boost.Integer Bits Masks Extension
    [quickbook 1.5]
    [copyright 2010 Brian Bartman]
    [purpose Bit Mask Selection]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [authors [Bartman, Brian]]
]

[section:HeaderSummary Header File Summary]
The following table contains header files used within the bit masks library extension.
For additional information such as full descriptions, tutorials and interface guides
please use the table of contents above.
[table
   [[Component][Header][Contence]]
   [
      [`integral_mask` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/integral_mask.hpp <boost/integer/integral_mask.hpp>]]]
      [ Header contains `integral_mask` template. ]
   ]
   [
      [`high_bits_mask` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/high_bits_mask.hpp <boost/integer/high_bits_mask.hpp>]]]
      [ Header contains `high_bits_mask` template. ]
   ]
   [
      [`low_bits_mask` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/low_bits_mask.hpp <boost/integer/low_bits_mask.hpp>]]]
      [ Header contains `low_bits_mask` template. ]
   ]

   [
      [ `high_bits_mask` type and `low_bits_mask` type ]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/high_low_bits.hpp <boost/integer/high_low_bits.hpp>]]]
      [ Header contains includes for `high_bits_mask` and `low_bits_mask`. ]
   ]
   [
      [ `bits_mask` type and `low_bits_mask` type ]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/bits_mask.hpp <boost/integer/bits_mask.hpp>]]]
      [ Header contains `bits_mask` template. ]
   ]
   [
      [`compound_mask` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/compound_mask.hpp <boost/integer/compound_mask.hpp>]]]
      [ Header contains `compound_mask` meta-function. ]
   ]
   [
      [`bit_mask_group` type]
      [ [^[@http://svn.boost.org/svn/boost/sandbox/SOC/2010/bit_masks/boost/integer/bit_mask_group.hpp <boost/integer/bit_mask_group.hpp>]]]
      [ Header contains `bit_mask_group` meta-function/container. ]
   ]
]

[endsect]

[section:bit_mask_purpose Purpose]
The purpose of this library extension to the boost.integer library is to make
the creation of simple and complex integral masks simple and easy and constructable on 
compile time. The structure of the masks are extensions of the type `integral_constant`
provided by boost.type_traits library. All masks are able to be treated as the 
`integral_constant` type. All masks provide the following three compile time accessible
features. They all provide `::type`,`::value_type` and `::value` for compile time
support. This also means that all masks can be used with the boost.mpl bitwise 
operator meta-functions for creation of more complex masks. Now because these values
were intended to be used during the runtime of a program all of the masking types 
which are provided by this library provide an additional functionality for run time
support. All of the mask types in this library provide the implicit cast operator 
allowing for the meta-function objects to be used as if they were the integral value
they were used to construct. For example,
[c++]
``
#include <boost/integer/integral_mask.hpp>

using namespace boost;


int main() {
    int t = 0xdeadbeef;
    typedef integral_mask<int, 3> mask_type;

    int unmasked_t = t & mask_type();
    return 0;
}
``
For the use of a mask all that one needs to do is to construct the mask and 
simply treat it as though it were an integer.

[note All masks are trivially default constructible and destructible.]

[endsect]

[include:integral_mask integral_mask.qbk]
[include:high_bits_mask high_bits.qbk]
[include:low_bits_mask low_bits.qbk]
[include:bits_mask bits_mask.qbk]
