[/
Copyright (c) 2010 Brian Bartman

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]
[section Description]

The purpose of this library extension to the boost.integer library is to make
the creation of simple and complex integral masks simple and easy and
constructable on compile time. The structure of the masks are extensions of the
type `integral_constant` provided by boost.type_traits library. All masks are
able to be treated as the `integral_constant` type. All masks provide the
following three compile time accessible features. They all provide `::type`,
`::value_type` and `::value` for compile time support. This also means that all
masks can be used with the boost.mpl bitwise operator meta-functions for 
creation of more complex masks. Now, because these values were intended to be
used during the runtime of a program all of the masking types which are provided
by this library provide an additional functionality for run timesupport. All of
the mask types in this library provide the implicit cast operator allowing for
the meta-function objects to be used as if they were the integral value they
were used to construct. For example,

``
#include <boost/integer/integral_mask.hpp>

using namespace boost;


int main() {
    int t = 0xdeadbeef;
    typedef integral_mask<int, 3> mask_type;

    int unmasked_t = t & mask_type();
    return 0;
}
``
For the use of a mask all that one needs to do is to construct the mask and 
simply treat it as though it were an integer.

[note All masks are trivially default constructible and destructible.]

[endsect]
