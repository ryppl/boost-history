[/
Copyright (c) 2010 Brian Bartman

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]
[section `struct align`]
[h4 Description]
Adjusts the next `member` or `flag` template inside of the `bitfield_tuple`'s
template parameter to a multiple of the `AlignTo` parameter. If the current
next position is a multiple of `AlignTo` then no adjustment will be made.

[note Calling `align<8>` more then once in a row will have the same effect
as calling `align<8>` once. ]


[h4 Template Signature]
``
namespace boost { namespace bitfields {
template <std::size_t AlignTo> struct align;
}}
``
[h4 Template Parameters]
[table
    [
        [template Parameter]
        [Explanation]
    ]
    [
        [`AlignTo`]
        [The value that the next bitfield's first bit should be a multiple of.]
    ]
]

[h4 Header file Locaton]
This header file is included with the <boost/integer/bitfield_tuple.hpp> header
file.
``
#include <boost/integer/details/bft/align.hpp>
``
[h4 Example]
``
#include <boost/integer/bitfield_tuple.hpp>
using namespace boost::bitfields;
struct i;
struct red;
struct green;
struct blue;

typedef bitfield_tuple<
    storage<unsigned long long>,
    member<unsigned int,red,5>,
    member<unsigned int, green, 6>,
    member<unsinged int, blue,5>,
    align<32>,
    member<int,i,32>
>    color_plus_int;
``
With in the above example the first 3 fields are the size of a short then the
alignment is pushed up to the next boundary and a full sized integer is
then stored at the end. This actually does make accessing slightly for the
integer.

[endsect]
