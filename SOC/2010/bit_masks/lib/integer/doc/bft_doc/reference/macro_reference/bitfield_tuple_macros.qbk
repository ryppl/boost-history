[/
Copyright (c) 2010 Brian Bartman

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]
[section Parameter Adjustment macros]
[h5 Template Parameter Control]
The `BOOST_BFT_PARAM_COUNT` macro is used for controlling the max number of
template parameters that are able to be used by the `bitfield_tuple` and the
function templates and class templates relating to it. The 
`BOOST_BFT_PARAM_COUNT` macro if definded sets the upper limit of the
`bitfield_tuple`'s template parameter's to a higher number. The max 
`BOOST_BFT_PARAM_COUNT` can be set to is 50 and the default is 10. The side effect
of setting `BOOST_BFT_PARAM_COUNT` can be that the `BOOST_MPL_LIMIT_VECTOR_SIZE`
vector is set to a size which is larger or equal to the value of
`BOOST_BFT_PARAM_COUNT`. If one wishes to set the value of both
`BOOST_BFT_PARAM_COUNT` and `BOOST_MPL_LIMIT_VECTOR_SIZE` both must be set before
the `bitfield_tuple` header file is included. Don't include <boost/mpl/vector.hpp>
before the bitfield_tuple header file if you you intend to set the
`BOOST_BFT_PARAM_COUNT`.



Example of setting the parameter count to 11.
``
#define BOOST_BFT_PARAM_COUNT 11
#include <boost/integer/bitfield_tuple.hpp>
``

[endsect]
[section Code Generation Macros]
[h5 Macros]
Macros used for generating template parameters for use in specilization
and generating template parameters. The `N` value in the below sequences below
represent the value of `BOOST_BFT_PARAM_COUNT`.

[table
    [
        [Name]
        [Pattern]
        [Usage]
    ]
    [
        [`BOOST_MAKE_BFT_TEMPLATE_PARAMS()`]
        [`typename T0 = mpl::void_, ... typename TN = mpl::void_`]
        [ Internal use only. Used for creating the template parameter for the
`bitfield_tuple`.]
    ]
    [
        [`BOOST_BFT_UNPACK_PARAMS()`]
        [`::template process<T1>::type ... ::template process<TN>::type`]
        [ Internal use only. Used for parsing the template parameters from a
`bitfield_tuple`. ]
    ]
    [
        [`BOOST_BFT_PARAMETER_LIST()`]
        [`T0, ... TN`]
        [ Internal use only. This is used to create a bitfield tuple base type
so that the number of parameters that gets passed to that is then the same
as would be passed into the class. ]
    ]
    [
        [`BOOST_BFT_BASE_TEMPLATE_PARAMS()`]
        [`typename T0, ... typename TN`]
        [ Internal use only. This macro generages the template parameters for
the base class of the bitfield_tuple. ]
    ]
    [
        [`BOOST_BFT_TEMPLATE_ARGS_NO_DEFAULTS()`]
        [`typename T0, ... typename TN`]
        [ Recomended for use outside of `bitfield_tuple`. This macro is used to 
create template parameters which can be used for specialization over a
`bitfield_tuple` type. ]
    ]
    [
        [`BOOST_BFT_SPECILIZATION_PARAM_LIST()`]
        [`T0, ... TN`]
        [ Recomended for use outside of `bitfield_tuple`. This macro is used to 
create template parameters which are then supplied to the template of a
`bitfield_tuple` type. ]
    ]
]

Here is example useage of the macros that can be used to specilize a class
template over the `btifield_tuple` type.

``
#include <boost/integer/bitfield_tuple.hpp>

template <typename T>
struct foo;


template<BOOST_BFT_TEMPLATE_ARGS_NO_DEFAULTS()>
struct foo< boost::bitfield_tuple< BOOST_BFT_SPECILIZATION_PARAM_LIST() > >
{
};
struct

``

[endsect]



