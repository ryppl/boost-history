[/
Copyright (c) 2010 Brian Bartman

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]
[section Dependencies]
This section covers both dependencies which are from within boost as well
as the requirements for how to enable different extensions of the
`bitfield_tuple`. Some of the extensions include adjustment of variadic template
parameters, and adjust meant for long long support.


The following is a list of all dependencies which are included with the
`bitfield_tuple` header file ( `<boost/integer/bitfield_tuple.hpp>` ).

[note The following header files are included along with the `bitfield_tuple` header
and are not need to be included by the user to use `bitfield_tuple`. This
documentation exists for impact analysis and so that the user knows 
exactly what they are getting when the include the bitfield_tuple header file.]

[h5 Standard Library Includes]
* <cstddef> - Included for `std::size_t`.
    * Included by Boost.Integer.Bitfield 
        * <cassert>
        * <limits>


[h4 Boost Library Includes]
[h5 boost.Preprocessor]
* <boost/preprocessor/repetition/enum.hpp>
* <boost/preprocessor/repetition/repeat_from_to.hpp>

[h5 Boost.Config]
* <boost/config.hpp>

[h5 Boost.MPL]
* <boost/mpl/vector.hpp>
* <boost/mpl/not.hpp>
* <boost/mpl/deref.hpp>
* <boost/mpl/at.hpp>
* <boost/mpl/less.hpp>
* <boost/mpl/size.hpp>
* <boost/mpl/int.hpp>
* <boost/mpl/assert.hpp>
* <boost/mpl/if.hpp>
* <boost/mpl/minus.hpp>
* <boost/mpl/size_t.hpp>
* <boost/mpl/void.hpp>

[note The `mpl::vector` is a limiting factor of the `bitfield_tuple` for more
information on how to deal with limitations of the `bitfield_tuple` and its
dependencies please see the class reference documentation for `bitfield_tuple`
and `bitfield_reference` regarding Preconditions.]


[h5 Boost.Type Traits]
*   <boost/type_traits/add_reference.hpp>
*   <boost/type_traits/is_const.hpp>
*   <boost/type_traits/make_unsigned.hpp>
*   <boost/type_traits/is_same.hpp>
*   <boost/type_traits/is_pod.hpp>

[h5 Boost.Static Assert]
* <boost/static_assert.hpp>

[h5 Boost.Enable If]
* <boost/utility/enable_if.hpp>

[h5 Boost.Fusion]
* <boost/fusion/sequence/intrinsic.hpp>
* <boost/fusion/support/is_sequence.hpp>
* <boost/fusion/support/is_view.hpp>
* <boost/fusion/support/tag_of_fwd.hpp>
* <boost/fusion/iterator/iterator_facade.hpp>
* <boost/fusion/iterator/value_of.hpp>
* <boost/fusion/iterator/deref.hpp>
* <boost/fusion/iterator/next.hpp>
* <boost/fusion/iterator/prior.hpp>
* <boost/fusion/iterator/distance.hpp>
* <boost/fusion/iterator/key_of.hpp>
* <boost/fusion/iterator/value_of_data.hpp>
* <boost/fusion/iterator/deref_data.hpp>

[h5 Boost Vault Includes]
* <boost/bitfield/bitfield.hpp>

[h5 Boost.Integer Bit Mask Extension Includes]
* <boost/integer/bits_mask.hpp>
* <boost/integer/bit_width.hpp>
* <boost/integer/high_bits_mask.hpp>
* <boost/integer/low_bits_mask.hpp>
* <boost/integer/integral_mask.hpp>

[h5 Bitfield Tuple Include Files ]
Please see the Files section for a full list and description of all files
which are part of the `bitfield_tuple` and its interface.


[endsect]
