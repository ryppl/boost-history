
[/
Copyright (c) 2010 Brian Bartman

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]
[c++]
[section:high_bits_maskbits high_bits_mask]
[h3 Description]
The `high_bits_mask` is an abstract representation of a contiguous section of
bits which extend out from the most significant bit towards the least
significant bit. The `high_bits_mask` changes base on the width of the type but
always maintains the same high level description of the bits. For example,
``
// using high bits to create a mask starting from the left most bit with a width
// of 15
typedef high_bits_mask<int, 15> bits;
// bits::value will have the following value in binary.
// 1111 1111  1111 1110  0000 0000  0000 0000
``

[h3 Header File Information]
Header file: <boost/integer/high_bits_mask.hpp>
Header file: <boost/integer/high_low_mask.hpp>

[h3 Template Signature]
`high_bits_mask` has the following template signature:
`` 
namespace boost {
template <typename T, unsigned int Width>
struct high_bits_mask;
}
``
[h3 Bit Mask Hierarchy]

[h3 Template Parameters]

[table
    [[Parameter][Description]]
    [[`T`][ Is an integral type which the mask is to be created over. ]]
    [[`Width`][ This is the width of the mask in bits. ]]
]

[h3 Interface]
`high_bits_mask` Compile time interface. Assume that N is of type
`high_bits_mask<int, 10>` the type supplied here is only for example.

[table
    [[Operation][Description]]
    [[`N::value`][Returns the `value` associated with `N`. ]]
    [[`N::value_type`][Returns `T` which is the type associated with `value` inside `N`. ]]
    [[`N::type`][ Returns the current types type. ]]
[[`N::offset`][ Always set to zero for this type. The offset is something which
all of the mask type support and refers the amount the mask has been shifted to
the right or the left (Depending on the type of mask used). In the case of
`integral_mask`, no left or right shift has occurred so `N::offset` is always set
to zero. ]]
    [[`N::width`][ Returns the integral value associated with the `width` template parameter. ]]
    [[`operator T()`][ Run time support function. Returns `value`. ]]
]


[h3 Examples]
Examples and use cases related to the `high_bits_mask` template.


Example:
``
typedef high_bits_mask<int,4> mask;

// binary for mask::value
// 1111 0000  0000 0000  0000 0000  0000 0000

int integral_value = 0xc000000c;

// integral_value's binary value
// 1100 0000  0000 0000  0000 0000  0000 1100

int result = integral_value & mask();
// binary value of result
// 1100 0000  0000 0000  0000 0000  0000 0000

``

The implicit cast operator allows for simplicity, clairity of code. In the
above example `mask()` could be replaced with `mask::value` to achieve the same
result. The same applies to all other bitwise operators.

[endsect]

