[c++]
[section:low_bits_mask low_bits_mask]
[h3 Description]
`low_bits_mask` creates a mask of bits starting from the right most bit and
extending out to the left. The `low_bits_mask` is similar to the `high_bits_mask`
just starts on the right most bit instead of the left most bit. The way 
`low_bits_mask` behaves in the following example:

``
typedef low_bits_mask<int, 10> mask;
// mask::value has the following binary value
// 0000 0000  0000 0000  0000 0011  1111 1111
``
The `low_bits_mask` template is located in the <boost/integer/low_bits_mask.hpp>
header file.

[h3 Template Signature]
`low_bits_mask` has the following template signature:
``
template <typename T, unsigned int Width>
struct low_bits_mask;
``

[table
    [[Parameter][Description]]
    [[`T`][ Is an integral type which the mask is to be created over. ]]
    [[`Width`][ This is the width of the mask in bits. ]]
]

[h3 Interface]
`low_bits_mask` Compile time interface. Assume that `N` is of type
`low_bits_mask<int,10>` the type supplied here is only for example.

[table
    [[Operation][Description]]
    [[`N::value`][Returns the `value` associated with `N`. ]]
    [[`N::value_type`][Returns `T` which is the type associated with `value` inside `N`. ]]
    [[`N::type`][ Returns the current types type. ]]
    [[`N::width`][ Returns the integral value associated with the `width` template parameter. ]]
    [[`operator T()`][ Run time support function. All this function does is
return the value associated with the type. With the c++0x feature `constexper`
this function will be made fasters and more effieient.]]
]


[h3 Examples]
Examples and use cases related to the `low_bits_mask` template.


Example:
``
typedef low_bits_mask<int,4> mask;

// binary for mask::value
// 0000 0000  0000 0000  0000 0000  0000 1111

int integral_value = 0xc000000c;

// integral_value's binary value
// 1100 0000  0000 0000  0000 0000  0000 1100

int result = integral_value & mask();
// binary value of result
// 0000 0000  0000 0000  0000 0000  0000 1100
``

The implicit cast operator allows for simplicity, clairity of code. In the
above example `mask()` could be replaced with `mask::value` to achieve the same
result. The same applies to all other bitwise operators.

[endsect]

