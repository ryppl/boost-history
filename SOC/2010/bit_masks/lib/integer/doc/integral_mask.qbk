[/
Copyright (c) 2010 Brian Bartman

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[c++]
[section:integral_mask integral_mask ]
[h3 Description]
The `integral_mask` type is the most basic mask type. It is used to abstract all
masks back to a simple integral type. This type is used similar to an
`integral_constant` type from the Boost.Type Traits library.


[h3 Header File Information]
Header file: <boost/integer/integral_mask.hpp>


[h3 Template Signature]
`integral_mask` has the following template signature:
``
namespace boost {
template <typename T, T Value> struct integral_mask;
} // end boost
``
[h3 Bit Mask Hierarchy]
All other mask types either derive directly or indirectly from this class. The
`integral_mask` class inherits from `integral_constant`.


[h3 Template Parameters]
[table
    [[Parameter][Description]]
    [[`T`][ The type of the the mask. ]]
    [[`value`][ The integral value of the mask.]]
]

[h3 Preconditions]
[table
    [
        [Precondition]
        [Description]
        [Enforcement]
    ]
    [
        [ ]
        [ T must be an integral type. ]
        [ This is only a documented precondition. It is not enforced. ]
    ]
    [
        [ ]
        [ Value must be in the domain of the integral type T. ]
        [ This is only a documented precondition. It is not enforced. ]
    ]
]

[h3 Interface]
`Integral_mask` Compile time interface. Assume that `N` is of type
`integral_mask<int, 16>` the type supplied here is only for example.

[table
    [[Operation][Description]]
    [[`N::value`][Returns the `value` associated with `N` (in the current case 
that is 16). ]]
    [[`N::value_type`][Returns `T` which is the type associated with `value` inside `N` (in the
current case that is int). ]]
    [[`N::type`][ Returns the current types type (using `N` as an example,
`N::type` is equivalent to `integral_mask<int,16>` )]]
    [[`N::offset`][ Always set to zero for this type. The offset is something which
all of the mask type support and refers the amount the mask has been shifted to
the right or the left (Depending on the type of mask used). In the case of
`integral_mask`, no left or right shift has occurred so `N::offset` is always set
to zero. ]]
    [[`N::width`][ The value of `N::width` is always set to zero because the width
refers the width of a contiguous section of bits and the contiguity of the 
an integral mask is unknown. ]]

    [[`operator T()`][ Run time support function. ]]
]


[h3 Examples]
Examples and use cases related to the `integral_mask` template.

Example:
``
int bits = 255;

typedef integral_mask<int, 16> mask;
// mask has the folling binary value
// 0000 0000  0000 0000  0000 0000  0001 0110

// bits has binary value of:
// 0000 0000  0000 0000  0000 0000  0010 0101
    
// the following is a bitwise and operation
// which is done to bits using the integral_mask type
int new_bits = bits & mask();

// Resulting value of new_bits:
// 0000 0000  0000 0000  0000 0000  0000 0100


``
The implicit cast operator allows for simplicity, clairity of code. In the
above example `mask()` could be replaced with `mask::value` to achieve the same
result. The same applies to all other bitwise operators.

[endsect]

