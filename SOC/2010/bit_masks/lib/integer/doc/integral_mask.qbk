[c++]
[section:integral_mask integral_mask type]
[h3 Description]
The `integral_mask` type is the most basic mask type. It is used to abstract all
masks back to a simple integral type. This type is used similar to an
`integral_constant` type from the boost.type_traits library. The `integral_mask`
template is located in the following header file: <boost/integer/integral_mask.hpp>.


[h3 Template Signature]
`integral_mask` has the following template signature:
``
template <typename T, T Value>
struct integral_mask;
``
[table
    [[Parameter][Description]]
    [[`T`][This Parameters specifies the integral type to be associated with the
value.]]
    [[`value`][ The integral value which is used to represent a mask.]]
]

[h3 Interface]
`Integral_mask` Compile time interface. Assume that N is of type
`integral_mask<int, 16>` the type supplied here is only for example.

[table
    [[Operation][Description]]
    [[`N::value`][Returns the `value` associated with `N` (in the current case 
that is 16). ]]
    [[`N::value_type`][Returns `T` which is the type associated with `value` inside `N` (in the
current case that is int). ]]
    [[`N::type`][ Returns the current types type (using N as an example,
`N::type` is equivalent to `integral_mask<int,16>` )]]
    [[`operator T()`][ Run time support function. All this function does is
return the value associated with the type. With the c++0x feature `constexper`
this function will be made fasters and more effieient.]]
]


[h3 Examples]
Examples and use cases related to the `integral_mask` template.

Example:
``
int bits = 255;

typedef integral_mask<int, 16> mask;
// mask has the folling binary value
// 0000 0000  0000 0000  0000 0000  0001 0110

// bits has binary value of:
// 0000 0000  0000 0000  0000 0000  0010 0101
    
// the following is a bitwise and operation
// which is done to bits using the integral_mask type
int new_bits = bits & mask();

// Resulting value of new_bits:
// 0000 0000  0000 0000  0000 0000  0000 0100


``
The implicit cast operator allows for simplicity, clairity of code. In the
above example `mask()` could be replaced with `mask::value` to achieve the same
result. The same applies to all other bitwise operators.

[endsect]

