#~ Copyright 2008 Brian Bartman
#~ Distributed under the Boost Software License, Version 1.0.
#~ (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)


import testing ;

project
    : requirements
        <warnings>all
        <toolset>gcc:<cxxflags>-Wextra
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>darwin:<cxxflags>-Wextra 
        <toolset>darwin:<cxxflags>-Wno-long-long 
        <toolset>msvc:<cxxflags>/wd4307
        <toolset>msvc:<cxxflags>/wd4127
    ;


test-suite integer
    : 
        [ run bit_mask_test.cpp  ]
        [ run mask_check.cpp  ]
        [ run integral_mask_test.cpp  ]
        [ run high_bit_mask_test.cpp ]
        [ run low_bit_mask_test.cpp  ]
        [ run bit_width_test.cpp ]
        [ run bitwise_operator_test.cpp ]
        [ run bitwise_integral_mask_testing.cpp ]
        [ run bitwise_high_bits_testing.cpp ]
        [ run bitwise_low_bits_testing.cpp ]
        [ run compound_mask_test.cpp ]
        [ run bit_mask_group_test.cpp ]
        [ compile-fail bft_testing/compile_fail/member_precond_width_zero.cpp ]
        [ compile-fail bft_testing/compile_fail/member_width_to_large.cpp ]
        [ compile-fail bft_testing/compile_fail/bft_storage_width_acceded.cpp ]
        [ compile-fail bft_testing/compile_fail/set_storage_more_then_once.cpp ]
        [ compile-fail bft_testing/compile_fail/one_name_two_members.cpp ]
        [ compile-fail bft_testing/compile_fail/pointer_member_with_zero_mask.cpp ]
        [ compile-fail bft_testing/compile_fail/pointer_mask_not_same_size_as_pointer.cpp ]
        [ compile-fail bft_testing/compile_fail/custom_member_mask_is_zero.cpp ]
        [ compile-fail bft_testing/compile_fail/find_by_index_with_indvalid_index.cpp ]
        [ compile-fail bft_testing/compile_fail/find_by_name_with_missing_name.cpp ]
        [ compile-fail bft_testing/compile_fail/get_proxy_reference_type_by_name_name_does_not_exist.cpp ]
        [ compile-fail bft_testing/compile_fail/get_proxy_reference_type_by_index_index_does_not_exist.cpp ]
        [ compile bft_testing/compile_pass/bft_member_max_out.cpp ]
        [ run bft_testing/bitfield_tuple_test.cpp ]
        [ run bft_testing/name_accessor_test.cpp ]
        [ run bft_testing/get_interface_test.cpp ]
        [ run bft_testing/compile_pass/fusion_includes.cpp ]
        [ run bft_testing/fusion_iterator_testing.cpp ]
        [ run bft_testing/fusion_integration_testing.cpp ]
        [ run bft_testing/flag_test.cpp ]
        [ run bft_testing/padding_test.cpp ]
        [ run bft_testing/template_expansion_marco_test.cpp ]
        [ run bft_testing/variadic_sequence_testing.cpp ]
        [ run bft_testing/align_test.cpp ]
        [ run bft_testing/reference_builder_test.cpp ]
        [ run bft_testing/deduced_storage_type_test.cpp ]
        [ run bft_testing/deduced_storage_type_long_long_test.cpp ]
        [ run bft_testing/make_bft_testing.cpp ]
        [ run bft_testing/boost_endian_integration_test.cpp ]
        [ run bft_testing/custom_member_test.cpp ]
        [ run bft_testing/pointer_member_test.cpp ]
        [ run bft_testing/pointer_parsing_meta_function_test.cpp ]
        [ run bft_testing/variadic_sequence_20_test.cpp ]
        [ run bft_testing/variadic_sequence_30_test.cpp ]
        [ run bft_testing/variadic_sequence_40_test.cpp ]
        [ run bft_testing/variadic_sequence_50_test.cpp ]
        [ run bft_testing/interface_meta_function_test.cpp ]
        [ run bft_testing/clz_ctz_test.cpp ]
        [ run bft_testing/element_test.cpp ]
        [ run bft_testing/element_n_test.cpp ]
        [ run bft_testing/get_free_function_test.cpp ]
        [ run bitfield_vector_testing/bitfield_vector_test.cpp ]
        [ run bitfield_vector_testing/bitfield_vector_base_test.cpp ]
        [ run bitfield_vector_testing/proxy_reference_test.cpp ]
        [ run bitfield_vector_testing/member_impl_test.cpp ]
        [ run bitfield_vector_testing/mask_creator_test.cpp ]
    ;

