#  Boost string_algo library documentation Jamfile  ---------------------------------
#
#  Copyright Pavol Droba 2002-2003. Use, modification and
#  distribution is subject to the Boost Software License, Version
#  1.0. (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)
#
#  See http://www.boost.org for updates, documentation, and revision history.

import toolset ;
toolset.using doxygen ;

boostbook string_algo : string_algo.xml autodoc 
	:
        <xsl:param>boost.root=../../../../..
        <format>pdf:<xsl:param>boost.url.prefix=http://www.boost.org/doc/libs/release/doc/html
	;

doxygen autodoc
    :   
    [ glob ../../../../boost/algorithm/string.hpp ]
    [ glob ../../../../boost/algorithm/string_regex.hpp ]

    [ glob ../../../../boost/algorithm/string/classification.hpp ]
    [ glob ../../../../boost/algorithm/string/iterator_range.hpp ]       
    [ glob ../../../../boost/algorithm/string/sequence_traits.hpp ]
    [ glob ../../../../boost/algorithm/string/std_containers_traits.hpp ]
    [ glob ../../../../boost/algorithm/string/concept.hpp ]
    [ glob ../../../../boost/algorithm/string/compare.hpp ]
    [ glob ../../../../boost/algorithm/string/constants.hpp ]
    [ glob ../../../../boost/algorithm/string/case_conv.hpp ]
    [ glob ../../../../boost/algorithm/string/finder/default_search_algorithm.hpp ]
    [ glob ../../../../boost/algorithm/string/finder/simplified_finder.hpp ]
	[ glob ../../../../boost/algorithm/string/finder/finder.hpp ]
    [ glob ../../../../boost/algorithm/string/finder/functor_finders.hpp ]
    [ glob ../../../../boost/algorithm/string/finder/finder_generators.hpp ]
    [ glob ../../../../boost/algorithm/string/finder.hpp ]
    [ glob ../../../../boost/algorithm/string/finder_aliases.hpp ]
    [ glob ../../../../boost/algorithm/string/benchmark_finder.hpp ]
    [ glob ../../../../boost/algorithm/string/string_search/boyer_moore.hpp ]
    [ glob ../../../../boost/algorithm/string/string_search/knuth_morris_pratt.hpp ]
    [ glob ../../../../boost/algorithm/string/string_search/naive_search.hpp ]
    [ glob ../../../../boost/algorithm/string/string_search/rabin_karp.hpp ]
    [ glob ../../../../boost/algorithm/string/string_search/suffix_array.hpp ]
	[ glob ../../../../boost/algorithm/string/string_search.hpp ]	
	[ glob ../../../../boost/algorithm/string/find.hpp ]
    [ glob ../../../../boost/algorithm/string/find_iterator.hpp ]
    [ glob ../../../../boost/algorithm/string/trim.hpp ]
    [ glob ../../../../boost/algorithm/string/predicate.hpp ]
    [ glob ../../../../boost/algorithm/string/split.hpp ]
    [ glob ../../../../boost/algorithm/string/iter_find.hpp ]
    [ glob ../../../../boost/algorithm/string/erase.hpp ]
    [ glob ../../../../boost/algorithm/string/join.hpp ]
    [ glob ../../../../boost/algorithm/string/replace.hpp ]
    [ glob ../../../../boost/algorithm/string/find_format.hpp ]
    [ glob ../../../../boost/algorithm/string/formatter.hpp ]
    [ glob ../../../../boost/algorithm/string/regex.hpp ]
    [ glob ../../../../boost/algorithm/string/regex_find_format.hpp ]
    :
    <doxygen:param>HIDE_UNDOC_MEMBERS=YES
    <doxygen:param>EXTRACT_PRIVATE=NO
    <doxygen:param>ENABLE_PREPROCESSING=YES
    <doxygen:param>MACRO_EXPANSION=YES
    <doxygen:param>EXPAND_ONLY_PREDEF=YES
    <doxygen:param>SEARCH_INCLUDES=YES
    <doxygen:param>"PREDEFINED= \\
		\"BOOST_ALGORITHM_DOXYGEN\" \\
		\"BOOST_STRING_TYPENAME=typename\" \\
		\"BOOST_STATIC_CONSTANT(type,var)=static const type var\" \\
		\"BOOST_HAS_RVALUE_REFS\" \\
		\"BOOST_ALGORITHM_DETAIL_DEFAULT_ALLOCATOR_TYPE=std::allocator<std::size_t>\" \\
		\"BOOST_ALGORITHM_DETAIL_DEFAULT_COMPARATOR_TYPE=boost::algorithm::is_equal\" \\
		\"BOOST_ALGORITHM_DETAIL_COMMON_FINDER_TYPEDEFS(Range1T,Range2T)= \\
			typedef Range1T substring_type; /*!< The type of the substring */ \\
			typedef Range2T string_type; /*!< The type of the string */ \\
			typedef typename boost::range_const_iterator<substring_type>::type \\
				substring_iterator_type; /*!< The type of the substring's iterator */ \\
			typedef typename boost::range_iterator<string_type>::type \\
				string_iterator_type; /*!< The type of the string's iterator */ \\
			typedef typename boost::iterator_value<substring_iterator_type>::type \\
				substring_char_type; /*!< The character type of the substring */ \\
			typedef typename boost::iterator_value<string_iterator_type>::type \\
				string_char_type; /*!< The character type of the string */ \\
			typedef typename boost::iterator_range<substring_iterator_type> \\
				substring_range_type; /*!< The range type of the substring (pattern) */ \\
			typedef typename boost::iterator_range<string_iterator_type> \\
				string_range_type; /*!< The range type of the text */ \\
			typedef typename boost::iterator_difference<string_iterator_type>::type \\
				string_difference_type /*! A type capable of holding the difference between two iterators of the text */ \\
		\" \\
		\"BOOST_ALGORITHM_DETAIL_COMMON_FINDER_TYPEDEFS2(ComparatorT, AllocatorT)= \\
		typedef ComparatorT comparator_type; /*!< The type of the comparator */ \\
		typedef AllocatorT allocator_type /*! The type of the allocator */ \\
		\"
		"
    ;