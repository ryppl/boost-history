[/
 /  Copyright (c) 2006-2008, Bernhard Reiter
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /
 //////////////////////////////////////////////////////////////////////////////////////////////
 /
 / Boost.Tree
 / Tutorial documentation file.
 /]

[section Tutorial]

If you came here looking for a tree tutorial, it is very likely that you fall into either of two 
categories:

# You want to model an "explicit" tree-like structure such as a file hierarchy or an XML file; in this
case, you're recommended to continue reading about [link boost_tree.tutorial.using_forest Using Forest]
# You need a search tree for efficient data retrieval and storage; in that case, you're suggested to 
continue reading about [link boost_tree.tutorial.using_searcher Using Searcher]

[section Using Forest]
TODO
[endsect] [/ Using Forest]

[section Using Searcher]
So you want to store a number of values in a way that enables you to retrieve them in an efficient manner
based on comparing some criterion (the key) of your search term to the values already present in that
data structure and probably have pondered the STL's
[@http://www.sgi.com/tech/stl/AssociativeContainer.html Associative Containers] in their 
[@http://www.sgi.com/tech/stl/SortedAssociativeContainer.html sorted]
 (`map`, `multimap`, `set`, `multiset`) or 
 unordered (or "[@http://www.sgi.com/tech/stl/HashedAssociativeContainer.html hashed]") versions 
 (`unordered_*` versions of the former as required by 
 [@http://en.wikipedia.org/wiki/Technical_Report_1 TR1] or maybe `hash_*` in many pre-TR1 STL
 implementations).
You've come to the conclusion that while the latter just aren't suitable for your concrete needs, the
former don't give you sufficiently fine-grained control over what they're doing. Let's see what we can 
offer you:

* Binary trees, B-trees (and relatives), Tries, Ternary Search Trees or even just plain STL sequences
(as in "ordered vectors") as basic structures
as basic components
* Customizable tree balancing and augmenting mechanisms 
* Customizable key extraction mechanism (as it's not always a `pair`'s `first` member or the value itself
that you're sorting) in addition to established customizable key comparison mechanisms.

[caution Fair enough, we can't actually offer all that as of yet. But we will.]

Many of the above is achieved by separation of logically separate parts. The class that should 
eventually provide you with actual search functionality is a wrapper around whatever you choose as 
technical foundations: Enter the `searcher` (template) class which acts as glue between the basic 
structures and all those search-related aspects like key extraction, comparison, querying or insertion
in the right position. Think of it as an adaptor (as the STL sequence adaptors) that turns a sequence
into a [@http://www.sgi.com/tech/stl/SortedAssociativeContainer.html Sorted
Associative Container] encapsulating the underlying structure, thus requiring no knowledge about nor
allowing direct access to it. The missing sequence layer between the underlying tree structure and the
`searcher` is `balanced_tree`, which in turn adapts a tree (using a given balancing mechanism) and models a [@http://www.sgi.com/tech/stl/Sequence.html Sequence].

[section A simple red-black tree]

[caution This is really dull - maybe it should at least be an AVL or splay tree or so.]

So let's start with an example so simple you normally probably wouldn't be using this library for. 
[footnote You don't need to know much about red-black trees to understand this, but if you want to 
look it up a little, you can make sure you don't have to just believe every word here. After all, 
[@http://en.wikipedia.org/wiki/Red-black_tree Wikipedia] is your friend.]

A red-black tree is a binary search tree with a balancing mechanism using some "metadata" (the red/black
color part) attached to every node. Consequentially, we're going to need four components:

* A `binary_tree` that holds the user data.
* A `balanced_tree` that linearizes the `binary_tree`.
* A balancing mechanism (`balancers::red_black`, in our case) that modifies the `binary_tree`'s structure after any insertion or deletion so the it remains balanced at all times (adding color information for its internal bookkeeping to each node), while keeping the `balanced_tree`'s linear order.
* A `searcher` to do the search-and-sort relevant parts, as mentioned above.

So we start by pulling in headers and declaring `red_black_searcher`:
	
	#include <boost/tree/binary_tree.hpp>
	#include <boost/tree/balanced_tree.hpp>
	#include <boost/tree/balancers/red_black.hpp>
	#include <boost/tree/searcher.hpp>

	using namespace boost::tree;
	
	int main()
	{
		typedef binary_tree<int> tree_t;
		typeded balanced_tree<tree_t, balancers::red_black> balancer_t;
		typedef searcher<false, balancer_t> searcher_t;
		searcher_t red_black_searcher;
		
		/* ... */
	}

Obviously, we're going to use a tree holding `int`s. The
`false` boolean template argument to `searcher` denotes that we do ['not] want to store multiple values
holding the same key in objects of type `red_black_searcher`. This is a template parameter 
because `searcher`'s interface is different for each of its two possible values (compare to `map` and 
`multimap`, by which `searcher` was inspired).

Actually, most parts known from the `map` and `set` interfaces will also work with a `searcher<false, ...>`
(just like `multi_map` and `multi_set` are closely related to `searcher<true, ...>`). 

	#include <utility>
	/* ... */
		red_black_searcher.insert(1066);
		std::pair<searcher_t::const_iterator, bool> ret = 
			red_black_searcher.insert(2006).first;
		ret.first = red_black_searcher.insert(ret.first, 2001);	// Useful hint
		red_black_searcher.insert(ret.first, 996);				// Useless hint
		ret = red_black_searcher.insert(ci, 2001);
		assert(!ret.second);		// Already there.
		assert(ret.first == 2001);
	/* ...*/
	
[caution TODO: to be continued, obviously; use different extractors, introduce augmentors, ordered vector
...]

[endsect] [/ A simple red-black tree]

[endsect] [/ Using Searcher]

[endsect]
