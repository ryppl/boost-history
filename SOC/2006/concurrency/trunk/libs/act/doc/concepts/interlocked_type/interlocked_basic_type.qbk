[section Interlocked Basic Type]

An [concept Interlocked Basic Type] is a type whose instances support
thread-safe `load` and `store` operations and which are often used in the
implementation of lock-free code. In the current version of Boost.Act, only
built-in types may be [concept Interlocked Basic Types], although this will
likely change in future releases.

In order to be considered a valid [concept Interlocked Type], the type must be
default co/nstructible/, /copy-constructible/, and /copy-assignable/. These
operations are not interlocked operations and do not guarantee a specific
ordering of any kind.

Given the variable definitions below, the following expressions must be
well-formed and have the indicated effects in order for a type to be considered
an [concept Interlocked Basic Type].

[variablelist Interlocked Basic Type Descriptive Variable Definitions
[[`I`]            [An [concept Interlocked Basic Type].]                       ]
[[`i`]            [A value of type `I&`.]                                      ]
[[`C1`]           [A type which is convertible to `remove_cv<I>::type&`.]      ]
[[`c1`]           [A value of type `C1 const&`.]                               ]
[[`IU`]           [['cv-unqualified] `I`.]                                     ]
]

[heading Expression Requirements]

[table Interlocked Type Requirements
[[Expression]           [Return Type][Pre/Post-Condition]                      ]
[[`load( i )`]          [`IU`]       [Returns the value stored in `i`. This
                                      function is an
                                      __interlocked_operation__ and defaults to
                                      `acquire` semantics. Allowable semantics
                                      for this operation are `unordered` and
                                      `acquire`.
                                     ]                                         ]
[[`store( i, c1 )`]     [`void`]     [Stores the value of `c1` to object `i`.
                                      This function is an
                                      __interlocked_operation__ and defaults to
                                      `release` semantics. Allowable semantics
                                      for this operation are `unordered` and
                                      `release`.
                                     ]                                         ]
]

[endsect]
