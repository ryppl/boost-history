[section Interlocked Arithmetic Type]

An [concept Interlocked Arithmetic Type] is an __interlocked_basic_type__ which
supports common arithmetic operations.

In order to be considered a valid [concept Interlocked Arithmetic Type], given
the variable definitions below, the following expressions must be well-formed
and have the indicated effects, in addition to those requirements of
__interlocked_basic_type__. [concept Interlocked Arithmetic Types] also support
all operations specified in the C++ standard for arithmetic types. Such
operations do not imply memory barriers of any kind.

[note
Each of the following operations is a valid __interlocked_operation__, therefore
user-specified semantics may be applied. In addition to this, all operations
listed below have a return type of `boost::remove_cv<IV>::type` and yield the
value of target object prior to the operation being applied. Allowed
user-specified semantics for these operations are `acquire`, `release`,
`acq_rel`, `unordered`, and `default_`. If no semantics are explicitly specified
or if `default_` semantics are specified, then the operation is performed with
`acq_rel` semantics.
]

[variablelist Interlocked Arithmetic Type Descriptive Variable Definitions
[[`I`]            [An [concept Interlocked Arithmetic Type].]                  ]
[[`i`]            [A value of type `I`.]                                       ]
[[`C1`]           [A type which is convertible to `remove_cv<I>::type&`.]      ]
[[`c1`]           [A value of type `C1 const&`.]                               ]
]

[heading Expression Requirements]

[table Interlocked Arithmetic Type Requirements
[[Expression]                 [Atomic Operation (Returns Old Value)]           ]
[[`increment( i )`]           [`i++;`]                                         ]
[[`decrement( i )`]           [`i--;`]                                         ]
[[`add_assign( i, c1 )`]      [`i += c1;`]                                     ]
[[`subtract_assign( i, c1 )`] [`i -= c1;`]                                     ]
[[`multiply_assign( i, c1 )`] [`i *= c1;`]                                     ]
[[`divide_assign( i, c1 )`]   [`i /= c1;`]                                     ]
]

[endsect]
