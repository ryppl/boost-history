[section Interlocked Integer Type]

An [concept Interlocked Integer Type] is an __interlocked_arithmetic_type__
which supports common integer operations.

In order to be considered a valid [concept Interlocked Integer Type], given
the variable definitions below, the following expressions must be well-formed
and have the indicated effects, in addition to those requirements of
__interlocked_arithmetic_type__. [concept Interlocked Integer Types] also
support all operations specified in the C++ standard for integer types. Such
operations do not imply memory barriers of any kind.

[variablelist Interlocked Arithmetic Type Descriptive Variable Definitions
[[`I`]            [An [concept Interlocked Integer Type].]                     ]
[[`i`]            [A value of type `I`.]                                       ]
[[`C1`]           [A type which is convertible to `remove_cv<I>::type&`.]      ]
[[`c1`]           [A value of type `C1 const&`.]                               ]
]

[heading Expression Requirements]

[table Interlocked Integer Type Requirements
[[Expression]               [Atomic Operation (Returns Old Value)]             ]
[[`bitand_assign( i, c1 )`] [`i &= c1;`]                                       ]
[[`bitor_assign( i,  c1 )`] [`i |= c1;`]                                       ]
[[`compl_assign( i )`]      [`i = ~i;`]                                        ]
[[`lshift_assign( i, c1 )`] [`i <<= c1;`]                                      ]
[[`mod_assign( i, c1 )`]    [`i %= c1;`]                                       ]
[[`rshift_assign( i, c1 )`] [`i >>= c1;`]                                      ]
[[`xor_assign( i, c1 )`]    [`i ^= c1;`]                                       ]
]

[endsect]
