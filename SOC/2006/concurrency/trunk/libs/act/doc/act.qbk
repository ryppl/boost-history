[article Boost.Act
    [quickbook 1.3]
    [id act]
    [dirname act]
    [copyright 2006, 2007 Matthew Calabrese]
    [category C++ Concurrency Library]
    [authors [Calabrese, Matthew]]
    [purpose Library for concurrent programming.]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [source-mode c++]
]

[template concept[ name ] [^[name]]]
[template tablenote[ body ] ['Note: [body] --end note]]

[def __alert__              [$images/alert.png]]
[def __note__               [$images/note.png]]
[def __OpenMP__             [@http://www.OpenMP.org OpenMP]]

[def __consumer_policy__             [link boost_act.concepts.consumer_concepts.consumer_policy       [concept Consumer Policy]]]
[def __consumer__                    [link boost_act.concepts.consumer_concepts.consumer              [concept Consumer]]]
[def __queue_policy__                [link boost_act.concepts.queue_concepts.queue_policy             [concept Queue Policy]]]
[def __pc_queue__                    [link boost_act.concepts.queue_concepts.pc_queue                 [concept PC Queue]]]
[def __interlocked_type__            [link boost_act.interlocked.interlocked_concepts.interlocked_type                       [concept Interlocked Type]]]
[def __interlocked_natural_type__    [link boost_act.interlocked.interlocked_concepts.interlocked_natural_type                       [concept Interlocked Natural Type]]]
[def __interlocked_operation__       [link boost_act.interlocked.interlocked_concepts.interlocked_operation [concept Interlocked Operation]]]
[def __semantic_type__               [link boost_act.interlocked.interlocked_concepts.interlocked_operation.semantic_type [concept Semantic Type]]]
[def __interlocked_arithmetic_type__ [link boost_act.interlocked.interlocked_concepts.interlocked_arithmetic_type        [concept Interlocked Arithmetic Type]]]
[def __interlocked_integer_type__    [link boost_act.interlocked.interlocked_concepts.interlocked_integer_type           [concept Interlocked Integer Type]]]
[def __worker_policy__               [link boost_act.concepts.worker_policy                           [concept Worker Policy]]]
[def __worker__                      [link boost_act.concepts.worker                                  [concept Worker]]]
[def __threaded_worker_policy__      [link boost_act.concepts.threaded_worker_policy                  [concept Threaded Worker Policy]]]
[def __threaded_worker__             [link boost_act.concepts.threaded_worker                         [concept Threaded Worker]]]

[include beta_warning.qbk]
[include brief_description.qbk]
[include introduction.qbk]
[include compiler_setup.qbk]
[include interlocked.qbk]
[include rationale.qbk]
