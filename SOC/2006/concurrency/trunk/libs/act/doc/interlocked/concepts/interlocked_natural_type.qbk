[section Interlocked Natural Type]

[heading Description]

An [concept Interlocked Arithmetic Type] is an __interlocked_type__ which
supports `assign` and `assign_if_was` operations (aka swap and cas).

[variablelist Notation
[[`I`]            [An [concept Interlocked Arithmetic Type].]                  ]
[[`i`]            [A value of type `I`.]                                       ]
[[`C1`]           [A type which is convertible to `remove_cv<I>::type&`.]      ]
[[`c1`]           [A value of type `C1 const&`.]                               ]
[[`C2`]           [A type which is convertible to `remove_cv<I>::type&`.]      ]
[[`c2`]           [A value of type `C2 const&`.]                               ]
]

[heading Refinement of]
__interlocked_type__

[heading Expression Requirements]

In order to be considered a valid [concept Interlocked Natural Type], given the
variable definitions below, the following expressions must be well-formed and
have the indicated effects, in addition to those requirements of
__interlocked_type__.

[note
Each of the following operations is a valid __interlocked_operation__, therefore
user-specified semantics may be applied. In addition to this, all operations
listed below have a return type of `boost::remove_cv<IV>::type` and yield the
value of target object prior to the operation being applied. Allowed
user-specified semantics for these operations are `acquire`, `release`,
`acq_rel`, `unordered`, and `default_`. If no semantics are explicitly specified
or if `default_` semantics are specified, then the operation is performed with
`acq_rel` semantics.
]

[table Interlocked Arithmetic Type Requirements
[[Expression]                   [Operation (Returns Old Value)]                ]
[[`assign( i, c1 )`]            [`i = c1;`]                                    ]
[[`assign_if_was( i, c1, c2 )`] [`if( i == c2 ) i = c1;`]                      ]
]

[heading Headers]

``
  // Brings in all interlocked operations.
  #include <boost/act/interlocked.hpp>
  
  // Only forward declarations.
  #include <boost/act/interlocked_fwd.hpp>
  
  // assign headers.
  #include <boost/act/interlocked/assign.hpp>
  #include <boost/act/interlocked/assign/assign_acquire.hpp>
  #include <boost/act/interlocked/assign/assign_release.hpp>
  #include <boost/act/interlocked/assign/assign_acq_rel.hpp>
  #include <boost/act/interlocked/assign/assign_unordered.hpp>
  
  // Forward declarations.
  #include <boost/act/interlocked/assign_fwd.hpp>
  #include <boost/act/interlocked/assign/assign_fwd.hpp>
  /* etc. */
  
  // assign_if_was headers.
  #include <boost/act/interlocked/assign_if_was.hpp>
  #include <boost/act/interlocked/assign_if_was/assign_if_was.hpp>
  /* etc. */
``

[heading Example]

ToDo: Put a code example here.

[endsect]
