[section Interlocked Operation]

[heading Description]

An [concept Interlocked Operation] is a function which provides guarantees
concerning order and visibility of read and write operations with respect to
multiple threads, often with semantics which may be specified by users at the
call site.

In order to be considered a valid [concept Interlocked Operation], given
the variable definitions below, the following expressions must be well-formed
and have the indicated effects.

[variablelist Notation
[[[~name]][An       [concept Interlocked Operation].]                          ]
[[`S`]              [A __semantic_type__.]                                     ]
[[[~args]]          [The argument list (if any) for the
                     [concept Interlocked Operation].
                    ]                                                          ]
]

[def __op_call__                  name(args)   ]
[def __op_call_sem__              name<S>(args)]

[heading Expression Requirements]

[table Interlocked Operation Requirements
[[Expression]                             [Pre/Post-Condition]                 ]
[[`__op_call__`]                          [Performs the operation with the
                                           default semantics as specified for
                                           that operation.
                                          ]                                    ]
[[`__op_call_sem__`]                      [Performs the operation with the
                                           specified semantics.
                                           [tablenote Not all
                                            [concept Interlocked Operations]
                                            support every __semantic_type__.
                                            Refer to documentation for the
                                            corresponding operation for exactly
                                            which semantics are supported for
                                            that operation. All
                                            [concept Interlocked Operations]
                                            must support the `default_`
                                            __semantic_type__.
                                           ]
                                          ]                                    ]
]

[heading Semantic Type]

While all [concept Interlocked Operations] specify certain guarantees by
default, these may often be toggled to make an operation's ordering more or less
constrained by passing a [concept Semantic Type] as an explicit template
argument to the corresponding template. Not all [concept Interlocked Operations]
support all [concept Semantic Types].

[important
If you are unsure as to which semantics you should use for a given situation, it
is generally safest to use the default semantics of the corresponding
[concept Interlocked Operation]. If efficiency is important for your
application, you should prefer to use the least-restrictive semantics that you
can without breaking allowable ordering of visibility between threads.
]

[table Semantic Types
[[Type]       [Ordering Guarantee]                                             ]
[[`unordered`][No ordering guarantee.]                                         ]
[[`acquire`]  [The operation is made visible before all subsequent instructions.
               `acquire` semantics are generally used for read or read-write
               operations.
              ]                                                                ]
[[`release`]  [The operation is made visible after all prior instructions.
               `release` semantics are generally used for write or read-write
               operations.
              ]                                                                ]
[[`acq_rel`]  [Combines the ordering guarantees of both `acquire` and `release`.
               `acq_rel` semantics are generally used for read-write operations
               only.
              ]                                                                ]
[[`default_`] [Uses the default ordering guarantees as specified by the
               corresponding [concept Interlocked Operation]. This
               [concept Semantic Type] must be supported by all
               [concept Interlocked Operations].
              ]                                                                ]
]

[note
In a future release, another [concept Semantic Type] may be introduced called
`thread_unsafe` which does not perform the operation atomically at all. This
type would be a required semantic for all [concept Interlocked Operations], much
like `default_`.
]

[heading Headers]

In general, you should not have to include the following files in order to use
[concept Interlocked Operations], since including the file for the operation
implicitly includes the corresponding semantics. However, if you wish to create
your own [concept Interlocked Operations], you would use the headers notated
below to bring in the semantic types which are necessary for use with your
operation.

``
  // Brings in all semantic types.
  #include <boost/act/interlocked/semantics.hpp>
  
  // Fine-grained semantic headers.
  #include <boost/act/interlocked/semantics/unordered.hpp>
  #include <boost/act/interlocked/semantics/acquire.hpp>
  #include <boost/act/interlocked/semantics/release.hpp>
  #include <boost/act/interlocked/semantics/acq_rel.hpp>
  #include <boost/act/interlocked/semantics/default.hpp>
``

[heading Example]

[import ../../../example/multiply_assign.cpp]

[multiply_assign]

[endsect]
