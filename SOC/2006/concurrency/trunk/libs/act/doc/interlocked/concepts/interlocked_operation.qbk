[section Interlocked Operation]

[heading Description]

An [concept Interlocked Operation] is a function template whose instantiations
provide guarantees about atomicity and order of visibility of read and write
operations with respect to multiple threads. Semantics for such operations may
be specified by the programmer at compile-time via explicit template arguments.

In order to be considered a valid [concept Interlocked Operation], given
the variable definitions below, the following expressions must be well-formed
and have the indicated effects.

[variablelist Notation
[[[~name]][An       [concept Interlocked Operation].]                          ]
[[`S`]              [An __interlocked_semantic_type__.]                        ]
[[[~args]]          [The argument list (if any) for the
                     [concept Interlocked Operation].
                    ]                                                          ]
]

[def __op_call__                  name(args)   ]
[def __op_call_sem__              name<S>(args)]

[heading Expression Requirements]

[table Interlocked Operation Requirements
[[Expression]                             [Pre/Post-Condition]                 ]
[[`__op_call__`]                          [Performs the operation with the
                                           default semantics as specified for
                                           that operation.
                                           [tablenote Currently, all interlocked
                                            operations in this library default
                                            to `sequential` semantics, which
                                            will likely become the required
                                            default for all [concept Interlocked
                                            Operations] in future versions.
                                           ]
                                          ]                                    ]
[[`__op_call_sem__`]                      [Performs the operation with the
                                           specified semantics.
                                          ]                                    ]
]

[heading Example]

The following example uses `multiply_assign`, which is a model of
[concept Interlocked Operation] that multiplies the first argument by the second
argument and stores the result back into the first argument. The result of the
call is the value of the first argument prior to the operation being performed.

[import ../../../example/multiply_assign.cpp]

[multiply_assign]

[endsect]
