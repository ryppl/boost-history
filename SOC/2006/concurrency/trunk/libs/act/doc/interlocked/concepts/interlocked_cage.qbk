[section Interlocked Cage]

[heading Description]

An [concept Interlocked Cage] is a template whose instantiations are types which
manage the order of read and write operations with respect to construction and
destruction of the cage. Semantics may be specified by the programmer at
compile-time via explicit template arguments.

[heading Concept of]

* __interlocked_memory_cage__
* __interlocked_compiler_cage__

[variablelist Notation
[[[~name]]          [An [concept Interlocked Cage].]                        ]
[[`S1`]             [An __interlocked_semantic_type__.]                        ]
[[`S2`]             [An __interlocked_semantic_type__.]                        ]
[[`C`]              [A type which is an instantiation of `name` with or without
                     additional /cv-qualification/.
                    ]                                                          ]
[[`c`]              [An object of type `C&`.]                                  ]
]

[heading Expression Requirements]

[table Interlocked Operation Requirements
[[Expression]                             [Pre/Post-Condition]                 ]
[[`name<>()`]                             [Instantiates a cage with the
                                           default semantics (`sequential`).
                                          ]                                    ]
[[`name<S1>()`]                           [Instantiates a cage with the
                                           specified semantics.
                                          ]                                    ]
[[`name<S1,S2>()`]                        [Instantiates a cage with the
                                           semantic requirements of `S1` which
                                           are not already specified by `S2`.
                                          ]                                    ]
[[`c.~C()`]                               [Destroys the cage `c`.]          ]
]

[endsect]
