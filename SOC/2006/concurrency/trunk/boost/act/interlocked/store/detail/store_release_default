/*=============================================================================
    Copyright (c) 2006, 2007 Matthew Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_ACT_INTERLOCKED_STORE_DETAIL_STORE_RELEASE_DEFAULT_IMPL_HPP
#define BOOST_ACT_INTERLOCKED_STORE_DETAIL_STORE_RELEASE_DEFAULT_IMPL_HPP

#include <boost/act/interlocked/detail/cas_support.hpp>

#if BOOST_ACT_INTERLOCKED_DETAIL_HAS_VOLATILE_STORE_RELEASE

#include <boost/type_traits/remove_cv.hpp>

namespace boost { namespace act { namespace interlocked { namespace detail {

struct store_release_default_impl
{
  template< typename TargetType >
  static void execute( TargetType volatile& target
                     , typename remove_cv< TargetType >::type source
                     )
  {
    target = source;
  }
};

} } } }

#else // Else: Custom interlocked store for this system (no default)

#include <boost/mpl/assert.hpp>
#include <boost/mpl/always.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/mpl/bool.hpp>

namespace boost { namespace act { namespace interlocked { namespace detail {

struct store_release_default_impl
{
  template< typename TargetType, typename SourceType >
  static void execute( TargetType&, SourceType& )
  {
    BOOST_MPL_ASSERT_MSG
    (
      ( mpl::apply< mpl::always< mpl::false_ >, TargetType >::type::value )
    , NO_DEFAULT_INTERLOCKED_STORE_RELEASE_IMPLEMENTATION_FOR_THIS_SYSTEM
    , ()
    );
  }
};

} } } }

#endif

#endif
