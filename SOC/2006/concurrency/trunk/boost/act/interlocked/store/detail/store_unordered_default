/*=============================================================================
    Copyright (c) 2006, 2007 Matthew Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_ACT_INTERLOCKED_STORE_DETAIL_STORE_UNORDERED_DEFAULT_IMPL_HPP
#define BOOST_ACT_INTERLOCKED_STORE_DETAIL_STORE_UNORDERED_DEFAULT_IMPL_HPP

#include <boost/act/interlocked/detail/cas_support.hpp>

#if BOOST_ACT_INTERLOCKED_DETAIL_HAS_VOLATILE_STORE_UNORDERED

#include <boost/type_traits/remove_cv.hpp>

namespace boost { namespace act { namespace interlocked { namespace detail {

struct store_unordered_default_impl
{
  template< typename TargetType >
  static typename remove_cv< TargetType >::type
  execute( TargetType volatile& target )
  {
    return target;
  }
};

} } } }

#else // Else: Custom interlocked store for this system (no default)

#include <boost/act/interlocked/store/store_release.hpp>
#include <boost/type_traits/remove_cv.hpp>

namespace boost { namespace act { namespace interlocked { namespace detail {

struct store_unordered_default_impl
{
  template< typename TargetType >
  static typename remove_cv< TargetType >::type execute( TargetType& target )
  {
    // ToDo: Look ahead for store_release_support and produce error here
    return interlocked::store_release( target );
  }
};

} } } }

#endif

#endif
