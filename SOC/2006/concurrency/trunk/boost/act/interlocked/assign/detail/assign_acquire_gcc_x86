/*=============================================================================
    Copyright (c) 2006, 2007 Matthew Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_ASSIGN_ACQUIRE_GCC_X86_HPP
#define BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_ASSIGN_ACQUIRE_GCC_X86_HPP

#include <boost/type_traits/remove_cv.hpp>

namespace boost { namespace act { namespace interlocked { namespace detail {

struct assign_acquire_impl
{
  template< typename Type >
  static typename remove_cv< Type >::type
  execute( Type& left, typename remove_cv< Type >::type right )
  {
    // Note: SSE2 is assumed otherwise the file wouldn't be included
    __asm__ __volatile__
    (
      "xchg %0, (%1)\n\t"
      "lfence":
      "+r"( right ):
      "r"( &left ):
      "memory", "cc"
    );

    return right;
  }
};

} } } }

#endif
