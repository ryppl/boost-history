/*=============================================================================
    Copyright (c) 2006, 2007 Matthew Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_ASSIGN_UNORDERED_DEFAULT_HPP
#define BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_ASSIGN_UNORDERED_DEFAULT_HPP

#include <boost/act/interlocked/detail/cas_support.hpp>
#include <boost/type_traits/remove_cv.hpp>

#if BOOST_ACT_INTERLOCKED_DETAIL_HAS_CUSTOM_IMPL( assign, acquire )

#include <boost/act/interlocked/assign/assign_acquire.hpp>

#define BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_UNORDERED_IMPL assign_acquire

#elif BOOST_ACT_INTERLOCKED_DETAIL_HAS_CUSTOM_IMPL( assign, release )

#include <boost/act/interlocked/assign/assign_release.hpp>

#define BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_UNORDERED_IMPL assign_release

#elif BOOST_ACT_INTERLOCKED_DETAIL_HAS_CUSTOM_IMPL( assign, acq_rel )

#include <boost/act/interlocked/assign/assign.hpp>

#define BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_UNORDERED_IMPL assign

#else

#error If you read this, assign_unordered_default was improperly included.

#endif

namespace boost { namespace act { namespace interlocked { namespace detail {

struct assign_unordered_default_impl
{
  template< typename LeftType, typename RightType >
  static typename remove_cv< LeftType >::type
  execute( LeftType& left, RightType& right )
  {
    return interlocked::BOOST_ACT_INTERLOCKED_ASSIGN_DETAIL_UNORDERED_IMPL
           ( left, right );
  }
};


} } } }

#endif
