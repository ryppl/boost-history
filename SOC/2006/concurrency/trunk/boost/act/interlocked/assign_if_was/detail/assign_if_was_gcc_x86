/*=============================================================================
    Copyright (c) 2006, 2007 Matthew Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_ASSIGN_IF_WAS_GCC_X86_HPP
#define BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_ASSIGN_IF_WAS_GCC_X86_HPP

#include <boost/config.hpp>

#include <boost/detail/interlocked.hpp>

#include <boost/type_traits/remove_cv.hpp>

namespace boost { namespace act { namespace interlocked { namespace detail {

struct assign_if_was_impl
{
  template< typename LeftType, typename RightType, typename OldType >
  static typename remove_cv< LeftType >::type
  execute( LeftType& left, RightType right, OldType old )
  {
    // ToDo: Very important!!!! This currently is just release semantics!
    //       Rewrite to have both acquire and release semantics!!!
    __asm__ __volatile__
    (
        "sfence\n\t"
        "lock\n\t"
        "cmpxchgl %1, %2\n\t"
        /*"lfence\n\t"*/:
        "=a" (old):
        "q" (right), "m" (left), "0" (old):
        "memory", "cc"
    );

    return old;
  }
};

} } } }

#endif
