/*=============================================================================
    Copyright (c) 2006, 2007 Matthew Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_ASSIGN_IF_WAS_UN_DEFAULT_HPP
#define BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_ASSIGN_IF_WAS_UN_DEFAULT_HPP

#include <boost/act/interlocked/detail/cas_support.hpp>
#include <boost/type_traits/remove_cv.hpp>

#if BOOST_ACT_INTERLOCKED_DETAIL_HAS_CUSTOM_IMPL( assign_if_was, acquire )

#include <boost/act/interlocked/assign_if_was/assign_if_was_acquire.hpp>

#define BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_UN_IMPL                     \
assign_if_was< acquire >

#elif BOOST_ACT_INTERLOCKED_DETAIL_HAS_CUSTOM_IMPL( assign_if_was, release )

#include <boost/act/interlocked/assign_if_was/assign_if_was_release.hpp>

#define BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_UN_IMPL                     \
assign_if_was< release >

#else

#include <boost/act/interlocked/assign_if_was/assign_if_was_acq_rel.hpp>

#define BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_UN_IMPL                     \
assign_if_was< acq_rel >

#endif

namespace boost { namespace act { namespace interlocked { namespace detail {

struct assign_if_was_unordered_default_impl
{
  template< typename LeftType, typename RightType, typename OldType >
  static typename remove_cv< LeftType >::type
  execute( LeftType& left, RightType& right, OldType& old )
  {
    return interlocked::BOOST_ACT_INTERLOCKED_ASSIGN_IF_WAS_DETAIL_UN_IMPL
           ( left, right, old );
  }
};


} } } }

#endif
