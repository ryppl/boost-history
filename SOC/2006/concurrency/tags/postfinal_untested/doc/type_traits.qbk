[part Boost.Act
    [quickbook 1.4]
    [version 0.4b]
    [id act]
    [dirname act]
    [copyright 2006 Matthew Calabrese]
    [category C++ Concurrency Library]
    [authors [Calabrese, Matthew]]
    [source-mode c++]
]

[def __alert__           [$images/alert.png]]
[def __note__            [$images/note.png]]
[def __OpenMP__          [@http://www.OpenMP.org OpenMP]]

[template type_traits_info[result header]
[*type:] [result]

[*Header:] [header]
]

[section Type Traits]

[section add_active]

  template< typename T, typename ActModel = default_act_model >
  struct add_active
  {
    typedef ``/unspecified-type/`` type;
  };

  template< typename T, typename ActModel >
  struct add_active_no_default
  {
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
The =active= qualified form of `T`, using `ActModel` as an =act model=.
..`#include <boost/act/type_traits/add_active.hpp>` or
`#include <boost/act/type_traits/add_active_no_default.hpp>` respectively.
]

[note The "no_default" form of =add_active= is used when the coder would rather
not bring in the entire default act model definition, usually for reasons of
compile time optimization.
]

[table Examples of add_active
[[Expression]                  [ResultType]                                    ]
[[`add_active<int>::type`]     [`BOOST_ACTIVE((int))`]                         ]
[[`add_active<int,
              concurrent_act_model
             >::type`
 ]                             [`BOOST_ACTIVE_M((int),(concurrent_act_model))`]]
[[`add_active<
    BOOST_ACTIVE((int))>::type`
 ]                             [`BOOST_ACTIVE((int))`]                         ]
[[`add_active<
    BOOST_ACTIVE((int),
    (immediate_act_model)
   ),concurrent_act_model>::type`
 ]                             [`BOOST_ACTIVE_M((int),(concurrent_act_model))`]]
]

[endsect]

[section add_atomic]

  template< typename T, typename ActModel = default_act_model >
  struct add_atomic
  {
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
The =atomic= qualified form of `T`.
..`#include <boost/act/type_traits/add_atomic.hpp>`
]

[table Examples of add_active
[[Expression]                             [ResultType]                         ]
[[`add_atomic<int>::type`]                [`BOOST_ATOMIC((int))`]              ]
[[`add_atomic<BOOST_ATOMIC((int))>::type`][`BOOST_ATOMIC((int))`]              ]
]

[endsect]

[section has_parallel_safe_assign]

  template< typename T >
  struct has_parallel_safe_assign
  {
    typedef bool value_type;
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
A =Boost.MPL= =integral constant= type representing `true` if `T` is
identifiable as having a parallel-safe copy-assignment operation or if the type
has `parallel_safe_assign` as a direct or indirect public base, `false`
otherwise. A type is considered to have a parallel-safe assignment operation if
a unary or binary function object type which assigns one instance of `T` to
another can be considered =parallel safe=.
..`#include <boost/act/type_traits/has_parallel_safe_assign.hpp>`
]

[note =scalar= types and =P.O.D.= types are automatically considered to be
=parallel safe assignable= if the necessary compiler intrinsics are present.
]

[variablelist Examples of has_paralle_safe_assign
[[][Given: ``struct a { int mem; };

struct b : parallel_safe_assignable
{
  int mem;
  b& operator =( b const& ){ return *this; }
};

struct c
{
  int mem;
  c& operator =( c const& ){ return *this; }
};
``
   ]                                                                           ]
[[][`has_parallel_safe_assign<int>::value` is an integral constant expression
    that evaluates to `true`.
   ]                                                                           ]
[[][`has_parallel_safe_assign<a>::value` is an integral constant expression
    that evaluates to `true` with the necessary compile intrinsics.
   ]                                                                           ]
[[][`has_parallel_safe_assign<b>::value` is an integral constant expression that
    evaluates to `true`.
   ]                                                                           ]
[[][`has_parallel_safe_assign<c>::value` is an integral constant expression that
    evaluates to `false`.
   ]                                                                           ]
[[][`has_parallel_safe_assign<T>::value_type` is the type `bool`.]             ]
]

[endsect]

[section is_act_model]

  template< typename T >
  struct is_act_model
  {
    typedef bool value_type;
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
A =Boost.MPL= =integral constant= type representing `true` if `T` has the type
`act_model` as a direct or indirect public base, `false` otherwise.
..`#include <boost/act/type_traits/is_act_model.hpp>`
]

[variablelist Examples of is_act_model
[[][`is_act_model<concurrent_act_model>::value` is an integral constant
    expression that evaluates to `true`.
   ]                                                                           ]
[[][`is_act_model<immediate_act_model>::value` is an integral constant
    expression that evaluates to `true`.
   ]                                                                           ]
[[][`is_act_model<int>::value` is an integral constant expression that
    evaluates to `false`.
   ]                                                                           ]
[[][`is_act_model<T>::value_type` is the type `bool`.]                         ]
]

[endsect]

[section is_active]

  template< typename T >
  struct is_active
  {
    typedef bool value_type;
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
A =Boost.MPL= =integral constant= type representing `true` if `T` is an
active-qualified type, `false` otherwise.
..`#include <boost/act/type_traits/is_active.hpp>`
]

[variablelist Examples of is_active
[[][`is_active<BOOST_ACTIVE((int))>::value` is an integral constant expression
    that evaluates to `true`.
   ]                                                                           ]
[[][`is_active<BOOST_ACTIVE_M((int),(immediate_act_model))>::value` is an
    integral constant expression that evaluates to `true`.
   ]                                                                           ]
[[][`is_active<int>::value` is an integral constant expression that evaluates to
    `false`.
   ]                                                                           ]
[[][`is_active<T>::value_type` is the type `bool`.]                            ]
]

[endsect]

[section is_atomic]

  template< typename T >
  struct is_atomic
  {
    typedef bool value_type;
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
A =Boost.MPL= =integral constant= type representing `true` if `T` is an
atomic-qualified type, `false` otherwise.
..`#include <boost/act/type_traits/is_atomic.hpp>`
]

[variablelist Examples of is_atomic
[[][`is_atomic<BOOST_ATOMIC((int))>::value` is an integral constant expression
    that evaluates to `true`.
   ]                                                                           ]
[[][`is_atomic<BOOST_ATOMIC_M((int),(immediate_act_model))>::value` is an
    integral constant expression that evaluates to `true`.
   ]                                                                           ]
[[][`is_atomic<int>::value` is an integral constant expression that evaluates to
    `false`.
   ]                                                                           ]
[[][`is_atomic<T>::value_type` is the type `bool`.]                            ]
]

[endsect]

[section is_algo_model]

  template< typename T >
  struct is_algo_model
  {
    typedef bool value_type;
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
A =Boost.MPL= =integral constant= type representing `true` if `T` has the type
`algo_model` as a direct or indirect public base, `false` otherwise.
..`#include <boost/act/type_traits/is_algo_model.hpp>`
]

[variablelist Examples of is_algo_model
[[][`is_algo_model<parallel_algo_model>::value` is an integral constant
    expression that evaluates to `true`.
   ]                                                                           ]
[[][`is_algo_model<serial_algo_model>::value` is an integral constant
    expression that evaluates to `true`.
   ]                                                                           ]
[[][`is_algo_model<int>::value` is an integral constant expression that
    evaluates to `false`.
   ]                                                                           ]
[[][`is_algo_model<T>::value_type` is the type `bool`.]                        ]
]

[endsect]

[section is_parallel_safe]

  template< is_parallel_safe T >
  struct is_algo_model
  {
    typedef bool value_type;
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
A =Boost.MPL= =integral constant= type representing `true` if `T` is a type
which has `parallel_safe` as a direct or indirect public base or if the template
has been appropriately specialized, `false` otherwise.
..`#include <boost/act/type_traits/is_parallel_safe.hpp>`
]

[note In future releases of =Boost.Act=, this metafunction will be replaced with
one that operates more similarly to =result_of=, since operands to `operator ()`
may control whether or not the operation is safe to be executed in parallel.
]

[variablelist Examples of is_parallel_safe
[[][Given: ``struct a : parallel_safe {};

struct b {};``
   ]                                                                           ]
[[][`is_parallel_safe<a>::value` is an integral constant expression that
    evaluates to `true`.
   ]                                                                           ]
[[][`is_parallel_safe<b>::value` is an integral constant expression that
    evaluates to `false`.
   ]                                                                           ]
[[][`is_parallel_safe<int>::value` is an integral constant expression that
    evaluates to `false`.
   ]                                                                           ]
[[][`is_parallel_safe<T>::value_type` is the type `bool`.]                     ]
]

[endsect]

[section remove_active]

  template< typename T >
  struct remove_active
  {
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
The =active= unqualified form of `T`.
..`#include <boost/act/type_traits/remove_active.hpp>`
]

[table Examples of remove_active
[[Expression]                                [ResultType]                      ]
[[`remove_active<BOOST_ACTIVE((int))>::type`][`int`]                           ]
[[`remove_active<BOOST_ACTIVE_M((int),(parallel_act_model))>::type`][`int`]    ]
[[`remove_active<const BOOST_ACTIVE((int))>::type`][`const int`]               ]
[[`remove_active<BOOST_ACTIVE((const int))>::type`][`const int`]               ]
[[`remove_active<BOOST_ACTIVE((int))*>::type`][`BOOST_ACTIVE((int))*`]         ]
]

[endsect]

[section remove_atomic]

  template< typename T >
  struct remove_atomic
  {
    typedef ``/unspecified-type/`` type;
  };

[type_traits_info
The =atomic= unqualified form of `T`.
..`#include <boost/act/type_traits/remove_atomic.hpp>`
]

[table Examples of remove_atomic
[[Expression]                                [ResultType]                      ]
[[`remove_atomic<BOOST_ATOMIC((int))>::type`][`int`]                           ]
[[`remove_atomic<BOOST_ATOMIC_M((int),(parallel_act_model))>::type`][`int`]    ]
[[`remove_atomic<BOOST_ATOMIC((const int))>::type`][`const int`]               ]
[[`remove_atomic<BOOST_ATOMIC((int))&>::type`][`BOOST_ATOMIC((int))&`]         ]
]

[endsect]

[endsect]
