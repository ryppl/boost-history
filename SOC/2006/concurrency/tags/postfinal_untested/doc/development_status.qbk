[part Boost.Act
    [quickbook 1.4]
    [version 0.4b]
    [id act]
    [dirname act]
    [copyright 2006 Matthew Calabrese]
    [category C++ Concurrency Library]
    [authors [Calabrese, Matthew]]
    [source-mode c++]
]

[def __alert__           [$images/alert.png]]
[def __note__            [$images/note.png]]
[def __OpenMP__          [@http://www.OpenMP.org OpenMP]]

[section Development status]

This section details most of the features planned for the first official
completed release of Boost.Act along with their current stage of implementation
in the library.

[table Development status
[[Feature]                       [Progress]                                    ]
[[General design]                [100%]                                        ]
[[Act model concept]             [100%]                                        ]
[[Immediate act model]           [95%]                                         ]
[[Concurrent act model]          [50% (missing overridable main
                                      , thread allocator
                                      , no special cases for void actions yet
                                      )
                                 ]                                             ]
[[Lazy act model]                [0% (possibly will be left out in first
                                      official 100% release
                                     )]                                        ]
[[Parallel-safe concept]         [100%]                                        ]
[[Parallel-safe concept]         [100%]                                        ]
[[Algorithm model concept]       [100%]                                        ]
[[Serial algorithm model]        [100%]                                        ]
[[Parallel algorithm model]      [100% (Implemented with OpenMP)]              ]
[[Dynamic STL algorithms]        [10% (6 algorithms implemented; many stubs
                                       in-place
                                      )
                                 ]                                             ]
[[Polymorphic algorithm macro]   [90% (allows for easily creating even
                                           complex, overloaded polymorphic
                                           algorithms with a series of macros;
                                           needs to be updated and exposed to
                                           the user
                                          )
                                 ]                                             ]
[[Active object framework]       [90%]                                         ]
[[Active qualifier]              [100%]                                        ]
[[Action framework]              [90%]                                         ]
[[Atomic framework]              [90% (most framework setup, missing proper
                                       return types, scalar types fully
                                       implemented using OpenMP if supported
                                 ]                                             ]
[[Type traits]                   [40%]                                         ]
[[Max call parameter toggle]     [100%]                                        ]
[[Portability]                   [Compilation and limited testing working in
                                  VC++ 8.0, Intel 9.1, and MinGW
                                 ]                                             ]
]

[endsect]
