[/license

Boost.Bimap

Copyright (c) 2006 Matias Capeletto

This code may be used under either of the following two licences:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. OF SUCH DAMAGE.

Or:

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.3 ]

[section Future work]

These features will be implemented soon:

[h2 Projection of iterators]

This is very useful, and the B.MI core allows to implement it very easily.

[h2 CompatibleKey functions]

Enhance some of the views functions to be able to get compatible key_types as
a parameter instead of forcing the conversion. This will improve the
performance and allow better inlining for these operations.

[h2 Hooking Data]

In general, programmers use maps to access information quickly.
Boost.Bimap will allow the user to hook data inside the bimap so it is not
necessary to maintain another map. This a possible code example:


    typedef bimap< int, string, hook_data< string > > bm_type;
    bm_type bm;

    //...

    bm.left_map.data(28928546) = "carpintero";
    bm.right_map.data("John Wayne") = "actor";

    bm_type::left_iterator iter = bm.left_map.find(23345647);
    iter->data = "programador";

    bm_type::iterator iter = bm.find( bm_type::pair_by<member_at::left>(23345647,"Green Dert") );
    iter->data = "estudiante";

    bm.insert( bm_type::value_type_by<member_at::left>(1456783342,"Fred Bypass","retirado") );


[h2 More...]

With the current informal review, more features will be evaluated.

[endsect]