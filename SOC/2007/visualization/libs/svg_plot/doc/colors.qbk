[section:color Colors]

The project supports any
[@http://en.wikipedia.org/wiki/RGB_color_model RGB color],
as well as a number of colors (for example, red, pink, aliceblue...) that are
[@http://www.w3.org/TR/SVG/types.html#ColorKeywords named by the SVG standard].

[heading `svg_color_constant`]
`svg_color_constant` is simply an enumerated list of these names colors.

The constants are defined at
[@../../../../boost/svg_plot/svg_color.hpp svg_color.hpp].

Examples of colors are at [@../../../svg_plot/example/svg_colors.cpp svg_colors.cpp].

The list of [@http://www.w3.org/TR/SVG/types.html#ColorKeywords SVG standard named colors]
contains all the colors you might expect, such as red, blue, green, magenta, cyan, yellow, pink and orange,
as well as nearly 150 other shades.

You will probably still find that the colors names do not meet your requirements
and so it is also possible to define any RGB combination.

The list also contains one extra color element, `blank`, defined as `false`,
used when you need to pass a color, but would not like it to be visible.
This comes in handy for defining defaults for functions, for example.

[h4 Example of using `svg_color_constant`]

  using namespace boost::svg; // Convenient to use all SVG plot features.

  svg_2d_plot my_plot; // Create a 2D plot (with all defaults).

  svg_color_constant my_color = red; // Choose a color,
  my_plot.background_border_color(my_color); // and apply to the border of the entire image.
  my_plot.background_color(lightgray); // Or use directly, to set the color of the background.

[note `svg_color` has a constructor for `svg_color_constant`, so you can use
a `svg_color_constant` in place of a `svg_color` and it will be implicitly
converted. However, there is *not* currently an
`svg_color::operator=(svg_color_constant)` overload, so
``
svg_color my_color = red;
``
does not have the desired effect, and nor does
`cout << red << endl;`
output the expected "RGB(255,0,0)" but instead outputs "119", the value of the enum!]

[h4 `svg_color` interface]

You can define a `svg_color` using two different constructors:

  svg_color(int, int, int); // The parameters are red, green, and blue respectively.

  svg_color(svg_color_constant); // Use a pre-existing color constant.

[h4 Example of using `svg_color`]

  using namespace boost::svg;

  svg_color my_white(255, 255, 255); // Using RGB svg_color constructor.
  svg_color my_const_white(white); // Using SVG-defined named constructor.

  BOOST_ASSERT(my_white == my_const_white);

[note You will find it convenient to use the namespace boost::svg
(perhaps only at local scope)
to avoid having to fully qualify *every* color that you want to use,
for example, to avoid writing: `using boost::svg::azure;`
]

[note `svg_color`'s constructor takes in three integer values.
The [@http://www.w3.org/TR/SVG11/types.html SVG 1.1 standard]
allows any integer to represent an RGB value, with values less than 0
and greater than 255 being constrained to their respective min and max.]

[heading Colors Internals and Rationale]

Color constants are defined in an enum, `svg_color_constant`, in alphabetical order at
[@..\..\..\..\boost\svg_plot\svg_color.hpp color constants].
This facilitates quick lookup of their RGB values from an array. Anywhere
that a `svg_color` can be used, a `svg_color_constant` can be used, as the
conversion is implicit.

All color information is stored in RGB format as three 'unsigned char' in a `svg_color` struct.
The  rationale for storing information in RGB format is that it is precise,
and is always representable the exactly the same way.
Storing as a floating-point percent or fraction
would introduce the possibility of undesirable rounding error.

[endsect] [/section:color Color]

[/ colors.qbk
  Copyright 2008, 2009 Jake Voytko and Paul A. Bristow.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]
