[article SVG_Plot
    [quickbook 1.4]
    [authors [Voytko, Jake]]
    [copyright 2007 Jake Voytko]
    [purpose Plot STL containers onto graphs in SVG format]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]


[section:preface Preface]
Normally, the first task when dealing with numerical data is to plot it. Humans have a fantastic capacity for visual understanding, and merely looking at data oganized in one, two, or three dimensions allows us to see relations not otherwise visible in a list of numbers. Computers, however, deal with information numerically, and C++ and the STL do not offer a way to bridge that gap. This library allows the user to easily plot data stored in STL containers with (hopefully!) minimal intervention.
[endsect]

[section:intro Introduction]
This project is focused on using STL containers in order to graph data on a one-dimensional and two-dimensional (and if time allows, 3D!) plot. The plot would be written in an svg image, compliant with the W3C standard. The goals of the project are as follows:

* To provide an easy syntax for graphing data
* To let users produce a simple plot with minimal intervention by using sane defaults
* To demonstrate how to incorporate SVG images into Boost documentation
* To allow users to easily customize graphs to their heart's content
* To allow the user to talk with the svg_graph class using coordinate units instead of pixels or other arbitrary measures 
* To create the backbone of a svg class that will be extended to fully support storing the standard

I have only a student's grasp of C++, so if you have a suggestion to help me with design or implementation, either leave them here or email me at jakevoytko (at) gmail (dot) com

[endsect]

[section:color Colors]
[section:color_intro Introduction]

The project supports any color definable by the RGB interface, as well as a number of constants that are named by the SVG standard.

[@http://www.w3.org/TR/SVG/types.html#ColorKeywords Here] is a link to the SVG color constants that my program supports

[endsect]

[section:color_internals Internals and Rationale]

All color information is stored in RGB format in a svg_struct. The rationale
for storing information in RGB format is because it is precise and is always
representable the exact same way. Storing as a floating point percentage 
introduces the possibility of rounding error, which I would like to avoid at 
all costs. The same image file will always display the same way on any system 
that correctly implements the SVG format.

It is important to note that any integer value is accepted by the SVG standard, but negative values are rounded to 0, and positive values > 255 are rounded down to 255.

Constants are defined in an enum, `svg_color_constant`, in alphabetical order.
This facilitates quick lookup of their RGB values quickly in an array.

[endsect]

[section:color_usage Usage]

To use an example, set_title_color(), here are the two different ways we could
 set the line color, one using RGB values, and the other using the constant.

``
// Using a new RGB value
my_plot.set_title_color(svg_color(139, 69, 19));

// Using an existing RGB value
my_plot.set_title_color(my_color);

// Using a color constant
my_plot.set_title_color(saddlebrown);

// Defining an RGB value from color constant. This is not required anywhere but in the plot() function
my_plot.set_title_color(svg_color(saddle_brown));
``

[endsect]
[endsect]


[section:tutorial Tutorial]
[section:tutorial_basic Basic Example]
The minimal requirements for creating any image are as follows.

* You need a one or two dimensional svg_plot
* You need to call the write() command

That's it! However, just doing this won't give you anything useful. The following can be considered a minimal example:

[section:tutorial_code_simple Simple program]
``
#include <boost/svg_plot/svg_1d_plot.hpp>
#include <vector>

using std::vector;
using namespace boost::svg_plot;

int main()
{
	// Snip

	vector<double> my_data;

	// initialize my_data here

	svg_1d_plot my_plot;

	my_plot.set_title("My Graph")
	       .set_legend_on(true)
	       .set_x_range(-1, 11);
	
	plot(my_plot, my_data, "Race times");

	my_plot.write("my_file.svg");
	return 0;
}
``

[$my_file.svg]
[endsect]
[section:tutorial_simple_exam Basic Example Breakdown]
Let's examine what this does. 

``
svg_1d_plot my_plot;
`` 
initializes a new 1D plot. This also sets many of the values that the class keeps track of with reasonable defaults.

``
my_plot.set_title("My Graph")
       .set_legend_on(true)
       .set_x_range(-1, 11);
``

All of the set methods are fairly self explanatory. The title, which will appear at the top of the graph, will say "My Graph". `set_legend_on(true)` means that the legend will show up. `set_x_range(-1, 11)` means that the range of values that will be printed is between -1 and 11, as you can see in the above images.

This syntax may be unfamiliar. However, it works on the same principle that the following code works:
``
a = b = c = d = 3;
``

You have also seen it used to print to the console:
``
std::cout << "Hello" << name << std::endl;
``

Within all of the plot classes, chaining works the same way. The equivalent code for the above is as follows:

``
my_plot.set_title("My Graph");
my_plot.set_legend_on(true);
my_plot.set_x_range(-1, 11);
``

In the long run, I think you will find that my choice helps organize the code a little better! 


``
plot(my_plot, my_data, "Race times");
``

This draws `my_data` to `my_plot`. As many containers as you want can be drawn to my_plot. The name of the series is "Race times", and that text will show up in the legend. These are the three required parameters for this function call. There are optional parameters, as seen in the section Getting More Out Of The `plot()` Function, but most immediately beneficial would be the ability to specify a color for your data point:
``
plot(my_plot, my_data, "Race Times", blue);
``

is how you could accomplish this

``
my_plot.write("my_file.svg");
``

This writes our plot to the file "my_file.svg". 
[endsect]
[endsect]

[section:plot_window Using a Plot Window]
If the legend or the title is obscuring data, or you would merely like a different choice for layout, you can opt to use a [^plot window]. To add it to a simple example:

``
#include <boost/svg_plot/svg_1d_plot.hpp>
#include <vector>

using std::vector;
using namespace boost::svg_plot;

// Snip

vector<double> my_data;

// initialize my_data here

svg_1d_plot my_plot;

my_plot.set_title("My Graph")
       .set_legend_on(true)
       .set_plot_window_on(true)
       .set_x_range(-1, 11);

plot(my_plot, my_data, "Race times");

my_plot.write("my_file.svg");
``

This produces the following image:
(insert image)
[endsect]
[section:full_layout Full Layout Example]
Boost.SVG_Plot is designed to avoid having to do much customization. However, it is by no means a "one size fits all" solution. As such, there is much that can be changed in the way of layout and design. An example follows:

``
svg_1d_plot my_plot;

// misc data
my_plot.set_image_size(500, 350)
       .set_title("Race Results")
       .set_title_font_size(20);

// display commands
my_plot.set_x_label_on(true)
       .set_x_major_labels_on(true)
       .set_x_major_grid_on(true)
       .set_x_minor_grid_on(true)
       .set_axis_on(true)
       .set_legend_on(true)
       .set_plot_window_on(true)
       .set_title_on(true);

// axis information
my_plot.set_x_axis_width(2)
       .set_x_label("Time in minutes")
       .set_x_major_tick(5)
       .set_x_num_minor_ticks(1)
       .set_x_scale(-5, 130);

// plot the information
plot(my_plot, ron_result, "Ron", orange);
plot(my_plot, sally_result, "Sally", red);
plot(my_plot, tim_result, "Tim", blue);

my_plot.write("race_results.svg");
``

This produces the following image:
(insert image)
[endsect]

[section:color Color Customization]
The [^svg_plot] classes support two major ways to define colors. One is the use of colors in the RGB format. To specify a color in the RGB format, you can use the following: `svg_color(123, 73, 255)`, to pick a random example. 

The other way to define a color is to use the SVG standard's custom color definitions, as defined [@http://www.w3.org/TR/SVG/types.html#ColorKeywords here]

Here is an example using color customization:

``
    vector<double> data1;
    deque<double> data2;
    boost::array<double, 10> data3;

    svg_1d_plot my_plot;

    // size/scale settings
    my_plot.set_image_size(500, 350)
           .set_x_scale(-3, 10);

    // Text settings
    my_plot.set_title("Oh My!")
           .set_title_font_size(29)
           .set_x_label_text("Time in Months");

    // command settings
    my_plot.set_axis(true)
           .set_legend(true)
           .set_plot_window(true)
           .set_x_label(true)
           .set_x_major_labels(true);

    // color settings
    my_plot.set_background_color(svg_color(67, 111, 69))
           .set_legend_background_color(svg_color(207, 202,167))
           .set_plot_background_color(svg_color(136, 188, 126))
           .set_title_color(white)
           .set_x_axis_color(black)
           .set_x_major_tick_color(black)
           .set_legend_border_color(svg_color(102, 102, 84))
           .set_x_minor_tick_color(black);

    //axis settings
    my_plot.set_x_major_tick(2)
           .set_x_num_minor_ticks(3)
           .set_x_major_tick_length(14)
           .set_x_minor_tick_length(7)
           .set_x_major_tick_width(1)
           .set_x_minor_tick_width(1);

    //legend settings
    my_plot.set_legend_title_font_size(15);

    plot_range(my_plot, data2.begin(), data2.end(), "Lions",  blue);
    plot_range(my_plot, data1.begin(), data1.end(), "Tigers", purple);
    plot_range(my_plot, data3.begin(), data3.end(), "Bears",  red);

    my_plot.write("D:/1d_complex.svg");
``
This produces the following output:
(Insert image)
[endsect]
[section:defaults `svg_1d_plot` Defaults]
You may have noticed that there are certain defaults that are true at the beginning of the plotting. Here is a table of the defaults:

[table Default Values]
	[[object] [Default value] [Rationale]]
	[[Axis] [On] [Most graphs include an axis of some kindl]]
	[[Distance between major X ticks] [`3 units`] [Reasonably fits into a plot window]]
	[[Font size of the legend title] [12] [Reasonable when paired with the image size]]
	[[Font size of the X Label] [12] [Reasonable when paired with the image size]]
	[[Font size of the title] [30] [Makes the title stand out]]
	[[Grid lines] [`All off`] [Grid lines are a user's personal choice, so I default with the simpler model]]
	[[Image background] [white] [K.I.S.S. Coloring will be highly dependent on user needs.]]
	[[Image size] [`500 by 350`] [Details discernable. The image is easily viewable by those using 800x600 monitors]]
	[[Legend] [`Off`] [The goal of the defaults is to provide the cleanest possible plot as a default. Not including the legend meets this goal. If there is a public outcry, I can change this.]]
	[[Major tick length] [20 pixels] [Tasteful default when paired with the window size. This also makes the major ticks easily distinguishable from the minor ticks]]
	[[Major tick width] [2 pixels] [Major ticks are more obvious than minor ticks]]
	[[Minor tick length] [10 pixels] [Tasteful default when compared with the size of the grid. This makes the minor ticks less obvious than the major ticks]]
	[[Minor tick width] [1 pixel] [This makes the minor tick less obvious than the major ticks]]
	[[Number of minor X ticks between each major X tick] [2] [This allows the minor ticks to appear on the integers]]
	[[Plot Window] [`Off`] [Initially off because it is the simplest case. I will change this if there is an outcry]]
	[[Title] [On, "Plot of data"] [The title is on because this is one of the most basic elements of a graph. The title is set to a default because when `title_on == true`, something should display]]
	[[X Axis Label] [`"X Axis", Off`] ["X Axis" is the label because something should display were the user to turn on the X axis label without setting text, and this is the most informative]]
	[[X Range] [`(-10, 10)`] [Traditional plot viewport]]
	[[Plot window background] [white] [K.I.S.S. Coloring will be highly dependent on user needs]]
	[[Legend background] [white] [K.I.S.S. Coloring will be highly dependent on user needs]]
	[[All other colors] [black] [K.I.S.S. Coloring will be highly dependent on user needs]]]

[endsect]

[section:plot_function Getting More Out Of The `plot()` Function]
The `plot()` function is defined using Boost.Parameter. As such, it supports a few extra named parameters, as well as a deduced parameter.

[table Deduced parameter
[[ID] [Description] [Default]]
[[_fill_color] [This is the color that shows up inside of the circle that is being drawn] [white] ]]

[table Optional Parameters
[[ID] [Description] [Default]]
[[_stroke_color] [The outline of the circle that is being drawn] [black] ]
[[_point_style] [This is the shape of the point. Options currently are between [^none], [^circle], and [^square].] [circle]]
[[size] [This is the height/width of the circle and square.] [10]]
[[_x_functor] [A pointer to a class that contains a conversion function. You will not have to worry about this, unless you are trying to accomplish stuff like plotting a vector of humans. For example:
``
class my_functor
{
	typdef double result_type;

	double convert(const human& _hum)
	{
		return _hum.get_age();
	}
}

// snip

plot(my_plot, my_data, "Lions", _x_functor = my_functor());
``
][
`boost_default_convert` is sufficient in all cases where the data stored in the container can be directly casted to a double]]]

Here are some examples of correct uses:
[h3 Using fill and stroke colors]

``
plot(my_plot, my_data, "Lions", _fill_color = svg_color(red), _stroke_color = svg_color(black));
``

This has the same effect as the following:

``
plot(my_plot, my_data, "Lions", svg_color(red), svg_color(black));
``

and also the same effect as:
``
plot(my_plot, my_data, "Lions", _stroke_color = svg_color(black),  _fill_color = svg_color(red));
``

Since _fill_color is a deduced parameter, when two svg_colors are used in the same function call, they are always inferred in the following order: (fill, stroke).

[h3 Using all parameters]
``
plot(my_plot, my_data, "Lions", 
     _fill_color   = svg_color(red), 
     _stroke_color = svg_color(black),
     _x_functor    = my_functor());
``

[endsect]
[endsect]

[section:svg_interface SVG Public Interface]
[table class svg
  [[Signature] [Description] [Notes]]
  [[`svg()`] [Constructor] [The default image size is (400, 400)]]
  [[`svg& image_size(unsigned int, unsigned int)`] [Sets the size of the image produced, in pixels][]]
  [[`svg& get_x_size()`] [Returns the width of the image] []]
  [[`svg& get_y_size()`] [Returns the height of the image] []]
  [[`svg& write(const std::string&)`] [Writes the document to the file represented by the argument][Opens the file stream itself and tries to call `write(std::ostream&)`. Throws `std::runtime_exception` if it can not open the file.]]
  [[`svg& write(std::ostream&)`] [Writes the document to the stream represented by the argument][]]
  [[`svg& circle(double x, double y, unsigned int radius = 5)`] [Adds a point at (x,y) in the root level of the document][If the user is calling the circle method, odds are they would prefer a real circle instead of a degenerate circle (a point). 5 is as good a defaul as any other.]]
  [[`svg& line(double x1, double y1, double x2, double y2)`] [Adds a line from (x1,y1) to (x2,y2) in the root level of the document][]]
  [[`svg& text(double x, double y, std::string text)`] [Adds text `text` at (x,y) in the root level of the document][]]
  [[`svg& rect(double x1, double y1, double width, double height)`] [Adds a rectangle at point (x1, y1) that has width `width` and height `height`][]]
  [[`svg& clip_path(const rect_element&, g_element&, const std::string& id)`][Prevents the g_element in the argument from drawing outside of the rectangle in the argument. The string is provided to identify the clip.] [Currently unsupported]]
  [[`g_element& add_g_element()`] [Adds a g_element at the root of the document tree. Acts as a `push_back()`] [Returns the `g_element` that is pushed back. This allows you to do something like the following: `image.add_g_element().line(/**/).line(/**/).rect(/**/);  `
Which adds two lines and a rectangle to the g_element that was just created.]]
  [[`g_element& get_g_element(int)`] [Gets the g_element at the index specified] [Gives a runtime error if you specify an index that does not contain a `g_element`. This will be addressed]]
]
[endsect]

[section:svg_1d_plot_interface `svg_1d_plot` Public Interface]
[table Misc
  [[Signature] [Description]]
[[ `void plot_range(std::vector<double>::const_iterator begin, 
std::vector<double>::const_iterator end, std::string text);`]
 [Plots a vector<double> from begin() to end(). It adds the text `text` to the legend. If you are looking for the generic version, you can find it below.]]
  [[`void plot(const std::vector<double>& _ctr, const std::string&, const plot_point_style&)`]
 [Plots a vector<double> from begin() to end(). It adds the text `text` to the legend. The point color for this series is going to be `col`. If you are looking for the generic version, you can find it below.]]
  [[`svg_1d_plot()`] [See the defaults section for further details]]
  [[`svg_1d_plot& set_image_size(unsigned int, unsigned int)`] [Sets the size of the image produced, in pixels]]
  [[`svg_1d_plot& set_title(const std::string&)`] [Sets the string to be used for the title]]
  [[`svg_1d_plot& set_title_font_size(unsigned int)`] [Sets the font size for the title]]
  [[`svg_1d_plot& set_legend_title_font_size(unsigned int)`] [Sets the font size for the legend title]]
  [[`svg_1d_plot& write(const std::string&)`] [Writes the plot to the file passed as a parameter]]
  [[`svg_1d_plot& write(ostream&)`] [Writes the plot to a stream passed as a parameter]]]

[table Commands
  [[Signature] [Description]]
  [[`svg_1d_plot& set_axis_on(bool)`] [Sets whether the axis is on or off]]
  [[`svg_1d_plot& set_legend_on(bool)`] [Sets whether the legend is on or off]]
  [[`svg_1d_plot& set_plot_window_on(bool)`] [Sets whether the plot will be displayed in its own window, or will be "full screen" in the image]]
  [[`svg_1d_plot& set_x_label_on(bool)`] [Sets whether or not the x axis label will show]]
  [[`svg_1d_plot& set_x_major_labels_on(bool)`] [sets whether or not the major ticks will be labelled on the x axis]]
  [[`svg_1d_plot& set_title_on(bool)`] [Determines whether or not the image title is displayed]]
  [[`svg_1d_plot& set_x_major_grid_on(bool)`] [Determines whether or not the major grid on the X axis will be displayed]]
  [[`svg_1d_plot& set_x_minor_grid_on(bool)`] [Determines whether or not the minor grid on the X axis will be displayed]]]

[table Color Information
  [[Signature] [Description]]
  [[`svg_1d_plot& set_title_color(svg_color_constant col)`] [Set the title color]]
  [[`svg_1d_plot& set_title_color(const svg_color &col)`] [Set the title color]]
  [[`svg_1d_plot& set_background_color(svg_color_constant col)`] [Set the background color for the whole image]]
  [[`svg_1d_plot& set_background_color(const svg_color &col)`] [Set the background color for the whole image]]
  [[`svg_1d_plot& set_legend_background_color(svg_color_constant col)`] [Set the background color for the legend as `col`, a SVG Color Constant]]
  [[`svg_1d_plot& set_legend_background_color(const svg_color &col)`] [Set the background color for the legend as `col`, an RGB color]]
  [[`svg_1d_plot& set_legend_border_color(svg_color_constant col)`] [Set the border color for the legend as `col`, a SVG Color Constant]]
  [[`svg_1d_plot& set_legend_border_color(const svg_color &col)`] [Set the border color for the legend as `col`, an RGB color]]
  [[`svg_1d_plot& set_background_border_color(svg_color_constant col)`] [Set the background border color for the legend as `col`, a SVG Color Constant]]
  [[`svg_1d_plot& set_background_border_color(const svg_color &col)`] [Set the background border color for the legend as `col`, an RGB color]]
  [[`svg_1d_plot& set_plot_background_color(svg_color_constant col)`] [Set the color of the plot area. Note: this only goes into effect if set_plot_area(true) has been called]]
  [[`svg_1d_plot& set_plot_background_color(const svg_color &col)`] [Set the color of the plot area. Note: this only goes into effect if set_plot_area(true) has been called]]
  [[`svg_1d_plot& set_x_axis_color(svg_color_constant col)`] [Sets the color of the lines that form the axis]]
  [[`svg_1d_plot& set_x_axis_color(const svg_color &col)`] [Sets the color of the lines that form the axis]]
  [[`svg_1d_plot& set_x_label_color(const svg_color &col)`] [Sets the color of the labels that go along the X axis]]
  [[`svg_1d_plot& set_x_label_color(svg_color_constant col)`] [Sets the color of the labels that go along the X axis]]
  [[`svg_1d_plot& set_x_major_tick_color(svg_color_constant col)`] [Sets the color of the major ticks of the x-axis]]
  [[`svg_1d_plot& set_x_major_tick_color(const svg_color &col)`] [Sets the color of the major ticks of the x-axis]]
  [[`svg_1d_plot& set_x_major_grid_color(svg_color_constant col)`] [Sets the color of the grid that runs perpindicular to the X axis]]
  [[`svg_1d_plot& set_x_major_grid_color(const svg_color &col)`] [Sets the color of the grid that runs perpindicular to the X axis]]
  [[`svg_1d_plot& set_x_minor_tick_color(svg_color_constant col)`] [Sets the color of the minor ticks of the x-axis]]
  [[`svg_1d_plot& set_x_minor_tick_color(const svg_color &col)`] [Sets the color of the minor ticks of the x-axis]]
  ]

[table Axis Information
  [[Signature] [Description]]
  [[`svg_1d_plot& set_x_axis_width(unsigned int)`] [Sets the stroke width of the x-axis] ]
  [[`svg_1d_plot& set_x_label(const std::string&)`] [Sets the label of the x-axis. This does not guarantee that it will be shown. You must run `set_x_label(true)` for that guarantee] ]
  [[`svg_1d_plot& set_x_major_tick(double)`] [Sets the distance (in Cartesian units) between ticks on the x-axis] ]
  [[`svg_1d_plot& set_x_major_tick_length(int)`] [Sets the length (in pixels) of the x-axis major ticks] ]
  [[`svg_1d_plot& set_x_major_tick_width(unsigned int)`] [Sets the width (in pixels) of the major ticks on the x-axis] ]
  [[`svg_1d_plot& set_x_minor_tick(unsigned int)`] [Sets the length (in pixels) of the x-axis minor ticks] ]
  [[`svg_1d_plot& set_x_major_tick_length(int)`] [Sets the length (in pixels) of the x-axis minor tick lengths] ]
  [[`svg_1d_plot& set_x_minor_tick_width(unsigned int)`] [Sets the width (in pixels) of the minor ticks on the x-axis] ]
  [[`svg_1d_plot& set_x_num_minor_ticks(int)`] [Sets the number of minor ticks between each major tick] ]
  [[`svg_1d_plot& set_x_scale(double x1, double x2)`] [Sets the scale of the x axis from x1 to x2. Throws an exception if x2<=x1 ] ]
]

(Note: Getters omitted for now)

[endsect]
[section:svg_2d_plot_interface `svg_2d_plot` Public Interface]
[table Misc
  [[Signature] [Description]]
[[` void plot_range(std::vector<double>::const_iterator begin, 
std::vector<double>::const_iterator end, std::string text)`]
[Plots a vector<double> from begin() to end(). It adds the text `text` to the legend. If you are looking for the generic version, you can find it below.]]
  [[` void plot_range(std::vector<double>::const_iterator begin, std::vector<double>::const_iterator end, 
std::string text, svg_color_constant col)`]
[Plots a vector<double> from begin() to end(). It adds the text `text` to the legend. The point color for this series is going to be `col`. If you are looking for the generic version, you can find it below.]]
  [[`svg_2d_plot()`] [See the defaults section for further details]]
  [[`svg_2d_plot& set_image_size(unsigned int, unsigned int)`] [Sets the size of the image produced, in pixels]]
  [[`svg_2d_plot& set_title(const std::string&)`] [Sets the string to be used for the title]]
  [[`svg_2d_plot& set_title_font_size(unsigned int)`] [Sets the font size for the title]]
  [[`svg_2d_plot& set_legend_title_font_size(unsigned int)`] [Sets the font size for the legend title]]]

[table Commands
  [[Signature] [Description]]
  [[`svg_2d_plot& set_axis_on(bool)`] [Sets whether the axis is on or off]]
  [[`svg_2d_plot& set_legend_on(bool)`] [Sets whether the legend is on or off]]
  [[`svg_2d_plot& set_plot_window_on(bool)`] [Sets whether the plot will be displayed in its own window, or will be "full screen" in the image]]
  [[`svg_2d_plot& set_title_on(bool)`] [Determines whether or not the image title is displayed]]
  [[`svg_2d_plot& set_x_label_on(bool)`] [Sets whether or not the X axis label will show]]
  [[`svg_2d_plot& set_x_major_grid_on(bool)`] [Determines whether or not the major grid on the X axis will be displayed]]
  [[`svg_2d_plot& set_x_major_labels_on(bool)`] [sets whether or not the major ticks will be labelled on the x axis]]
  [[`svg_2d_plot& set_x_minor_grid_on(bool)`] [Determines whether or not the minor grid on the X axis will be displayed]]
  [[`svg_2d_plot& set_y_label_on(bool)`] [Sets whether or not the Y axis label will show]]
  [[`svg_2d_plot& set_y_major_grid_on(bool)`] [Determines whether or not the major grid on the Y axis will be displayed]]
  [[`svg_2d_plot& set_y_major_labels_on(bool)`] [sets whether or not the major ticks will be labelled on the Y axis]]
  [[`svg_2d_plot& set_y_minor_grid_on(bool)`] [Determines whether or not the minor grid on the Y axis will be displayed]]]

[table Color Information
  [[Signature] [Description]]
  [[`svg_2d_plot& set_title_color(svg_color_constant col)`] [Set the title color]]
  [[`svg_2d_plot& set_title_color(const svg_color &col)`] [Set the title color]]
  [[`svg_2d_plot& set_background_color(svg_color_constant col)`] [Set the background color for the whole image]]
  [[`svg_2d_plot& set_background_color(const svg_color &col)`] [Set the background color for the whole image]]
  [[`svg_2d_plot& set_legend_background_color(svg_color_constant col)`] [Set the background color for the legend as `col`, a SVG Color Constant]]
  [[`svg_2d_plot& set_legend_background_color(const svg_color &col)`] [Set the background color for the legend as `col`, an RGB color]]
  [[`svg_2d_plot& set_legend_border_color(svg_color_constant col)`] [Set the border color for the legend as `col`, a SVG Color Constant]]
  [[`svg_2d_plot& set_legend_border_color(const svg_color &col)`] [Set the border color for the legend as `col`, an RGB color]]
  [[`svg_2d_plot& set_background_border_color(svg_color_constant col)`] [Set the background border color for the legend as `col`, a SVG Color Constant]]
  [[`svg_2d_plot& set_background_border_color(const svg_color &col)`] [Set the background border color for the legend as `col`, an RGB color]]
  [[`svg_2d_plot& set_plot_background_color(svg_color_constant col)`] [Set the color of the plot area. Note: this only goes into effect if set_plot_area(true) has been called]]
  [[`svg_2d_plot& set_plot_background_color(const svg_color &col)`] [Set the color of the plot area. Note: this only goes into effect if set_plot_area(true) has been called]]
  [[`svg_2d_plot& set_x_axis_color(svg_color_constant col)`] [Sets the color of the lines that form the axis]]
  [[`svg_2d_plot& set_x_axis_color(const svg_color &col)`] [Sets the color of the lines that form the axis]]
  [[`svg_2d_plot& set_x_label_color(const svg_color &col)`] [Sets the color of the labels that go along the X axis]]
  [[`svg_2d_plot& set_x_label_color(svg_color_constant col)`] [Sets the color of the labels that go along the X axis]]
  [[`svg_2d_plot& set_x_major_tick_color(svg_color_constant col)`] [Sets the color of the major ticks of the x-axis]]
  [[`svg_2d_plot& set_x_major_tick_color(const svg_color &col)`] [Sets the color of the major ticks of the x-axis]]
  [[`svg_2d_plot& set_x_major_grid_color(svg_color_constant col)`] [Sets the color of the grid that runs perpindicular to the X axis]]
  [[`svg_2d_plot& set_x_major_grid_color(const svg_color &col)`] [Sets the color of the grid that runs perpindicular to the X axis]]
  [[`svg_2d_plot& set_x_minor_tick_color(svg_color_constant col)`] [Sets the color of the minor ticks of the x-axis]]
  [[`svg_2d_plot& set_x_minor_tick_color(const svg_color &col)`] [Sets the color of the minor ticks of the x-axis]]
  [[`svg_2d_plot& set_y_axis_color(svg_color_constant col)`] [Sets the color of the lines that form the Y axis]]
  [[`svg_2d_plot& set_y_axis_color(const svg_color &col)`] [Sets the color of the lines that form the Y axis]]
  [[`svg_2d_plot& set_y_label_color(const svg_color &col)`] [Sets the color of the labels that go along the X axis]]
  [[`svg_2d_plot& set_y_label_color(svg_color_constant col)`] [Sets the color of the labels that go along the X axis]]
  [[`svg_2d_plot& set_y_major_tick_color(svg_color_constant col)`] [Sets the color of the major ticks of the Y-axis]]
  [[`svg_2d_plot& set_y_major_tick_color(const svg_color &col)`] [Sets the color of the major ticks of the Y-axis]]
  [[`svg_2d_plot& set_y_major_grid_color(svg_color_constant col)`] [Sets the color of the grid that runs perpindicular to the Y axis]]
  [[`svg_2d_plot& set_y_major_grid_color(const svg_color &col)`] [Sets the color of the grid that runs perpindicular to the Y axis]]
  [[`svg_2d_plot& set_y_minor_tick_color(svg_color_constant col)`] [Sets the color of the minor ticks of the Y-axis]]
  [[`svg_2d_plot& set_y_minor_tick_color(const svg_color &col)`] [Sets the color of the minor ticks of the Y-axis]]
  ]

[table Axis Information
  [[Signature] [Description]]
  [[`svg_2d_plot& set_x_axis_width(unsigned int)`] [Sets the stroke width of the x-axis] ]
  [[`svg_2d_plot& set_x_label(const std::string&)`] [Sets the label of the x-axis. This does not guarantee that it will be shown. You must run `set_x_label(true)` for that guarantee] ]
  [[`svg_2d_plot& set_x_major_tick(double)`] [Sets the distance (in Cartesian units) between ticks on the x-axis] ]
  [[`svg_2d_plot& set_x_major_tick_length(int)`] [Sets the length (in pixels) of the x-axis major ticks] ]
  [[`svg_2d_plot& set_x_major_tick_width(unsigned int)`] [Sets the width (in pixels) of the major ticks on the x-axis] ]
  [[`svg_2d_plot& set_x_minor_tick(unsigned int)`] [Sets the length (in pixels) of the x-axis minor ticks] ]
  [[`svg_2d_plot& set_x_major_tick_length(int)`] [Sets the length (in pixels) of the x-axis minor tick lengths] ]
  [[`svg_2d_plot& set_x_minor_tick_width(unsigned int)`] [Sets the width (in pixels) of the minor ticks on the x-axis] ]
  [[`svg_2d_plot& set_x_num_minor_ticks(int)`] [Sets the number of minor ticks between each major tick] ]
  [[`svg_2d_plot& set_x_scale(double x1, double x2)`] [Sets the scale of the x axis from x1 to x2. Throws an exception if x2<=x1 ] ]
  [[`svg_2d_plot& set_y_axis_width(unsigned int)`] [Sets the stroke width of the x-axis] ]
  [[`svg_2d_plot& set_y_label(const std::string&)`] [Sets the label of the x-axis. This does not guarantee that it will be shown. You must run `set_x_label(true)` for that guarantee] ]
  [[`svg_2d_plot& set_y_major_tick(double)`] [Sets the distance (in Cartesian units) between ticks on the Y axis] ]
  [[`svg_2d_plot& set_y_major_tick_length(int)`] [Sets the length (in pixels) of the Y axis major ticks] ]
  [[`svg_2d_plot& set_y_major_tick_width(unsigned int)`] [Sets the width (in pixels) of the major ticks on the Y axis] ]
  [[`svg_2d_plot& set_y_minor_tick(unsigned int)`] [Sets the length (in pixels) of the Y axis minor ticks] ]
  [[`svg_2d_plot& set_y_major_tick_length(int)`] [Sets the length (in pixels) of the Y axis minor tick lengths] ]
  [[`svg_2d_plot& set_y_minor_tick_width(unsigned int)`] [Sets the width (in pixels) of the minor ticks on the Y axis] ]
  [[`svg_2d_plot& set_y_num_minor_ticks(int)`] [Sets the number of minor ticks between each major tick] ]
  [[`svg_2d_plot& set_y_scale(double y1, double y2)`] [Sets the scale of the Y axis from y1 to y2. Throws an exception if y2<=y1 ] ]
]

(Note: Getters omitted for now)

[endsect]
