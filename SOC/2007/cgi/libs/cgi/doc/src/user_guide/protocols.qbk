[/
 / Copyright (c) 2007 Darren Garvey
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/ cgi.user_guide.protocols.qbk CGI Protocols]

[section:protocols Supported Protocols]

The protocols supported by this library are CGI (synchronous and asynchronous), FastCGI (aka. FCGI) and SCGI (aka. SimpleCGI).

Purely to illustrate what each protocol offers, consider this list:

* CGI is for short programs that won't be run very often, or those that will be used by only a very small number of clients, such as admin 'scripts'. Here, having a long-running process might be wasteful.

* aCGI is for programs similar to the above that might block on I/O, wasting CPU time; CPU-intensive programs that use database and/or other IO extensively, such as a regression-testing framework, are a good target for aCGI. In these cases, a long-running process that keeps open file handles might be wasteful.

* FastCGI is especially targetted to programs that are likely to serve lots of clients. Asynchronous operations come 'for free' with FastCGI. On some platforms however - even 10 years after the specification was published [footnote See [@http://www.fastcgi.com/devkit/doc/fcgi-spec.html FastCGI 1.0], published 29 April 1996] - FastCGI support in many servers is sub-standard (see __server_support__).

* SCGI is essential where server-side support for FastCGI is either buggy (as it is with Apache + mod_fastcgi: use mod_fcgid instead if possible) or missing. 

[note
Synchronous and asynchronous CGI support are considered distinct within the library for now (*more*), so the latter is referred to explicitly as aCGI. SimpleCGI is generally shortened to SCGI while FastCGI is used verbatim.
]


[section:cgi CGI and aCGI]

The distinction between CGI and aCGI is that aCGI uses __asio__'s io_service to perform asynchronous operations - whereas CGI does not provide such operations - and is also more complicated to use. A distinction has been made with the sole purpose of lowering the entry barrier to the library and to provide a means of migrating programs over to use this library.

[h4:differences Differences Between CGI and aCGI Programs]

    ['See also: __hello_world__]

The first use of an `cgi::acgi_request` (or the shortcut `cgi::arequest`) shows the main difference:

``
#include <cgi/cgi.hpp>

int main()
{
    cgi::request req;

    // use the request here

    return 0;
}
``
compares to:
``
#include <cgi/acgi.hpp>
#include <boost/thread.hpp> // see __boost_thread__

int main()
{
    // a __Service__ is needed to handle asynchronous operations
    cgi::cgi_service service;

    // possibly use an asynchronous acceptor here (see below)

    // create a thread for async operations to be run in
    boost::thread thread(boost::bind(&cgi::cgi_service::run, service));

    // create a request from the cgi_service
    cgi::arequest req(service);

    // use the request here
    // ...

    // finally, make sure the async operations complete by 'joining' the other thread
    thread.join();

    return 0;
}
``

As is obvious, the main difference of CGI over aCGI is that a `cgi::request` (or the more explicit `cgi::cgi_request`) doesn't use a `cgi::io_service`, so CGI

exists purely within the library and may become transparent in the future. In other words, both methods will work in the same way, with CGI acting as a shortcut to using aCGI.

[endsect]

[section:fcgi FastCGI]

FastCGI is a binary protocol that works very differently to CGI ['internally] and has many advantages. In bullet-point form, FastCGI programs:

* are servers in themselves: they can persist indefinitely and can - at least in principle - handle any number of simultaneous requests.

* communicate with an HTTP server with TCP sockets __ref_pipe_support__. 

One such advantage as allowing a single program handle an arbitrary number of requests, in any order, without having to stop and start between each.

[h4 How it Works]

Data is transported over TCP sockets or pipes (not implemented yet) in packets prepended with information about the packet. Packets belong to a particular request or are 'admin' requests that are handled by the library internally. Data is returned to the HTTP server in similar packets. This frees the program from handling requests sequentially, as data from any request can come in at any time, so a well-structured program can avoid being compromised by a dropped connection or a slow client, for instance.

[endsect] [/ fcgi]

[section:scgi SCGI (SimpleCGI)]

SCGI is a more recent protocol than FastCGI and is essentially a halfway house between CGI and the more complex FastCGI. It has become popular as support for it is generally more consistent and widely available than FastCGI, due in part to its simplicity.

[h4 How it Works]

SCGI uses a connection-per-request approach. Environment data is sent first and the CGI POST data follows. All data sent back to the server over the connection is forwarded as is to the client. The connection is closed after the request has been handled.

Although far less optimized than FastCGI, SCGI is still a large step up from CGI


[endsect] [/ scgi]


[section:comparison Feature Comparison]

[table
    [[                        ] [Protocol                     ]]
    [[Feature                 ] [CGI] [aCGI] [FastCGI] [SCGI  ]]
    [[Requires io_service     ] [No ] [Yes ] [Yes    ] [Yes   ]]
    [[Is natively asynchronous] [No ] [No  ] [Yes    ] [Yes   ]]
    [[Has native error stream ] [Yes] [Yes ] [Yes    ] [Shared]]
]

[endsect] [/ comparison]


[endsect] [/ protocols]
