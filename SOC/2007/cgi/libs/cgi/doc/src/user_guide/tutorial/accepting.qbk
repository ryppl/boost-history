[/
 / Copyright (c) 2007 Darren Garvey
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:accepting Accepting Requests]

A `basic_request_acceptor<>` is responsible for accepting requests. There are [link __naming_conventions__ common typedefs] for ease of use, as with `basic_request<>`s. A program written for SCGI or FastCGI will generally have one acceptor running in a loop. A `cgi_request` cannot be used with an acceptor, but an `acgi_request` will work fine: ie. only the first accept will succeed.

Accepting requests is considered distinct to the [link __loading__ loading] stage for several reasons, the most significant of which is to allow for multiplexing protocols like FastCGI work with the library.

All you need do is create an `*_acceptor` by passing an instance of a __ProtocolService__ to its constructor. The following member functions are available (take xcgi to imply one of fcgi/scgi/acgi):

[table
  [[Function signature] [Purpose]]
  [
    [`void accept(xcgi_request& empty_request)`]
    [Takes an empty request and blocks until a request is waiting to be handled. This will throw if the accept fails.]
  ]
  [
    [`boost::system::error_code&
    accept(xcgi_request& empty_request, boost::system::error_code& ec)`]
    [Takes an empty request and blocks until a request is waiting to be handled. `ec` will be set such that `!ec == false` if the accept fails with an error code `ec`.]
  ]
  [
    [`void async_accept(xcgi_request& empty_request, Handler handler)`]
    [Takes an empty request and asynchronously accepts a request. `handler` must be a model of __Handler__ and will be invoked when a request is accepted or an error occurs. The function always returns immediately.]
  ]
  [
    [`void cancel()`]
    [Cancel all outstanding asynchronous accepts that are running]
  ]
] [/table]

[h5 Example]

``
#include <boost/cgi/scgi.hpp>
#include <boost/system/error_code.hpp>

int main()
{
  // create a ProtocolService
  cgi::scgi_service service;

  // create an acceptor
  cgi::scgi_acceptor acceptor(service);

  // make an empty request
  cgi::scgi_request req(service);

  boost::system::error_code ec;
  // accept a request
  acceptor.accept(req, ec);

  if (!ec)
  {
    // a request was accepted ok
  }

  return 0;
}
``

[endsect]
