<?xml version="1.0" standalone="yes"?>
<library-reference><header name="boost/signal_network/applicator.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="applicator"><template>
      <template-type-parameter name="Application"/>
      <template-type-parameter name="Member"/>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
    </template><method-group name="public member functions"><method name="operator()" cv=""><type>base_type::signal_type::result_type</type><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="seq"><paramtype>const Seq &amp;</paramtype></parameter><description><para>Applies an instance of Application to the Member object. </para></description></method></method-group></class></namespace></namespace></namespace></header><header name="boost/signal_network/base.hpp"><namespace name="boost"><namespace name="signal_network"><struct name="slot_selector_t"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="Signature"/>
    </template><data-member name="link"><type>T &amp;</type></data-member><data-member name="func"><type><emphasis>unspecified</emphasis></type></data-member><method-group name="public member functions"><method name="conversion-operator" cv=""><type>T &amp;</type></method></method-group><constructor><parameter name="link"><paramtype>T &amp;</paramtype></parameter><parameter name="func"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter></constructor></struct><namespace name="signet"><class name="filter_base"/></namespace><function name="slot_selector"><type>slot_selector_t&lt; T, Signature &gt;</type><template>
          <template-type-parameter name="Signature"/>
          <template-type-parameter name="T"/>
        </template><parameter name="link"><paramtype>T &amp;</paramtype></parameter><parameter name="func"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><purpose>Allows functions other than operator() to serve as signet::filter slots. </purpose></function><function name="operator&gt;&gt;="><type>boost::enable_if&lt; boost::is_base_of&lt; signet::filter_base, Filter &gt;, Filter &amp; &gt;::type</type><template>
          <template-type-parameter name="Filter"/>
          <template-type-parameter name="T"/>
        </template><parameter name="filter"><paramtype>Filter &amp;</paramtype></parameter><parameter name="link"><paramtype>T &amp;</paramtype></parameter><purpose>Connects a sequence of components using signals. </purpose><description><para>This operator is identical to signet::filter::operator| (it connects the left component to the right component, and returns a reference to the left component), except it is evaluated right to left. This makes it semantics more suitable for connecting a chain of connections. </para></description></function><function name="operator|"><type>boost::enable_if&lt; boost::is_base_of&lt; signet::filter_base, Filter &gt;, Filter &amp; &gt;::type</type><template>
          <template-type-parameter name="Filter"/>
          <template-type-parameter name="T"/>
        </template><parameter name="filter"><paramtype>Filter &amp;</paramtype></parameter><parameter name="link"><paramtype>T &amp;</paramtype></parameter><purpose>Allows branching in a component connection sequence. </purpose><description><para>This operator is identical to signet::filter::operator&gt;&gt;=, (it connects the left component to the right component, and returns a reference to the left component) except it is evaluated left to right. This makes its semantics more suitable for branching connections. </para></description></function><function name="operator&gt;&gt;="><type>boost::enable_if&lt; boost::is_base_of&lt; signet::filter_base, Filter &gt;, Filter &amp; &gt;::type</type><template>
          <template-type-parameter name="Filter"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Signature"/>
        </template><parameter name="filter"><paramtype>Filter &amp;</paramtype></parameter><parameter name="link"><paramtype>slot_selector_t&lt; T, Signature &gt;</paramtype></parameter><purpose>Allows slot functions other than operator() to be used in a sequence of components. </purpose><description><para><para>slot_selector() </para>
</para></description></function><function name="operator|"><type>boost::enable_if&lt; boost::is_base_of&lt; signet::filter_base, Filter &gt;, Filter &amp; &gt;::type</type><template>
          <template-type-parameter name="Filter"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="Signature"/>
        </template><parameter name="filter"><paramtype>Filter &amp;</paramtype></parameter><parameter name="link"><paramtype>slot_selector_t&lt; T, Signature &gt;</paramtype></parameter><purpose>Allows slot functions other than operator() to be used with branching. </purpose><description><para><para>slot_selector() </para>
</para></description></function><function name="operator&gt;&gt;="><type>boost::signal&lt; Signature &gt; &amp;</type><template>
          <template-type-parameter name="Signature"/>
          <template-type-parameter name="Combiner"/>
          <template-type-parameter name="Group"/>
          <template-type-parameter name="GroupCompare"/>
          <template-type-parameter name="T"/>
        </template><parameter name="signal"><paramtype>boost::signal&lt; Signature &gt; &amp;</paramtype></parameter><parameter name="link"><paramtype>T &amp;</paramtype></parameter></function><function name="operator&gt;="><type>boost::signal&lt; Signature &gt; &amp;</type><template>
          <template-type-parameter name="Signature"/>
          <template-type-parameter name="Combiner"/>
          <template-type-parameter name="Group"/>
          <template-type-parameter name="GroupCompare"/>
          <template-type-parameter name="T"/>
        </template><parameter name="signal"><paramtype>boost::signal&lt; Signature &gt; &amp;</paramtype></parameter><parameter name="link"><paramtype>T &amp;</paramtype></parameter></function></namespace></namespace><macro name="SIGNAL_NETWORK_TRACKABLE"/><macro name="SIGNAL_NETWORK_OPEN_SIGNAL_NETWORK_NAMESPACE"/><macro name="SIGNAL_NETWORK_CLOSE_SIGNAL_NETWORK_NAMESPACE"/><macro name="SIGNAL_NETWORK_OPEN_SIGNET_NAMESPACE"/><macro name="SIGNAL_NETWORK_CLOSE_SIGNET_NAMESPACE"/></header><header name="boost/signal_network/chain.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="chain"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="Signature"/>
    </template><purpose>Connects a number of components of the same type in a chain. </purpose><description><para>
</para></description><struct name="result"><template>
      <template-type-parameter name="Seq"/>
    </template><typedef name="type"><type>boost::function_traits&lt; Signature &gt;::result_type</type></typedef></struct><typedef name="parameter_types"><type>boost::function_types::parameter_types&lt; Signature &gt;</type></typedef><typedef name="parameter_vector"><type>boost::fusion::result_of::as_vector&lt; parameter_types &gt;::type</type></typedef><typedef name="unfused"><type>boost::fusion::unfused_inherited&lt; <classname>chain</classname>&lt; T, Signature &gt;, typename mpl::vector&lt; size_t, T * &gt;::type, typename boost::function_types::parameter_types&lt; Signature &gt; &gt;</type></typedef><method-group name="public member functions"><method name="operator()" cv=""><type>boost::function_traits&lt; Signature &gt;::result_type</type><parameter name="vec_par"><paramtype>const parameter_vector &amp;</paramtype></parameter><purpose>Sending a signal to the chain will forward it to the first component in the chain. </purpose></method><method name="default_signal" cv=""><type>T::signal_type &amp;</type><purpose>The default signal coming out of the chain is the default signal of the last component in the chain. </purpose></method></method-group><constructor><parameter name="copies"><paramtype>size_t</paramtype></parameter><parameter name="component"><paramtype>T *</paramtype><default>NULL</default></parameter><description><para>Constructs a chain composed of instances of T. Constructs a chain composed of copies of component. </para></description></constructor><destructor/><method-group name="private member functions"><method name="initialize" cv=""><type>void</type><parameter name="copies"><paramtype>size_t</paramtype></parameter><parameter name="component"><paramtype>T *</paramtype><default>NULL</default></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/signal_network/conditional.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="conditional"><template>
      <template-type-parameter name="Condition"/>
      <template-type-parameter name="Member"/>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
    </template><purpose>Forwards an incoming signal if an specified condition evaluates to true. </purpose><struct name="result"><template>
      <template-type-parameter name="Seq"/>
    </template></struct><typedef name="unfused"><type>boost::fusion::unfused_inherited&lt; <classname>conditional</classname>&lt; Condition, Member, Signature, OutSignal, Combiner, Group, GroupCompare &gt;, typename mpl::vector&lt;&gt;::type, typename boost::function_types::parameter_types&lt; Signature &gt; &gt;</type></typedef><method-group name="public member functions"><method name="operator()" cv=""><type>base_type::signal_type::result_type</type><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="vec_par"><paramtype>const Seq &amp;</paramtype></parameter><description><para>Forwards the signal if the condition evaluates the true. 
</para></description><returns><para>Return value of the sent signal if the condition evaluates to true, default constructed instance otherwise. </para></returns></method></method-group></class></namespace></namespace></namespace></header><header name="boost/signal_network/counter.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="counter"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="T"><default>volatile int</default></template-type-parameter>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
      <template-type-parameter name="Base"><default>applicator&lt;detail::postincrement&lt;T&gt;, T, Signature, OutSignal, Combiner, Group, GroupCompare&gt;</default></template-type-parameter>
    </template><purpose>Counts the number of signals passing through the component. counter is an applicator with a postincrement application and default member of type volatile int. </purpose><description><para>
</para></description><typedef name="unfused"><type><emphasis>unspecified</emphasis></type></typedef><method-group name="public member functions"><method name="reset" cv=""><type>void</type><description><para>Sets the internal counter to 0. </para></description></method><method name="count" cv="const"><type>boost::remove_volatile&lt; T &gt;::type</type><description><para>
</para></description><returns><para>The internal signal counter. </para></returns></method></method-group><constructor><description><para>Initializes the internal counter to 0. </para></description></constructor></class></namespace></namespace></namespace></header><header name="boost/signal_network/filter.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><struct name="combined_out_signal"><purpose>Provides a basis for filters (components that receive and send a signal). </purpose><description><para>
Use this class as a base class for classes that produce a signal of a particular signature. </para></description><typedef name="default_normal_type"><type><classname>combined_out_signal</classname></type></typedef><typedef name="default_unfused_type"><type><classname>combined_out_signal</classname></type></typedef></struct><struct name="unfused_out_signal"><typedef name="default_normal_type"><type><classname>combined_out_signal</classname></type></typedef><typedef name="default_unfused_type"><type><classname>combined_out_signal</classname></type></typedef></struct><struct name="fused_out_signal"><typedef name="default_normal_type"><type>fused_out_signal</type></typedef><typedef name="default_unfused_type"><type>fused_out_signal</type></typedef></struct><struct name="default_out_signal"><typedef name="default_normal_type"><type>fused_out_signal</type></typedef><typedef name="default_unfused_type"><type><classname>combined_out_signal</classname></type></typedef></struct><class-specialization name="filter"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="Combiner"/>
      <template-type-parameter name="Group"/>
      <template-type-parameter name="GroupCompare"/>
    </template><specialization><template-arg>Signature</template-arg><template-arg>unfused_out_signal</template-arg><template-arg>Combiner</template-arg><template-arg>Group</template-arg><template-arg>GroupCompare</template-arg></specialization><purpose>Unfused version of the filter class. </purpose><typedef name="signature_type"><type>Signature</type></typedef><typedef name="signal_type"><type>boost::signal&lt; Signature, Combiner, Group, GroupCompare &gt;</type></typedef><method-group name="public member functions"><method name="filter" cv=""><type/><parameter name=""><paramtype>const filter &amp;</paramtype></parameter></method><method name="filter" cv=""><type/></method><method name="default_signal" cv=""><type>signal_type &amp;</type><purpose>Returns the default out signal. </purpose></method><method name="disconnect_all_slots" cv=""><type>void</type><purpose>Disconnects all slots connected to the signet::filter. </purpose></method></method-group><copy-assignment><parameter name=""><paramtype>const filter &amp;</paramtype></parameter></copy-assignment></class-specialization><class-specialization name="filter"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="Combiner"/>
      <template-type-parameter name="Group"/>
      <template-type-parameter name="GroupCompare"/>
    </template><specialization><template-arg>Signature</template-arg><template-arg>combined_out_signal</template-arg><template-arg>Combiner</template-arg><template-arg>Group</template-arg><template-arg>GroupCompare</template-arg></specialization><inherit access="public">boost::signal_network::signet::filter&lt; Signature, unfused_out_signal, Combiner, Group, GroupCompare &gt;</inherit><purpose>Combined version of the filter class. </purpose><typedef name="signature_type"><type>base_type::signature_type</type></typedef><typedef name="signal_type"><type>base_type::signal_type</type></typedef><typedef name="parameter_types"><type>boost::function_types::parameter_types&lt; Signature &gt;::type</type></typedef><typedef name="parameter_vector"><type>boost::fusion::result_of::as_vector&lt; parameter_types &gt;::type</type></typedef><typedef name="fused_signature_type"><type>signal_type::result_type</type></typedef><method-group name="public member functions"><method name="filter" cv=""><type/></method></method-group></class-specialization><class-specialization name="filter"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="Combiner"/>
      <template-type-parameter name="Group"/>
      <template-type-parameter name="GroupCompare"/>
    </template><specialization><template-arg>Signature</template-arg><template-arg>fused_out_signal</template-arg><template-arg>Combiner</template-arg><template-arg>Group</template-arg><template-arg>GroupCompare</template-arg></specialization><purpose>Fused version of the filter class. </purpose><typedef name="parameter_types"><type>boost::function_types::parameter_types&lt; Signature &gt;::type</type></typedef><typedef name="parameter_vector"><type>boost::fusion::result_of::as_vector&lt; parameter_types &gt;::type</type></typedef><typedef name="signature_type"><type>Combiner::result_type</type></typedef><typedef name="fused_signature_type"><type>Combiner::result_type</type></typedef><typedef name="signal_type"><type>boost::signal&lt; signature_type, Combiner, Group, GroupCompare &gt;</type></typedef><method-group name="public member functions"><method name="filter" cv=""><type/><parameter name=""><paramtype>const filter &amp;</paramtype></parameter></method><method name="filter" cv=""><type/></method><method name="default_signal" cv=""><type>signal_type &amp;</type><purpose>Returns the default out signal. </purpose></method><method name="disconnect_all_slots" cv=""><type>void</type><purpose>Disconnects all slots connected to the signet::filter. </purpose></method></method-group><copy-assignment><parameter name=""><paramtype>const filter &amp;</paramtype></parameter></copy-assignment></class-specialization></namespace></namespace></namespace></header><header name="boost/signal_network/function.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="function"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="FunctionSignature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;void&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
      <template-type-parameter name="Base"><default>modifier&lt;detail::function_adapter&lt;FunctionSignature, Signature&gt;, Signature, OutSignal, Combiner, Group, GroupCompare&gt;</default></template-type-parameter>
    </template><purpose>Converts a function into a Signal Network filter. </purpose><description><para>
The signet::function object will receive signals of signature void(function arguments), and send signals of signature void(function return type). </para></description><typedef name="unfused"><type><classname>function</classname>&lt; Signature, FunctionSignature, OutSignal, Combiner, Group, GroupCompare, typename <classname>Base::unfused</classname> &gt;</type></typedef><method-group name="public member functions"/><constructor><parameter name="f"><paramtype>const boost::function&lt; FunctionSignature &gt; &amp;</paramtype></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/signal_network/instantiator.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="instantiator"><template>
      <template-type-parameter name="Instantiation"/>
      <template-type-parameter name="Member"/>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
    </template><purpose>Generic component which, upon receiving a signal, instantiates an object of type Instantiation from a member object of type Member. </purpose><method-group name="public member functions"><method name="operator()" cv=""><type>base_type::signal_type::result_type</type><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="seq"><paramtype>const Seq &amp;</paramtype></parameter><description><para>Instantiates an instance of Instantiation from the Member object. </para></description></method></method-group></class></namespace></namespace></namespace></header><header name="boost/signal_network/junction.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="junction"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
      <template-type-parameter name="Base"><default>conditional&lt;detail::identity&lt;bool&gt;, volatile bool, Signature, OutSignal, Combiner, Group, GroupCompare&gt;</default></template-type-parameter>
    </template><purpose>Forwards a single signal to multiple slots, and can also be disabled to stop the flow of signals. junction is a conditional with Condition identity and Member volatile bool. </purpose><typedef name="unfused"><type><classname>junction</classname>&lt; Signature, OutSignal, Combiner, Group, GroupCompare, typename <classname>Base::unfused</classname> &gt;</type></typedef><method-group name="public member functions"><method name="enable" cv=""><type>void</type><description><para>Enables the junction (signals will be forwarded). </para></description></method><method name="disable" cv=""><type>void</type><description><para>Disables the junction (signals will not be forwarded). </para></description></method></method-group><constructor><parameter name="enabled"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Initializes the junction to be enabled. </para></description></constructor></class></namespace></namespace></namespace></header><header name="boost/signal_network/modifier.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="modifier"><template>
      <template-type-parameter name="Modification"/>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
    </template><method-group name="public member functions"><method name="operator()" cv=""><type>base_type::signal_type::result_type</type><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="seq"><paramtype>const Seq &amp;</paramtype></parameter><description><para>Applies the Modification object to the received signal parameters. </para></description></method></method-group><constructor/><constructor><parameter name="m"><paramtype>const Modification &amp;</paramtype></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/signal_network/mutex.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="mutex"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
      <template-type-parameter name="Base"><default>instantiator&lt;boost::mutex::scoped_lock, boost::mutex, Signature, OutSignal, Combiner, Group, GroupCompare&gt;</default></template-type-parameter>
    </template><purpose>Ensures a component is processing only one signal at a time when using multiple threads. </purpose><typedef name="unfused"><type><classname>mutex</classname>&lt; Signature, OutSignal, Combiner, Group, GroupCompare, typename <classname>Base::unfused</classname> &gt;</type></typedef></class></namespace></namespace></namespace></header><header name="boost/signal_network/selector.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"/></namespace></namespace></header><header name="boost/signal_network/socket_receiver.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="socket_receiver"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_types::result_type&lt;Signature&gt;::type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
    </template><inherit access="public">boost::signal_network::signet::storage&lt; Signature, OutSignal, Combiner, Group, GroupCompare &gt;</inherit><purpose>Receives serializable signals through a Boost.Asio socket. </purpose><description><para>
Todo<para>socket_sender only works for Signatures of return type void.</para></para></description><typedef name="unfused"><type>boost::fusion::unfused_typed_class&lt; <classname>socket_receiver</classname>&lt; Signature, OutSignal, Combiner, Group, GroupCompare &gt;, typename base_type::base_type::parameter_types &gt;</type></typedef><method-group name="public member functions"><method name="operator()" cv=""><type>void</type><purpose>Sets the receiver to wait for a packet and send its contents via the signal. </purpose></method></method-group><constructor><parameter name="socket"><paramtype>asio::ip::tcp::socket &amp;</paramtype></parameter><purpose>Initializes the socket_sender to use the provided socket. </purpose></constructor></class></namespace></namespace></namespace></header><header name="boost/signal_network/socket_sender.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="socket_sender"><template>
      <template-type-parameter name="Signature"/>
    </template><purpose>Sends serializable signals through a Boost asio socket. </purpose><description><para>
Todo<para>socket_sender only works for Signatures of return type void. </para></para></description><struct name="result"><template>
      <template-type-parameter name="Seq"/>
    </template><typedef name="type"><type>void</type></typedef></struct><typedef name="unfused"><type>boost::fusion::unfused_inherited&lt; <classname>socket_sender</classname>&lt; Signature &gt;, typename mpl::vector&lt; asio::ip::tcp::socket &amp; &gt;::type, typename boost::function_types::parameter_types&lt; Signature &gt; &gt;</type></typedef><typedef name="ParTypes"><type>boost::function_types::parameter_types&lt; Signature &gt;</type></typedef><method-group name="public member functions"><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="vec_par"><paramtype>const Seq &amp;</paramtype></parameter><purpose>Serializes each of the arguments and sends them in a single packet through the socket. </purpose></method></method-group><constructor><parameter name="socket"><paramtype>asio::ip::tcp::socket &amp;</paramtype></parameter><purpose>Initializes the socket_sender to use the provided socket. </purpose></constructor><constructor/><destructor/></class></namespace></namespace></namespace></header><header name="boost/signal_network/storage.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="storage"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="OutSignal"><default>default_out_signal</default></template-type-parameter>
      <template-type-parameter name="Combiner"><default>boost::last_value&lt;typename boost::function_traits&lt;Signature&gt;::result_type&gt;</default></template-type-parameter>
      <template-type-parameter name="Group"><default>int</default></template-type-parameter>
      <template-type-parameter name="GroupCompare"><default>std::less&lt;Group&gt;</default></template-type-parameter>
    </template><purpose>Stores and transmits arguments received from a signal. </purpose><description><para>
</para></description><method-group name="private member functions"><method name="operator()" cv=""><type>base_type::signal_type::result_type</type><description><para>Sends a signal containing the stored parameter values. 
</para></description><returns><para>Return value of the sent signal. </para></returns></method><method name="operator()" cv=""><type>base_type::signal_type::result_type</type><parameter name=""><paramtype>const boost::fusion::vector&lt;&gt; &amp;</paramtype></parameter><description><para>Sends a signal containing the stored parameter values. 
</para></description><returns><para>Return value of the sent signal. </para></returns></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="seq"><paramtype>const Seq &amp;</paramtype><description><para>Sequence to whose value the stored parameter sequence is assigned to.</para></description></parameter><description><para>Sets the stored parameter values using the provided sequence. 
<emphasis role="bold">Note:</emphasis> Enabled only for fusion sequences of size &gt;= 1. </para></description></method><method name="stored_vector" cv=""><type>const storable_vector &amp;</type><description><para>
</para></description><returns><para>A reference to the fusion vector of stored parameter values. </para></returns></method><method name="at" cv=""><type>boost::fusion::result_of::at_c&lt; storable_vector, N &gt;::type</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
        </template><description><para>
</para></description><returns><para>The stored value of parameter N using an optimizing cast. </para></returns></method><method name="value_at" cv=""><type>boost::mpl::at_c&lt; typename base_type::parameter_types, N &gt;::type</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
        </template><description><para>
</para></description><returns><para>The stored value of parameter N typed exactly as it appears in the Signature. </para></returns></method><method name="at_slot" cv=""><type>slot_selector_t</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
        </template><description><para>
</para></description><returns><para>The slot selector for the related at function. </para></returns></method><method name="value_at_slot" cv=""><type>slot_selector_t</type><template>
          <template-nontype-parameter name="N"><type>int</type></template-nontype-parameter>
        </template><description><para>
</para></description><returns><para>The slot selector for the value_at function. </para></returns></method></method-group><constructor><template>
          <template-type-parameter name="Seq"/>
        </template><parameter name="seq"><paramtype>const Seq &amp;</paramtype><description><para>Sequence from which the stored parameter sequence is initialized from. </para></description></parameter><description><para>Initializes the stored parameter values using the provided sequence. 
</para></description></constructor><constructor><description><para>Initializes the stored parameter values using its default constructor. </para></description></constructor></class></namespace></namespace></namespace></header><header name="boost/signal_network/timed_generator.hpp"><namespace name="boost"><namespace name="signal_network"><namespace name="signet"><class name="timed_generator"><template>
      <template-type-parameter name="Signature"/>
      <template-type-parameter name="Base"><default>storage&lt;Signature&gt;</default></template-type-parameter>
    </template><inherit access="public">boost::signal_network::signet::storage&lt; Signature &gt;</inherit><purpose>Creates its own thread and periodically sends a signal with the stored value. </purpose><description><para>
</para></description><typedef name="unfused"><type><classname>timed_generator</classname>&lt; Signature, typename <classname>Base::unfused</classname> &gt;</type></typedef><method-group name="public member functions"><method name="enable" cv=""><type>void</type><parameter name="interval"><paramtype>double</paramtype><description><para>Sets the time interval (in seconds) at which the signal is sent. </para></description></parameter><parameter name="signal_count"><paramtype>unsigned</paramtype><default>0</default><description><para>The signal will be sent signal_count times, or indefinitelly if signal_count==0. </para></description></parameter><purpose>Sets the object to send the stored value at specified time intervals. </purpose><description><para>
</para></description></method><method name="disable" cv=""><type>void</type><purpose>Stops the sending of signals and suspends the thread. </purpose></method><method name="join" cv=""><type>void</type><purpose>Forces the thread to terminate. </purpose></method></method-group><constructor><purpose>Default constructor. Starts the thread, but signals won't be sent until the enable() function is called. </purpose></constructor><destructor><purpose>The thread should be joined by the time the destructor is called. </purpose></destructor><method-group name="private member functions"><method name="thread_function" cv=""><type>void</type></method></method-group></class></namespace></namespace></namespace></header></library-reference>
