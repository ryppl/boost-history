[library Signal Network
    [quickbook 1.4]
    [version 0.1]
    [authors [Rajko, Stjepan]]
    [copyright 2007 Stjepan Rajko]
    [purpose Operators and Components for signal-based networks.]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __filter__ [link signal_network.components.generic.filter filter]]
[def __applicator__ [link signal_network.components.generic.applicator applicator]]
[def __conditional__ [link signal_network.components.generic.conditional conditional]]
[def __instantiator__ [link signal_network.components.generic.instantiator instantiator]]
[def __modifier__ [link signal_network.components.generic.modifier modifier]]
[def __storage__ [link signal_network.components.properties.storage storage]]
[def __counter__ [link signal_network.components.properties.counter counter]]
[def __junction__ [link signal_network.components.flow.junction junction]]
[def __mutex__ [link signal_network.components.flow.mutex mutex]]
[def __function__ [link signal_network.components.adapters.function function]]
[def __socket_sender__ [link signal_network.components.network.socket_sender socket_sender]]
[def __socket_receiver__ [link signal_network.components.network.socket_receiver socket_receiver]]
[def __chain__ [link signal_network.components.topologies.chain chain]]

[def __fusion__ [@http://spirit.sourceforge.net/dl_more/fusion_v2/libs/fusion/doc/html/index.html Boost.Fusion]]

[import ../test/test_storage.cpp]
[import ../test/test_function.cpp]
[import ../test/test_chain.cpp]
[import ../test/test_socket.cpp]

The Signal Network library aims to facilitate the
implementation and interconnection of objects into signal networks using Boost.Signals.
To see the rationale behind the Signal Network library, please visit the associated
[@http://svn.boost.org/trac/boost/wiki/soc/2007/SignalNetwork GSoC page].

[warning Signal Network is not a part of the Boost libraries.  It is being developed
as a part of Google Summer of Code program.]

* If you would like some more information about why one would want to connect objects into a signal-based
  network, read my exploration of [link signal_network.introduction.dataflow Dataflow-oriented programming approaches in C++].
* If you'd like to try out the library
    * keep in mind that the interface is highly unstable at this point
    * see the [link signal_network.introduction.start Quick Start] section.
* If you are interested in the progress of the implementation, see
    * News section of the [@http://svn.boost.org/trac/boost/wiki/soc/2007/SignalNetwork Signal Network GSoC page]
    * [link signal_network.discussion Discussion on Boost Community Feedback]
    * [link signal_network.download Download and Changelog]

[include introduction.qbk]

[section:discussion Discussion on Boost Community Feedback]

The following summarizes some of the suggestions / comments given by the Boost community, and
what has been done to incorporate this feedback.

[* Tobias Schwinger indicated that the library could be used for pulling rather than pushing data.]

* [link signal_network.connections.pull An example] which illustrates this has been addded.

[* James Jones suggested that a ||-like operator could be used for branching, and >> for chaining.]

* `operator >=` which was orignally used for branching has been replaced with `operator |`.
* Since the most straightforward way for me to implement chaining/branching is using a left-to-right
operator for one and a right-to-left operator for the other, I decided to stay with >>= as the chaining
operator.

[* Paolo Coletta suggested a "video_generator >>= ( effect1 && effect2 ) >>= image_sum" - like syntax that
  would allow parallel processing of signals (identified as the "join" pattern by Yigong Liu)]

* I have started to implement thread-related components in __timed_generator__ and __mutex__.
More sophisticated threading components, control and syntax to follow.

[* Yigong Liu suggested enhanced support for common network topologies, such as mesh. ]

* I have implemented a prototype
__chain__ topology
to get a start on this concept.

[* Braddock Gaskill pointed out the relationship with the "pipes and filters" pattern, and suggested
   the possibility of using functions as filters.  He also suggested the library would me more useful
   if different functions executed in parallel threads, or were queued to specific worker threads,
   if the library would provide functionality to control and schedule the execution of the invoked functions,
   or traverse the call graph.]

* In light of the possible connection with the "pipes and filters" pattern, the base
  object for signal network components which receive a signal and send a signal has
  been changed to __filter__.
  I was not successful in finding a formal definition
  of what "pipes and filters" semantics should be, so I am not sure whether this is appropriate.
* __function__
  now offers the proposed functionality of converting functions into filters.
* Threading and scheduling of the invoked functions is something I plan to address.
* Providing a call graph would be a great feature, but I am not sure what the best
  way to address that is, since each component might be of a different type.  Perhaps a graph
  in which only the edges are labeled (with connection objects) would be doable and useful.

[endsect]

[section:download Download and Changelog]

Please keep in mind that this code is a prototype and far from the finished product.  I am learning
as I go, and any feedback on improving the implementation is very welcome.

GSoC Development version (*latest*) \[located in the Boost sandbox /SOC/2007/signals\]

* converting documentation to boostbook, using Boost.Build

Proposal for Boost / Google SoC version  \[[@signal_network.zip download]\]

* finished the signet::socket_sender and signet::socket_receiver components

Draft proposal for Boost / Google SoC version

* changed the file and namespace structure
* implemented a file-iteration based mechanism for arity-dependent classes
* changed the operators used
* signal_link is now signet::filter and does not need to know it's descendant's type
* implemented signet::junction, signet::selector, signet::storage, signet::timed_generator,
  signet::mutex, signet::chain, signet::function classes

Original request for interest version available as attachment to
[@http://lists.boost.org/Archives/boost/2007/02/116869.php]

[endsect]

[include connections.qbk]

[include components.qbk]

[xinclude signal_network_doxygen.xml]

[section:acknowledgements Acknowledgements]

* Thanks to all the members of the Boost community who have expressed an interest in this library
  and contributed [link signal_network.discussion valuable feedback].
* Thanks to Douglas Gregor for making himself available as a mentor for this project.
* Thanks to Tobias Schwinger for a most valuable discussion on various [link signal_network.introduction.dataflow
  dataflow-oriented approaches and ideas].

[endsect]

[section:license License]

Copyright 2007 Stjepan Rajko.
Distributed under the Boost Software License, Version 1.0. (See
accompanying file LICENSE_1_0.txt or copy at
[@http://www.boost.org/LICENSE_1_0.txt])


[endsect]