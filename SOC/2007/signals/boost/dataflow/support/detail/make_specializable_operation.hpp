// Copyright 2007 Stjepan Rajko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// expects:
// DATAFLOW_SPECIALIZABLE_OPERATION_NAME
// DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
// DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
// DATAFLOW_SPECIALIZABLE_OPERATION_ARITY
// DATAFLOW_SPECIALIZABLE_OPERATION_CHECK
// DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF

#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_NAME
#error DATAFLOW_SPECIALIZABLE_OPERATION_NAME undefined
#endif
#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED 0
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
#else
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED 1
#   ifndef DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
#   error DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES undefined
#   endif
#endif
#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_ARITY
#error DATAFLOW_SPECIALIZABLE_OPERATION_ARITY undefined
#endif
#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_CHECK
#error DATAFLOW_SPECIALIZABLE_OPERATION_CHECK undefined
#endif
#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF
#error DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF undefined
#endif
#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_HAS_TRAITS
#error DATAFLOW_SPECIALIZABLE_OPERATION_HAS_TRAITS undefined
#endif

// optional:
// DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS
#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS
#define DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
#endif

#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_ARGS
#define DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_ARGS
#endif

#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAME_ARGS
#define DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAME_ARGS
#endif

#ifndef DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAMES
#define DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAMES
#endif

#ifndef BOOST_DATAFLOW_DETAIL_MAKE_SPECIALIZABLE_OPERATION
#define BOOST_DATAFLOW_DETAIL_MAKE_SPECIALIZABLE_OPERATION

#include <boost/mpl/assert.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/comma_if.hpp>
#include <boost/utility/result_of.hpp>

namespace boost { namespace dataflow { namespace detail {

struct not_specialized {};

} } }

#endif


#define DATAFLOW_SPECIALIZABLE_OPERATION_IMPL BOOST_PP_CAT(DATAFLOW_SPECIALIZABLE_OPERATION_NAME,_impl)
#define DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_SPECIALIZED BOOST_PP_CAT(DATAFLOW_SPECIALIZABLE_OPERATION_CHECK,_specialized)
#if DATAFLOW_SPECIALIZABLE_OPERATION_ARITY==1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TRAITS typename Traits
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS typename T1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TS T1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TS1 const T1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TARGS T1 &
#   define DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS T1 &t1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS1 const T1 &t1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES t1
#   define DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS \
    typename DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF<T1, Tag>::type
#   define DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_TRAITS \
    typename DATAFLOW_SPECIALIZABLE_OPERATION_HAS_TRAITS<T1, Tag>::type
#elif DATAFLOW_SPECIALIZABLE_OPERATION_ARITY==2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TRAITS typename Traits1, typename Traits2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS typename T1, typename T2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TS T1, T2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TS1 T1, const T2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TS2 const T1, T2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TS3 const T1, const T2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TARGS T1 &, T2 &
#   define DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS T1 &t1, T2 &t2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS1 T1 &t1, const T2 &t2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS2 const T1 &t1, T2 &t2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS3 const T1 &t1, const T2 &t2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES t1, t2
#   define DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS \
    typename DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF<T1, Tag>::type, \
    typename DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF<T2, Tag>::type
#   define DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_TRAITS \
    typename DATAFLOW_SPECIALIZABLE_OPERATION_HAS_TRAITS<T1, Tag>::type, \
    typename DATAFLOW_SPECIALIZABLE_OPERATION_HAS_TRAITS<T2, Tag>::type
#endif

namespace boost { namespace dataflow {

namespace extension
{
    template<
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TRAITS,
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        typename Enable=void>
    struct DATAFLOW_SPECIALIZABLE_OPERATION_IMPL
    {
        BOOST_MPL_ASSERT(( is_same<Enable, void> ));
        
        typedef detail::not_specialized result_type;
                
        template<DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS>
        result_type operator()(DATAFLOW_SPECIALIZABLE_OPERATION_TARGS DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAME_ARGS)
        {
            // Error: DATAFLOW_SPECIALIZABLE_OPERATION_IMPL has not been
            // specialized appropriately.
            BOOST_MPL_ASSERT(( mpl::bool_<sizeof(T1)==0> ));
            return result_type();
        }
    };
}

namespace detail
{

    template<
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS,
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        typename Tag=default_tag,
        typename Enable=void>
    struct DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_SPECIALIZED
        : public mpl::true_
    {};
    
    template<
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS,
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        typename Tag>
    struct DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_SPECIALIZED<
        DATAFLOW_SPECIALIZABLE_OPERATION_TS,
        DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        Tag,
        typename enable_if<
            is_same<
               typename  extension::DATAFLOW_SPECIALIZABLE_OPERATION_IMPL<
                    DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
                    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
                    DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
                >::result_type,
                detail::not_specialized>
        >::type>
        : public mpl::false_
    {};

}

template<
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS,
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    typename Tag=default_tag,
    typename Enable=void>
struct DATAFLOW_SPECIALIZABLE_OPERATION_CHECK
    : public mpl::false_
{};

template<
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS,
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    typename Tag>
struct DATAFLOW_SPECIALIZABLE_OPERATION_CHECK<
    DATAFLOW_SPECIALIZABLE_OPERATION_TS,
    DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    Tag,
    typename enable_if<
        mpl::and_<
            DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_TRAITS,
            detail::DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_SPECIALIZED<
                DATAFLOW_SPECIALIZABLE_OPERATION_TS,
                DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
                BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
                Tag>
        >
     >::type>
    : public mpl::true_
{};


namespace result_of {

    template<
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS,
        DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        typename Tag=default_tag>
    struct DATAFLOW_SPECIALIZABLE_OPERATION_NAME
    {
        typedef typename boost::result_of<
            extension::DATAFLOW_SPECIALIZABLE_OPERATION_IMPL<
                DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
                BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
                DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
            >
            (DATAFLOW_SPECIALIZABLE_OPERATION_TARGS DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAMES)
        >::type type;
    };
    
}

template<
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    typename Tag,
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS>
inline typename result_of::DATAFLOW_SPECIALIZABLE_OPERATION_NAME<
    DATAFLOW_SPECIALIZABLE_OPERATION_TS,
    DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    Tag>::type 
DATAFLOW_SPECIALIZABLE_OPERATION_NAME(DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAME_ARGS)
{
    return extension::DATAFLOW_SPECIALIZABLE_OPERATION_IMPL<
        DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
        >()(DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_ARGS);
}

template<
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    typename Tag,
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS>
inline typename result_of::DATAFLOW_SPECIALIZABLE_OPERATION_NAME<
    DATAFLOW_SPECIALIZABLE_OPERATION_TS1,
    DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    Tag>::type 
DATAFLOW_SPECIALIZABLE_OPERATION_NAME(DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS1 DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAME_ARGS)
{
    return extension::DATAFLOW_SPECIALIZABLE_OPERATION_IMPL<
        DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
        >()(DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_ARGS);
}

#if DATAFLOW_SPECIALIZABLE_OPERATION_ARITY==2
template<
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)    
    typename Tag,
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS>
inline typename result_of::DATAFLOW_SPECIALIZABLE_OPERATION_NAME<
    DATAFLOW_SPECIALIZABLE_OPERATION_TS2,
    DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    Tag>::type 
DATAFLOW_SPECIALIZABLE_OPERATION_NAME(DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS2)
{
    return extension::DATAFLOW_SPECIALIZABLE_OPERATION_IMPL<
        DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
        >()(DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES);
}

template<
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    typename Tag,
    DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS>
inline typename result_of::DATAFLOW_SPECIALIZABLE_OPERATION_NAME<
    DATAFLOW_SPECIALIZABLE_OPERATION_TS3,
    DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
    BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
    Tag>::type 
DATAFLOW_SPECIALIZABLE_OPERATION_NAME(DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS3)
{
    return extension::DATAFLOW_SPECIALIZABLE_OPERATION_IMPL<
        DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
        BOOST_PP_COMMA_IF(DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED)
        DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
        >()(DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES);
}
#endif

}}

#undef DATAFLOW_SPECIALIZABLE_OPERATION_NAME
#undef DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_SPECIALIZED
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TEMPLATES_WDEFAULTS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TEMPLATES_PROVIDED
#undef DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAME_ARGS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_TYPENAMES
#undef DATAFLOW_SPECIALIZABLE_OPERATION_EXTRA_ARGS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_ARITY
#undef DATAFLOW_SPECIALIZABLE_OPERATION_CHECK
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TRAITS_OF
#undef DATAFLOW_SPECIALIZABLE_OPERATION_HAS_TRAITS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TRAITS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TYPENAME_TS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TS1
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TS2
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TS3
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TARGS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS1
#undef DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS2
#undef DATAFLOW_SPECIALIZABLE_OPERATION_NAMED_TARGS3
#undef DATAFLOW_SPECIALIZABLE_OPERATION_TARGS_NAMES
#undef DATAFLOW_SPECIALIZABLE_OPERATION_GET_TRAITS
#undef DATAFLOW_SPECIALIZABLE_OPERATION_CHECK_TRAITS
