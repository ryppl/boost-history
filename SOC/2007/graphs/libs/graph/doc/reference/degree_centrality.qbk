[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Degree Centrality]

    template <typename Graph, typename CentralityMap>
    void degree_centrality(const Graph& g, CentralityMap cent)

    template <typename Graph, typename CentralityMap, typename Measure>
    void degree_centrality(const Graph& g, CentralityMap cent, Measure measure)

    template <typename Graph, typename Vertex>
    typename graph_traits<Graph>::degree_size_type
    vertex_degree_centrality(const Graph& g, Vertex v)

    template <typename Graph, typename Vertex, typename Measure>
    typename Measure::degree_type
    vertex_degree_centrality(const Graph& g, Vertex v, Measure measure)

The /degree centrality/ measure is used in social network analysis to help
determine which vertices (or more specifically actors) are the most central
or important to a network. Degree centrality of a vertex is computed over the number
of connections (adjacent vertices) of that vertex. This definition varies for
undirected and directed graphs. For undirected graphs, the degree centrality of a
vertex is equivalent to its degree. For directed graphs it is equivalent to either
its in- or out-degree.

Consider the social network represented by an undirected graph in Figure 1.

[figure
    images/reference/social_network.png
    *Figure 1.* A network of friends.
]

This graph depicts a set of friends and their relationships (friendship, dating, etc.)
The degree centrality of each person in this graph is their number of friends.
Here, Frank has the highest degree centrality with five friends, whereas Laurie,
Jill, Bill, Anne, and Howard are the least central with two friends apiece.

For directed graphs, there are related two interpretations of degree centrality.
When degree centrality is measured over the out-degree of a vertex, it is called
/influence/. When the in-degree is measured, the measure is called /prestige/.
Consider the information network represented by the directed graph in Figure 2.

[figure
    images/reference/info_network.png
    *Figure 2.* A network of informational websites.
]

This graph represents links between information websites, presumably regarding a
specific topic. The most influential (out-degree centrality) is blogger with
three outgoing links while wikipedia is the least influential. The most prestigous
(in-degree centrality) is wikipedia with five incoming references. The least
prestigous websites are myspace, blogger, and blogspot each of which have no
incoming links.

This module provides two generic functions for measuring degree centrality.
The first function, `degree_centrality()` computes this measure for each vertex
in the graph, assigning the values to an output property map.

The second funtion, `vertex_degree_centrality()` computes this measure for
a single vertex, returning the value to the caller.

These functions can be specialized throught the use of different /measure/
functors. These funtors are called to compute the degree centraltiy of a vertex
within the computational framework. This module provides the two default measures
for /influence/ and /prestige/ and functions to help instantiate them. Custom
measures can also be easily implemented and used.

    template <typename Graph> struct influence_measure;
    template <typename Graph> influence_measure<Graph> measure_influence(const Graph&);

    template <typename Graph> struct prestige_measure;
    template <typename Graph> prestige_measure<Graph> measure_prestige(const Graph&);

The `influence_measure` returns the out-degre of a vertex and provides the
default computation for degree centrality of both directed and undirected
graphs. The `prestige_measure` returns the in-degree of a vertex.

[heading Where Defined]
`boost/graph/degree_centrality.hpp`

[heading Parameters]
[table
    [[Type] [Parameter] [Description]]
    [
        [required, in] [`const Graph& graph`]
        [
            The graph object for which the degree centralities will be computed.

            *Requirements:* The `Graph` type must be a model of the [BoostIncidenceGraph]
            concept. If the `Measure` parameter is given as `prestige_measure`,
            then the graph must be a model of the [BoostBidirectionalGraph] concept.
            For the `degree_centrality()` functions, the Graph must also model
            the [BoostVertexListGraph] concept.
        ]
    ]
    [
        [required, in] [`Vertex v`]
        [
            The vertex descriptor for which the degree centrality is computed.

            *Requirements:* The `Vertex` type must be the same as the `vertex_descriptor`
            of the `Graph` parameter.
        ]
    ]
    [
        [required, out] [`CentralityMap cent`]
        [
            The property map that contains the degree centralities of all vertices
            in a graph after calling the `degree_centrality()` function.

            *Requirements:* The `CentralityMap` type must be a model of the
            [BoostWritablePropertyMap] concept. The `key_type` of the map must
            be the same as the `vertex_descriptor` of the `Graph` type. If the
            `measure` parameter is given in the call, then the `value_type`
            of `CentralityMap` must be the same as `Measure::degree_type`.
            Otherwise, the `value_type` must be the same as the `degree_size_type`
            of the graph.
        ]
    ]
    [
        [optional, in] [`Measure measure`]
        [
            The `measure` parameter allows the caller to override the default
            computation of degree centrality for a vertex.

            *Requirements:* The `Measure` type must be a model of the
            [BoostDegreeMeasure] concept. The `degree_type` of `Measure` must
            be the same as the `value_type` of the `CentralityMap` type.
        ]
    ]
]

[heading Return Value]
The `vertex_degree_centrality()` function returns the centrality of a vertex.
If no `measure` parameter is given, the return type is the same as the
`degree_size_type` of the `Graph`. Otherwise, it is the `degree_type` of
the `Measure`.

[heading Complexity]
The `degree_centrality()` function returns in /O(n*O(M))/ where /n/ is the
number of vertices in the graph and /M/ is a measure of a vertex. This is
linear for both the `influence_measure` and `prestige_measure`.

The `vertex_degree_centrality()` returns in /O(M)/. This is constant for both
the `influence_measure` and `prestige_measure`.

The complexity of the `influence_measure` and `prestige_measure` functions are
both constant time.

[heading Example (Degree Centrality)]
This example reads a graph from standard input (in a simple edge-list format),
computes the degree-centrality of each vertex, and prints them to standard
output. This example includes of the following files:

* [^examples/closeness_centrality.hpp]
* [^examples/social_network.hpp]
* [^examples/helper.hpp]

To make typing easier, we define some aliases for the types used in this program
in the global scope. This defines a social network as an undirected graph whose
vertices are `Actor` properties. The `Actor` type simply stores an associated name
for each vertex.
[social_network_types]

We also need a property map that will store the degree centrality as an output
of the measure. The value type is given as `unsigned` because vertices do
have negative degree.
[centrality_map_types]

In the main program, we construct an empty graph, and an associated mapping of
names to vertices. This mapping is used in the construction of the graph.
[setup_social_network]

Building the network requires reading graph data from standard input. Here, the
`add_named_vertex()` function is used to ensure that each name corresponds to
a single vertex. This function is defined in `helper.hpp`.
[build_social_network]

Having built the graph, we can now compute the degree centrality of each vertex.
This is done by constructing a container for the centrality values and a property
map over it. This map is passed to the `degree_centrality()` function to store
the computed values.
[compute_degree_centrality]

Finally, we iterate over the vertices, printing the degree centrality of each
person in the network.
[print_social_network]

If given the `social_network.graph` file as input, the program will produce the
following output:

[pre
Scott: 4
Jill: 2
Mary: 2
Bill: 2
Josh: 2
Frank: 5
Laurie: 1
Anne: 2
Howard: 2
]

[heading Example (Influence and Prestige)]
This example is nearly identical to the previous in that it computes the degree
centrality over vertices in a graph. However, this example constructs a directed
graph and computes both influence and prestige.

In this example, the only type definition that varies from the previous is that
of the graph itself. Specifically, we declare this as a direted graph to help
capture the semantics of information flow.

    typedef directed_graph<Actor> Graph;

Even the code that builds the graph is identical. Since the graph is directed, however,
the order in which vertices are listed determine directionality of the edge. For
example, a vertex pair given as "=myspace,slashdot=" in the input file will generate
an edge from the vertex named =myspace= to that named =slashdot=.

Computing the influence and prestige requires the allocation of two property maps,
and two calls to the `degree_centrality()` function. The calls to `measure_influence()`
and `measure_prestige()` create temporary measure functions that are responsible
for those values respectively.
[compute_influence_prestige]
Note that the `measure_influence()` call can be ommitted to compute the influence
of vertices. If not given, `degree_centrality()` and `vertex_degree_centrality()`
will compute influence by default.

Finally, print the results for each vertex in the graph.
[print_influence_prestige]

If given the `info_network.graph` file as input, the program will produce
the following output where the second column is influence and the third is prestige:

[pre
myspace         1       0
digg            2       2
blogger         3       0
slahsdot        0       1
wikipedia       0       5
slashdot        2       2
blogspot        2       0
bbc             1       1
]

[endsect]