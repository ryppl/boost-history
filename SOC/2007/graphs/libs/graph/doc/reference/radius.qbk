[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Radius]

    template <typename Graph, typename EccentricityMap>
    typename property_traits<EccentricityMap>::value_type
    graph_radius(const Graph& g, EccentricityMap ecc)

The /radius/ of a graph is the minimum /eccentricty/ of any vertex in the
graph. This computes and returns that value using previously computed
eccentricity values. Eccentricity values are typically computed using the
[boost_eccentricity] functions.

The radius of a graph is also used to establish the graph's /center/ - the
set of vertices having the same eccentricity as the graph radius. This subset
can be computed using the [boost_graph_center] functions.

[heading Where Defined]
`boost/graph/radius.hpp`

[heading Parameters]
[table
    [[Type] [Parameter] [Description]]
    [
        [required, in] [`const Graph& g`]
        [
            The graph for which the eccentricity measures are being comptued.

            *Requirements:* The `Graph` type must be a model of the
            [BoostVertexListGraph] concepts.
        ]
    ]
    [
        [required, in] [`EccentricityMap ecc`]
        [
            The `ecc` property map associates an eccentricity value with every
            vertex in the graph.

            *Requirements:* `EccentricityMap` must be a model of [BoostReadablePropertyMap].
            The `key_type` of the distance map must be the same as the `vertex_descriptor`
            of the `Graph` parameter. The `value_type` must model the [SgiLessThanComparable]
            concept.
        ]
    ]
]

[heading Return Value]
The `graph_radius()` function returns the radius of the given graph with respect
to the given eccentricity values.

[heading Complexity]
The `graph_radius()` function is linear.

[heading Examples]
Write an example.

[endsect]