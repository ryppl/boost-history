[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Degree Distributions]

    template <typename Graph, typename Histogram>
    void degree_histogram(
        const Graph& _graph,
        Histogram& _histogram = ``['nothing]``,
        Histogram& _out_histogram = ``['nothing]``,
        Histogram& _in_histogram = ``['nothing]``)

The degree histogram function computes /histograms/ of the degrees
of vertices in a graph. A histogram is table that records the frequency
of occurence of some event. With regards to this function, the computed
histograms record the occurence of each degree of vertices in the graph.

Specifically, each `_histogram` parameter describes a sequence of possible
vertex-degrees in the graph and his size \[0, /max{degree(v,g)} + 1}\] where
/max{degree(v,g)}/ is the maximum degree of any vertex in `_graph`. In this
sequence, the ['i[super th]] element corresponds to the number of vertices
in `_graph` with degree /i/.

[figure
    images/reference/distributions_undirected.png
    [*Figure 1.] A simple undirected graph.
]

Consider the example in Figure 1. The assignment of frequencies (number of
vertices with degree /i/) in the histogram will be:

    _histogram[0] == 0;
    _histogram[1] == 1; // vertex 0
    _histogram[2] == 0;
    _histogram[3] == 5; // vertices 1, 2, 3, 4, 5

For directed graphs, it is also possible to compute histograms for both the in-
and out-degrees of the vertices of a graph.

[figure
    images/reference/distributions_directed.png
    [*Figure 2.] A simple directed graph.
]

For Figure 2, the in- and out-degree distributions will be:

    _in_histogram[0] == 1;      _out_histogram[0] == 0;
    _in_histogram[1] == 2;      _out_histogram[1] == 4;
    _in_histogram[2] == 3;      _out_histogram[2] == 2;

Note that the cumulative degree histogram for an directed graph is the
same as it would be if we treated edges as undirected. The cumulative
histogram for the graph in Figure 2 is:

    _histogram[0] == 1;
    _histogram[0] == 0;
    _histogram[0] == 5;

Note that computing the in- or -out degree for an undirected graph will yield
the same histogram as the cumulative.

[note
The /histogram/ is different than a /distribution/, which is commonly used as a
synonym for /probability distribution/. The probability of a histogram
can be computed by dividing each element of the `_histogram` by the number
of vertices in the graph.
]

In both of these functions, the computation of histograms depends on the
parameters passed to the function. For example, if called as:

    degree_distribution(g, _histogram = hist, _in_histogram = in_hist);

The algorithm will compute both the degree histogram and in-degree histogram,
but not the out-degree histogram. If not arguments are supplied, the algorithm
performs no computations (but does so in linear time).

[heading Where Defined]
`boost/graph/degree_distribution.hpp`

[heading Parameters]
[table
    [[Type] [Parameter] [Description]]
    [
        [required, in] [`const Graph& _graph`]
        [
            The graph object for which the distribution will be computed. If
            the `_distribution` or `_in_distribution` arguments are supplied
            when calling this function then `_graph` must be a model of
            [BoostBidirectionalGraph]. If only `_out_distribution` is supplied,
            then `_graph` must be a model of [BoostIncidenceGraph].
        ]
    ]
    [
        [optional, out]
        [
            Histogram& `_histogram`

            Histogram& `_out_histogram`

            Histogram& `_in_histogram`
        ]
        [
            The distribution parameters maps instances of vertex degree to the
            number of observed vertices in the graph with that degree.

            These parameters must model both the [SgiSequence] and
            [SgiRandomAccessContainer] concepts (e.g., `std::vector`). The index type of the
            distribution must be the same as `degree_size_type`. The `value_type` must
            be integral (preferably unsigned).

            If not supplied, these parameters assume the default value of `not_given`,
            implying that no computation is performed.
        ]
    ]
]

[h5 Return Value]
This function does not return a value.

[h5 Complexity]
The time complexity of all these functions is /O(V)/.

[h5 Notes]
Because a graph may be a multigraph, there is no determinable upper bound on the
size of the histogram parameters. As such they are required to be dynamically resized
during the execution of the algorithm.

The recommended type for the distribution parameters is:

    std::vector<graph_traits<Graph>::degree_size_type>

Note that if `dist` is the name of the output distribution after a call to
`degree_distribution()` then the maximum degree is `dist.size() - 1`. The
minimum degree corresponds to the index in `dist` with the first non-zero value.

[h5 Examples]
[note
    Expand these a bit... Perhaps show computations based on the previous.
]

The first example show how to compute and print the degree distribution.

    undirected_graph<> g;
    // add vertices and edges to g

    std::vector<size_t> dist;
    degree_distribution(g, dist);
    copy(dist.begin(), dist.end(), ostream_iterator<size_t>(cout, " "));

The following example shows how to access the vertex (or vertices) with the maximum
degree by using the `degree_histogram()` algorithm. This prints the index of that
vertex.

    undirected_graph<> g;
    // add vertice and edges to g

    typedef graph_traits<undirected_graph<> >::vertex_descriptor vertex_type;
    typedef std::vector<vertex_type> vertex_vector;

    std::vector<vertex_vector> hist;
    degree_histogram(g, hist);
    cout << get_vertex_index(hist.back().back()) << "\n";


[endsect]