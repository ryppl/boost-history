[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Clique]

    template <typename Graph, typename Visitor>
    void
    tiernan_visit_cycles(const Graph& g, Visitor vis)

These functions find all /cycles/ within of the given graph, invoking a visitor
when each clique is found.

The `tiernan_visit_cycles()` function is designed to work on directed graph, but
works for undirected graphs as well. When running on undirected graphs, however,
the algorithm treats each edge connecting two vertices /(u,v)/ as if it were
two edges /(u,v)/ and /(v,u)/. As result the algorithm will report cycles in
both directions.

[heading Where Defined]
`boost/graph/clique.hpp`

[heading Parameters]

[table
    [[Type] [Parameter] [Description]]
    [
        [required, in] [`const Graph& g`]
        [
            The graph for which cliques are being visited. The `Graph` type must
            /approximate/ the [BoostAdjacencyMatrix] in that it must implement
            the `edge(u,v,g)` function. It is not, however, required to return
            in constant time. Note that most graph types provide this function,
            including [boost_adjacency_list], [boost_undirected_graph], and
            [boost_directed_graph].
        ]
    ]
    [
        [required, in] [`Visitor vis`]
        [
            The visitor object to the algorithm. This `Visitor` class must
            model the [BoostCliqueVisitor] class.
        ]
    ]
]

[h5 Return Value]
This function does not return a value.

[h5 Complexity]
No complexity has been reported for this algorithm, but it is expected to
run in /O(P(g))/ where /P(g)/ is the number of distinct simple paths in the
graph /g/ (which can be very large).

[h5 Examples]


[endsect]