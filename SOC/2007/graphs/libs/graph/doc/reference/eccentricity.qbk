[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Eccentricity]

    template <typename Graph, typename DistanceMap>
    typename property_traits<DistanceMap>::value_type
    vertex_eccentricity(const Graph& g, GeodesicMap dist)

    template <typename Graph, typename DistanceMatrix, typename EccentricityMap>
    void eccentricity(const Graph& g, const DistanceMatrix& dist, EccentricityMap ecc)

The /eccentricity/ of a vertex is the maximum geodesic distance to any other
vertex in the graph. Intuitively, Vertices with low eccentricity can reach all
other vertices in the graph more quickly than vertices with high eccentricity.
Eccentricity values are used to help compute the [boost_graph_radius] and
[boost_graph_diameter]. These values can be used in turn, to identify the
[boost_gaph_center] and [boost_graph_periperhy] subgraphs.

Note that for any vertex in a graph that is not connected to another, its
eccentricity is defined to be infinite.

This module provide two generic functions. The first function, `eccentricity()`
computes this values for all vertices in the graph given a matrix that provides
the shortest paths between all pairs of vertices. This matrix can be computed
as the output of an all-pairs shortest paths algorithm (e.g.,
[boost_floyd_warshall_all_pairs_shortest_paths]) or repeated application of a
breadth-first search. The output of this function is stored in a property map.

The second function, `vertex_eccentricity()` computes the eccentricty of a
single vertex given the shortest paths to every other vertex in the graph. The
distance map can be computed using a shortest paths algorithms (e.g.,
[boost_dijkstra_shortest_paths] or a breadth-first search. The output of this
function is returned to the caller.

[heading Where Defined]
`boost/graph/eccentricity.hpp`

[heading Parameters]
[table
    [[Type] [Parameter] [Description]]
    [
        [required, in] [`const Graph& g`]
        [
            The graph for which the eccentricity measures are being comptued.

            *Requirements:* The `Graph` type must be a model of the
            [BoostVertexListGraph] concepts.
        ]
    ]
    [
        [required, in] [`DistanceMap dist`]
        [
            Given a vertex `v`, the `dist` parameter provides the length of the
            shortest path between a vertex `u` and `v`. The vertex `u` is the
            vertex for which the distance map was initially computed. The
            distance from /u/ to itself should be zero (i.e., `dist[u] == 0`).

            *Requirements:* `DistanceMap` must be a model of [BoostReadablePropertyMap].
            The `key_type` of the distance map must be the same as the `vertex_descriptor`
            of the `Graph` parameter. The `value_type` is required to be a model of
            [BoostNumericValue].
        ]
    ]
    [
        [required, in] [`const DistanceMatrix& dist`]
        [
            Given vertices /u/ and /v/, the `dist` parameter provides the length
            of the shortest path between the two vertices. Note that the
            distance between a vertex and itself should be 0 (i.e., `dist[u][u] == 0`).

            *Requirements:* `DistanceMatrix` must be a model of [BoostPropertyMatrix].
            The `key_type` of the distance matrixc must be the same as the
            `vertex_descriptor` of the `Graph` parameter. The `value_type` is
            required to be a model of [BoostNumericValue].
        ]
    ]
    [
        [required, out] [`EccentricityMap ecc`]
        [
            The `ecc` parameter stores the computed results of the `eccentricity()`
            function for each vertex in the graph.

            *Requirements:* The `EccentricityMap` type must be a model of the
            [BoostReadablePropertyMap] type. The `key_type` of the property map
            must be the `vertex_descriptor` of the `Graph`. The `value_type`
            must be the same as the `value_type` of the distance matrix.
        ]
    ]
]

[heading Return Value]
The `vertex_eccentricity()` function returns the eccentricity of the vertex.
If the graph is unconnected, this returns the infinite value of the distance
map's `value_type`.

[heading Complexity]
The `eccentricity()` function has /O(n^2)/ time complexity.

The `vertex_eccentricity()` is linear.

[heading Examples]
Write an example.

[endsect]