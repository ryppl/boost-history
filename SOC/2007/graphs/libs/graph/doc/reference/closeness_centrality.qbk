[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Closeness Centrality]

    template <typename Graph, typename DistanceMatrix, typename ClosenessMap>
    void closeness_centrality(const Graph& g,
                              const DistanceMatrix& dist,
                              ClosenessMap close)

    template <typename Graph,
              typename DistanceMatrix,
              typename ClosenessMap,
              typename Measure>
    void closeness_centrality(const Graph& g,
                              const DistanceMatrix& dist,
                              ClosenessMap close,
                              Measure measure)


    template <typename Graph, typename DistanceMap>
    float vertex_closeness_centrality(const Graph& g, DistanceMap dist)

    template <typename ResultType, typename Graph, typename DistanceMap>
    ResultType vertex_closeness_centrality(const Graph& g, DistanceMap dist)

    template <typename Graph, typename DistanceMap, typename Measure>
    typename Measure::result_type
    vertex_closeness_centrality(const Graph& g, DistanceMap dist, Measure measure)

The /closeness centrality/ measure is commonly used in social network analysis to
identify vertices (also called actors) that are "close" to all others. To phrase
differently, actors that are "closer" to all others have a greater reach, making
them more influential in the network. The closeness measure is defined as the inverse
as the sum of all geodesic distances (lengths of shortest path) from one vertex
to all others. Formally it is given as:

[$images/eq/closeness.png]

Where /d(u,v)/ is the shortest path (geodesic distance) from /u/ to /v/.
Note that if any vertex in the graph is unreachable from any other, then the
graph is unconnected, and the distance between those two unonnected vertices
is infinite. This imlplies that the closeness of every vertex in an unconnected
(and undirected) graph is zero. This is not necessarily the case for directed
graphs.

It is also important to note the relationship between /closeness/, /farness/
and /mean geodesic distance/. Specifcially, /farness/ is the inverse of
/closeness/ (or the other way around) and indicates how far an actor is from
all others in the graph. The /mean geodesic distance/ is the average /farness/
of a vertex.

This module defines a flexible framework for computing the closeness centrality
of vertices in a graph for previously computed geodesics by providing two generic
functions. The first function, `closeness_centrality()` computes the closeness of
each vertex in a graph given a matrix containing the distances between vertices.
This matrix can be computed as the output of an "all pairs shortest path" algorithm
(e.g, [boost_floyd_warshall_all_pairs_shortest_paths] or [boost_johnson_all_pairs_shortest_paths])
or as the result of a [boost_breadth_first_search] (if the graph is unweighted).

The second function, `vertex_closeness_centrality()` can be used to compute the
closeness of a single vertex. This function requires a distance map that contains
the distance from one vertex (the source) to all others in the graph. This
distance map can be computed as the result of a "shortest paths" algorithm or
recording distances from a breadth-first search.

This framework also allows for a specialization of the measure through the use
of a function object. This measure defaults to the reciprocal in the equation
above, but can be easily redefined to perform alternative computations or, in
the case of non-trivial types, re-define the notion of reciprocal.

[heading Where Defined]
`boost/graph/closeness_centrality.hpp`

[heading Parameters]
[table
    [[Type] [Parameter] [Description]]
    [
        [template] [`ResultType`]
        [
            The `ResultType` template parmeter explitly specifies the the
            return type of the `closeness()` function. If not
            given, the return type is `float`.

            *Requirements:* The return type is required to model the
            [BoostNumericValue] concept.
        ]
    ]
    [
        [required, in] [`const Graph& g`]
        [
            The graph for which vertex measures are being comptued.

            *Requirements:* The `Graph` type must be a model of the
            [BoostVertexListGraph] concept.
        ]
    ]
    [
        [required, in] [`DistanceMap dist`]
        [
            Given a vertex `v`, the `dist` parameter provides the length of the
            shortest path between a vertex `u` and `v`. The vertex `u` is the
            vertex for which the distance map was initially computed. The
            distance from /u/ to itself should be zero (i.e., `dist[u] == 0`).

            *Requirements:* `DistanceMap` must be a model of [BoostReadablePropertyMap].
            The `key_type` of the distance map must be the same as the `vertex_descriptor`
            of the `Graph` parameter. The `value_type` is required to be a model of
            [BoostNumericValue].
        ]
    ]
    [
        [required, in] [`const DistanceMatrix& dist`]
        [
            Given vertices /u/ and /v/, the `dist` parameter provides the length
            of the shortest path between the two vertices. Note that the
            distance between a vertex and itself should be 0 (i.e., `dist[u][u] == 0`).

            *Requirements:* `DistanceMatrix` must be a model of [BoostPropertyMatrix].
            The `key_type` of the distance matrixc must be the same as the
            `vertex_descriptor` of the `Graph` parameter. The `value_type` is
            required to be a model of [BoostNumericValue].
        ]
    ]
    [
        [required, out] [`ClosenessMap close`]
        [
            The `close` parameter stores the output of the computed closeness (or
            distance) for each vertex in `g`.

            *Requirements:* The type of `close` must be model the
            [BoostPropertyMap] and [BoostWritablePropertyMap] concepts. The `key_type`
            of the property map must be the same as the `vertex_descriptor` of
            the `Graph` type, and the `value_type` must be a model of [BoostNumericValue].
        ]
    ]
    [
        [optional, in] [`Measure measure`]
        [
            The 'measure' parameter is an instance of a closeness measure that
            performs the final operation (the reciprocal) for this computation.

            *Requirements:* The `Measure` type must be a model of the [BoostDistanceMeasure]
            concept.
        ]
    ]
]

[heading Return]
The `vertex_closeness_centrality()` function returns the closeness of a vertex.
If the source vertex is not connected to one other in the graph, this value is 0.

[heading Complexity]
The `closenesss_centrality()` function is ['O(n[super 2])] where /n/ is the
number of vertices in the graph.

The `vertex_closeness_centrality()` function is linear with respect to the number
of vertices in the graph.

[heading Example]
Write an example.

[endsect]