[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Property Matrix]
The [BoostPropertyMatrix] concept requires types that model it to allow
two-dimensional array access to its values using descriptors. Types that model
this concepts are typically nested containers that use the vertex or edge
desctipors of a graph to access the elements of the matrix.

Note that the term "matrix" can be misleading since types that model this
concept are not necessarily required to have a "square" memory structure. The
term "matrix" applies to the use of double-indexing to access its elements
(i.e., m[u][v]).

Despite the relative simplicity of this concept, it should be noted that
types such as nested vectors cannot implicitly model this concept due to the
additional type requirements of the `property_matrix_types` template. Hoever,
that template can be specialized such that the requirements are met. In general,
however, it is far easier to use the `matrix_type` of the [boost_exterior_property]
template to declare types that model his concept.

[heading Notation]
The following expressions are used within this document:
[table
    [[Expression] [Description]]
    [[M] [A type modeling the [BoostPropertyMatrix] concept.]]
    [[m] [An object of type `M`.]]
    [[n] [An unsigned integer.]]
    [[g] [An object whose type is a model of the [BoostGraph] concept.]]
]

[heading Associated Types]
[table
    [[Name] [Type] [Description]]
    [
        [Key Type]
        [`property_matrix_traits<M>::key_type`]
        [
            The type of key used to index values in the matrix.

            *Requirements:* The `key_type` must be a model of a [BoostDescriptor]
            and be the same type as either the `vertex_descriptor` or `edge_descriptor`
            of the graph for which the matrix is declared.
        ]
    ]
    [
        [Value Type]
        [`property_matrix_traits<M>::value_type`]
        [
            The type of values contained by the matrix.

            *Requirements:* The `value_type` must be default construtible.
        ]
    ]
    [
        [Container Type]
        [`property_matrix_traits<M>::container_type`]
        [
            The nested container that stores the values of each column in the
            matrix.

            *Requirements:* The `container_type` is a [SgiContainer] such that
            the `value_type` of the container is the same as the `value_type`
            of the matrix. The container must be [NoConcept Idexable] with the
            index type being the same as the `key_type` of the matrix.
        ]
    ]
    [
        [Map Type]
        [`property_matrix_traits<M>::map_type`]
        [
            The type of property map that can be constructed over the `container_type`
            of the matrix.

            *Requirements:* The `container_type` is a [SgiContainer] such that
            the `value_type` of the container is the same as the `value_type`
            of the matrix. The container must be [NoConcept Idexable] with the
            index type being the same as the `key_type` of the matrix.
        ]
    ]
    [
        [Matrix Type]
        [`property_matrix_traits<M>::matrix_type`]
        [
            The type of the underlying matrix. This may not be the same type
            as `M`.
        ]
    ]
]

[heading Expressions]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Fill Constructor]
        [
            `M m(n, g)`

            `M(n, g)`
        ]
        []
        [
            Contstruct the matrix with `nxn` elements. After construction,
            accessing elements with the range defined by the square matrix
            is guaranteed to succeed.

            *Preconditions:* `n >= num_vertices(g)`.

            *Postcondition:* If `i` and `j` are valid vertex or edge descriptors
            of `g`, then `m[i][j]` returns the value associated with the descriptor
            pair.
        ]
    ]
    [
        [Element Access]
        [`m[u][v]`]
        [
            `property_matrix_traits<M>::value_type&`

            `const property_matrix_traits<M>::value_type&`
        ]
        [
            Returns the element corresponding to the pair `u`, `v` in the
            matrix.

            *Requirements:* The keys `u` and `v` must be the same as the `key_type`
            for the matrix.

            *Preconditions:* The keys `u` and `v` must be valid vertex or edge
            descriptors of the graph to which the matrix applies.
        ]
    ]
    [
        [Row Access]
        [`m[u]`]
        [
            An [StdIndexable] type.
        ]
        [
            Returns the row associated with the key `u`.

            *Requirements:* The key `u` must be the same as the `key_type`
            for the matrix. The return type is guaranteed to be indexable with
            the key type `k`.

            *Preconditions:* The key `u` must be valid vertex or edge descriptor
            of the graph to which the matrix applies.
        ]
    ]
]

[endsect]
