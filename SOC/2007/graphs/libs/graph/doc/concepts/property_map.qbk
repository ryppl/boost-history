[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Property Map]
The [BoostPropertyMap] concept is a refinement of the concepts in the Boost.PropertyMap
library this concept requires that property maps modeling this concept are required
to be constructed with a graph object.

[heading Refinement Of]
[BoostReadWritePropertyMap]

[heading Notation]
The following expressions are used within this document:
[table
    [[Expression] [Description]]
    [[M] [A type modeling the [BoostPropertyMap] concept.]]
    [[m] [An object of type `M`.]]
    [[c] [An object whose type models the [SgiRandomAccessContainer] concept.]]
    [[k] [An object of the property map's `key_type`.]]
    [[x] [An object of the property map's `value_type`.]]
]

[heading Expressions]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Default Constructor]
        [
            `M m`

            `M()`
        ]
        []
        [
            Construct a property map `m` with no underlying container.
            This constructor is mainly used to convey type information to
            generic functions since it cannot function without the container.

            *Postconditions:* `m[k]`, `get(m, k)`, and `put(m, k, x)` have
            undefined behavior (i.e., are likely to crash the program).
        ]
    ]
    [
        [Property Graph Constructor]
        [
            `M m(c, g);`

            `M(c, g)`
        ]
        []
        [
            Construct a property map `m` over the container `c` with reference
            to the graph `g`.

            *Requirements*: The container type of `c` must be a model of the
            [SgiRandomAccessContainer] concept.

            *Postconditions:* if `k` is a valid vertex or edge descriptor of `g`
            then `m[k]`, `get(m, k)`, and `put(m, k, x)` are all valid operations,
            that either return or set the value `x` associated with the key `k`.

            *Complexity:* The property map is constructed in constant time.
        ]
    ]
]

[heading Notes]
This concept exists primarily to help enforce best practice for declaring and
using exterior properties. Note that none of the property maps implemented
in the Boost.PropertyMap library satisfy the requirements of this concept.
The only type that does satisfy these requirements is the `map_type` of the
[boost_exterior_property] template.

This concept is generally not used to impose requirements on property maps
passed to generic graph algorithms.

Also note that because the container `c` over which the property map is constructed
must be a model of the [SgiRandomAccessContainer] type. This is a fairly stringent
requirement, but if satisfied (e.g., via a `std::vector`) implies the property
map implements constant-time property access.

[heading Example]

    typedef undirected_graph<> Graph;
    typedef graph_traits<Graph>::vertex_descriptor Vertex;

    Graph g;
    // add vertices and edges

    typedef exterior_property<Graph, Vertex, std::size_t> DistanceProperty;
    typedef DistanceProperty::container_type DistanceContainer;
    typedef DistanceProperty::map_type DistanceMap;

    DistanceContainer distances(num_verticse(g), 0);
    DistanceMap dm(distances, g);

    Vertex v = *vertices(g).first;
    put(dm, v, 3);  // set v's distance to 3
    get(dm, v);     // returns 3
    dm[v];          // same as above, returns 3

[endsect]
