[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Cycle Visitor]
The cycle visitor concept defines requirements for types that act as visitors
of cycle-detection algorithms. Objects of this type are passed to these
algorithms and are invoked when a cycle is found within a graph.

[heading Refinement Of]
[BoostVisitor]

[heading Valid Expressions]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Visit Cycle]
        [`vis.cycle(vs,g)`]
        [`void`]
        [
            *Semantics:* The `cycle()` member function of the visitor is invoked
            when a cycle is identified in the graph `g`.

            *Requirements:* `g` is an object whose type `G` is a refinement of the
            [BoostGraph] concept.

            *Requirements:* `vs` is an object whose type `VS` is a refinement of the
            [SgiSequence] concept. The `value_type` of `VS` must be the `vertex_descriptor`
            of `G`.

            *Precondition:* The vertices in `vs` are arranged such that first vertex
            is connected to the second, and that is connected to the third, etc. The
            last vertex is connected to the the first.
        ]
    ]
]

[heading C++0x]
This concept is defined as:

    concept CycleVisitor<typename T>
    {
        typename graph_type;
        typename vertex_set_type;

        T::cycle(const vertex_set_type&, graph_type&);
    };

[endsect]
