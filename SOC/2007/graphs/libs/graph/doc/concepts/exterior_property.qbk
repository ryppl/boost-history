[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Exterior Property]
The `ExteriorProperty` concept defines requirements for the generic
declaration and initialization of exterior properties and their
proeprty maps for graphs. Exterior properties consist of two components:
a container that maps a descriptor to a property value and its property
map - the abstracted interface used by most Boost.Graph algorithms
for accessing vertex and edge properties.

[heading Notation]
The following expressions are used within this document:
[table
    [[Expression] [Description]]
    [[P] [An type modeling the `ExteriorProperty` concept.]]
]

[heading Associated Types]
[table
    [[Name] [Type] [Description]]
    [
        [Value Type]
        [`P::value_type`]
        [
            *Semantics:* The value type of the property map.

            *Requirements:* `value_type` must be [SgiAssignable] and
            [SgiDefaultConstructible].
        ]
    ]
    [
        [Value Type]
        [`P::key_type`]
        [
            *Semantics:* The key type of the property map. This type must be
            either an `edge_descriptor` or `vertex_descriptor`.

            *Requirements:* `key_type` must be [SgiCopyConstructible].
        ]
    ]
    [
        [Container Type]
        [`P::container_type`]
        [
            *Semantics:* The container type used to map objects of `key_type`
            to their associated property values of type `value_type`.

            *Requirements:* The container must be size-constructible in that
            it must have a constructor that takes a single argument: the number
            elements in the container.

            *Requirements:* The container type must implement the `operator []`
            function, taking an object of type `key_type` returning an object
            of type `value_type`.
        ]
    ]
    [
        [Property Map Type]
        [`P::map_type`]
        [
            *Semantics:* The property map type used to abstract the access
            graph properties.

            *Requirements:* `map_type` must model the  [BoostReadWritePropertyMap]
            concept.
        ]
    ]
]

[heading Expressions]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Property Map Initializer]
        [`make_property_map(c)`]
        [['unspecified]]
        [
            *Semantics:* The initializer function returns a value suitable for
            constructing the property map from the given container, `c`.

            *Requirements:* `c` is of type `P::container_type`.

            *Preconditions:* `c` is not empty.
        ]
    ]
]

[heading Complexity Guarantees]
The `P::container_type::operator []()` function must return, on average, in
constant time. The worst-case time is allowed to be linear with respect to
the number of keys.

[heading Models]
[boost_exterior_vertex_property]

[endsect]
