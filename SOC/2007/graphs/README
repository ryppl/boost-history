
= Notes =

== Distances ==
So there apparently, a lot of things that we can do with distance measures.
A distance measure is some measure of distance between two vertices - whether
it's based on edge weights, vertex weights, or just path length. Regardless,
everything we do is either based on a DistanceMap or a DistanceMatrix.

There are a couple of interesting call profiles for these measures. The first,
provides a vertex measure based on a DistanceMap. Models of this type simply
take the Graph and the DistanceMap and return a scalar value (maybe). There
can be other parameters to help genericize the operation. For example:

    double mean_geodesic(g, dist);

The second call profile is similar to that above except that it computes a
measure over a distance matrix. For example, we might have:

    double graph_mean_geodesic(g, dist);
    double graph_closeness(g);

These are actually kind of interesting since their operation varies a bit
based on the type of graph. For example, for undirected graphs, the total
number of possible edges is (n*(n-1)) / 2 so we'd average over that number. For
directed graphs, it should be n^2.

The third call profile takes a DistanceMatrix and computes a DistanceMap that
provides a measure computed over each vertices in the matrix. For examples:

    void eccentricities(g, dist, out);

Where dist is the matrix and out is the map. Essentially, these types of
functions are used to compute and assign computations of rows of values. The
idea with these types of functions is that its faster to run all-pairs shortest
paths than to brute force run shortest paths for each vertex (which would generally
be pretty slow).

== Property Matrices ==
A property matrix is like a property map except that it's value type is
another property map. Also like exterior properties, it's a two component
system. The first component is a two-way associative mapping between two
descriptors and a property value. The second part is the abstracted map
interface.
