[/
(C) Copyright Xiaogang Zhang 2006.
Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[#bessel_integer]

[section Bessel Functions of Integer Order]

[#bessel_0]

[section Bessel Functions of Order 0]

[caution _caution]

[heading Synopsis]

``
  #include <boost/math/special_functions/bessel_j0.hpp>

  namespace boost { namespace math {

  template <typename T>
  T bessel_j0(T x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_y0.hpp>

  namespace boost { namespace math {

  template <typename T>
  T bessel_y0(T x)

  }} // namespaces
``

[heading Description and Implementation]

Bessel functions of order 0 are building blocks of Bessel functions
of integer order. Moreover, they are commonly used and deserve to be
implemented separately at their own right. Most numerical libraries
include them as independent functions.

The function domains are ['_J0(x)]: ([^-_inf, _inf]), ['_Y0(x)]: ([^0, _inf]).
Note ['_J0(x)] is even function.

[$plots/bessel_0.png]

The algorithms consist of minimax rational approximations on
root-bracketing intervals for small ['|x|] and Hankel asymptotic
expansion for large ['|x|]. The coefficients of them are from
[[link 9]] and [[link 11]] respectively.

[heading Testing]

The test driver calculates relative errors and the following table
lists some typical values.

[table
[[Function] [float] [double] [long double]]
[[`bessel_j0(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -20], [pow 10 -19]]]
[[`bessel_y0(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16]] [~ [pow 10 -17]]]
]

When ['|x|] becomes large ( > [pow 10 4] ), the relative error
grows rapidly. ['|x|] = [pow 10 5] can have relative error 4 or 5
magnitudes higher than that of ['|x|] = 10. Fortunately, this is
where the function value approaches zero, so the absolute error
is actually quite small.

[endsect]

[#bessel_1]

[section Bessel Functions of Order 1]

[caution _caution]

[heading Synopsis]

``
  #include <boost/math/special_functions/bessel_j1.hpp>

  namespace boost { namespace math {

  template <typename T>
  T bessel_j1(T x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_y1.hpp>

  namespace boost { namespace math {

  template <typename T>
  T bessel_y1(T x)

  }} // namespaces
``

[heading Description and Implementation]

Bessel functions of order 1 are building blocks of Bessel functions
of integer order. Moreover, they are commonly used and deserve to be
implemented separately at their own right. Most numerical libraries
include them as independent functions.

The function domains are ['_J1(x)]: ([^-_inf, _inf]), ['_Y1(x)]: ([^0, _inf]).
Note ['_J1(x)] is even function.

[$plots/bessel_1.png]

The algorithms consist of minimax rational approximations on
root-bracketing intervals for small ['|x|] and Hankel asymptotic
expansion for large ['|x|]. The coefficients of them are from
[[link 9]] and [[link 11]] respectively.

[heading Testing]

The test driver calculates relative errors and the following table
lists some typical values.

[table
[[Function] [float] [double] [long double]]
[[`bessel_j1(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -20], [pow 10 -19]]]
[[`bessel_y1(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -18], [pow 10 -17]]]
]

When ['|x|] becomes large ( > [pow 10 4] ), the relative error
grows rapidly. ['|x|] = [pow 10 5] can have relative error 4 or 5
magnitudes higher than that of ['|x|] = 10. Fortunately, this is
where the function value approaches zero, so the absolute error
is actually quite small.

[endsect]

[#bessel_n]

[section Bessel Functions of Order n]

[caution _caution]

[heading Synopsis]

``
  #include <boost/math/special_functions/bessel_jn.hpp>

  namespace boost { namespace math {

  template <typename T>
  T bessel_jn(T x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_yn.hpp>

  namespace boost { namespace math {

  template <typename T>
  T bessel_yn(T x)

  }} // namespaces
``

[heading Description and Implementation]

Bessel functions of order n are calculated from [link bessel_0
Bessel functions of order 0] and [link bessel_1 Bessel functions
of order 1], with the help of [link bessel_recur recurrence
relations].

The function domains are ['_Jn(x)]: ([^-_inf, _inf]), ['_Yn(x)]: ([^0, _inf]).
Note ['_Jn(x)] is even function when ['n] is even and odd function
when ['n] is odd.

[$plots/bessel_n.png]

The forward recursion itself is stable for ['n < |x|] and unstable
for ['n >= |x|]. ['_Yn(x)] is the dominant solution of the
[link bessel_recur recurrence relation], thus the forward recursion
is always OK for it. However, ['_Jn(x)] is the minimal solution,
so in unstable regions, Miller's algorithm [[link 1]] [[link 2]]
has to be used.

[heading Testing]

The test driver calculates relative errors and the following table
lists some typical values.

[table
[[Function] [float] [double] [long double]]
[[`bessel_jn(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -20], [pow 10 -19]]]
[[`bessel_yn(x)`] [~ [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -19], [pow 10 -17]]]
]

When ['|x|] becomes large ( > [pow 10 4] ), the relative error
grows rapidly. ['|x|] = [pow 10 5] can have relative error 4
magnitudes higher than that of ['|x|] = 10. Fortunately, this is
where the function value approaches zero, so the absolute error
is actually quite small. ['n] does not seem to have a large
impact on accuracy as ['|x|] does.

[endsect]

[endsect]
