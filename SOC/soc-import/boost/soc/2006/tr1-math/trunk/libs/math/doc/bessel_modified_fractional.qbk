[/
Copyright (c) 2006 Xiaogang Zhang

This work may be used under either of the following two licences:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. OF SUCH DAMAGE.

Or:

Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[#bessel_modified_fractional]

[section Modified Bessel Functions of Fractional Order]

[caution _caution]

[heading Synopsis]

``
  #include <boost/math/special_functions/bessel_iv.hpp>

  namespace boost { namespace math {

  template <typename T>
  inline T bessel_iv(T v, T x)

  inline float cyl_bessel_if(float nu, float x)

  inline double cyl_bessel_i(double nu, double x)

  inline long double cyl_bessel_il(long double nu, long double x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_kv.hpp>

  namespace boost { namespace math {

  template <typename T>
  inline T bessel_kv(T v, T x)

  inline float cyl_bessel_kf(float nu, float x)

  inline double cyl_bessel_k(double nu, double x)

  inline long double cyl_bessel_kl(long double nu, long double x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_ik.hpp>

  namespace boost { namespace math {

  template <typename T>
  int bessel_ik(T v, T x, T* I, T* K)

  }} // namespaces
``

[heading Description and Implementation]

Modified Bessel functions of fractional order (i.e. order _nu is
any real number) are much harder to compute than [link
tr1_math.modified_bessel_functions.modified_bessel_functions_of_integer_order
modified Bessel functions of integer order]. Though [link mbessel_recur
recurrence relations] are the same, the difficulty lies in the
initial values.

The function domains are ['[I _nu](x)]: ([^0, _inf]), ['[K _nu](x)]: ([^0, _inf]).

[$plots/mbessel_v.png]

To get the initial values, we first normalize ['_nu] to [[^0, _inf])
with the help of [link mbessel_reflect reflection formulas]. Let
['_mu] = ['_nu] [^-] \[['_nu] + 1/2\] where \[['x]\] is the floor
function, then ['_mu] is the fractional part of ['_nu] such that
|['_mu]| <= 1/2 (we need this for convergence later). The idea is to
calculate ['[K _mu](x)], ['[K _mu+1](x)] and use them to obtain
['[I _nu](x)], ['[K _nu](x)].

The algorithm is proposed by Temme [[link 18]], which needs two
continued fractions as well as the [link mbessel_wronskian Wronskian].

[$equations/mbessel11.png]

[$equations/mbessel12.png]

The continued fractions are computed using the modified Lentz's method
[[link 13]]. Their convergence rates depend on ['x], therefore we need
different strategies for large ['x] and small ['x].

['x > v], CF1 needs O(['x]) iterations to converge, CF2 converges rapidly

['x <= v], CF1 converges rapidly, CF2 fails to converge when ['x] [^->] 0

When ['x] is large (['x] > 2), both continued fractions converge (CF1
may be slow for really large ['x]). ['[K _mu]], ['[K _mu+1]]
can be calculated by

[$equations/mbessel13.png]

where

[$equations/mbessel14.png]

['S] is also a series that is summed along with CF2, see [[link 19]].

When ['x] is small (['x] <= 2), CF2 convergence may fail (but CF1
works very well). The solution here is Temme's series:

[$equations/mbessel15.png]

where

[$equations/mbessel16.png]

[''''f<subscript>k</subscript>'''] and [''''h<subscript>k</subscript>''']
are also computed by recursions (involving gamma functions), but the
formulas are a little complicated, readers are refered to [[link 18]].
Note Temme's series converge only for |['_mu]| <= 1/2.

['[K _nu](x)] is then calculated from the forward [link mbessel_recur
recurrence], so is ['[K _nu+1](x)]. With these two values and
[''''f<subscript>&nu;</subscript>'''], [link bessel_wronskian
Wronskian] yields ['[I _nu](x)] directly without backward
[link mbessel_recur recurrence].

[note Analogous to `bessel_jy(v, x, &J, &Y)`, `bessel_ik(v, x, &I, &K)`
computes ['[I _nu]] and ['[K _nu]] simultaneously.]

[heading Testing]

The test driver calculates relative errors and the following table
lists some typical values.

[table
[[Function] [float] [double] [long double]]
[[`bessel_iv(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -18], [pow 10 -17]]]
[[`bessel_kv(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -18], [pow 10 -17]]]
]

The accuracy may be sensitive to data type precision. For example,
the relative errors of ['[I -10.0003](0.01)] and ['[K -5.5](100)]
are about [pow 10 -3] and [pow 10 -1] when `float` is used. But
they reduce to [pow 10 -12] and [pow 10 -16] for `double`, and
[pow 10 -16] and [pow 10 -17] for `long double`.

[endsect]
