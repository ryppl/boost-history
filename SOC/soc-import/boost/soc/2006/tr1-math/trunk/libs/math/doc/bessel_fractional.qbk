[/
Copyright (c) 2006 Xiaogang Zhang

This work may be used under either of the following two licences:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. OF SUCH DAMAGE.

Or:

Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[#bessel_fractional]

[section Bessel Functions of Fractional Order]

[caution _caution]

[heading Synopsis]

``
  #include <boost/math/special_functions/bessel_jv.hpp>

  namespace boost { namespace math {

  template <typename T>
  inline T bessel_jv(T v, T x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_yv.hpp>

  namespace boost { namespace math {

  template <typename T>
  inline T bessel_yv(T v, T x)

  }} // namespaces
``

``
  #include <boost/math/special_functions/bessel_jy.hpp>

  namespace boost { namespace math {

  template <typename T>
  int bessel_jy(T v, T x, T* J, T* Y)

  }} // namespaces
``

[heading Description and Implementation]

Bessel functions of fractional order (i.e. order _nu is any real
number) are much harder to compute than
[link tr1_math.bessel_functions.bessel_functions_of_integer_order
Bessel functions of integer order]. Though [link bessel_recur
recurrence relations] are the same, the difficulty lies in the
initial values.

The function domains are ['_Jv(x)]: ([^0, _inf]), ['_Yv(x)]: ([^0, _inf]).

[$plots/bessel_v.png]

The algorithms consist of minimax rational approximations on
root-bracketing intervals for small ['|x|] and Hankel asymptotic
expansion for large ['|x|]. The coefficients of them are from
[[link 9]] and [[link 11]] respectively.

[heading Testing]

The test driver calculates relative errors and the following table
lists some typical values.

[table
[[Function] [float] [double] [long double]]
[[`bessel_j0(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16], [pow 10 -15]] [~ [pow 10 -20], [pow 10 -19]]]
[[`bessel_y0(x)`] [~ [pow 10 -8], [pow 10 -7]] [~ [pow 10 -16]] [~ [pow 10 -17]]]
]

When ['|x|] becomes large ( > [pow 10 4] ), the relative error
grows rapidly. ['|x|] = [pow 10 5] can have relative error 4 or 5
magnitudes higher than that of ['|x|] = 10. Fortunately, this is
where the function value approaches zero, so the absolute error
is actually quite small.

[endsect]
