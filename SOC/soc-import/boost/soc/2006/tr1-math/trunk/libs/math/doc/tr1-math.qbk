[/
Copyright (c) 2006 Xiaogang Zhang

This work may be used under either of the following two licences:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. OF SUCH DAMAGE.

Or:

Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[article TR1-Math
    [quickbook 1.4]
    [version 1.0]
    [authors [Zhang, Xiaogang]]
    [copyright 2006 Xiaogang Zhang]
    [purpose C++ TR1 Mathematical Special Functions]
    [license
This work may be used under either of the following two licences:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. OF SUCH DAMAGE.

Or:

Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
    ]
    [category math]
    [last-revision $Date: 2006/08/10 16:14:40$]
]

[def _Boost [@http://www.boost.org/ Boost]]
[def _TR1 [@http://www.open-std.org/JTC1/SC22/WG21/ TR1]]
[def _NR [@http://www.nr.com/ NR]]
[def _GSL [@http://www.gnu.org/software/gsl/ GSL]]
[def _CEPHES [@http://www.netlib.org/cephes/ CEPHES]]
[def _SLATEC [@http://www.netlib.org/slatec/ SLATEC]]
[def _SPECFUN [@http://www.netlib.org/specfun/ SPECFUN]]
[def _Mathematica [@http://www.wolfram.com/ Mathematica]]
[def _IMSL [@http://www.vni.com/products/imsl/ IMSL]]
[def _NAG [@http://www.nag.co.uk/ NAG]]

[def _mu '''&mu;''']
[def _nu '''&nu;''']
[def _inf '''&infin;''']
[def _J0 '''J<subscript>0</subscript>''']
[def _J1 '''J<subscript>1</subscript>''']
[def _Jn '''J<subscript>n</subscript>''']
[def _Jv '''J<subscript>&nu;</subscript>''']
[def _Y0 '''Y<subscript>0</subscript>''']
[def _Y1 '''Y<subscript>1</subscript>''']
[def _Yn '''Y<subscript>n</subscript>''']
[def _Yv '''Y<subscript>&nu;</subscript>''']

[def _caution This is not an official Boost library, it is a library under
              construction, the code is fully functional and robust, but
              interfaces, library structure, and function names may be
              changed without notice.]

[template pow[x y] [x]'''<superscript>'''[y]'''</superscript>&nbsp;''']

[section Introduction]

Ever since the introduction of C standard library about three decades
ago, the support for mathematical functions hasn't changed much. This
is also the case for C++. No matter in `<math.h>` or `<cmath>`, there
are only a handful of most basic functions. Many people believe it is
now necessary to enhance C++'s mathematical support in standard library.

The proposed ISO/IEC Technical Report (a.k.a. _TR1 [[link 12]]) on C++
library extensions addresses this issue: it adds 23 commonly used
special functions to `<cmath>` (see below for the complete list).
This library is an implementation of those functions. It's a part of
_Boost[footnote _Boost is an open source project that develops C++
extended libraries, ten of which are already accepted in _TR1 by C++
standard committee.] C++ library and is a project for Google Summer of
Code 2006.

[important Although some special functions can be defined on and take
values of complex numbers, in _TR1 specification and in our library only
real numbers are supported as far as users are concerned. Complex numbers
may be used in internal subroutines, but not in APIs. This also affects
the domain and range of some functions in the implementation.]

  namespace std {
  namespace tr1 {

  // [5.2.1.1] associated Laguerre polynomials:
  double assoc_laguerre(unsigned n, unsigned m, double x);
  float assoc_laguerref(unsigned n, unsigned m, float x);
  long double assoc_laguerrel(unsigned n, unsigned m, long double x);

  // [5.2.1.2] associated Legendre functions:
  double assoc_legendre(unsigned l, unsigned m, double x);
  float assoc_legendref(unsigned l, unsigned m, float x);
  long double assoc_legendrel(unsigned l, unsigned m, long double x);

  // [5.2.1.3] beta function:
  double beta(double x, double y);
  float betaf(float x, float y);
  long double betal(long double x, long double y);

  // [5.2.1.4] (complete) elliptic integral of the first kind:
  double comp_ellint_1(double k);
  float comp_ellint_1f(float k);
  long double comp_ellint_1l(long double k);

  // [5.2.1.5] (complete) elliptic integral of the second kind:
  double comp_ellint_2(double k);
  float comp_ellint_2f(float k);
  long double comp_ellint_2l(long double k);

  // [5.2.1.6] (complete) elliptic integral of the third kind:
  double comp_ellint_3(double k, double nu);
  float comp_ellint_3f(float k, float nu);
  long double comp_ellint_3l(long double k, long double nu);

  // [5.2.1.7] confluent hypergeometric functions:
  double conf_hyperg(double a, double c, double x);
  float conf_hypergf(float a, float c, float x);
  long double conf_hypergl(long double a, long double c, long double x);

  // [5.2.1.8] regular modified cylindrical Bessel functions:
  double cyl_bessel_i(double nu, double x);
  float cyl_bessel_if(float nu, float x);
  long double cyl_bessel_il(long double nu, long double x);

  // [5.2.1.9] cylindrical Bessel functions (of the first kind):
  double cyl_bessel_j(double nu, double x);
  float cyl_bessel_jf(float nu, float x);
  long double cyl_bessel_jl(long double nu, long double x);

  // [5.2.1.10] irregular modified cylindrical Bessel functions:
  double cyl_bessel_k(double nu, double x);
  float cyl_bessel_kf(float nu, float x);
  long double cyl_bessel_kl(long double nu, long double x);

  // [5.2.1.11] cylindrical Neumann functions;
  // cylindrical Bessel functions (of the second kind):
  double cyl_neumann(double nu, double x);
  float cyl_neumannf(float nu, float x);
  long double cyl_neumannl(long double nu, long double x);

  // [5.2.1.12] (incomplete) elliptic integral of the first kind:
  double ellint_1(double k, double phi);
  float ellint_1f(float k, float phi);
  long double ellint_1l(long double k, long double phi);

  // [5.2.1.13] (incomplete) elliptic integral of the second kind:
  double ellint_2(double k, double phi);
  float ellint_2f(float k, float phi);
  long double ellint_2l(long double k, long double phi);

  // [5.2.1.14] (incomplete) elliptic integral of the third kind:
  double ellint_3(double k, double nu, double phi);
  float ellint_3f(float k, float nu, float phi);
  long double ellint_3l(long double k, long double nu, long double phi);

  // [5.2.1.15] exponential integral:
  double expint(double x);
  float expintf(float x);
  long double expintl(long double x);

  // [5.2.1.16] Hermite polynomials:
  double hermite(unsigned n, double x);
  float hermitef(unsigned n, float x);
  long double hermitel(unsigned n, long double x);

  // [5.2.1.17] hypergeometric functions:
  double hyperg(double a, double b, double c, double x);
  float hypergf(float a, float b, float c, float x);
  long double hypergl(long double a, long double b, long double c, long double x);

  // [5.2.1.18] Laguerre polynomials:
  double laguerre(unsigned n, double x);
  float laguerref(unsigned n, float x);
  long double laguerrel(unsigned n, long double x);

  // [5.2.1.19] Legendre polynomials:
  double legendre(unsigned l, double x);
  float legendref(unsigned l, float x);
  long double legendrel(unsigned l, long double x);

  // [5.2.1.20] Riemann zeta function:
  double riemann_zeta(double);
  float riemann_zetaf(float);
  long double riemann_zetal(long double);

  // [5.2.1.21] spherical Bessel functions (of the first kind):
  double sph_bessel(unsigned n, double x);
  float sph_besself(unsigned n, float x);
  long double sph_bessell(unsigned n, long double x);

  // [5.2.1.22] spherical associated Legendre functions:
  double sph_legendre(unsigned l, unsigned m, double theta);
  float sph_legendref(unsigned l, unsigned m, float theta);
  long double sph_legendrel(unsigned l, unsigned m, long double theta);

  // [5.2.1.23] spherical Neumann functions;
  // spherical Bessel functions (of the second kind):
  double sph_neumann(unsigned n, double x);
  float sph_neumannf(unsigned n, float x);
  long double sph_neumannl(unsigned n, long double x);

  } // namespace tr1
  } // namespace std

Some may ask why another numerical library when there are many available.
It's true that there are already a number of implementations of the _TR1
special functions, but few can fit our needs well. First, many libraries
are proprietary commercial products (_IMSL, _NAG, _Mathematica). Then,
among open source codes some are pretty dated Fortran routines such as
_SLATEC [[link 20]] and _SPECFUN [[link 9]]. For the rest of them (_GSL
[[link 10]], _NR [[link 15]], _CEPHES [[link 14]]), most are written in
C, which lacks support for templates. Thus the implementation is tied
with certain data type, for example, _GSL uses `double` type almost
exclusively. Our library, in contrast, is based on STL and can handle
any existing floating-point types - `float`, `double`, `long double` -
as well as their future extensions.

[note The testing of our implementations are currently spot checks
against values obtained from [@http://functions.wolfram.com/]. Ideally
arbitrary precision calculations should be carried out for testing.
This is a TODO part of the project and will be completed sometime later.
\n\n
The main testing platform is x86 + CYGWIN 1.5.19 + gcc 3.4.1. The codes
are also tested on Win32 using VC++ 7.1. However, VC++ 7.1 does not
support type `long double`, so from here all test results come from
x86 CYGWIN gcc unless otherwise noted.]

[endsect]

[section Bessel Functions]

[include bessel_introduction.qbk]
[include bessel_integer.qbk]
[include bessel_fractional.qbk]

[endsect]

[section Modified Bessel Functions]

[include bessel_modified_introduction.qbk]
[include bessel_modified_integer.qbk]
[include bessel_modified_fractional.qbk]

[endsect]

[section References]

# [#1] M. Abramowitz and I.A. Stegun, ['Handbook of Mathematical Functions],
    Dover Publications, New York, 1972. \n\n
# [#2] F.S. Acton, ['Numerical Methods that Work],
    The Mathematical Association of America, Washington, 1997. \n\n
# [#3] A.R. Barnett et al, ['Coulomb wave functions for all real \eta and
    \varrho], Computer Physics Communications, vol 8, 377 (1974). \n\n
# [#4] J.M. Blair and C.A. Edwards, ['Stable rational minimax approximations
    to the modified Bessel functions I_0(x) and I_1(x)], Atomic Energy of Canada
    Limited Report 4928, Chalk River, 1974. \n\n
# [#5] B.C. Carlson, ['Computing elliptic integrals by duplication],
    Numerische Mathematik, vol 33, 1 (1979). \n\n
# [#6] B.C. Carlson, ['Elliptic Integrals of the First Kind],
    SIAM Journal on Mathematical Analysis, vol 8, 231 (1977). \n\n
# [#7] B.C. Carlson, ['Short Proofs of Three Theorems on Elliptic Integrals],
    SIAM Journal on Mathematical Analysis, vol 9, 524 (1978). \n\n
# [#8] B.C. Carlson and E.M. Notis, ['ALGORITHM 577: Algorithms for Incomplete
    Elliptic Integrals], ACM Transactions on Mathematmal Software,
    vol 7, 398 (1981). \n\n
# [#9] W.J. Cody, ['ALGORITHM 715: SPECFUN - A Portable FORTRAN Package of
    Special Function Routines and Test Drivers], ACM Transactions on Mathematmal
    Software, vol 19, 22 (1993). \n\n
# [#10] M. Galassi et al, ['GNU Scientific Library Reference Manual],
    [@http://www.gnu.org/software/gsl/manual/], 2006. \n\n
# [#11] J.F. Hart et al, ['Computer Approximations],
    John Wiley & Sons, New York, 1968. \n\n
# [#12] ISO/IEC, ['Draft Technical Report on C++ Library Extensions],
    [@http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1836.pdf], 2005. \n\n
# [#13] W.J. Lentz, ['Generating Bessel functions in Mie scattering calculations
    using continued fractions], Applied Optics, vol 15, 668 (1976). \n\n
# [#14] S. Moshier, ['Methods and Programs for Mathematical Functions],
    Ellis Horwood Ltd, Chichester, 1989. \n\n
# [#15] W.H. Press et al, ['Numerical Recipes in C], 2nd edition,
    Cambridge University Press, Cambridge, 1992. \n\n
# [#16] A.E. Russon and J.M. Blair, ['Rational function minimax approximations
    for the modified Bessel functions K_0(x) and K_1(x)], Atomic Energy of Canada
    Limited Report 3461, Chalk River, 1969. \n\n
# [#17] N.M. Temme, ['On the numerical evaluation of the ordinary bessel function
    of the second kind], Journal of Computational Physics, vol 21, 343 (1976). \n\n
# [#18] N.M. Temme, ['On the numerical evaluation of the modified bessel function
    of the third kind], Journal of Computational Physics, vol 19, 324 (1975). \n\n
# [#19] I.J. Thompson and A.R. Barnett, ['Coulomb and Bessel functions of complex
    arguments and order], Journal of Computational Physics, vol 64, 490 (1986). \n\n
# [#20] W.H. Vandevender and K.H. Haskell, ['The SLATEC mathematical subroutine
    library], ACM SIGNUM Newsletter, vol 17, 16 (1982). \n\n

[endsect]
