[/
 / Boost.Process
 / Pending work chapter.
 /
 / Copyright (c) 2006 Julio M. Merino Vidal.
 /
 / This code may be used under either of the following two licences:
 /
 /      Permission is hereby granted, free of charge, to any person
 /      obtaining a copy of this software and associated documentation
 /      files (the "Software"), to deal in the Software without
 /      restriction, including without limitation the rights to use,
 /      copy, modify, merge, publish, distribute, sublicense, and/or
 /      sell copies of the Software, and to permit persons to whom the
 /      Software is furnished to do so, subject to the following
 /      conditions:
 /
 /      The above copyright notice and this permission notice shall be
 /      included in all copies or substantial portions of the Software.
 /
 /      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 /      EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 /      OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 /      NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 /      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 /      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 /      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 /      OTHER DEALINGS IN THE SOFTWARE. OF SUCH DAMAGE.
 /
 / Or:
 /
 /      Distributed under the Boost Software License, Version 1.0.
 /      (See accompanying file LICENSE_1_0.txt or copy at
 /      http://www.boost.org/LICENSE_1_0.txt)
 /]

[/ ---------------------------------------------------------------------- ]

[section Pending work]

This chapter contains a list of pending items in the library that should be
addressed before it can be sent for a serious/formal review.  Some of these
are a simple matter of programming but others will require more
consideration to decide the best way to solve them.

[section Code]

* Integrate with [@http://asio.sourceforge.net/ Boost.Asio] to permit
  asynchronous notification of child process termination and availability
  of new data in output streams.

* Add the ability to force/request the termination of a child process.

* Make it possible to specify a timeout when waiting for child processes
  to terminate.

* Parametrize classes that use strings to support wide characters.

* Parametrize `wait` methods to return a custom [link
  boost_process.concepts.exit_status Status] implementation?  If doing
  this add a `posix_status` class and simplify the existing `status` one.

* Make the `detail::launcher_base` a public class?  It can be useful to
  end users if they decide to implement a custom launcher.

* Replace custom `system_error` with Boost.System's homologous when it is
  available.

* Abstract `cstdlib`'s `EXIT_SUCCESS` and `EXIT_FAILURE`.

* Rename `command_line::argument` method; and add `operator<<`?

* Make `launcher::start` a free function.  Need to rename `launcher` to
  `context`.

* Make `child::wait` return a constant object.

* Make `status`' constructor private.

* Remove `command_line::get_arguments`.

* Separate the executable from the `command_line` class into its own
  object.

[endsect]

[section Documentation]

* Add a ['Design decisions] chapter.

* Fix links to inherited methods.  Don't know which is the best approach
  to address this.

* Add some diagrams to illustrate interprocess communication.

* Shorten "Motivation" section?

* `command_line`'s constructor: rename `firstarg` parameter to avoid
  confusion with subsequent parameters.

[endsect]

[/ ---------------------------------------------------------------------- ]

[endsect]
