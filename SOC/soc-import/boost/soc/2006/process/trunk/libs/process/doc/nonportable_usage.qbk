[/
 / Boost.Process
 / Platform-specific usage chapter.
 /
 / Copyright (c) 2006 Julio M. Merino Vidal.
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / http://www.boost.org/LICENSE_1_0.txt.)
 /]

[/ ---------------------------------------------------------------------- ]

[section Platform-specific usage]

The [link boost_process.usage usage chapter] focused on explaining all
features provided by Boost.Process that are available under all [link
boost_process.platforms_and_compilers.supported_platforms supported
platforms].  However, those features may be too limited when portability
across different platforms is not a determining factor; in such cases, you
will want to access the full power of the underlying operating system to
manage processes.  Boost.Process lets you do so through specialized classes
__mdash__ even if they are not enough for your use case, you can always
design your own.

This chapter describes all platform-specific features available in
Boost.Process.  Keep in mind that using them will lower your application's
portability.

[/ ---------------------------------------------------------------------- ]

[section The POSIX platform]

[/ ---------------------------------------------------------------------- ]

[section Interprocess communication]

As we saw [link boost_process.usage.interprocess_communication earlier] in
the usage chapter, all platforms supported by Boost.Process provide three
communication channels to each process.  Although these are enough in
almost all use cases, some applications can take advantage of more data
flows.  For example, they may support multiple input streams so that
external processes can feed in different types of data, or emit messages
through more than two output streams to clearly separate their purpose.

The POSIX platform allows the configuration of more than three
communication channels thanks to the way `fork(2)` works: ['any file
descriptor] can be used to connect two different processes through an
anonymous pipe.  Boost.Process can take advantage of such feature and
configure more than three data flows by using the specialized [classref
boost::process::posix_launcher POSIX launcher] and [classref
boost::process::posix_child POSIX child] classes, both based on the generic
implementations.

Before continuing, it is interesting to remember that POSIX systems
identify communication channel with plain integers because they are regular
file descriptors.  The three standard communication channels are typically
attached to fixed file descriptors and the `cstdlib` standard header
provides constants to refer to them; these constants shall be used instead
of the integer values to achieve maximum portability and clarity.

[table
    [[Channel] [Symbolic constant] [Typical value]]
    [[Standard input] [`STDIN_FILENO`] [0]]
    [[Standard output] [`STDOUT_FILENO`] [1]]
    [[Standard error] [`STDERR_FILENO`] [2]]
]

The POSIX launcher adds two additional methods to the generic launcher that
allow the user to specify the behavior of non-standard file descriptors;
these are [memberref boost::process::posix_launcher::set_input_behavior
posix_launcher::set_input_behavior] and [memberref
boost::process::posix_launcher::set_output_behavior
posix_launcher::set_output_behavior].  The former is used to configure a
child's input stream and the latter an output one.

Once the streams are configured and the child process is running, the
caller access the child's streams as it did with the generic child.
However, non-standard streams are only available through two additional
methods: [memberref boost::process::posix_child::get_input
posix_child::get_input] and [memberref
boost::process::posix_child::get_output posix_child::get_output].

Non-standard streams can also be merged as done with __stderr__ and
__stdout__ in the generic case.  This functionality is provided through the
[memberref boost::process::posix_launcher::merge_outputs
posix_launcher::merge_outputs] method.

All these methods can be seen as general cases of those provided by the
generic launcher.  The following table illustrates the equivalences:

[table
    [[Portable call] [Equivalent to]]

    [[`launcher::set_stdin_behavior(b)`]
     [[memberref boost::process::posix_launcher::set_input_behavior
       posix_launcher::set_input_behavior(STDIN_FILENO, b)]]
    ]

    [[`launcher::set_stdout_behavior(b)`]
     [[memberref boost::process::posix_launcher::set_output_behavior
       posix_launcher::set_output_behavior(STDOUT_FILENO, b)]]
    ]

    [[`launcher::set_stderr_behavior(b)`]
     [[memberref boost::process::posix_launcher::set_output_behavior
       posix_launcher::set_output_behavior(STDERR_FILENO, b)]]
    ]

    [[`launcher::set_merge_out_err(true)`]
     [[memberref boost::process::posix_launcher::merge_outputs
       posix_launcher::merge_outputs(STDERR_FILENO, STDOUT_FILENO)]]
    ]

    [[`child::get_stdin()`]
     [[memberref boost::process::posix_child::get_input
       posix_child::get_input(STDIN_FILENO)]]
    ]

    [[`child::get_stdout()`]
     [[memberref boost::process::posix_child::get_output
       posix_child::get_output(STDOUT_FILENO)]]
    ]

    [[`child::get_stderr()`]
     [[memberref boost::process::posix_child::get_output
       posix_child::get_output(STDERR_FILENO)]]
    ]

]

The following example program illustrates the use of these functions.  It
uses the D-BUS daemon application because it allows to print useful
information to two non-standard streams (3 and 4 in the code below).  The
example utility captures these messages and provides them to the user:

[include ../example/posix_communication.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Process credentials]

Processes under POSIX operating systems carry several properties that
describe their security credentials.  All of these can be configured
through the POSIX launcher prior startup of a new process, as seen in the
following table:

[table
    [[Concept] [Abbreviation] [POSIX launcher method]]

    [[Real and effective user IDs] [UID]
     [[memberref boost::process::posix_launcher::set_uid
       posix_launcher::set_uid(uid)]]
    ]

    [[Effective user ID] [EUID]
     [[memberref boost::process::posix_launcher::set_euid
       posix_launcher::set_euid(uid)]]
    ]

    [[Real and effective group IDs] [GID]
     [[memberref boost::process::posix_launcher::set_gid
       posix_launcher::set_gid(gid)]]
    ]

    [[Effective group ID] [EGID]
     [[memberref boost::process::posix_launcher::set_egid
       posix_launcher::set_egid(gid)]]
    ]
]

Note that changing the security credentials of a process is a privileged
operation generally restricted to the super user.  For more information you
should see your operating system's documentation on the `setuid(2)`,
`seteuid(2)`, `setgid(2)` and `setegid(2)` system calls.

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Root directory change]

Every process in a POSIX system has a ['root directory], used to resolve
paths aside from the current working directory.  This root directory is
used to restrict processes to ['view] only a part of the global file
system: the process is not allowed to see the real file system's root
directory; instead it sees the specified root directory as if it really
were the file system's root.  See the `chroot(2)` system call documentation
for more details.

The specialized [classref boost::process::posix_launcher POSIX launcher]
supports chaning the root directory of a new process, always assuming that
sufficient privileges are available (i.e. the caller must be the super
user).  This is done through the [memberref
boost::process::posix_launcher::set_chroot posix_launcher::set_chroot]
method.

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Process termination]

The POSIX's `wait(2)` family of system calls returns a lot of information
about the status of a finalized process, not only the exit status code
provided on a normal exit.  This information includes additional
termination reasons such as if the process dumped a core file, if it
exited due an external signal, etc.

The information described above can be queried through the [classref
boost::process::posix_status posix_status] class.  This is built on top of
the regular status class and includes additional methods to query all
additional details.  It can be used anywhere a `status` object is created
thanks to its conversion constructor.  For example:

[include ../example/posix_status.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section The Win32 platform]

[/ ---------------------------------------------------------------------- ]

[section Startup information]

The Win32 `CreateProcess` system call receives a `STARTUPINFO` object that
contains multiple details on how to configure the new process.  Among these
are the handles for the three standard communication channels (internally
set up by the library), hints to set up the application's main window, etc.

The [classref boost::process::win32_launcher Win32-specific launcher]
provides mechanisms to provide some of this platform-specific information
to the new process.  This class' constructor receives a pointer to an
already initialized `STARTUPINFO` object that is later passed to the
`CreateProcess` call.  If no such object is provided, the launcher behaves
as the [classref boost::process::launcher generic launcher].

The example below demonstrates this feature.  It relies on features
provided by Win32 operating systems to start a GUI process with hints on
how to create the main window.  The example passes the suggested window
position as well as size and then waits until the new process terminates.

[include ../example/win32_startup.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Process information]

The Win32 `CreateProcess` system call starts a new process and returns a
handle and an identifier for both the application's process and its main
thread.  Due to portability restrictions, the generic child implementation
does not allow access to this information but, fortunately, the
Win32-speficic child does.  The [classref boost::process::win32_child
win32_child] class provides access to the information returned by the
`CreateProcess` system call as described below:


[table
    [[`PROCESS_INFORMATION` field] [Win32 child method]]

    [[hProcess]
     [[memberref boost::process::win32_child::get_handle
       win32_child::get_handle]]
    ]

    [[dwProcessId]
     [[memberref boost::process::win32_child::get_id
       win32_child::get_id]]
    ]

    [[hThread]
     [[memberref boost::process::win32_child::get_primary_thread_handle
       win32_child::get_primary_thread_handle]]
    ]

    [[dwThreadId]
     [[memberref boost::process::win32_child::get_primary_thread_id
       win32_child::get_primary_thread_id]]
    ]
]

Win32 child objects can only be constructed by using the [classref
boost::process::win32_launcher Win32-specific launcher] even if the user
does not need any of the extra features provided by that class.

The following example demonstrates how a program can retrieve all the
information returned by Win32's `CreateProcess` system call; that is: the
process' and primary thread's identifier and handle.  It relies on the
Win32-specific launcher and child classes to be able to access this
information:

[include ../example/win32_child.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[endsect]

[/ ---------------------------------------------------------------------- ]

[endsect]
