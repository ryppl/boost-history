[/
 / Boost.Process
 / Design decisions chapter.
 /
 / Copyright (c) 2006 Julio M. Merino Vidal.
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / http://www.boost.org/LICENSE_1_0.txt.)
 /]

[/ ---------------------------------------------------------------------- ]

[section Design decisions]

This section contains a list of design decisions that were taken into
account when implementing this library.

[/ XXX I guess that most of the text below, if not all, could simply go
into the Features chapter if properly reworded...]

[blurb [*Important note regarding the text below]: Please keep in mind that
this library is under heavy development.  Although all the notes here speak
as if the code already exists, it really does not. ]  [/ XXX Remove when
the library is functional enough. ]

[/ ---------------------------------------------------------------------- ]

[section Quoting problems]

It is common knowledge that executing processes can easily lead to security
holes if argument quoting is not properly handled.  If the user is allowed
to specify the executable's name, an attacker could trick him to execute
something different than he expected by embedding spaces in the file name.
This dangerous behavior is exposed by both the
'''<function>system</function> ''' POSIX call or the
'''<function>CreateProcess</function> ''' Windows function in its second
argument, as both take a single string that represents the full command
line to execute.

The library exposes different APIs to avoid this problem by letting the
developer pass each command line argument in its own data block.  If need
be, the library will then handle quoting according to the underlying
operating system.

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Redirection and pipelines]

Operator overloading is useful to implement domain-specific languages.
Process management can benefit from this fact to let the developer manage
different processes in a way that is similar to the shell's command line.
Developers tend to be very familiar with output redirection and pipeline
construction.

A shell traditionally uses three operators to handle redirections:
'''<literal>&lt;</literal>''', '''<literal>&gt;</literal> ''' and
'''<literal>|</literal>''': it needs use three different ones because its
non-strictly typed nature.  However, the C++ API can simply go by using a
single binary operator that behaves differently depending on its left and
right arguments' types.

The '''<literal>|</literal> ''' operator was chosen because it better
represents the concept of a shell pipeline and is familiar to both users
and developers.

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Blocking operations]

Many operations involving process management may involve blocking for long
periods of time.  Even the simplest process-spawning routine may block due
to its interaction with the file system.  The library provides mechanisms
to indicate the user that this may happen.

[endsect]

[/ ---------------------------------------------------------------------- ]

[endsect]
