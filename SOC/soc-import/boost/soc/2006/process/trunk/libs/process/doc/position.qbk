[/
 / Boost.Process
 / Project position chapter.
 /
 / Copyright (c) 2006 Julio M. Merino Vidal.
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / http://www.boost.org/LICENSE_1_0.txt.)
 /]

[/ ---------------------------------------------------------------------- ]

[section Project position]

[section History of changes]

[section Version 0.2 (STILL UNDER DEVELOPMENT)]

* Relicensed the code under the [@http://www.boost.org/LICENSE_1_0.txt
  Boost Software License 1.0] ['only].  The first version was available
  under both this license and the MIT one only to comply with Summer of
  Code guidelines.

* The POSIX-specific bits of a child's exit status were split from the
  `status` class into a new `posix_status` class.

* The `status` and `children` constructors were made private to prevent
  accidental construction by the user.

* Fixed duplicate symbols when linking multiple compilation units that use
  the library.

* Fixed build with Visual C++ compilers older than 8.0 that do not provide
  the `strcpy_s` and similar safe functions.

* Removed the `command_line` class.  The user now specifies the executable
  path and its arguments separately, using any classes he wants (such as
  a standard string and a STL container).  This removes some black-box
  magic.

* Decoupled the launcher classes into context classes and free launch
  functions.  For example, the configuration bits of the old `launcher`
  class are now part of `context` while its `start` method is now
  implemented as the `launch` free function.  The same goes for the POSIX
  and Win32 launchers.  This was done to cleanly separate the action of
  launching a process from the parameters describing its properties.  As a
  side effect, a lot of useless getters and setters are gone.

* The `environment` class was refactored (much simplified) and made public
  because it is now exposed to the user through the new `context`.

* The `forward_decls.hpp` file was removed.  It is not clear it was any
  useful, and it could be flawed in concept.  Will add later on again if
  there really is a need for it.

* The `stream_behavior` enumeration was converted to a class so that it
  can carry more information than a simple type.  This is useful to be
  able to implement more complex stream behaviors.  As a side effect,
  stream merging by the use of booleans or standalone data sets is now
  superseded by the new `redirect_to_stdout` and `posix_redirect`
  behaviors.

* The `basic_work_directory_context` and `environment_context` base classes
  were added.  These are mainly provided to simplify the code in the final
  Context implementations but may also come handy to the end user in case
  he is working on his own Context implementation.

* The `status` and `posix_status` were greatly simplified.  Instead of
  providing lots of accessor functions they now just expose some constant
  members.  This avoids the need for several preconditions and consistency
  checks because the interface makes incoherent situations impossible.

* The `pipeline` and `children` classes were removed.  The former was
  replaced by the `launch_pipeline` convenience function and the
  `pipeline_entry` class.  The latter was superseded by a simple typedef
  and a generic `wait_children` function that can be applied to any kind
  of collection of Child objects.

* Made the processes be identified by a system-wide integer instead of a
  process-specific handle under Win32.

[endsect]

[section Version 0.1 (August 21st, 2006)]

* Initial public release.  This is what was presented at the end of the
  program under which Boost.Process was developed: [@http://www.google.com/
  Google]'s [@http://code.google.com/soc/ Summer of Code 2006].

[endsect]

[endsect]

[section Pending work]

This section contains a list of pending items in the library that should be
addressed before it can be sent for a serious/formal review.  Some of these
are a simple matter of programming but others will require more
consideration to decide the best way to solve them.

[section Code]

* Integrate with [@http://asio.sourceforge.net/ Boost.Asio] to permit
  asynchronous notification of child process termination and availability
  of new data in output streams.

* Add the ability to force/request the termination of a child process.

* Make it possible to specify a timeout when waiting for child processes
  to terminate.

* Parametrize classes that use strings to support wide characters.

* Replace custom `system_error` with Boost.System's homologous when it is
  available.

* Abstract `cstdlib`'s `EXIT_SUCCESS` and `EXIT_FAILURE`.

* Make `status`' constructor private.

* Allow to retrieve a handle for the current process.

[endsect]

[section Documentation]

* Add a ['Design decisions] chapter.

* Fix links to inherited methods.  Don't know which is the best approach
  to address this.

* Add some diagrams to illustrate interprocess communication.

* Reword the "The problem" section.  It is too generic.  The whole
  introduction should focus on the library, and not the lack of certain
  functionality in the standard C++ library.

* Shorten "Motivation" section.  Similar to the previous point, this
  section states that "there is a clear need for this library", although
  it certainly won't be clear to everybody.

* When process identifiers are fixed under Win32, document that process
  identifiers are integral types.

[endsect]

[endsect]

[endsect]
