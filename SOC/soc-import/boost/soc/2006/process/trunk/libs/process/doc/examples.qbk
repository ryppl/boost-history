[/
 / Boost.Process
 / Examples chapter.
 /
 / Copyright (c) 2006 Julio M. Merino Vidal.
 /
 / Use, modification, and distribution is subject to the Boost Software
 / License, Version 1.0.  (See accompanying file LICENSE_1_0.txt or copy
 / at http://www.boost.org/LICENSE_1_0.txt.)
 /]

[/ ---------------------------------------------------------------------- ]

[section Examples]

This chapter contains a list of example programs shipped with the Boost
Process library.  These little utilities are provided to show generic use
cases of the library but are not intended to cover every tiny detail.
Please also note that, being example code, they may not do anything useful
at all other than showing how to use the library's interface.

You can find ready-to-run copies of the examples below in the
'''<filename>libs/process/example</filename> ''' directory alongside a
Boost.Build V2 build script.

[/ ---------------------------------------------------------------------- ]

[section Generic example]

This first example the most basic usage of Boost.Process, providing a
general overview of its functionality and usage.  Its main purpose is to
illustrate general ideas before one can dive into other more complete
examples.

The program itself takes a list of CVS work directories as arguments and
iterates over them bringing each one up to date.

[include ../example/generic.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Command lines]

This example shows multiple ways to construct a command line and describes
why such different possibilities may come useful.

[include ../example/command_lines.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Pipelines]

This example shows how to construct and manage a process pipeline.  The
program implements a simple filter that parses the file given as the first
argument to the program and prints the results to the standard output.  The
data conversion is completely done by the child processes.

[include ../example/pipeline.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section POSIX communication]

This example relies on features provided by POSIX operating systems and
therefore it is not completely portable.  It shows how to set up multiple
communication streams aside the three standard ones.  The program launches
a new D-BUS session daemon and receives its bind address as well as its
PID.  This information could later be used by the program to interact with
the daemon using the D-BUS API.

[include ../example/posix_communication.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Win32 startup]

This example relies on features provided by Win32 operating systems and
therefore it is not completely portable.  It demonstrates how to start a
GUI process with hints on how to create the main window.  The example
passes the suggested window position as well as size, and then waits until
the new process terminates.

[include ../example/win32_startup.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[section Win32 child]

This example demonstrates how a program can retrieve all the information
returned by Win32's `CreateProcess` system call; that is: the process' and
primary thread's identifier and handle.  It relies on the Win32-specific
launcher and child classes to be able to access this information.

[include ../example/win32_child.cpp c++ code]

[endsect]

[/ ---------------------------------------------------------------------- ]

[endsect]
