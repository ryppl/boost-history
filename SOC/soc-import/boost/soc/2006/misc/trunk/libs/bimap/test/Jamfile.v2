# Boost.Bimap
#
# Copyright (c) 2006 Matias Capeletto
#
# This code may be used under either of the following two licences:
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE. OF SUCH DAMAGE.
#
# Or:
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

# bring in rules for testing
import testing ;

test-suite "tagged_test"
    :
    [ run test_tagged.cpp                                                     ]
    ;

test-suite "relation_test"
    :
    [ run test_structured_pair.cpp                                            ]

    # Enable this to force the mutant_relation test
    # Warning: it may fail in some standard compliant compilers, because the
    # mutant idiom uses need that struct { TA f; TB s; }; be layout compatible
    # with struc { TA s; TB f; }; and this is not in the standard.
    # However, most modern compiler support it.
    #
    #[ run test_mutant.cpp                                                   ]
    #[ run test_mutant_relation.cpp                                          ]

    # Enable this to force the standard_relation test
    # It is not always enabled because if the mutant idiom is supported, then it
    # is not needed and if not, it is tested in test_relation.cpp.
    #
    #[ run test_standard_relation.cpp                                        ]

    [ run test_relation.cpp                                                   ]
    ;


test-suite "bimap_test"
    :

    # Check library user interface
    [ run test_bimap_set_of.cpp                                               ]
    [ run test_bimap_multiset_of.cpp                                          ]
    [ run test_bimap_unordered_set_of.cpp                                     ]
    [ run test_bimap_unordered_multiset_of.cpp                                ]
    [ run test_bimap_list_of.cpp                                              ]
    [ run test_bimap_vector_of.cpp                                            ]

    # Test bimap container
    [ run test_bimap_ordered.cpp                                              ]
    [ run test_bimap_unordered.cpp                                            ]
    [ run test_bimap_sequenced.cpp                                            ]
    [ run test_bimap_unconstrained.cpp                                        ]
    [ run test_bimap_assign.cpp                                               ]
    [ run test_bimap_property_map.cpp                                         ]
    [ run test_bimap_modify.cpp                                               ]
    [ run test_bimap_lambda.cpp                                               ]
    [ run test_bimap_extra.cpp                                                ]
    [ run test_bimap_serialization.cpp
          /boost/serialization//boost_serialization                           ]
    ;

