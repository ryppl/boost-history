[library Boost.hs
    [quickbook 1.3]
    [authors [Capeletto, Matias]]
    [copyright 2006 Matias Capeletto]
    [category container]
    [id boost_hs]
    [dirname boost_hs]
    [purpose
        Boost Highligthing system
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ QuickBook Document version 1.3 ]
[/ Logos ]

[def __BOOST_HS_LOGO__ [$images/boost.hs.logo.png]]
[def __BOOST_BLADE_LOGO__ [$images/boost.blade.logo.png]]

[/ Icons ]

[def __NOTE__ [$images/note.png]]
[def __ALERT__ [$images/caution.png]]
[def __DETAIL__ [$images/note.png]]
[def __TIP__ [$images/tip.png]]
[def __QUESTION_MARK__ [$images/question.png]]

[def __BOOST_HS_CPP_POWER__ [$http://matias.capeletto.googlepages.com/boost.hs.cpp.power.png]]
[def __BOOST_HS_BUILD_POWER__ [$http://matias.capeletto.googlepages.com/boost.hs.build.power.png]]
[def __BOOST_HS_QUICKBOOK_POWER__ [$http://matias.capeletto.googlepages.com/boost.hs.quickbook.power.png]]


[section Preface]

__BOOST_HS_LOGO__

[endsect]

[section boost::hs tutorial ]

[tip
[/
Kate let you change the colors and formats used in each sintaxis extension
independently. If you don't like the choseen colors you can change they
with /Settings - Configure Kate.../
]
]

[h2 Code Folding ]

boost::hs goes far beyond simple coloring. One useful thing
you can get the editor to do is to mark regions. They appear in a small grey line
and each region can be folded or unfolded independently.

[h2 Auto Comment / Uncomment ]

Another important feature is the possibility to auto-comment or uncomment some
piece of code (/Tools - Comment/). Unluckily quickbook comments use the same
closing sintaxis as other structures, so it is not possible to easily comment
a table, for example. \n
Commented regions can be uncommented simple calling the /uncomment/ command
while being in it.

[endsect]

[section boost::hs::c++]

__BOOST_HS_CPP_POWER__

[h2 Basic cpp]

* keywords
* built in types
* preprocessor
* character
* string
* number
* comment
* region
* symbol

[h2 Stnadard Library]

* Free functions
* Template classes
* Classes
* Exceptions
* Macros
* Metaprograming
* Objects
* Tags
* Containers

[h2 Boost Libraries]

* Free functions
* Template classes
* Classes
* Metaprogramming
* Exceptions
* Containers
* Macros
* Concept member functions
* Concept free functions
* Concepts member typedef
* Tags
* Member functions
* Constants
* namespaces

[table Boost Libraries included
[[Name][Description][author]]

[[ Any ][
Safe, generic container for single values of different value types.]
[Kevlin Henney]]

[[ Array ]
[STL compliant container wrapper for arrays of constant size.]
[Nicolai Josuttis]]

[[ Assign ][
Filling containers with constant or generated data has never been easier.]
[Thorsten Ottosen]]

[[ Bind ][
Generalized binders for function/object/pointers and member functions.]
[Peter Dimov.]]

[[ call_traits ][
Defines types for passing parameters.]
[John Maddock, Howard Hinnant]]

[[ compressed_pair ][
Empty member optimization.]
[John Maddock, Howard Hinnant]]

[[ concept_check ][
Tools for generic programming]
[Jeremy Siek]]

[[ Conversion ][
Polymorphic and lexical casts]
[Dave Abrahams, Kevlin Henney.]]

[[ crc ][
Cyclic Redundancy Code]
[Daryle Walker]]

[[ dynamic_bitset ][
A runtime sized version of std::bitset]
[Jeremy Siek, Chuck Allison]]

[[ enable_if ][
Selective inclusion of function template overloads]
[Jaakko Järvi, Jeremiah Willcock, Andrew Lumsdaine]]

[[ Functional ][
Enhanced function object adaptors.]
[Mark Rodgers]]

[[ Fusion ][
Fusion between compile and run time]
[Joel de Guzman]]

[[ Hash ][
A TR1 hash function object that can be extended to hash user defined types]
[Daniel James]]

[[ Iterators ][
Iterator construction framework, adaptors, concepts, and more.]
[Dave Abrahams, Jeremy Siek, Thomas Witt]]

[[ MPL ][
Template metaprogramming framework of compile-time algorithms, sequences and metafunction classes]
[Aleksey Gurtovoy]]

[[ multi_index ][
Containers with multiple STL-compatible access interfaces]
[Joaquín M López Muñoz]]

[[ Operators ][
Templates ease arithmetic classes and iterators]
[Dave Abrahams\n Jeremy Siek]]

[[ Optional ][
Discriminated-union wrapper for optional values.]
[Fernando Cacciola]]

[[ property_map ][
Concepts defining interfaces which map key objects to value objects.]
[Jeremy Siek]]

[[ ref ][
A utility library for passing references to generic functions.]
[Jaako Järvi, Peter Dimov, Doug Gregor, Dave Abrahams]]

[[ Serialization ][
Serialization for persistence and marshalling]
[Robert Ramey]]

[[ static_assert ][
Static assertions (compile time assertions).]
[John Maddock]]

[[ Test ][
Support for simple program testing, full unit testing, and for program execution monitoring.]
[Gennadiy Rozental]]

[[ type_traits ][
Templates for fundamental properties of types.]
[John Maddock, Steve Cleary]]

[[ Utility ][
Class noncopyable plus checked_delete(), checked_array_delete(), next(),  prior() function templates,
plus base-from-member idiom.]
[Dave Abrahams, Others]]

]

[h2 Doxygen]

Completar

[endsect]

[section boost::hs::build]

__BOOST_HS_BUILD_POWER__

* keywords
* parameters
* rules
* features
* string
* file
* variable
* number
* comment
* region
* symbol

[endsect]

[section boost::hs::quickbook]

[/
     I spent three days fighting against Kate highlighting state machine, but the result IMO is awesome.
     I wrote this quickbook very quick (sic!) and get no errors when i compile it... I have looked for
     a Kate version for windows and don't find it. I think it is written in qt, so if we try hard maybe
     we can compile it for XP.
     I am starting to love Kate, it is very friendly for this kind of task, you can make projects and
     have your quickbook tree organized. The highlighting files goes far beyond simple coloring and
     open the door to tools like "Comment/Uncomment" in the edit menu and "Code Folding".
]

[h2 Introduction]

Languages like quickbook or Latex are very useful to make professional documents.
They have a lot of advantages over [*/WYSIWYG/] applications.

* They are oriented in making usual things easier, like embedded C++ code in
quickbook.
* They release you from formatting.
* Thanks to this, all documents generated using this kind of tools are very
consistent looking.
* Since the code is plain and simple you can make conversion tools for different
outputs (HTML,pdf,PS).

These are very good points in favor of using this kind of tool. But everything
have comes with a price:

* It has to be compiled.
* It is not a [*/WYSIWYG/] application. So, you can not appreciate the final look
of the document til compile time.
* Some languages structures, like tables in quickbook are very difficult to read
from the code.
* Some errors are very difficult to detect before compilation.

Obviously there is a lot more to gain, so it is convenient to use it. We can
diminish a lot the last three drawbacks by means of a smart sintaxis highlighting
system. This system will:

* Apply text formating, like bold, italic, underline, etc.
* Reveal the structural parts.
* Let you know if there is a sintaxis error.
* Format difficult structures so they are easy to read.

If we can do this, the needs to compile are also diminished.
Other projects have been implemented following this guidelines. A truly amazing
one is [@http://www.lyx.org/ LyX], the first [*/WYSIWYM/] (What you see is what
you mean) application, a full blown front end for TeX.


[h2 A peek of boost::hs::quickbook power]

This three pictures corresponds to a quickbook table. Appreciate the reading
improvement in the IDE powered project.

[/ This is more than I was expecting! ]

__BOOST_HS_QUICKBOOK_POWER__


[table Styles reference
[[         Name         ][           Style         ][                                          Description                                      ]]
[[   *plain text*      ][  normal black        ][                Plain text at each level.                                                ]]
[[*formatted text*][ formatted black    ][  Bold, italic, underline and mixes.  \n
                                                                 Teletype, replaceable, strikeout.                                                  ]]
[[    *structure*     ][       light blue         ][   All quickbook structures characters (\[, \], \[block-type, \n
                                                                   simple formating boundaries, lists keywords (\*, \#)                   ]]
[[    *macros*        ][           red             ][  Names in macro definitions, macros insertion if it is used the
                                                                  \_\_xxx\_\_ proposed sintaxis.                                                    ]]
[[    *anchors*       ][           red             ][    All the keywords that are used to link quickbooks together.         ]]
[[  *comments*     ][  italic light gray      ][   Inside the commentaries.                                                          ]]
[[     *tables*         ][      HTML like         ][  Reveal the structure, bold title, higlighted HTML like columns titles.]]
[[*variable lists*    ][      HTML like         ][  Reveal the structure, bold title, bold HTML like items names.        ]]
[[  *c++ code*      ][ cpp Kate sintaxis   ][      Code blocks and inline code.                                                   ]]
[[     *paths*          ][         green            ][     Image, files and web paths                                                     ]]
[[*IDE specific*      ][       dark blue        ][                 IDE commands                                                           ]]
]

\]

[h2 Known problems ]

Kate sintaxis definition are based in a state machine (documentation can be
found [@http://docs.kde.org/stable/en/kdebase/kate/highlight.html here] ).\n
A lot of effort was put in making it behave exactly as quickbook, but it is still
in beta state and bugs may appear.
Feedback will be appreciated.\n
Some bugs are known. They are very small and it is very unlikely to encounter one.\n
The following list comments them.

* List items \* and \# are not fully implemented.
[/ This is a war that I have not yet lost with Kate ]

* The line =\` \\\\ C++ comment \` is not working because of Kate C++ highlight definitions.
[/ I really don't know how to solve this issue ]

* Python code is not yet supported.
[/ I have a couple of ideas here ]

[endsect]

[section Aknologments]

__BOOST_BLADE_LOGO__

[endsect]
