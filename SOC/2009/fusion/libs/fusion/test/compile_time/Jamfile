#==============================================================================
#    Copyright (c) 2010 Christopher Schmidt
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

#cschmidt: This is one big, ugly hack!

import targets ;
import type ;
import generators ;
import feature ;
import common ;

variant minimal
  : <optimization>off <inlining>off <debug-symbols>off <profiling>off
  ;

project
  : requirements
#        <define>BOOST_FUSION_ENABLE_STATIC_ASSERTS
        <define>BOOST_FUSION_COMPILE_TIME_TEST_RES=35
        <warnings>all
        <variant>minimal
  ;

#Capturing compile time of an individual source file
type.register TIMING : timing ;
generators.register-standard make-timing : OBJ : TIMING ;

feature.feature category : : free ;
feature.feature desc : : free ;

module timing-module
{
    import feature ;

    rule timing-callback ( target : source-id : start end user system )
    {
        START on $(target) = $(start) ;
        END on $(target) = $(end) ;
    }
    
    rule make-timing ( target : source : properties + )
    {
        CATEGORY on $(target) =
            [ feature.get-values <category> : $(properties) ] ;
        DESC on $(target) = [ feature.get-values <desc> : $(properties) ] ;

        ALWAYS $(source) ;
        __TIMING_RULE__ on $(source) = timing-callback $(target) ;
        JAM_SEMAPHORE on $(source) = fusion-compile-time-test ;
    }
    
    actions make-timing
    {
        echo $(START)> $(<)
        echo $(END)>> $(<)
        echo $(CATEGORY)>> $(<)
        echo $(DESC)>> $(<)
    }
}
IMPORT timing-module
  : timing-callback make-timing
  :
  : timing-callback make-timing
  ;

rule capture-compile-time ( seed : category : desc : source : properties * )
{
    obj $(seed)-$(source:B)-obj : testcases/$(source).cpp : $(properties) ;
    timing $(seed)-$(source:B)
      : $(seed)-$(source:B)-obj
      : <category>$(category) <desc>$(desc)
      ;
    return $(seed)-$(source:B) ;
}

#Composing individual timings to a single report
type.register RESULT : result ;
generators.register-composing make-result : EXE TIMING : RESULT ;

module result-module
{
    import common ;
    import feature ;
    import path ;
    import sequence ;
    import os ;

    rule make-result ( target : sources * : properties * )
    {
        local dll-paths = [ feature.get-values <xdll-path> : $(properties) ] ;
        if $(dll-paths)
        {
            dll-paths = [ sequence.transform path.native : $(dll-paths) ] ;
            PATH_SETUP on $(target) =
            [
                common.prepend-path-variable-command
                    [ os.shared-library-path-variable ]
                  : $(dll-paths)
            ] ;
        }
    }
    
    actions make-result
    {
        $(PATH_SETUP)
        echo ==========================
        $(>)
        echo ==========================
        $(>) > $(<)
    }
}
IMPORT result-module
  : make-result
  :
  : make-result
  ;

#Plotter
exe plotter
  : plotter/main.cpp /boost/date_time//boost_date_time
  ;
JAM_SEMAPHORE on plotter = fusion-compile-time-test ;

#Report
result timings
  : plotter
        [
            capture-compile-time type-traits
              : "reference check"
              : "using Boost.TypeTraits"
              : reference
              : <define>BOOST_FUSION_USE_TYPE_TRAITS
        ]
        [
            capture-compile-time fusion
              : "reference check"
              : "using Fusion's internal reference metafunctions"
              : reference
              :
        ]
  ;

