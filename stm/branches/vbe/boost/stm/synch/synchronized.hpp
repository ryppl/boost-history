//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Vicente J. Botet Escriba 2008-2009. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/synchro for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_STM_SYNCH_SYNCHRONIZED__HPP
#define BOOST_STM_SYNCH_SYNCHRONIZED__HPP

#include <boost/stm/synch/unique_lock.hpp>

#define BOOST_STM_SYNCHRONIZE_EXT(VAR_DECL) \
    if (bool __stop = false) {} else   \
    for (VAR_DECL;!__stop; __stop= true)

#define BOOST_STM_SYNCHRONIZE_TYPE(TYPE, VAR, LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_EXT(boost::stm::unique_lock<boost::stm::exclusive_lock_adapter<TYPE> > VAR(LOCKABLE))
#define BOOST_STM_ADOPT_SYNCHRONIZE_TYPE(TYPE, VAR, LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_EXT(boost::stm:unique_lock<boost::stm::exclusive_lock_adapter<TYPE> > VAR(LOCKABLE, boost::synchro::adopt_lock))
#define BOOST_STM_DEFER_SYNCHRONIZE_TYPE(TYPE, VAR, LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_EXT(boost::stm:unique_lock<boost::stm::exclusive_lock_adapter<TYPE> > VAR(LOCKABLE, boost::synchro::defer_lock))
#define BOOST_STM_TRY_TO_SYNCHRONIZE_TYPE(TYPE, VAR, LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_EXT(boost::stm:unique_lock<boost::stm::exclusive_lock_adapter<TYPE> > VAR(LOCKABLE, boost::synchro::try_to_lock))
#define BOOST_STM_TRY_TO_SYNCHRONIZE_TYPE_UNTIL(TYPE, VAR, LOCKABLE, ABS_TIME) \
    BOOST_STM_SYNCHRONIZE_EXT(boost::stm:unique_lock<boost::stm::exclusive_lock_adapter<TYPE> > VAR(LOCKABLE, ABS_TIME))
#define BOOST_STM_SYNCHRONIZE_TYPE_UNTIL(TYPE, VAR, LOCKABLE, ABS_TIME) \
    BOOST_STM_SYNCHRONIZE_EXT(boost::stm:unique_lock<boost::stm::exclusive_lock_adapter<TYPE> > VAR(ABS_TIME, LOCKABLE))

#if defined(BOOST_STM_T_USE_BOOST_MUTEX) 
#define BOOST_STM_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_TYPE(boost::mutex, VAR, LOCKABLE)
#define BOOST_STM_ADOPT_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_ADOPT_SYNCHRONIZE_TYPE(boost::mutex, VAR, LOCKABLE)
#define BOOST_STM_DEFER_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_DEFER_SYNCHRONIZE_TYPE(boost::mutex, VAR, LOCKABLE)
#define BOOST_STM_TRY_TO_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_TRY_TO_SYNCHRONIZE_TYPE(boost::mutex, VAR, LOCKABLE)
#define BOOST_STM_SYNCHRONIZE_VAR_UNTIL(VAR, LOCKABLE, ABS_TIME) \
    BOOST_STM_SYNCHRONIZE_TYPE_UNTIL(boost::mutex, VAR, LOCKABLE, ABS_TIME)
#define BOOST_STM_TRY_TO_SYNCHRONIZE_VAR_UNTIL(VAR, LOCKABLE, ABS_TIME) \
    BOOST_STM_TRY_TO_SYNCHRONIZE_TYPE_UNTIL(boost::mutex, VAR, LOCKABLE, ABS_TIME)
#else
#define BOOST_STM_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_TYPE(pthread_mutex_t, VAR, LOCKABLE)
#define BOOST_STM_ADOPT_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_ADOPT_SYNCHRONIZE_TYPE(pthread_mutex_t, VAR, LOCKABLE)
#define BOOST_STM_DEFER_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_DEFER_SYNCHRONIZE_TYPE(pthread_mutex_t, VAR, LOCKABLE)
#define BOOST_STM_TRY_TO_SYNCHRONIZE_VAR(VAR, LOCKABLE) \
    BOOST_STM_TRY_TO_SYNCHRONIZE_TYPE(pthread_mutex_t, VAR, LOCKABLE)
#define BOOST_STM_SYNCHRONIZE_VAR_UNTIL(VAR, LOCKABLE, ABS_TIME) \
    BOOST_STM_SYNCHRONIZE_TYPE_UNTIL(pthread_mutex_t, VAR, LOCKABLE, ABS_TIME)
#define BOOST_STM_TRY_TO_SYNCHRONIZE_VAR_UNTIL(VAR, LOCKABLE, ABS_TIME) \
    BOOST_STM_TRY_TO_SYNCHRONIZE_TYPE_UNTIL(pthread_mutex_t, VAR, LOCKABLE, ABS_TIME)
#endif
#define BOOST_STM_SYNCHRONIZE(LOCKABLE) \
    BOOST_STM_SYNCHRONIZE_VAR(_, LOCKABLE)
#define BOOST_STM_ADOPT_SYNCHRONIZE(LOCKABLE) \
    BOOST_STM_ADOPT_SYNCHRONIZE_VAR(_, LOCKABLE)
#define BOOST_STM_DEFER_SYNCHRONIZE(LOCKABLE) \
    BOOST_STM_DEFER_SYNCHRONIZE_VAR(_, LOCKABLE)
#define BOOST_STM_TRY_TO_SYNCHRONIZE(LOCKABLE) \
    BOOST_STM_TRY_TO_SYNCHRONIZE_VAR(_, LOCKABLE)
#define BOOST_STM_SYNCHRONIZE_UNTIL(LOCKABLE, ABS_TIME) \
    BOOST_STM_SYNCHRONIZE_VAR_UNTIL(_, LOCKABLE, ABS_TIME)
#define BOOST_STM_TRY_TO_SYNCHRONIZE_UNTIL(LOCKABLE, ABS_TIME) \
    BOOST_STM_TRY_TO_SYNCHRONIZE_VAR_UNTIL(_, LOCKABLE, ABS_TIME)


#endif // BOOST_STM_SYNCH_SYNCHRONIZED__HPP
