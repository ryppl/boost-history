[/
[/
  (C) Copyright 2009 Justin E. Gottchlich.
  (C) Copyright 2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[/======================================]
[section:getting_started Getting Started]
[/======================================]

[include installation.qbk]

[/=============================]
[section Hello World! ]
[/=============================]

The below example gives a basic introduction into __Boost_STM_s__  transactional framework and demonstrates __Boost_STM_s__ ACI conformance.

    #include <boost/stm.hpp>
    Boost::stm::tx::object<int> counter(0);

    int increment() {
        BOOST_STM_TRANSACTION {
            return counter++;
        } BOOST_STM_TRANSACTION;
    }

In the above example, (A) both the write on `counter` and the read operations function atomically or neither operations are performed. In addition, (C) the transaction begins and ends in legal memory states, meaning `counter` is guaranteed to be read correctly, preventing thread data races from causing inconsistent results. Lastly, (I) the intermediate state of the incremented `counter` is isolated until the transaction commits. These three attributes fulfill __Boost_STM_s__ conformance to the ACI principles. The above example also gives a basic introduction into __Boost_STM_s__ transactional framework.

[endsect]

[endsect]


