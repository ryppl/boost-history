[/
[/
  (C) Copyright 2009 Justin E. Gottchlich.
  (C) Copyright 2009 Vicente J. Botet Escriba
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[/=================]
[section Appendices]
[/=================]

[include history.qbk]

[include rationale.qbk]

[include implementation.qbk]

[include acknowledgements.qbk]

[include tests.qbk]

[include tickets.qbk]


[/=====================================]
[section:todo  Appendix E: Future plans]
[/=====================================]

[section Tasks to do before review]

[heading Interface]

* [*DONE] Adding transactional smart pointers.
* Allows to have non transactional_object participating on transactions (separate the information related to a transactional object from the object itself and add two pointers to transactional_object_cache one to the object itself and the other to the transactional_object.
* [*DONE] Managing Movable and non CopyConstructible types.

[heading Boostifying STM]

* [*DONE] set boost directory architecture
* [*DONE] name files in lowercase
* [*DONE] Add a config file with all the configuration macros
* [*DONE] Add a stm file at the boost level including all the STM interfaces
* [*DONE] Replace bit_vector by std::bitset or boost::dynamic_bitset (BOOST_STM_BLOOM_FILTER_USE_DYNAMIC_BITSET)
* [*DONE] Replace Sleep by boost::this_thread::sleep
* [*DONE] Replace pthread_mutex by boost::mutex
* Replace THREAD_ID by boost::thread_id
* [*DONE] Provide a unique array/tuple locker (Boost.Synchro)
* Replace var_auto_lock by boost::synchro::unique_array_locker
* Replace auto_lock by boost::synchro::unique_locker and redefine use_lock macros
* use lock_guard when lock/unlock
* Adapt the pool to Boost.Pool
* [*DONE] Provide a thread specific shared pointer (Boost.Interthreads)
* [*DONE] Provide a transparent initialization (Boost.Interthreads)
* Replace thread specific access using the thread id by boost:interthreads::thread_specific_shared_ptr
* Replace the initialization to the library Boost.Interthreads (decorations and decorators)
* Replace draco_move by boost::move and its emulation
* Replace vector_set and vector map by the respectives Boost.Container flat_set and flat_map
* Replace blom_filter by the Boost.BlomFilter blom_filter

[heading Implementation]

* [*DONE] Separate the data that is global, thread specific but shared to other threads using a lock, thread local or specific to a transaction.
* [*DONE] Define access to these data using functions
* Separate the interface from the implementation
* Group all the cache containers (Read,Write,Delete,New) in only one cache in order to improve the lookup performance when using smart pointers.

[heading Tests]

* Add unit tests

[heading Benchmarks]

* Add some specific benchmarks.

[heading Documentation]

* [*DONE] Create the empty files and set the doc generation environement
* [*DONE] Write the Motivation section
* Write the User'Guide section
    * [*DONE] Write the Getting started section
        * [*DONE] Write the Installation started section
        * [*DONE] Write the Hello World example
    * [*DONE] Write the Installation section
    * Write the Tutorial section
        * Write the Preamble/Initialization section
        * [*DONE] Write the Simple transaction section
        * [*DONE] Write the Composable transaction section
        * [*DONE] Write the A Dynamically Prioritized, Composed Transaction section
        * Write the Lock aware section
        * Write the Lock aware section

    * [*DONE] Write the References section
    * Write the Glossary section
* Write the Examples section
* Write the Reference section
* Write the Appendix section
    * Write the History section
    * Write the Rationale section
    * Write the Implementation notes section
    * Write the Acknowledgements section
    * Write the Tests section
    * Write the Tickets section
    * [*DONE] Write the Future plans section


[endsect]

[section For later releases]

* Integrate with STM test benchmarks as STAMP or STMBench7.
* Add close nested transactions.
* Allows configuration at compile-time and run-time.

[section More recherch needed]

* Mixing STM updating policies.
* Mixing STM consistency checking.

[endsect]
[endsect]

[endsect]
[endsect]

