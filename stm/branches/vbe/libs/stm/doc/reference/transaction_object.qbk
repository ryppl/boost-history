[/
  (C) Copyright 2009 Justin E. Gottchlich.
  (C) Copyright 2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/==========================================================================================]
[section:transaction_object_hpp Header `<boost/stm/transaction_object.hpp>`]
[/==========================================================================================]

    namespace boost { namespace stm {
        template <class B> struct virtually;
        template <class Final, class Base=base_transaction_object> 
        class transaction_object;
        template <class Final, class Base1, class Base2> 
        class transaction_object2;
        
        template <typename T> class native_trans;
    }}

[section Template Class `virtually<>`]

Virtualy inherits from its template parameter.

        struct virtually : virtual B {
            // forward constructors
        };
        
[endsect]

[section Template Class `transaction_object<>`]

To further simplify the usage of __Boost_STM__, an intermediate template class was built which is meant to sit between the deep_transaction_object or shallow_transaction_object, depending on whether the filanl class has shallow copy semantics, and the user-defined transaction objects. 

    namespace detail {
        template <class Final, class Base, bool hasShallowCopySemantics>
        class transaction_object_aux;

        template <class F, class B>
        class transaction_object_aux<F, B, true>
            : public shallow_transaction_object<F, B> {};
        template <class F, class B>
        class transaction_object_aux<F, B, false>
            : public deep_transaction_object<F, B> {};

        template <class Final, class Base1,class Base2, bool hasShallowCopySemantics>
        class transaction_object2_aux;

        template <class F, class B1, class B2>
        class transaction_object2_aux<F, B1, B2, true>
            : public shallow_transaction_object2<F, B1, B2> {};
        template <class F, class B1, class B2>
        class transaction_object2_aux<F, B1, B2, false>
            : public deep_transaction_object2<F, B1, B2> {};
    }

    template <class Final, class Base>
    class transaction_object 
        : public detail::transaction_object_aux<Final, Base, has_shallow_copy_semantics<Final>::value
        >
    {};

    template <class Final, class Base1, class Base2>
    class transaction_object2 
        : public detail::transaction_object2_aux<Final, Base1, Base2, has_shallow_copy_semantics<Final>::value
        >
    {};

[endsect]


[section Template Class `native_trans<>`]

    template <typename T> class native_trans : public transaction_object< native_trans<T> > {
    public:
       native_trans(){}
       native_trans(T const &rhs);
       native_trans(native_trans const &rhs);
       native_trans(native_trans &&rhs);
       native_trans& operator=(native_trans &&rhs);

       native_trans& operator=(T const &rhs);

       native_trans& operator--();
       native_trans operator--(int);
       native_trans& operator++();
       native_trans operator++(int);
       native_trans& operator+=(T const &rhs);
       native_trans operator+(native_trans const &rhs);

       operator T() const;
       T& value();
       T const & value() const;
    };

[endsect]

[endsect]




