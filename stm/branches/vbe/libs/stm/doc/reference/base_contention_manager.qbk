[/
  (C) Copyright 2009 Justin E. Gottchlich. 
  (C) Copyright 2009 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/==========================================================================================]
[section:base_contention_manager_hpp Header `<boost/stm/base_contention_manager.hpp>`]
[/==========================================================================================]

    namespace boost { namespace stm {
        class base_contention_manager;
    }}


[section Abstract Class `base_contention_manager`]

    class base_contention_manager {
    public:
        virtual void abort_on_new(boost::stm::transaction const &t) = 0;
        virtual void abort_on_delete(
                    boost::stm::transaction const &t,
                    boost::stm::base_transaction_object const &in) = 0;
        virtual void abort_on_read(
                    boost::stm::transaction const &t,
                    boost::stm::base_transaction_object const &in) = 0;
        virtual void abort_on_write(
                    boost::stm::transaction &t,
                    boost::stm::base_transaction_object const &in) = 0;
        virtual bool abort_before_commit(boost::stm::transaction const &t) = 0;
        virtual bool permission_to_abort(
                    boost::stm::transaction const &lhs, 
                    boost::stm::transaction const &rhs) = 0;
        virtual bool allow_lock_to_abort_tx(
                    int const & lockWaitTime, 
                    int const &lockAborted, 
                    bool txIsIrrevocable, 
                    boost::stm::transaction const &rhs) = 0;
        virtual int lock_sleep_time();
        virtual void perform_isolated_tx_wait_priority_promotion(
                    boost::stm::transaction &) = 0;
        virtual void perform_irrevocable_tx_wait_priority_promotion(
                    boost::stm::transaction &) = 0;
        virtual ~base_contention_manager() {};
    };

[section Virtual destructor `base_contention_manager`]

        virtual ~base_contention_manager();

[endsect]

[section Virtual function `abort_on_new`]

        virtual void abort_on_new(boost::stm::transaction const &t) = 0;

Supplies the behavior for transactional aborts when identified as doomed from within a `new_memory()` or `new_memory_copy()` operation. The input parameter is the doomed transaction. Throwing `aborted_transaction_exceptions` are the usual mechanism for aborting.

[endsect]

[section Virtual function `abort_on_delete`]

        virtual void abort_on_delete(
                    boost::stm::transaction const &t,
                    boost::stm::base_transaction_object const &in) = 0;

Supplies the behavior for transactional aborts when identified as doomed from within a `delete_memory()` operation. The input parameters are the doomed transaction and the object being deleted. Throwing `aborted_transaction_exceptions` are the usual mechanism for aborting.

[endsect]
[section Virtual function `abort_on_read`]

        virtual void abort_on_read(
                    boost::stm::transaction const &t,
                    boost::stm::base_transaction_object const &in) = 0;

Supplies the behavior for transactional aborts when identified as doomed from within a `read()` operation. The input parameters are the doomed transaction and the object being read. Throwing `aborted_transaction_exceptions` are the usual mechanism for aborting.

[endsect]
[section Virtual function `abort_on_write`]

        virtual void abort_on_write(
                    boost::stm::transaction &t,
                    boost::stm::base_transaction_object const &in) = 0;

Supplies the behavior for transactional aborts when identified as doomed from within a `write()` operation. The input parameters are the doomed transaction and the object being written. Throwing `aborted_transaction_exceptions` are the usual mechanism for aborting.

[endsect]
[section Virtual function `abort_before_commit`]

        virtual bool abort_before_commit(boost::stm::transaction const &t) = 0;

This method is called prior to a transaction performing its commit operation. The parameter passed in is the transaction preparing to commit. The client code should return `true` if the transaction should abort before committing. Otherwise, client implementation should return `false`.

[endsect]
[section Virtual function `permission_to_abort`]

        virtual bool permission_to_abort(
                    boost::stm::transaction const &lhs, 
                    boost::stm::transaction const &rhs) = 0;

This method is invoked when a transaction is requesting permission to abort another transaction due to a memory inconsistency. Client code should return `true` if the transaction should abort before committing. Otherwise, client implementation should return `false`. The `lhs` input parameter is the transaction requesting to abort `rhs`, the `rhs` input parameter is the transaction which will be aborted if return `true`. Otherwise, if the method returns `false`, `lhs` will be aborted.

[endsect]
[section Virtual function `allow_lock_to_abort_tx`]

        virtual bool allow_lock_to_abort_tx(
                    int const & lockWaitTime, 
                    int const &lockAborted, 
                    bool txIsIrrevocable, 
                    boost::stm::transaction const &rhs) = 0;

[endsect]
[section Virtual function `lock_sleep_time`]

        virtual int lock_sleep_time();

[endsect]
[section Virtual function `perform_isolated_tx_wait_priority_promotion`]

        virtual void perform_isolated_tx_wait_priority_promotion(
                    boost::stm::transaction &) = 0;
[endsect]
[section Virtual function `perform_irrevocable_tx_wait_priority_promotion`]

        virtual void perform_irrevocable_tx_wait_priority_promotion(
                    boost::stm::transaction &) = 0;

[endsect]


[endsect]
[endsect]


