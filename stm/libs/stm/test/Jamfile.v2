#  (C) Copyright William E. Kempf 2001.
#  (C) Copyright 2007 Anthony Williams.
#  (C) Copyright 2008-2009 Vicente Botet Escriba.
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Boost.InterThreads test Jamfile
#
# Additional configuration variables used:
#   1. PTW32 may be used on Win32 platforms to specify that the pthreads-win32
#      library should be used instead of "native" threads. This feature is
#      mostly used for testing and it's generally recommended you use the
#      native threading libraries instead. PTW32 should be set to be a list
#      of two strings, the first specifying the installation path of the
#      pthreads-win32 library and the second specifying which library
#      variant to link against (see the pthreads-win32 documentation).
#      Example: jam -sPTW32="c:\pthreads-win32 pthreadVCE.lib"

# bring in rules for testing
import testing ;

project
    : requirements
#       <library>/boost/test//boost_unit_test_framework/<link>static
#       <library>/boost/thread//boost_thread/<link>static
#       <library>../../../../../boost_1_38_0/libs/test/build//boost_unit_test_framework/<link>static
        <library>../build//boost_STM/<link>static
#        <library>../../../../../boost_1_38_0/libs/thread/build//boost_thread/<link>static

        <include>.
        <include>../../..
        <include>../../../../../boost_1_38_0
        <threading>multi
#       <target-os>cygwin
#       <interthreadapi>pthread
        <variant>debug
#       <define>BOOST_THREAD_HAS_THREAD_ATTR

    ;

rule interthreads-run ( sources * )
{
    return
    [ run $(sources)  :  :  : <link>static ]
#    [ run $(sources)  ../../../../libs/thread/build//boost_thread  :  :  :              : $(sources[1]:B)_lib ]
    ;
}



{
    test-suite "tests"
        :
          [ interthreads-run stm.cpp smart.cpp  globalIntArr.cpp testHashMapAndLinkedListsWithLocks.cpp irrevocableInt.cpp testHashMapWithLocks.cpp isolatedComposedIntLockInTx.cpp   testInt.cpp isolatedComposedIntLockInTx2.cpp  testLL_latm.cpp isolatedInt.cpp testLinkedList.cpp isolatedIntLockInTx.cpp testLinkedListWithLocks.cpp litExample.cpp testPerson.cpp lotExample.cpp testRBTree.cpp  transferFun.cpp nestedTxs.cpp txLinearLock.cpp testHT_latm.cpp usingLockTx.cpp testHashMap.cpp ]
    ;
}
