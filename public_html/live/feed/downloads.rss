<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>BoostBook2RSS</generator>
    <title>Boost Downloads</title>
    <link>http://www.boost.org/feed/download.rss</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.35.0</title><pubDate>Sat, 29 Mar 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Asio, Bimap, Circular Buffer, Function Types, Fusion, GIL, Interprocess,
      Intrusive, Math/Special Functions, Math/Statistical Distributions, MPI, System.
      Updated Libraries: Graph, Hash, Iostreams, Multi Array, Multi-index Containers,
      Serialization, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=587936</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_35_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt; Portable networking,
        including sockets, timers, hostname resolution and socket iostreams, from
        Chris Kohlhoff.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bimap/index.html&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt; Boost.Bimap is a
        bidirectional maps library for C++. With Boost.Bimap you can create associative
        containers in which both types can be used as key, from Matias Capeletto.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt; STL
        compliant container also known as ring or cyclic buffer, from Jan Gaspar.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt; 
  Boost.FunctionTypes
        provides functionality to classify, decompose and synthesize function, function
        pointer, function reference and pointer to member types. From Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt; 
  Library for working
        with tuples, including various containers, algorithms, etc. From Joel de
        Guzman, Dan Marsden and Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/gil/doc/index.html&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt; 
  Generic Image Library,
        from Lubomir Bourdev and Hailin Jin.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt; 
  Shared
        memory, memory mapped files, process-shared mutexes, condition variables,
        containers and allocators, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt; 
  Intrusive
        containers and algorithms, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Special
        Functions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of mathematical special functions from
        John Maddock, Paul Bristow, Hubert Holin and Xiaogang Zhang.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Statistical
        Distributions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of univariate statistical distributions
        and functions that operate on them from John Maddock and Paul Bristow
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt; 
  Message Passing Interface
        library, for use in distributed-memory parallel application programming,
        from Douglas Gregor and Matthias Troyer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt; 
  Operating system
        support, including the diagnostics support that will be part of the C++0x
        standard library, from Beman Dawes.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
  Generic graph
        components and algorithms. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
            from Stephan Diederich as part of the 2006 Google Summer of Code.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            for max-flow problems, from Stephan Diederich.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_graphml&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_graphml&lt;/span&gt;&lt;/code&gt; for GraphML input/output,
            from Tiago de Paula Peixoto.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_cycle_ratio&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;maximum_cycle_ratio&lt;/span&gt;&lt;/code&gt;,
            from Dmitry Bufistov and Andrey Parfenov.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boyer_myrvold_planarity_test&lt;/span&gt;&lt;/code&gt;,
            along with a suite of algorithms for planar graphs, from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            LEDA Adaptor improvements, from Jens Müller.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  A TR1 hash
        function object, from Daniel James. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the algorithm for hashing floating point numbers.
          &lt;/li&gt;
          &lt;li&gt;
            A few bug and warning fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt; Framework
        for defining streams, stream buffers and i/o filters, from Jonathan Turkanis.
        Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Clarified the semantics of close(). This fixes several bugs but will
            break some existing code. See &lt;a href=&quot;/libs/iostreams/doc/index.html?path=12&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Numerous other bug fixes and optimizations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &amp;quot;dimensionality&amp;quot; compile-time constante to the MultiArray
            concept.
          &lt;/li&gt;
          &lt;li&gt;
            For greater control over error situations, uses of C++ assert have been
            replaced with BOOST_ASSERT.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug with simultaneous resizing and reindexing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/libs/multi_index/doc/tutorial/key_extraction.html#global_fun&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;global_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; predefined key extractor.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/libs/multi_index/doc/tutorial/indices.html#iterator_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; facility.
          &lt;/li&gt;
          &lt;li&gt;
            Included &lt;a href=&quot;/libs/multi_index/doc/tutorial/creation.html#special_allocator&quot;&gt;support
            for non-standard allocators&lt;/a&gt; such as those of &lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Boost.Interprocess&lt;/a&gt;,
            which makes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;s
            placeable in shared memory.
          &lt;/li&gt;
          &lt;li&gt;
            New versions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt; with rollback,
            as described in the &lt;a href=&quot;/libs/multi_index/doc/tutorial/basics.html#ord_updating&quot;&gt;tutorial&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of optimizations and minor improvements have also been included.
            For a complete list of changes, see the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_35&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt; 
   Boost.Serialization
        has been updated with optimizations for dense arrays.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The Thread library has been updated to be more in line with the C++0x
            working draft.
          &lt;/li&gt;
          &lt;li&gt;
            Instances of boost::thread and of the various lock types are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Threads can be interrupted at interruption points.
          &lt;/li&gt;
          &lt;li&gt;
            Condition variables can now be used with any type that implements the
            Lockable concept, through the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition&lt;/span&gt;&lt;/code&gt; is a typedef to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;, provided for
            backwards compatibility). &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
            is provided as an optimization, and will only work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Thread IDs are separated from boost::thread, so a thread can obtain it's
            own ID (using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;),
            and IDs can be used as keys in associative containers, as they have the
            full set of comparison operators.
          &lt;/li&gt;
          &lt;li&gt;
            Timeouts are now implemented using the Boost DateTime library, through
            a typedef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;system_time&lt;/span&gt;&lt;/code&gt; for absolute timeouts,
            and with support for relative timeouts in many cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            is supported for backwards compatibility only.
          &lt;/li&gt;
          &lt;li&gt;
            Locks are implemented as publicly accessible templates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_guard&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_lock&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;upgrade_lock&lt;/span&gt;&lt;/code&gt;,
            which are templated on the type of the mutex. The Lockable concept has
            been extended to include publicly available &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions, which are used by
            the lock types.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; has been removed, and the
            functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef, but
            is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; has been removed,
            and the functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef,
            but is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt; has been removed. Code that
            relies on the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt;
            implementation detail will no longer work, as this has been removed,
            as it is no longer necessary now that mutex types now have public &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt; constructors
            with a second parameter of type bool are no longer provided. With previous
            boost releases, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
            could be used to create a lock object that was associated with a mutex,
            but did not lock it on construction. This facility has now been replaced
            with the constructor that takes a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock_type&lt;/span&gt;&lt;/code&gt;
            as the second parameter: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            The broken &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been replaced
            with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_mutex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards conformant
        implementation of the mandated C99/C++ preprocessor functionality packed
        behind an easy to use iterator interface, from Hartmut Kaiser. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added the possibility to continue the preprocessing after an error occured.
          &lt;/li&gt;
          &lt;li&gt;
            Added the macro introspection API to the wave::context object.
          &lt;/li&gt;
          &lt;li&gt;
            Added threading support to the library.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the overall performance by upto 30%.
          &lt;/li&gt;
          &lt;li&gt;
            Changed and unified preprocessor hook interface (this is an interface
            breaking change!), added several new preprocessor hook functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added serialization support.
          &lt;/li&gt;
          &lt;li&gt;
            Added new examples (for instance: Hannibal - a partial C++ parser, by
            Danny Havenith).
          &lt;/li&gt;
          &lt;li&gt;
            Added a new lexical analyzer based on Ben Hansons Lexertl library.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a large number of other bugs and problems.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;em&gt;semantic actions&lt;/em&gt; to static regexes. A semantic
            action is code that executes when part of a regular expression matches.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;custom assertions&lt;/em&gt; to static regexes. A custom
            assertion is a Boolean predicate that can participate in the regex match.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named regexes&lt;/em&gt; for embedding a static or dynamic
            regex into a dynamic regex. This can be used to create dynamic regex
            grammars.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named captures&lt;/em&gt; to dynamic regexes, like Perl.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The following compilers are officially supported in this release:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        HP aCC version 61400 on HP-UX.
      &lt;/li&gt;
      &lt;li&gt;
        Darwin GCC 4.01.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC up to version 4.2.1, on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 9.1 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10.1 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 7.1 and 8 on Windows (Visual Sudio .NET 2003 and 2005).
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      In addition the following compilers should be well supported, but weren't part
      of out release criteria for 1.35:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        IBM Visual Age 9.0 on AIX.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10 and later on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC 4.3 and later on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 9 (Visual Studio .NET 2008).
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Boost Jam 3.1.16</title><pubDate>Mon, 3 Dec 2007 04:09:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      This is mostly a bug fix release.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>https://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=72941&amp;release_id=558771</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;p&gt;
    This is mostly a bug fix release.
  &lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;
      Work around some Windows CMD.EXE programs that will fail executing a totally
      empty batch file. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Add support for detection and building with vc9. -- John P.
    &lt;/li&gt;
    &lt;li&gt;
      Plug memory leak when closing out actions. Thanks to Martin Kortmann for finding
      this. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Various improvements to __TIMING&lt;em&gt;RULE&lt;/em&gt;_
      and __ACTION&lt;em&gt;RULE&lt;/em&gt;_ target variable hooks.
      -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Change JAMDATE to use common ISO date format. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Add test for result status values of simple actions, i.e. empty actions. --
      Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Fix buffer overrun bug in expanding @() subexpressions. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Check empty string invariants, instead of assuming all strings are allocated.
      And reset strings when they are freed. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Add OSPLAT=PARISC for HP-UX PA-RISC. -- Boris G.
    &lt;/li&gt;
    &lt;li&gt;
      Make quietly actions really quiet by not printing the command output. The output
      for the quietly actions is still available through __ACTION&lt;em&gt;RULE&lt;/em&gt;_.
      -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Switch intel-win32 to use static multi thread runtime since the single thread
      static runtime is no longer available. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      When setting OSPLAT, check __ia64 macro. -- Boris G.
    &lt;/li&gt;
    &lt;li&gt;
      Get the unix timing working correctly. -- Noel B.
    &lt;/li&gt;
    &lt;li&gt;
      Add -fno-strict-aliasing to compilation with gcc. Which works around GCC-4.2
      crash problems. -- Boris G.
    &lt;/li&gt;
    &lt;li&gt;
      Increased support for Python integration. -- Vladimir P., Daniel W.
    &lt;/li&gt;
    &lt;li&gt;
      Allow specifying options with quotes, i.e. --with-python=xyz, to work around
      the CMD shell using = as an argument separator. -- Rene R.
    &lt;/li&gt;
    &lt;li&gt;
      Add values of variables specified with -s to .EVNRION module, so that we can
      override environment on command line. -- Vladimir P.
    &lt;/li&gt;
    &lt;li&gt;
      Make NORMALIZE_PATH convert to /. -- Vladimir P.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item></channel>
</rss>