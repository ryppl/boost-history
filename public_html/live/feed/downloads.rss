<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>BoostBook2RSS</generator>
    <title>Boost Downloads</title>
    <link>http://www.boost.org/feed/download.rss</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.42.0</title><pubDate>Tue 2 Feb 2010 14:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Uuid. Updated Libraries: Asio, Circular Buffer, Fusion, Graph,
      Integer, Iostreams, Program.Options, PropertyMap, Proto, Regex, Spirit, Unordered,
      Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.42.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_42_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
  A universally unique
        identifier, from Andy Tompkins.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new HTTP Server 4 example illustrating the use of stackless coroutines
            with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            Changed handler allocation and invocation to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
            to get the address of handler objects, rather than applying &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
            directly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2977&quot;&gt;#2977&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Restricted MSVC buffer debugging workaround to 2008, as it causes a crash
            with 2010 beta 2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3796&quot;&gt;#3796&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3822&quot;&gt;#3822&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a problem with the lifetime of handler memory, where Windows needs
            the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OVERLAPPED&lt;/span&gt;&lt;/code&gt; structure
            to be valid until both the initiating function call has returned and
            the completion packet has been delivered.
          &lt;/li&gt;
          &lt;li&gt;
            Don't block signals while performing system calls, but instead restart
            the calls if they are interrupted.
          &lt;/li&gt;
          &lt;li&gt;
            Documented the guarantee made by strand objects with respect to order
            of handler invocation.
          &lt;/li&gt;
          &lt;li&gt;
            Changed strands to use a pool of implementations, to make copying of
            strands cheaper.
          &lt;/li&gt;
          &lt;li&gt;
            Ensured that kqueue support is enabled for BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3626&quot;&gt;#3626&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost_&lt;/span&gt;&lt;/code&gt; prefix
            to the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;/code&gt;
            thread entry point function (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3809&quot;&gt;#3809&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation,
            only check the socket type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;/code&gt;
            or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;/code&gt;) if a service
            name has been specified. This should allow the emulation to work with
            raw sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added a workaround for some broken Windows firewalls that make a socket
            appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.
          &lt;/li&gt;
          &lt;li&gt;
            Applied a fix for reported excessive CPU usage under Solaris (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3670&quot;&gt;#3670&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added some support for platforms that use older compilers such as g++
            2.95 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3743&quot;&gt;#3743&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added methods erase_begin(size_type) and erase_end(size_type) with constant
            complexity for such types of stored elements which do not need an explicit
            destruction e.g. int or double.
          &lt;/li&gt;
          &lt;li&gt;
            Similarly changed implementation of the clear() method and the destructor
            so their complexity is now constant for such types of stored elements
            which do not require an explicit destruction (the complexity for other
            types remains linear).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The accumulator is the first argument to the functor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;accumulate&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2355&quot;&gt;#2355&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for associative iterators and views (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3473&quot;&gt;#3473&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old interface to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;,
            making new interface the default.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Reverted Trunk to release branch state (i.e. a &amp;quot;known good state&amp;quot;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/653&quot;&gt;653&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3084&quot;&gt;3084&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3177&quot;&gt;3177&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3180&quot;&gt;3180&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3548&quot;&gt;3568&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3657&quot;&gt;3657&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2134&quot;&gt;2134&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added long long support to &lt;tt&gt;boost::static_log2&lt;/tt&gt;, &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;,
            &lt;tt&gt;boost::static_signed_max&lt;/tt&gt;, &lt;tt&gt;boost::static_unsigned_min&lt;/tt&gt;&lt;tt&gt;boost::static_unsigned_max&lt;/tt&gt;,
            when available.
          &lt;/li&gt;
          &lt;li&gt;
            The argument type and the result type of &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;
            etc are now typedef'd. Formerly, they were hardcoded as &lt;tt&gt;unsigned
            long&lt;/tt&gt; and &lt;tt&gt;int&lt;/tt&gt; respectively. Please, use the
            provided typedefs in new code (and update old code as soon as possible).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed many outstanding issues. Thanks to Richard Smith for his work on
            this. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3612&quot;&gt;#3612&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3311&quot;&gt;#3311&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2094&quot;&gt;#2094&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3010&quot;&gt;#3010&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2894&quot;&gt;#2894&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3011&quot;&gt;#3011&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3352&quot;&gt;#3352&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3505&quot;&gt;#3505&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            For more information see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;library
            release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Information about option name added to a few exception classes and various
            clean ups in exception classes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3423&quot;&gt;#3423&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Description wordwrapping in presense of default parameters fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2613&quot;&gt;#2613&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Empty value in configuration file is now permitted (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1537&quot;&gt;#1537&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Quotes are no longer stripped from string values (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/850&quot;&gt;#850&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix endless loop in case of long default arguments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/689&quot;&gt;#689&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix compile warning caused by usage of boost::any (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2562&quot;&gt;#2562&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix memory bug in example/response_file.cpp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3525&quot;&gt;#3525&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Most compilation warnings were fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3608&quot;&gt;#3608&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make column width for description text configurable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3703&quot;&gt;#3703&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add general split function: split_unix() (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2561&quot;&gt;#2561&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable open config files from given file name (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3264&quot;&gt;#3264&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Additional flag for required options (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2982&quot;&gt;#2982&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable case insensitive style for command line (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3498&quot;&gt;#3498&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old header files (directly in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; directory); they were deprecated since
            1.40, replaced by headers in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix const correctness issues with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;
            and friends (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3364&quot;&gt;#3364&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Accomodate recent change to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt;,
            remove old support for Doxygen and pre-1.35 Fusion (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3553&quot;&gt;#3553&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In binary operations, when one operand has a user-specified domain and
            the other has the default domain, the user-specified domain trumps.
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
            to work with elaborated types.
          &lt;/li&gt;
          &lt;li&gt;
            Work around EDG compiler bug with function types and cv-qualification.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Functors rather than strings as format expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved error reporting when throwing exceptions to include better more
            relevant information.
          &lt;/li&gt;
          &lt;li&gt;
            Improved performance and reduced stack usage of recursive expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2802&quot;&gt;#2802&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3425&quot;&gt;#3425&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3507&quot;&gt;#3507&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3546&quot;&gt;#3546&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3631&quot;&gt;#3631&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3632&quot;&gt;#3632&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3715&quot;&gt;#3715&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3718&quot;&gt;#3718&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3763&quot;&gt;#3763&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3764&quot;&gt;#3764&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.2, see
        the '&lt;a href=&quot;/doc/libs/1_42_0/libs/spirit/doc/html/spirit/what_s_new.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support instantiating the containers with incomplete value types.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt;
            as a temporary workaround for the current &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;
            which can be inefficient because it has to find the next element to return
            an iterator (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3693&quot;&gt;#3693&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add templated find overload for compatible keys.
          &lt;/li&gt;
          &lt;li&gt;
            Improved codegear compatibility.
          &lt;/li&gt;
          &lt;li&gt;
            Other minor changes, full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_42_0&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;match_results&lt;/span&gt;&lt;/code&gt; no longer
            relies on undefined behavior in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3278&quot;&gt;#3278&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Do NOT copy singular iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3538&quot;&gt;#3538&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate gcc and darwin warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3734&quot;&gt;#3734&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Windows 2008, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Suse Linux 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, GCC 4.2.4, GCC 4.3.4 and GCC 4.4.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 and GCC 4.4.2 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 2.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0, 32 bit and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Boost Jam 3.1.17</title><pubDate>Sat, 29 Nov 2008 04:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      A year in the making this release has many stability improvements and various
      performance improvements. And because of the efforts of Jurko the code is considerably
      more readable!
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=72941&amp;release_id=643622</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;p&gt;
    A year in the making this release has many stability improvements and various
    performance improvements. And because of the efforts of Jurko the code is considerably
    more readable!
  &lt;/p&gt;
  &lt;p&gt;
    &lt;ul&gt;&lt;li&gt;Reflect the results of calling bjam from Python. -- &lt;em&gt;Rene R.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;For building on Windows: Rework how arguments are parsed and tested to fix handling
    of quoted arguments, options arguments, and arguments with &amp;quot;=&amp;quot;. --
    &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Try to work around at least one compiler bug with
    GCC and variable aliasing that causes crashes with hashing file cache entries.
    -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Add -Wc,-fno-strict-aliasing for QCC/QNX to avoid
    the same aliasing crashes as in the general GCC 4.x series (thanks to Niklas
    Angare for the fix). -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;On Windows let the child
    bjam commands inherit stdin, as some commands assume it's available. -- &lt;em&gt;Rene
    R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;On Windows don't limit bjam output to ASCII as some tools output
    characters in extended character sets. -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Isolate
    running of bjam tests to individual bjam instances to prevent possible spillover
    errors from one test affecting another test. Separate the bjam used to run the
    tests vs. the bjam being tested. And add automatic re-building of the bjam being
    tested. -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Fix some possible overrun issues revealed
    by Fortify build. Thanks to Steven Robbins for pointing out the issues. -- &lt;em&gt;Rene
    R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Handle \n and \r escape sequences. -- &lt;em&gt;Vladimir P.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;Minor edits to remove -Wall warnings. -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Dynamically
    adjust pwd buffer query size to allow for when PATH_MAX is default defined instead
    of being provided by the system C library. -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Minor
    perf improvement for bjam by replacing hash function with faster version. Only
    1% diff for Boost tree. -- &lt;em&gt;Rene R.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Updated Boost Jam's error
    location reporting when parsing Jamfiles. Now it reports the correct error location
    information when encountering an unexpected EOF. It now also reports where an
    invalid lexical token being read started instead of finished which makes it much
    easier to find errors like unclosed quotes or curly braces. -- &lt;em&gt;Jurko
    G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Removed the -xarch=generic architecture from build.jam as this
    option is unknown so the Sun compilers on Linux. -- &lt;em&gt;Noel B.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;Fixed a bug with T_FATE_ISTMP getting reported as T_FATE_ISTMP &amp;amp; T_FATE_NEEDTMP
    at the same time due to a missing break in a switch statement. -- &lt;em&gt;Jurko
    G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Fixed a Boost Jam bug causing it to sometimes trigger actions depending
    on targets that have not been built yet. -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Added
    missing documentation for Boost Jam's :T variable expansion modifier which converts
    all back-slashes ('\') to forward slashed ('/'). -- &lt;em&gt;Jurko G.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;Added Boost Jam support for executing command lines longer than 2047 characters
    (up to 8191) characters when running on Windows XP or later OS version. -- &lt;em&gt;Jurko
    G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Fixed a Boost Jam bug on Windows causing its SHELL command not
    to work correctly with some commands containing quotes. -- &lt;em&gt;Jurko G.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;Corrected a potential memory leak in Boost Jam's builtin_shell() function that
    would appear should Boost Jam ever start to release its allocated string objects.
    -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Made all Boost Jam's ECHO commands automatically
    flush the standard output to make that output more promptly displayed to the
    user. -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Made Boost Jam tests quote their bjam
    executable name when calling it allowing those executables to contain spaces
    in their name and/or path. -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Change execunix.c
    to always use fork() instead of vfork() on the Mac. This works around known issues
    with bjam on PPC under Tiger and a problem reported by Rene with bjam on x86
    under Leopard. -- &lt;em&gt;Noel B.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Corrected a bug in Boost Jam's
    base Jambase script causing it to trim the error message displayed when its boost-build
    rule gets called multiple times. -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;When importing
    from Python into an module with empty string as name, import into root module.
    -- &lt;em&gt;Vladimir P.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Patch for the NORMALIZE_PATH builtin Boost
    Jam rule as well as an appropriate update for the path.jam Boost Build module
    where that rule was being used to implement path join and related operations.
    -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Fixed a bug causing Boost Jam not to handle
    target file names specified as both short and long file names correctly. --
    &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Relaxed test, ignoring case of drive letter. --
    &lt;em&gt;Roland S.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Implemented a patch contributed by Igor Nazarenko
    reimplementing the list_sort() function to use a C qsort() function instead of
    a hand-crafted merge-sort algorithm. Makes some list sortings (e.g. 1,2,1,2,1,2,1,2,
    ...) extremely faster, in turn significantly speeding up some project builds.
    -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Fixed a bug with bjam not handling the '' root
    Windows path correctly without its drive letter being specified. -- &lt;em&gt;Jurko
    G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Solved the problem with child process returning the value 259 (Windows
    constant STILL_ACTIVE) causing bjam never to detect that it exited and therefore
    keep running in an endless loop. -- &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Solved the
    problem with bjam going into an active wait state, hogging up processor resources,
    when waiting for one of its child processes to terminate while not all of its
    available child process slots are being used. -- &lt;em&gt;Jurko G.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;Solved a race condition between bjam's output reading/child process termination
    detection and the child process's output generation/termination which could have
    caused bjam not to collect the terminated process's final output. -- &lt;em&gt;Jurko
    G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Change from vfork to fork for executing actions on Darwin to improve
    stability. -- &lt;em&gt;Noel B.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Code reformatting and cleanups. --
    &lt;em&gt;Jurko G.&lt;/em&gt; &lt;/li&gt;
    &lt;li&gt;Implement ISFILE built-in. -- &lt;em&gt;Vladimir
    P.&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.40.0.cmake2 (Boost + CMake)</title><pubDate>Sat, 29 Nov 2008 04:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Latest patch release of Boost.CMake
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sodium.resophonic.com/boost-cmake/1.40.0.cmake2</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;p&gt;
    This is the most recent separately-distributed patch release of cmakeable boost
    version 1.40.0.cmake2. Support for the upcoming cmake version 2.8.0 is in, as
    well as a slew of tweaks for various platforms and compilers.
  &lt;/p&gt;
  &lt;p&gt;
    See the &lt;a href=&quot;http://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost.CMake wiki
    page&lt;/a&gt; for more information.
  &lt;/p&gt;
&lt;/div&gt;</description></item></channel>
</rss>