<boost xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <library>
    <key>algorithm/minmax</key>
    <boost-version>1.32.0</boost-version>
    <name>Min-Max</name>
    <authors>Herv&#233; Br&#246;nnimann</authors>
    <description>Standard library extensions for simultaneous
    min/max and min/max element computations.</description>
    <documentation>libs/algorithm/minmax/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>algorithm/string</key>
    <boost-version>1.32.0</boost-version>
    <name>String Algo</name>
    <authors>Pavol Droba</authors>
    <description>String algorithms library.</description>
    <documentation>doc/html/string_algo.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>any</key>
    <boost-version>1.23.0</boost-version>
    <name>Any</name>
    <authors>Kevlin Henney</authors>
    <description>Safe, generic container for single values of
    different value types.</description>
    <documentation>doc/html/any.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>array</key>
    <boost-version>1.17.0</boost-version>
    <name>Array</name>
    <authors>Nicolai Josuttis</authors>
    <description>STL compliant container wrapper for arrays of
    constant size.</description>
    <documentation>doc/html/array.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>assign</key>
    <boost-version>1.32.0</boost-version>
    <name>Assign</name>
    <authors>Thorsten Ottosen</authors>
    <description>Filling containers with constant or generated data
    has never been easier.</description>
    <documentation>libs/assign/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>bind</key>
    <boost-version>1.25.0</boost-version>
    <name>Bind</name>
    <authors>Peter Dimov</authors>
    <description>Generalized binders for function/object/pointers
    and member functions.</description>
    <documentation>libs/bind/bind.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>bind/mem_fn</key>
    <boost-version>1.25.0</boost-version>
    <name>Member Function</name>
    <authors>Peter Dimov</authors>
    <description>Generalized binders for function/object/pointers
    and member functions.</description>
    <documentation>libs/bind/mem_fn.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>bind/ref</key>
    <boost-version>1.25.0</boost-version>
    <name>Ref</name>
    <authors>Jaako J&#228;rvi, Peter Dimov, Doug Gregor, and Dave
    Abrahams</authors>
    <description>A utility library for passing references to
    generic functions.</description>
    <documentation>doc/html/ref.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>compatibility</key>
    <boost-version>1.21.2</boost-version>
    <name>Compatibility</name>
    <authors>Ralf Grosse-Kunstleve and Jens Maurer</authors>
    <description>Help for non-conforming standard
    libraries.</description>
    <documentation>libs/compatibility/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>concept_check</key>
    <boost-version>1.19.0</boost-version>
    <name>Concept Check</name>
    <authors>Jeremy Siek</authors>
    <description>Tools for generic programming.</description>
    <documentation>
    libs/concept_check/concept_check.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>config</key>
    <boost-version>1.9.0</boost-version>
    <name>Config</name>
    <authors></authors>
    <description>Helps boost library developers adapt to compiler
    idiosyncrasies; not intended for library users.</description>
    <documentation>libs/config/config.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>conversion</key>
    <boost-version>1.20.0</boost-version>
    <name>Conversion</name>
    <authors>Dave Abrahams and Kevlin Henney</authors>
    <description>Polymorphic and lexical casts.</description>
    <documentation>libs/conversion/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>crc</key>
    <boost-version>1.22.0</boost-version>
    <name>CRC</name>
    <authors>Daryle Walker</authors>
    <description>Cyclic Redundancy Code.</description>
    <documentation>libs/crc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>date_time</key>
    <boost-version>1.29.0</boost-version>
    <name>Date Time</name>
    <authors>Jeff Garland</authors>
    <description>Date-Time library.</description>
    <documentation>doc/html/date_time.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>dynamic_bitset</key>
    <boost-version>1.29.0</boost-version>
    <name>Dynamic Bitset</name>
    <authors>Jeremy Siek and Chuck Allison</authors>
    <description>A runtime sized version of
    std::bitset.</description>
    <documentation>
    libs/dynamic_bitset/dynamic_bitset.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>disjoint_sets</key>
    <boost-version>1.9.0</boost-version>
    <name>Disjoint Sets</name>
    <authors></authors>
    <description></description>
    <documentation>
    libs/disjoint_sets/disjoint_sets.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>filesystem</key>
    <boost-version>1.30.0</boost-version>
    <name>Filesystem</name>
    <authors>Beman Dawes</authors>
    <description>Portable paths, iteration over directories, and
    other useful filesystem operations.</description>
    <documentation>libs/filesystem/doc/index.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>foreach</key>
    <boost-version>1.34.0</boost-version>
    <name>Foreach</name>
    <authors>Eric Niebler</authors>
    <description>BOOST_FOREACH macro for easily iterating over the
    elements of a sequence.</description>
    <documentation>doc/html/foreach.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>format</key>
    <boost-version>1.29.0</boost-version>
    <name>Format</name>
    <authors>Samuel Krempp</authors>
    <description>Type-safe 'printf-like' format
    operations.</description>
    <documentation>libs/format/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>function</key>
    <boost-version>1.23.0</boost-version>
    <name>Function</name>
    <authors>Doug Gregor</authors>
    <description>Function object wrappers for deferred calls or
    callbacks.</description>
    <documentation>doc/html/function.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>functional</key>
    <boost-version>1.16.0</boost-version>
    <name>Functional</name>
    <authors>Mark Rodgers</authors>
    <description>Enhanced function object adaptors.</description>
    <documentation>libs/functional/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>functional/hash</key>
    <boost-version>1.33.0</boost-version>
    <name>Functional Hash</name>
    <authors>Daniel James</authors>
    <description>A TR1 hash function object that can be extended to
    hash user defined types.</description>
    <documentation>doc/html/hash.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>true</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>graph</key>
    <boost-version>1.18.0</boost-version>
    <name>Graph</name>
    <authors>Jeremy Siek and a University of Notre Dame
    team</authors>
    <description>Generic graph components and
    algorithms.</description>
    <documentation>
    libs/graph/doc/table_of_contents.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>integer</key>
    <boost-version>1.9.0</boost-version>
    <name>Integer</name>
    <authors></authors>
    <description>Headers to ease dealing with integral
    types.</description>
    <documentation>libs/integer/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>io</key>
    <boost-version>1.28.0</boost-version>
    <name>IO State Savers</name>
    <authors>Daryle Walker</authors>
    <description>Save I/O state to prevent jumbled
    data.</description>
    <documentation>libs/io/doc/ios_state.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>iostreams</key>
    <boost-version>1.33.0</boost-version>
    <name>Iostreams</name>
    <authors>Jonathan Turkanis</authors>
    <description>Framework for defining streams, stream buffers and
    i/o filters.</description>
    <documentation>libs/iostreams/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>iterator</key>
    <boost-version>1.21.0</boost-version>
    <name>Iterators</name>
    <authors>Dave Abrahams, Jeremy Siek, and Thomas Witt</authors>
    <description>Iterator construction framework, adaptors,
    concepts, and more.</description>
    <documentation>libs/iterator/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>lambda</key>
    <boost-version>1.28.0</boost-version>
    <name>Lambda</name>
    <authors>Jaakko J&#228;rvi and Gary Powell</authors>
    <description>Define small unnamed function objects at the
    actual call site, and more.</description>
    <documentation>doc/html/lambda.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>logic/tribool</key>
    <boost-version>1.32.0</boost-version>
    <name>Tribool</name>
    <authors>Doug Gregor</authors>
    <description>3-state boolean type library.</description>
    <documentation>doc/html/tribool.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>math</key>
    <boost-version>1.23.0</boost-version>
    <name>Math</name>
    <authors>various</authors>
    <description>Several contributions in the domain of
    mathematics.</description>
    <documentation>libs/math/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>math/common_factor</key>
    <boost-version>1.26.0</boost-version>
    <name>Math Common Factor</name>
    <authors>Daryle Walker</authors>
    <description>Greatest common divisor and least common
    multiple.</description>
    <documentation>libs/math/doc/common_factor.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>math/octonion</key>
    <boost-version>1.23.0</boost-version>
    <name>Math Octonion</name>
    <authors>Hubert Holin</authors>
    <description>Octonions.</description>
    <documentation>libs/math/octonion/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>math/quaternion</key>
    <boost-version>1.23.0</boost-version>
    <name>Math Quaternion</name>
    <authors>Hubert Holin</authors>
    <description>Quaternions.</description>
    <documentation>libs/math/quaternion/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>math/special_functions</key>
    <boost-version>1.23.0</boost-version>
    <name>Math Special Functions</name>
    <authors>Hubert Holin</authors>
    <description>Mathematical special functions such as atanh,
    sinc, and sinhc.</description>
    <documentation>
    libs/math/special_functions/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>mpl</key>
    <boost-version>1.30.0</boost-version>
    <name>MPL</name>
    <authors>Aleksey Gurtovoy</authors>
    <description>Template metaprogramming framework of compile-time
    algorithms, sequences and metafunction classes.</description>
    <documentation>libs/mpl/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>multi_array</key>
    <boost-version>1.29.0</boost-version>
    <name>Multi-Array</name>
    <authors>Ron Garcia</authors>
    <description>Multidimensional containers and adaptors for
    arrays of contiguous data.</description>
    <documentation>libs/multi_array/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>multi_index</key>
    <boost-version>1.32.0</boost-version>
    <name>Multi-Index</name>
    <authors>Joaqu&#237;n M L&#243;pez Mu&#241;oz</authors>
    <description>Containers with multiple STL-compatible access
    interfaces.</description>
    <documentation>libs/multi_index/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>numeric/conversion</key>
    <boost-version>1.32.0</boost-version>
    <name>Numeric Conversion</name>
    <authors>Fernando Cacciola</authors>
    <description>Optimized Policy-based Numeric
    Conversions.</description>
    <documentation>
    libs/numeric/conversion/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>numeric/interval</key>
    <boost-version>1.30.0</boost-version>
    <name>Interval</name>
    <authors>Guillaume Melquiond, Herv&#180; Br&#246;nnimann and
    Sylvain Pion</authors>
    <description>Extends the usual arithmetic functions to
    mathematical intervals.</description>
    <documentation>
    libs/numeric/interval/doc/interval.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>numeric/ublas</key>
    <boost-version>1.29.0</boost-version>
    <name>uBLAS</name>
    <authors>Joerg Walter and Mathias Koch</authors>
    <description>Basic linear algebra for dense, packed and sparse
    matrices.</description>
    <documentation>libs/numeric/ublas/doc/index.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>optional</key>
    <boost-version>1.30.0</boost-version>
    <name>Optional</name>
    <authors>Fernando Cacciola</authors>
    <description>Discriminated-union wrapper for optional
    values.</description>
    <documentation>libs/optional/doc/optional.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>parameter</key>
    <boost-version>1.33.0</boost-version>
    <name>Parameter</name>
    <authors>David Abrahams and Daniel Wallin</authors>
    <description>Write functions that accept arguments by
    name.</description>
    <documentation>
    libs/parameter/doc/html/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>pool</key>
    <boost-version>1.21.0</boost-version>
    <name>Pool</name>
    <authors>Steve Cleary</authors>
    <description>Memory pool management.</description>
    <documentation>libs/pool/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>preprocessor</key>
    <boost-version>1.26.0</boost-version>
    <name>Preprocessor</name>
    <authors>Vesa Karvonen and Paul Mensonides</authors>
    <description>Preprocessor metaprogramming tools including
    repetition and recursion.</description>
    <documentation>libs/preprocessor/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>program_options</key>
    <boost-version>1.32.0</boost-version>
    <name>Program Options</name>
    <authors>Vladimir Prus</authors>
    <description>Access to configuration data given on command
    line, in config files and other sources.</description>
    <documentation>doc/html/program_options.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>property_map</key>
    <boost-version>1.19.0</boost-version>
    <name>Property Map</name>
    <authors>Jeremy Siek</authors>
    <description>Concepts defining interfaces which map key objects
    to value objects.</description>
    <documentation>
    libs/property_map/property_map.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>ptr_container</key>
    <boost-version>1.33.0</boost-version>
    <name>Pointer Container</name>
    <authors>Thorsten Ottosen</authors>
    <description>Containers for storing heap-allocated polymorphic
    objects to ease OO-programming.</description>
    <documentation>
    libs/ptr_container/doc/ptr_container.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>python</key>
    <boost-version>1.19.0</boost-version>
    <name>Python</name>
    <authors>Dave Abrahams</authors>
    <description>Reflects C++ classes and functions into
    Python.</description>
    <documentation>libs/python/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>random</key>
    <boost-version>1.15.0</boost-version>
    <name>Random</name>
    <authors>Jens Maurer</authors>
    <description>A complete system for random number
    generation.</description>
    <documentation>libs/random/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>range</key>
    <boost-version>1.32.0</boost-version>
    <name>Range</name>
    <authors>Thorsten Ottosen</authors>
    <description>A new infrastructure for generic algorithms that
    builds on top of the new iterator concepts.</description>
    <documentation>libs/range/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>rational</key>
    <boost-version>1.11.0</boost-version>
    <name>Rational</name>
    <authors>Paul Moore</authors>
    <description>A rational number class.</description>
    <documentation>libs/rational/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>regex</key>
    <boost-version>1.18.0</boost-version>
    <name>Regex</name>
    <authors>John Maddock</authors>
    <description>Regular expression library.</description>
    <documentation>libs/regex/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>serialization</key>
    <boost-version>1.32.0</boost-version>
    <name>Serialization</name>
    <authors>Robert Ramey</authors>
    <description>Serialization for persistence and
    marshalling.</description>
    <documentation>
    libs/serialization/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>signals</key>
    <boost-version>1.29.0</boost-version>
    <name>Signals</name>
    <authors>Doug Gregor</authors>
    <description>Managed signals &amp; slots callback
    implementation.</description>
    <documentation>doc/html/signals.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>smart_ptr</key>
    <boost-version>1.23.0</boost-version>
    <name>Smart Ptr</name>
    <authors>Greg Colvin, Beman Dawes, Peter Dimov, and Darin
    Adler</authors>
    <description>Five smart pointer class templates.</description>
    <documentation>libs/smart_ptr/smart_ptr.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>static_assert</key>
    <boost-version>1.19.0</boost-version>
    <name>Static Assert</name>
    <authors>John Maddock</authors>
    <description>Static assertions (compile time
    assertions).</description>
    <documentation>doc/html/boost_staticassert.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>spirit</key>
    <boost-version>1.30.0</boost-version>
    <name>Spirit</name>
    <authors>Joel de Guzman and team</authors>
    <description>LL parser framework represents parsers directly as
    EBNF grammars in inlined C++.</description>
    <documentation>libs/spirit/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>statechart</key>
    <boost-version>1.34.0</boost-version>
    <name></name>
    <authors></authors>
    <description></description>
    <documentation></documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>test</key>
    <boost-version>1.21.0</boost-version>
    <name>Test</name>
    <authors>Gennadiy Rozental</authors>
    <description>Support for simple program testing, full unit
    testing, and for program execution monitoring.</description>
    <documentation>libs/test/doc/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>thread</key>
    <boost-version>1.25.0</boost-version>
    <name>Thread</name>
    <authors>William Kempf</authors>
    <description>Portable C++ multi-threading.</description>
    <documentation>doc/html/threads.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>timer</key>
    <boost-version>1.9.0</boost-version>
    <name>Timer</name>
    <authors>Beman Dawes</authors>
    <description>Event timer, progress timer, and progress display
    classes.</description>
    <documentation>libs/timer/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>tokenizer</key>
    <boost-version>1.23.0</boost-version>
    <name>Tokenizer</name>
    <authors>John Bandela</authors>
    <description>Break of a string or other character sequence into
    a series of tokens.</description>
    <documentation>libs/tokenizer/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>tr1</key>
    <boost-version>1.34.0</boost-version>
    <name>TR1</name>
    <authors>John Maddock</authors>
    <description>An implementation of the Technical Report on C++
    Library Extensions, using other Boost libraries as a
    basis.</description>
    <documentation>doc/html/boost_tr1.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>tuple</key>
    <boost-version>1.24.0</boost-version>
    <name>Tuple</name>
    <authors>Jaakko J&#228;rvi</authors>
    <description>Ease definition of functions returning multiple
    values, and more.</description>
    <documentation>
    libs/tuple/doc/tuple_users_guide.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>type_traits</key>
    <boost-version>1.13.0</boost-version>
    <name>Type Traits</name>
    <authors>John Maddock, Steve Cleary, et al</authors>
    <description>Templates for fundamental properties of
    types.</description>
    <documentation>doc/html/boost_typetraits.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>typeof</key>
    <boost-version>1.34.0</boost-version>
    <name></name>
    <authors></authors>
    <description></description>
    <documentation></documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility</key>
    <boost-version>1.13.0</boost-version>
    <name>Utility</name>
    <authors>Dave Abrahams and others</authors>
    <description>Class noncopyable plus checked_delete(),
    checked_array_delete(), next(), prior() function templates,
    plus base-from-member idiom.</description>
    <documentation>libs/utility/utility.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility/call_traits</key>
    <boost-version>1.13.0</boost-version>
    <name>Call Traits</name>
    <authors>John Maddock, Howard Hinnant, et al</authors>
    <description>Defines types for passing
    parameters.</description>
    <documentation>libs/utility/call_traits.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility/compressed_pair</key>
    <boost-version>1.13.0</boost-version>
    <name>Compressed Pair</name>
    <authors>John Maddock, Howard Hinnant, et al</authors>
    <description>Empty member optimization.</description>
    <documentation>libs/utility/compressed_pair.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility/enable_if</key>
    <boost-version>1.31.0</boost-version>
    <name>Enable If</name>
    <authors>Jaakko J&#228;rvi, Jeremiah Willcock, and Andrew
    Lumsdaine</authors>
    <description>Selective inclusion of function template
    overloads.</description>
    <documentation>libs/utility/enable_if.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility/in_place_factories</key>
    <boost-version>1.9.0</boost-version>
    <name>In Place Factory, Typed In Place Factory</name>
    <authors>Fernando Cacciola</authors>
    <description>Generic in-place construction of contained objects
    with a variadic argument-list.</description>
    <documentation>
    libs/utility/in_place_factories.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility/operators</key>
    <boost-version>1.9.0</boost-version>
    <name>Operators</name>
    <authors>Dave Abrahams and Jeremy Siek</authors>
    <description>Templates ease arithmetic classes and
    iterators.</description>
    <documentation>libs/utility/operators.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>utility/value_initialized</key>
    <boost-version>1.9.0</boost-version>
    <name>Value Initialized</name>
    <authors>Fernando Cacciola</authors>
    <description>Wrapper for uniform-syntax value initialization,
    based on the original idea of David Abrahams.</description>
    <documentation>libs/utility/value_init.htm</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>variant</key>
    <boost-version>1.31.0</boost-version>
    <name>Variant</name>
    <authors>Eric Friedman and Itay Maman</authors>
    <description>Safe, generic, stack-based discriminated union
    container.</description>
    <documentation>doc/html/variant.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>wave</key>
    <boost-version>1.33.0</boost-version>
    <name>Wave</name>
    <authors>Hartmut Kaiser</authors>
    <description>Standards conformant implementation of the
    mandated C99/C++ preprocessor functionality packed behind an
    easy to use iterator interface.</description>
    <documentation>libs/wave/index.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
  <library>
    <key>xpressive</key>
    <boost-version>1.34.0</boost-version>
    <name>Xpressive</name>
    <authors>Eric Niebler</authors>
    <description>Regular expressions that can be written as strings
    or as expression templates, and which can refer to each other
    and themselves recursively with the power of context-free
    grammars.</description>
    <documentation>doc/html/xpressive.html</documentation>
    <std-proposal>false</std-proposal>
    <std-tr1>false</std-tr1>
    <header-only>true</header-only>
    <autolink>false</autolink>
  </library>
</boost>
