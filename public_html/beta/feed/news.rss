<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>BoostBook2RSS</generator>
    <title>Boost News</title>
    <link>http://www.boost.org/feed/news.rss</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.38.0</title><pubDate>$Date: 2009/02/07 14:26:19 $</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Flyweight, ScopeExit, Swap. Updated Libraries: Accumulators,
      Config, Date_Time, Exception, Filesystem, Graph, Hash, Interprocess, Intrusive,
      Math, Multi-index Containers, Proto, Regex, TR1, Type Traits, Unordered, Xpressive.
      Other Changes: Experimental CMake build system.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;div id=&quot;version_1_38_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Design pattern to manage large quantities of highly redundant objects,
            from Joaquín M López Muñoz.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/scope_exit/doc/html/index.html&quot;&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Execute arbitrary code at scope exit, from Alexander Nasonov.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/swap.html&quot;&gt;Swap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Enhanced generic swap function, from Joseph Gauterin.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/any.html&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use a by-value argument for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2311&quot;&gt;#2311&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_sum&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_count&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_mean&lt;/span&gt;&lt;/code&gt;
            accumulators.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add new macros BOOST_NO_STD_UNORDERED and BOOST_NO_INITIALIZER_LISTS.
          &lt;/li&gt;
          &lt;li&gt;
            Added Codegear compiler support.
          &lt;/li&gt;
          &lt;li&gt;
            Added Dragonfly to the BSD family of configs.
          &lt;/li&gt;
          &lt;li&gt;
            Updated MSVC's binary ABI settings to match compiler default when doing
            64-bit builds.
          &lt;/li&gt;
          &lt;li&gt;
            Recognise latest compilers from MS and Intel.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;Date_Time&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for formatting and reading time durations longer than 24
            hours with new formatter: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Removed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;testfrmwk&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
            file from the public include directory.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed several bugs and compile errors.
          &lt;/li&gt;
          &lt;li&gt;
            For full details see the &lt;a href=&quot;/doc/libs/1_38_0/doc/html/date_time/details.html#date_time.changes&quot;&gt;change
            history&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved and more customizable &lt;a href=&quot;/libs/exception/doc/diagnostic_information.html&quot;&gt;diagnostic_information&lt;/a&gt;
            output.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix native(name) test failures on POSIX-like systems.
          &lt;/li&gt;
          &lt;li&gt;
            Several bugfixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2543&quot;&gt;#2543&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2224&quot;&gt;#2224&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2531&quot;&gt;#2531&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1840&quot;&gt;#1840&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2542&quot;&gt;#2542&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new algorithms for Traveling Salesman Problem approximation (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;metric_tsp_approx&lt;/span&gt;&lt;/code&gt;) and resource-constrained
            Shortest Paths (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;r_c_shortest_paths&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support for named vertices in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of bugfixes ( &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/416&quot;&gt;#416&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1622&quot;&gt;#1622&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1700&quot;&gt;#1700&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2209&quot;&gt;#2209&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2392&quot;&gt;#2392&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2460&quot;&gt;#2460&lt;/a&gt;,
            and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2550&quot;&gt;#2550&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; has been moved to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. The current location is deprecated.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail, see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_38_0&quot;&gt;library
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated documentation to show rvalue-references funcions instead of emulation
            functions.
          &lt;/li&gt;
          &lt;li&gt;
            More non-copyable classes are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Move-constructor and assignments now leave moved object in default-constructed
            state instead of just swapping contents.
          &lt;/li&gt;
          &lt;li&gt;
            Several bugfixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2391&quot;&gt;#2391&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2431&quot;&gt;#2431&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1390&quot;&gt;#1390&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2570&quot;&gt;#2570&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2528&quot;&gt;#2528&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New treap-based containers: treap, treap_set, treap_multiset.
          &lt;/li&gt;
          &lt;li&gt;
            Corrected compilation bug for Windows-based 64 bit compilers.
          &lt;/li&gt;
          &lt;li&gt;
            Corrected exception-safety bugs in container constructors.
          &lt;/li&gt;
          &lt;li&gt;
            Updated documentation to show rvalue-references funcions instead of emulation
            functions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added Johan Råde's optimised floating point classification routines.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed code so that it compiles in GCC's -pedantic mode (bug report &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1451&quot;&gt;#1451&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Some
        redundant type definitions have been deprecated. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_38&quot;&gt;release notes&lt;/a&gt;
        for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix problem with SFINAE of binary operators (Bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2407&quot;&gt;2407&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call&lt;/span&gt;&lt;/code&gt; transform for callable transforms
            with &amp;gt;3 arguments.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;/code&gt; changed behavior for array-by-value
            terminals.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;/code&gt; requires
            only Forward Sequences rather than Random Access Sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Deprecate legacy undocumented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_DEFINE_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VARARG_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;FUNCTION_TEMPLATE&lt;/span&gt;&lt;/code&gt;
            macros.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_REPEAT&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_LOCAL_ITERATE&lt;/span&gt;&lt;/code&gt;
            macros to help with repetitive code generation
          &lt;/li&gt;
          &lt;li&gt;
            Support for nullary expressions with tag types other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;terminal&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Allow 0- and 1-argument variants of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;or_&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;em&gt;Breaking change&lt;/em&gt;: empty expressions,
            and empty alternatives are now allowed when using the Perl regular expression
            syntax. This change has been added for Perl compatibility, when the new
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;syntax_option_type&lt;/span&gt;&lt;/code&gt; &lt;em&gt;no_empty_expressions&lt;/em&gt;
            is set then the old behaviour is preserved and empty expressions are
            prohibited. This is issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1081&quot;&gt;#1081&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for Perl style ${n} expressions in format strings (issue
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2556&quot;&gt;#2556&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for accessing the location of sub-expressions within the
            regular expression string (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2269&quot;&gt;#2269&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed compiler compatibility issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2244&quot;&gt;#2244&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2514&quot;&gt;#2514&lt;/a&gt;,
            and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2244&quot;&gt;#2458&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/thread.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            No longer catches unhandled exceptions in threads as this debuggers couldn't
            identify the cause of unhandled exceptions in threads. An unhandled exception
            will still cause the application to terminate.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for the TR1 math functions and the unordered containers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Codegear intrinsics.
          &lt;/li&gt;
          &lt;li&gt;
            Minor tweaks to warning suppression and alignment_of code.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use &lt;a href=&quot;/libs/utility/swap.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Use a larger prime number list for selecting the number of buckets.
          &lt;/li&gt;
          &lt;li&gt;
            Use &lt;a href=&quot;/libs/type_traits/doc/html/boost_typetraits/category/alignment.html&quot;&gt;aligned
            storage&lt;/a&gt; to store the types.
          &lt;/li&gt;
          &lt;li&gt;
            Add support for C++0x initializer lists where they're available.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail, see the &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_38_0&quot;&gt;library
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;/code&gt; gets nested
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;syntax_option_flags&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;/code&gt; typedef, for
            compatibility with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Ported to Proto v4; Proto v2 at &lt;tt&gt;boost/xpressive/proto&lt;/tt&gt;
            has been removed.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_error&lt;/span&gt;&lt;/code&gt; inherits
            from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exception&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.other_changes&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Changes&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Experimental support for building Boost with &lt;a href=&quot;http://www.cmake.org/&quot;&gt;CMake&lt;/a&gt;
        has been introduced in this version. For more details see the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;wiki&lt;/a&gt;,
        Discussion is taking place on the &lt;a href=&quot;http://lists.boost.org/mailman/listinfo.cgi/boost-cmake&quot;&gt;Boost-cmake
        mailing list&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        Fixed subversion properties for several files. Most notably, unix shell scripts
        should alway have unix line endings, even in the windows packages.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel OS X 10.4.10, 10.5.2
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC OS X 10.4.9
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.2 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Debian &amp;quot;unstable&amp;quot;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        HP-UX:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on HP-UX 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            HP C/aC++ B3910B A.06.17 on HP-UX 64-bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on OpenSuSE Linux
          &lt;/li&gt;
          &lt;li&gt;
            pgCC 8.0-0a 64-bit target on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.1, 10.0 on OS X 10.4.10
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on OS X 10.5.2
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista EE 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 express on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0, using STLport, on XP and Windows Mobile 5.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1, using STLport, on XP
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            Borland 6.1.0
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau 4.3.10.1 beta 2, with a Visual C++ 9.0 backend.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.4, on Cygwin
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        NetBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        QNX:
        &lt;ul&gt;
          &lt;li&gt;
            QNX Software Development Platform 6.4.0 x86
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release. Thanks to Vicente Botet for helping compile these
      release notes.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.37.0</title><pubDate>Mon, 03 Nov 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Proto. Updated Libraries: Asio, Circular Buffer, Dynamic Bitset,
      Exception, Hash, Interprocess, Intrusive, Math, Type Traits, Unordered
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=637761</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_37_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Expression template library and compiler construction toolkit for domain-specific
            embedded languages, from Eric Niebler.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Enhanced CompletionCondition concept with the signature &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CompletionCondition&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;, where the return value indicates the
            maximum number of bytes to be transferred on the next read or write operation.
            (The old CompletionCondition signature is still supported for backwards
            compatibility).
          &lt;/li&gt;
          &lt;li&gt;
            New windows::overlapped_ptr class to allow arbitrary overlapped I/O functions
            (such as TransmitFile) to be used with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            On recent versions of Linux, an eventfd descriptor is now used (rather
            than a pipe) to interrupt a blocked select/epoll reactor.
          &lt;/li&gt;
          &lt;li&gt;
            Added const overloads of lowest_layer().
          &lt;/li&gt;
          &lt;li&gt;
            Synchronous read, write, accept and connect operations are now thread
            safe (meaning that it is now permitted to perform concurrent synchronous
            operations on an individual socket, if supported by the OS).
          &lt;/li&gt;
          &lt;li&gt;
            Reactor-based io_service implementations now use lazy initialisation
            to reduce the memory usage of an io_service object used only as a message
            queue.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new methods &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_linearized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;const_iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes and documentation updates.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Constructor &amp;quot;do the right thing&amp;quot; dispatch, a la standard sequence
            containers (follows the proposed resolution of &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438&quot;&gt;library
            issue 438&lt;/a&gt;, currently in the &lt;tt&gt;C++0x&lt;/tt&gt; working
            paper).
          &lt;/li&gt;
          &lt;li&gt;
            Improvements to documentation, code examples and implementation.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for non-RTTI builds.
          &lt;/li&gt;
          &lt;li&gt;
            Optimizations.
          &lt;/li&gt;
          &lt;li&gt;
            A new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
            which can be used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
            when throwing, to automatically record information about the location
            of the throw in the exception object.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor bug fix (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2264&quot;&gt;ticket
            2264&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added placement insertion (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;...) methods to containers.
          &lt;/li&gt;
          &lt;li&gt;
            Containers can be used now in recursive types.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Intrusive now takes advantage of compilers with variadic templates.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clone_from&lt;/span&gt;&lt;/code&gt; functions
            now copy predicates and hash functions of associative containers.
          &lt;/li&gt;
          &lt;li&gt;
            Added incremental hashing to unordered containers via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math.Special
        Functions&lt;/a&gt;:&lt;/span&gt;
   Improved accuracy and testing of the inverse hypergeometric
        functions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
   Added
        better support for the Codegear compiler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Rename overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt;
            with hint, to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_hint&lt;/span&gt;&lt;/code&gt;
            as specified in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2691.pdf&quot;&gt;n2691&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Provide forwarding headers at &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Move all of the implementation inside the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;/code&gt;
            directory.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.4 on Ubuntu Linux 8.10
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.3.2 on Debian Sid
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.1 on HP-UX Integrity
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1, 8.0, and 7.1 SP1, all on Windows XP
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.1.2 on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.10
      &lt;/li&gt;
      &lt;li&gt;
        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
      &lt;/li&gt;
      &lt;li&gt;
        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
      &lt;/li&gt;
      &lt;li&gt;
        On Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 3.4.3, 4.0.1, 4.2.1, 4.2.4, 4.3.2.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64 bit linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 8.1, 9.0, 9.1 and 10.0
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1
          &lt;/li&gt;
          &lt;li&gt;
            Sun Compiler 5.9, 5.10 with stdcxx
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        On Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Several testers using Visual C++ 7.1, 8.0, 9.0 and 10.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
            Pocket PC SDK (ARMV4I).
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3 and 6.10.0
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Visual C++ 9.0.
          &lt;/li&gt;
          &lt;li&gt;
            64-bit Visual C++ 9.0 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.36.0</title><pubDate>Thu, 14 Aug 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Accumulators, Exception, Units, Unordered. Updated Libraries:
      Asio, Assign, Circular Buffer, Foreach, Function, Hash, Interprocess, Intrusive,
      Math, Multi-index Containers, MPI, PtrContainer, Spirit, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=619445</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_36_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt; Framework
        for incremental calculation, and collection of statistical accumulators,
        from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/doc/boost-exception.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt; 
  A
        library for transporting of arbitrary data in exception objects, and transporting
        of exceptions between threads, from Emil Dotchevski.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/units/index.html&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
  Zero-overhead dimensional
        analysis and unit/quantity manipulation and conversion, from Matthias Schabel
        and Steven Watanabe
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt; 
  Unordered
        associative containers, from Daniel James.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for serial ports.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for UNIX domain sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for raw sockets and ICMP.
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for POSIX stream-oriented file descriptors (excluding
            regular files).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows stream-oriented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as named pipes (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows random-access &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as files (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for reactor-style operations (i.e. they report readiness
            but perform no I/O) using a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
            type.
          &lt;/li&gt;
          &lt;li&gt;
            Added an iterator type for bytewise traversal of buffer sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; overloads that take a user-defined
            function object for locating message boundaries.
          &lt;/li&gt;
          &lt;li&gt;
            Added an experimental two-lock queue (enabled by defining &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE&lt;/span&gt;&lt;/code&gt;) that
            may provide better &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
            scalability across many processors.
          &lt;/li&gt;
          &lt;li&gt;
            Various fixes, performance improvements, and more complete coverage of
            the custom memory allocation support.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/assign/index.html&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        (and its variants) now has overloaded comparison operators. This allows you
        to write test code such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHECK_EQUAL&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Default constructor now doesn't allocate memory, and sets the capacity
            of the buffer to 0
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_REVERSE_FOREACH&lt;/span&gt;&lt;/code&gt;
            macro for iterating over a sequence in reverse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved allocator support, from Emil Dotchevski.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  Minor updates
        and fixes, for more info see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_36_0&quot;&gt;change
        log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added anonymous shared memory for UNIX systems.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed missing move semantics on managed memory classes.
          &lt;/li&gt;
          &lt;li&gt;
            Added copy_on_write and open_read_only options for shared memory and
            mapped file managed classes.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt; is movable
            and supports aliasing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cache_last&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            options to singly linked lists.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optimize_multikey&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option to unordered container
            hooks.
          &lt;/li&gt;
          &lt;li&gt;
            Optimized unordered containers when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;store_hash&lt;/span&gt;&lt;/code&gt;
            option is used in the hook.
          &lt;/li&gt;
          &lt;li&gt;
            Implementation changed to avoid explicit use of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/code&gt;-&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; blocks and be compilable with exceptions
            disabled.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new non-central Chi-Square, Beta, F and T distributions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Exponential Integral and Zeta special functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Rounding, Truncation, and Unit-in-the-last-place functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for compile time powers of a runtime base.
          &lt;/li&gt;
          &lt;li&gt;
            Added a few SSE2 based optimisations for the Lanczos approximations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for non-blocking operations in Python, from Andreas Klöckner.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for graph topologies.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Minor
        additions and maintenance fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_36&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
  Support
        for a few more containers, and addition of insert iterators. For details
        see &lt;a href=&quot;/libs/ptr_container/doc/ptr_container.html#upgrading-from-boost-v-1-35&quot;&gt;upgrading
        details&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Integrated the
        &amp;quot;Classic&amp;quot; Spirit V1.8.x code base with Spirit V2, &amp;quot;The New
        Generation&amp;quot;. See &lt;a href=&quot;/libs/spirit/classic/change_log.html&quot;&gt;Change
        Log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New generic &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt; functions for
            locking multiple mutexes at once.
          &lt;/li&gt;
          &lt;li&gt;
            Rvalue reference support for move semantics where the compilers supports
            it.
          &lt;/li&gt;
          &lt;li&gt;
            A few bugs fixed and missing functions added (including the serious win32
            condition variable bug).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_try_lock&lt;/span&gt;&lt;/code&gt; types
            are now backwards-compatible with Boost 1.34.0 and previous releases.
          &lt;/li&gt;
          &lt;li&gt;
            Support for passing function arguments to the thread function by supplying
            additional arguments to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;/code&gt;
            constructor.
          &lt;/li&gt;
          &lt;li&gt;
            Backwards-compatibility overloads added for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_lock&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_wait&lt;/span&gt;&lt;/code&gt; functions
            to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            for timeouts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave V2.0 is a new major release introducing some breaking API changes,
            preventing it to be used with Boost versions earlier than V1.36.0. Mainly,
            the API and hook interface have been streamlined for more consistency.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a couple of bugs, improved regression test system to include testing
            of the preporcessing hooks interface (for details see: &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; 
  Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            for specifying which parts of the input sequence to ignore when matching
            it against a regex.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            accepts formatter objects and formatter expressions in addition to format
            strings.
          &lt;/li&gt;
          &lt;li&gt;
            Range-based &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; algorithm.
          &lt;/li&gt;
          &lt;li&gt;
            Fix crash when semantic actions are placed in look-aheads, look-behinds
            or independent sub-expressions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.3 on Ubuntu Linux 8.04.1
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1 beta, 8.0 SP1, and 7.1, all on Windows XP SP-2
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.2.1 on FreeBSD-7
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.1.2 on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.1
      &lt;/li&gt;
      &lt;li&gt;
        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
      &lt;/li&gt;
      &lt;li&gt;
        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
      &lt;/li&gt;
      &lt;li&gt;
        On Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 3.4.3, 4.0.1, 4.2.1, 4.3.0.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.0 with C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, 4.1.1, 4.2.1 on 64 bit linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 8.1, 9.0 and 9.1.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1
          &lt;/li&gt;
          &lt;li&gt;
            pgCC 7.2-3 64-bit target on x86-64 Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        On Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            Lots of tests on Visual C++ 7.1, 8.0, 9.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
            Pocket PC SDK (ARMV4I).
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.6.4, 5.8.2, 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Visual C++ 9.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene
      Rivera&lt;/a&gt;, and Daniel James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.35.0</title><pubDate>Sat, 29 Mar 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Asio, Bimap, Circular Buffer, Function Types, Fusion, GIL, Interprocess,
      Intrusive, Math/Special Functions, Math/Statistical Distributions, MPI, System.
      Updated Libraries: Graph, Hash, Iostreams, Multi Array, Multi-index Containers,
      Serialization, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=587936</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_35_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt; Portable networking,
        including sockets, timers, hostname resolution and socket iostreams, from
        Chris Kohlhoff.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bimap/index.html&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt; Boost.Bimap is a
        bidirectional maps library for C++. With Boost.Bimap you can create associative
        containers in which both types can be used as key, from Matias Capeletto.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt; STL
        compliant container also known as ring or cyclic buffer, from Jan Gaspar.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt; 
  Boost.FunctionTypes
        provides functionality to classify, decompose and synthesize function, function
        pointer, function reference and pointer to member types. From Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt; 
  Library for working
        with tuples, including various containers, algorithms, etc. From Joel de
        Guzman, Dan Marsden and Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/gil/doc/index.html&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt; 
  Generic Image Library,
        from Lubomir Bourdev and Hailin Jin.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt; 
  Shared
        memory, memory mapped files, process-shared mutexes, condition variables,
        containers and allocators, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt; 
  Intrusive
        containers and algorithms, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Special
        Functions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of mathematical special functions from
        John Maddock, Paul Bristow, Hubert Holin and Xiaogang Zhang.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Statistical
        Distributions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of univariate statistical distributions
        and functions that operate on them from John Maddock and Paul Bristow
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt; 
  Message Passing Interface
        library, for use in distributed-memory parallel application programming,
        from Douglas Gregor and Matthias Troyer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt; 
  Operating system
        support, including the diagnostics support that will be part of the C++0x
        standard library, from Beman Dawes.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
  Generic graph
        components and algorithms. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
            from Stephan Diederich as part of the 2006 Google Summer of Code.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            for max-flow problems, from Stephan Diederich.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_graphml&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_graphml&lt;/span&gt;&lt;/code&gt; for GraphML input/output,
            from Tiago de Paula Peixoto.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_cycle_ratio&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;maximum_cycle_ratio&lt;/span&gt;&lt;/code&gt;,
            from Dmitry Bufistov and Andrey Parfenov.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boyer_myrvold_planarity_test&lt;/span&gt;&lt;/code&gt;,
            along with a suite of algorithms for planar graphs, from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            LEDA Adaptor improvements, from Jens Müller.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  A TR1 hash
        function object, from Daniel James. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the algorithm for hashing floating point numbers.
          &lt;/li&gt;
          &lt;li&gt;
            A few bug and warning fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt; Framework
        for defining streams, stream buffers and i/o filters, from Jonathan Turkanis.
        Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Clarified the semantics of close(). This fixes several bugs but will
            break some existing code. See &lt;a href=&quot;/libs/iostreams/doc/index.html?path=12&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Numerous other bug fixes and optimizations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &amp;quot;dimensionality&amp;quot; compile-time constante to the MultiArray
            concept.
          &lt;/li&gt;
          &lt;li&gt;
            For greater control over error situations, uses of C++ assert have been
            replaced with BOOST_ASSERT.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug with simultaneous resizing and reindexing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/libs/multi_index/doc/tutorial/key_extraction.html#global_fun&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;global_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; predefined key extractor.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/libs/multi_index/doc/tutorial/indices.html#iterator_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; facility.
          &lt;/li&gt;
          &lt;li&gt;
            Included &lt;a href=&quot;/libs/multi_index/doc/tutorial/creation.html#special_allocator&quot;&gt;support
            for non-standard allocators&lt;/a&gt; such as those of &lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Boost.Interprocess&lt;/a&gt;,
            which makes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;s
            placeable in shared memory.
          &lt;/li&gt;
          &lt;li&gt;
            New versions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt; with rollback,
            as described in the &lt;a href=&quot;/libs/multi_index/doc/tutorial/basics.html#ord_updating&quot;&gt;tutorial&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of optimizations and minor improvements have also been included.
            For a complete list of changes, see the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_35&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt; 
   Boost.Serialization
        has been updated with optimizations for dense arrays.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The Thread library has been updated to be more in line with the C++0x
            working draft.
          &lt;/li&gt;
          &lt;li&gt;
            Instances of boost::thread and of the various lock types are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Threads can be interrupted at interruption points.
          &lt;/li&gt;
          &lt;li&gt;
            Condition variables can now be used with any type that implements the
            Lockable concept, through the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition&lt;/span&gt;&lt;/code&gt; is a typedef to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;, provided for
            backwards compatibility). &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
            is provided as an optimization, and will only work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Thread IDs are separated from boost::thread, so a thread can obtain it's
            own ID (using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;),
            and IDs can be used as keys in associative containers, as they have the
            full set of comparison operators.
          &lt;/li&gt;
          &lt;li&gt;
            Timeouts are now implemented using the Boost DateTime library, through
            a typedef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;system_time&lt;/span&gt;&lt;/code&gt; for absolute timeouts,
            and with support for relative timeouts in many cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            is supported for backwards compatibility only.
          &lt;/li&gt;
          &lt;li&gt;
            Locks are implemented as publicly accessible templates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_guard&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_lock&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;upgrade_lock&lt;/span&gt;&lt;/code&gt;,
            which are templated on the type of the mutex. The Lockable concept has
            been extended to include publicly available &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions, which are used by
            the lock types.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; has been removed, and the
            functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef, but
            is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; has been removed,
            and the functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef,
            but is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt; has been removed. Code that
            relies on the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt;
            implementation detail will no longer work, as this has been removed,
            as it is no longer necessary now that mutex types now have public &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt; constructors
            with a second parameter of type bool are no longer provided. With previous
            boost releases, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
            could be used to create a lock object that was associated with a mutex,
            but did not lock it on construction. This facility has now been replaced
            with the constructor that takes a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock_type&lt;/span&gt;&lt;/code&gt;
            as the second parameter: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            The broken &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been replaced
            with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_mutex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards conformant
        implementation of the mandated C99/C++ preprocessor functionality packed
        behind an easy to use iterator interface, from Hartmut Kaiser. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added the possibility to continue the preprocessing after an error occured.
          &lt;/li&gt;
          &lt;li&gt;
            Added the macro introspection API to the wave::context object.
          &lt;/li&gt;
          &lt;li&gt;
            Added threading support to the library.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the overall performance by upto 30%.
          &lt;/li&gt;
          &lt;li&gt;
            Changed and unified preprocessor hook interface (this is an interface
            breaking change!), added several new preprocessor hook functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added serialization support.
          &lt;/li&gt;
          &lt;li&gt;
            Added new examples (for instance: Hannibal - a partial C++ parser, by
            Danny Havenith).
          &lt;/li&gt;
          &lt;li&gt;
            Added a new lexical analyzer based on Ben Hansons Lexertl library.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a large number of other bugs and problems.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;em&gt;semantic actions&lt;/em&gt; to static regexes. A semantic
            action is code that executes when part of a regular expression matches.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;custom assertions&lt;/em&gt; to static regexes. A custom
            assertion is a Boolean predicate that can participate in the regex match.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named regexes&lt;/em&gt; for embedding a static or dynamic
            regex into a dynamic regex. This can be used to create dynamic regex
            grammars.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named captures&lt;/em&gt; to dynamic regexes, like Perl.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The following compilers are officially supported in this release:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        HP aC++ A.06.14 on HP-UX
      &lt;/li&gt;
      &lt;li&gt;
        Darwin GCC 4.01.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC up to version 4.2.1, on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 9.1 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10.1 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 7.1 and 8 on Windows (Visual Sudio .NET 2003 and 2005).
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      In addition the following compilers should be well supported, but weren't part
      of our release criteria for 1.35:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        IBM Visual Age 9.0 on AIX.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10 and later on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC 4.3 and later on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 9 (Visual Studio .NET 2008).
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Website 1.0 Launch</title><pubDate>Fri, 28 Mar 2008 16:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Welcome to the new Boost website.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    After much work the new Boost web site is here. Like all software the site has
    bugs, so be gentle and reports problems in the bug tracker. Much thanks to the
    Boost community for the help in testing, criticizing, and writing. But I especially
    appreciate all the work Daniel James to translate content without which the web
    site would be a much emptier place.
  &lt;/p&gt;
&lt;/div&gt;</description></item></channel>
</rss>