<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>BoostBook2RSS</generator>
    <title>Boost News</title>
    <link>http://www.boost.org/feed/news.rss</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.44.0</title><pubDate>$Date$</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Updated Libraries:
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;div id=&quot;version_1_44_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
  High-performance
        expressive UML2 finite state machines, from Christophe Henry
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/index.html&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
  Booleans/clipping,
        resizing/offsetting and more for planar polygons with integral coordinates,
        from Lucanus Simonson.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new defect macro, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_COMPLETE_VALUE_INITIALIZATION&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Several fixes for file descriptors class, including a breaking change
            to the constructors and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;open&lt;/span&gt;&lt;/code&gt;
            methods for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_source&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_sink&lt;/span&gt;&lt;/code&gt;.
            See &lt;a href=&quot;/libs/iostreams/doc/classes/file_descriptor.html&quot;&gt;the
            documentation&lt;/a&gt; for details. The old methods are still available
            if you define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_IOSTREAMS_USE_DEPRECATED&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3323&quot;&gt;#3323&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3517&quot;&gt;#3517&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4335&quot;&gt;#4335&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix several issues with compression and decompression (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2318&quot;&gt;#2318&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4091&quot;&gt;#4091&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3348&quot;&gt;#3348&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2783&quot;&gt;#2783&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1579&quot;&gt;#1579&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3853&quot;&gt;#3853&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            And a load more miscellaneous fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3851&quot;&gt;#3851&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3279&quot;&gt;#3279&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3689&quot;&gt;#3689&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2356&quot;&gt;#2356&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2996&quot;&gt;#2996&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4102&quot;&gt;#4102&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2998&quot;&gt;#2998&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1612&quot;&gt;#1612&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2325&quot;&gt;#2325&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Almost all of this is by Steven Watanabe. For more detail see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixes for miscellaneous trac issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2501&quot;&gt;#2501&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4341&quot;&gt;#4341&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4363&quot;&gt;#4363&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3760&quot;&gt;#3760&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3761&quot;&gt;#3761&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3611&quot;&gt;#3611&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2955&quot;&gt;#2955&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4071&quot;&gt;#4071&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3097&quot;&gt;#3097&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2874&quot;&gt;#2874&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4316&quot;&gt;#4316&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4317&quot;&gt;#4317&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4322&quot;&gt;#4322&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3244&quot;&gt;#3244&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2747&quot;&gt;#2747&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4305&quot;&gt;#4305&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2704&quot;&gt;#2704&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2293&quot;&gt;#2293&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/868&quot;&gt;#868&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2918&quot;&gt;#2918&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4238&quot;&gt;#4238&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3269&quot;&gt;#3269&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3178&quot;&gt;#3178&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for other miscellaneous issues (remove warnings, support newer
            compilers, etc.)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
  Added a new
        template class, &lt;a href=&quot;/libs/utility/value_init.htm#initialized&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
        in order to fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3472&quot;&gt;#3472&lt;/a&gt;.
        New version of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
        no longer calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memset&lt;/span&gt;&lt;/code&gt; when
        the compiler has implemented value-initialization completely (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3869&quot;&gt;#3869&lt;/a&gt;).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New assignment operators to feed in vectors and matrices in many nice
            ways (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4034&quot;&gt;#4034&lt;/a&gt;).
            Thank you Nasos
          &lt;/li&gt;
          &lt;li&gt;
            New doxygen-based &lt;a href=&quot;/libs/numeric/ublas/doc/html/index.html&quot;&gt;documentation&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Enable arithmetic operators (+,-,*,&lt;em&gt;) to work between ublas
            containers of std::complex and integral types ([@http:&lt;/em&gt;/svn/boost/org/trac/boost/ticket/3649
            #3649]). Thank you Neal
          &lt;/li&gt;
          &lt;li&gt;
            Removed unused variables in functional.hpp (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4377&quot;&gt;#4377&lt;/a&gt;).
            Thank you Marco
          &lt;/li&gt;
          &lt;li&gt;
            New matrix_indirect and vector_indirect views to access elements with
            a matrix or vector of indices
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use the cygwin 1.7 API for better path handling.
          &lt;/li&gt;
          &lt;li&gt;
            Improved boostbook generation.
          &lt;/li&gt;
          &lt;li&gt;
            Tweak the grammar to clean up some edge cases.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail see the &lt;a href=&quot;/doc/libs/1_44_0/doc/html/quickbook/change_log.html#quickbook.change_log.version_1_5_2___boost_1_44_0&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;em&gt;TODO&lt;/em&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;em&gt;TODO&lt;/em&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;em&gt;TODO&lt;/em&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.43.0</title><pubDate>Thu 6 May 2010 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Functional/Factory, Functional/Forward. Major Update: Range.
      Updated Libraries: Accumulators, Array, Asio, Fusion, Iostreams, Multi-index
      Containers, Proto, Random, Spirit, Thread, Unordered, Uuid, Wave, Xpressive.
      Also, updates to the build system and quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.43.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_43_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/factory/index.html&quot;&gt;Functional/factory&lt;/a&gt;:&lt;/span&gt;
  Function
        objects for dynamic and by-value construction, from Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/forward/index.html&quot;&gt;Functional/forward&lt;/a&gt;:&lt;/span&gt;
  Function
        object adapters to address the forwarding problem, from Tobias Schwinger.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.major_updates&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Major Updates&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
  Boost.Range has
        undergone extensive updates that it include all of the features from the
        recently reviewed Boost.RangeEx, from Neil Groves.
        &lt;ul&gt;
          &lt;li&gt;
            Range-based version of the full STL iterator based algorithms.
          &lt;/li&gt;
          &lt;li&gt;
            Range adaptors which can be combined with range-based algorithms for
            unprecedented expressiveness and efficiency.
          &lt;/li&gt;
          &lt;li&gt;
            New functions: irange, istream_range, join, combine.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Avoid premature template evaluation in operator overload return types.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for SunCC compiler.
          &lt;/li&gt;
          &lt;li&gt;
            Added 'fill' member function.
          &lt;/li&gt;
          &lt;li&gt;
            Changed exception code to use boost::throw_exception.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved performance.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced compile times.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced the size of generated code.
          &lt;/li&gt;
          &lt;li&gt;
            Extended the guarantee that background threads don't call user code to
            all asynchronous operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3923&quot;&gt;#3923&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use edge-triggered epoll on Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timerfd&lt;/span&gt;&lt;/code&gt;
            for dispatching timers on Linux, when available.
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use one-shot notifications with kqueue on Mac OS X and BSD
            platforms.
          &lt;/li&gt;
          &lt;li&gt;
            Added a bitmask type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;
            as per the TR2 proposal. This type prevents implicit conversion from
            &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;,
            allowing the compiler to catch cases where users incorrectly pass a numeric
            port number as the service name.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;NOMINMAX&lt;/span&gt;&lt;/code&gt;
            for all Windows compilers. Users can define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_NO_NOMINMAX&lt;/span&gt;&lt;/code&gt;
            to suppress this definition (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3901&quot;&gt;#3901&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug where 0-byte asynchronous reads were incorrectly passing
            an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eof&lt;/span&gt;&lt;/code&gt; result to the completion handler
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4023&quot;&gt;#4023&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions to always call &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ioctl&lt;/span&gt;&lt;/code&gt; on the underlying descriptor
            when modifying blocking mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3307&quot;&gt;#3307&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed the resolver implementation to longer require the typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_iterator&lt;/span&gt;&lt;/code&gt;,
            as neither typedef is part of the documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;/code&gt;
            requirements. The corresponding typedefs in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;udp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;icmp&lt;/span&gt;&lt;/code&gt;
            classes have been deprecated.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed out-of-band handling for reactors not based on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_THREADS&lt;/span&gt;&lt;/code&gt;
            macro that allows Asio's threading support to be independently disabled.
          &lt;/li&gt;
          &lt;li&gt;
            Minor documentation improvements.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new macros for adapting or defining custom types. See the &lt;a href=&quot;/libs/fusion/doc/html/fusion/change_log.html&quot;&gt;Changelog&lt;/a&gt;
            for details.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2505&quot;&gt;#2505&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3839&quot;&gt;#3839&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3953&quot;&gt;#3953&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3723&quot;&gt;#3723&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3969&quot;&gt;#3969&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4135&quot;&gt;#4135&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/libs/serialization/doc/serialization.html#constructors&quot;&gt;Serialization
            of non default constructible values&lt;/a&gt; is now properly supported
            through user-provided facilities &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;save_construct_data&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;load_construct_data&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
            serialization &lt;a href=&quot;/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
            version&lt;/a&gt; has been bumped from 1 to 2.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor change in behavior: non-const expression self-assignment creates
            an assign node. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Minor change to recommended expression extension mechanism: use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS_USING_ASSIGN&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
            See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Fix error in invocation of callable monomorphic function objects in Proto
            transforms.
          &lt;/li&gt;
          &lt;li&gt;
            Fix misc const correctness issues, work around fusion bug.
          &lt;/li&gt;
          &lt;li&gt;
            Add non-const function call overloads to proto terminals.
          &lt;/li&gt;
          &lt;li&gt;
            Add a default constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Do not use deprecated config macros.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;assert_matches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            function and friends to &lt;tt&gt;&amp;lt;boost/proto/debug.hpp&amp;gt;&lt;/tt&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            return const-qualified rvalues.
          &lt;/li&gt;
          &lt;li&gt;
            Add documentation for Expr and Domain concepts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Put the implementation of random_device in a compiled lib, and added
            Windows support.
          &lt;/li&gt;
          &lt;li&gt;
            Rewrote the documentation using Quickbook/Doxygen/Boostbook and brought
            it up to date.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.3, see
        the '&lt;a href=&quot;/doc/libs/1_43_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_3.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt; for all exceptions
            except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_interrupted&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Added fix for issue 2742
          &lt;/li&gt;
          &lt;li&gt;
            Optimizations to mutex locks and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt; is
            now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;quick_erase&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3966&quot;&gt;#3966&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Split generators into separate files.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bug in basic_random_generator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3971&quot;&gt;#3971&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Updated documentation.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
        for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add missing include to &lt;tt&gt;&amp;lt;boost/xpressive/regex_error.hpp&amp;gt;&lt;/tt&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        When cross-compiling to GNU targets, static libraries are properly created.
        Previously, using such libraries resulted in &lt;tt&gt;Archive has no index&lt;/tt&gt;
        error.
      &lt;/li&gt;
      &lt;li&gt;
        The naming of DLL and import libraries with gcc compiler on Windows, both
        mingw and cygwin, now matches default conventions of those environments.
        Previously, the naming scheme was the same as for other Windows compilers.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Unicode escape characters.
          &lt;/li&gt;
          &lt;li&gt;
            Support the UTF-8 byte order mark.
          &lt;/li&gt;
          &lt;li&gt;
            Disallow &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;/code&gt; in simple markup.
            Fixes some errors with mismatched punctuation.
          &lt;/li&gt;
          &lt;li&gt;
            Add a command line flag (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;D&lt;/span&gt;&lt;/code&gt;) to define macros at the command
            line.
          &lt;/li&gt;
          &lt;li&gt;
            Improved post-processor output.
          &lt;/li&gt;
          &lt;li&gt;
            Check that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endsect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
            tags are balanced in templates.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on 64-bit Suse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, 11.1 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4, 4.4.3 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Clang from subversion.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 8,0, 9,0 on 32-bit XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 64-bit Windows 7.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Mingw.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.5 on Mingw.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.2, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 8.0, 32 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.42.0</title><pubDate>Tue 2 Feb 2010 14:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Uuid. Updated Libraries: Asio, Circular Buffer, Fusion, Graph,
      Integer, Iostreams, Program.Options, PropertyMap, Proto, Regex, Spirit, Unordered,
      Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.42.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_42_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
  A universally unique
        identifier, from Andy Tompkins.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new HTTP Server 4 example illustrating the use of stackless coroutines
            with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            Changed handler allocation and invocation to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
            to get the address of handler objects, rather than applying &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
            directly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2977&quot;&gt;#2977&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Restricted MSVC buffer debugging workaround to 2008, as it causes a crash
            with 2010 beta 2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3796&quot;&gt;#3796&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3822&quot;&gt;#3822&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a problem with the lifetime of handler memory, where Windows needs
            the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OVERLAPPED&lt;/span&gt;&lt;/code&gt; structure
            to be valid until both the initiating function call has returned and
            the completion packet has been delivered.
          &lt;/li&gt;
          &lt;li&gt;
            Don't block signals while performing system calls, but instead restart
            the calls if they are interrupted.
          &lt;/li&gt;
          &lt;li&gt;
            Documented the guarantee made by strand objects with respect to order
            of handler invocation.
          &lt;/li&gt;
          &lt;li&gt;
            Changed strands to use a pool of implementations, to make copying of
            strands cheaper.
          &lt;/li&gt;
          &lt;li&gt;
            Ensured that kqueue support is enabled for BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3626&quot;&gt;#3626&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost_&lt;/span&gt;&lt;/code&gt; prefix
            to the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;/code&gt;
            thread entry point function (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3809&quot;&gt;#3809&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation,
            only check the socket type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;/code&gt;
            or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;/code&gt;) if a service
            name has been specified. This should allow the emulation to work with
            raw sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added a workaround for some broken Windows firewalls that make a socket
            appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.
          &lt;/li&gt;
          &lt;li&gt;
            Applied a fix for reported excessive CPU usage under Solaris (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3670&quot;&gt;#3670&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added some support for platforms that use older compilers such as g++
            2.95 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3743&quot;&gt;#3743&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added methods erase_begin(size_type) and erase_end(size_type) with constant
            complexity for such types of stored elements which do not need an explicit
            destruction e.g. int or double.
          &lt;/li&gt;
          &lt;li&gt;
            Similarly changed implementation of the clear() method and the destructor
            so their complexity is now constant for such types of stored elements
            which do not require an explicit destruction (the complexity for other
            types remains linear).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The accumulator is the first argument to the functor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;accumulate&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2355&quot;&gt;#2355&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for associative iterators and views (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3473&quot;&gt;#3473&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old interface to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;,
            making new interface the default.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Reverted Trunk to release branch state (i.e. a &amp;quot;known good state&amp;quot;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/653&quot;&gt;653&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3084&quot;&gt;3084&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3177&quot;&gt;3177&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3180&quot;&gt;3180&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3548&quot;&gt;3568&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3657&quot;&gt;3657&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2134&quot;&gt;2134&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added long long support to &lt;tt&gt;boost::static_log2&lt;/tt&gt;, &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;,
            &lt;tt&gt;boost::static_signed_max&lt;/tt&gt;, &lt;tt&gt;boost::static_unsigned_min&lt;/tt&gt;&lt;tt&gt;boost::static_unsigned_max&lt;/tt&gt;,
            when available.
          &lt;/li&gt;
          &lt;li&gt;
            The argument type and the result type of &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;
            etc are now typedef'd. Formerly, they were hardcoded as &lt;tt&gt;unsigned
            long&lt;/tt&gt; and &lt;tt&gt;int&lt;/tt&gt; respectively. Please, use the
            provided typedefs in new code (and update old code as soon as possible).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed many outstanding issues. Thanks to Richard Smith for his work on
            this. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3612&quot;&gt;#3612&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3311&quot;&gt;#3311&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2094&quot;&gt;#2094&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3010&quot;&gt;#3010&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2894&quot;&gt;#2894&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3011&quot;&gt;#3011&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3352&quot;&gt;#3352&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3505&quot;&gt;#3505&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            For more information see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;library
            release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Information about option name added to a few exception classes and various
            clean ups in exception classes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3423&quot;&gt;#3423&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Description wordwrapping in presense of default parameters fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2613&quot;&gt;#2613&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Empty value in configuration file is now permitted (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1537&quot;&gt;#1537&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Quotes are no longer stripped from string values (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/850&quot;&gt;#850&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix endless loop in case of long default arguments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/689&quot;&gt;#689&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix compile warning caused by usage of boost::any (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2562&quot;&gt;#2562&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix memory bug in example/response_file.cpp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3525&quot;&gt;#3525&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Most compilation warnings were fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3608&quot;&gt;#3608&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make column width for description text configurable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3703&quot;&gt;#3703&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add general split function: split_unix() (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2561&quot;&gt;#2561&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable open config files from given file name (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3264&quot;&gt;#3264&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Additional flag for required options (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2982&quot;&gt;#2982&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable case insensitive style for command line (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3498&quot;&gt;#3498&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old header files (directly in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; directory); they were deprecated since
            1.40, replaced by headers in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix const correctness issues with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;
            and friends (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3364&quot;&gt;#3364&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Accomodate recent change to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt;,
            remove old support for Doxygen and pre-1.35 Fusion (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3553&quot;&gt;#3553&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In binary operations, when one operand has a user-specified domain and
            the other has the default domain, the user-specified domain trumps.
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
            to work with elaborated types.
          &lt;/li&gt;
          &lt;li&gt;
            Work around EDG compiler bug with function types and cv-qualification.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Functors rather than strings as format expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved error reporting when throwing exceptions to include better more
            relevant information.
          &lt;/li&gt;
          &lt;li&gt;
            Improved performance and reduced stack usage of recursive expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2802&quot;&gt;#2802&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3425&quot;&gt;#3425&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3507&quot;&gt;#3507&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3546&quot;&gt;#3546&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3631&quot;&gt;#3631&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3632&quot;&gt;#3632&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3715&quot;&gt;#3715&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3718&quot;&gt;#3718&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3763&quot;&gt;#3763&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3764&quot;&gt;#3764&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.2, see
        the '&lt;a href=&quot;/doc/libs/1_42_0/libs/spirit/doc/html/spirit/what_s_new.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support instantiating the containers with incomplete value types.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt;
            as a temporary workaround for the current &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;
            which can be inefficient because it has to find the next element to return
            an iterator (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3693&quot;&gt;#3693&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add templated find overload for compatible keys.
          &lt;/li&gt;
          &lt;li&gt;
            Improved codegear compatibility.
          &lt;/li&gt;
          &lt;li&gt;
            Other minor changes, full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_42_0&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;match_results&lt;/span&gt;&lt;/code&gt; no longer
            relies on undefined behavior in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3278&quot;&gt;#3278&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Do NOT copy singular iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3538&quot;&gt;#3538&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate gcc and darwin warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3734&quot;&gt;#3734&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Windows 2008, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Suse Linux 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, GCC 4.2.4, GCC 4.3.4 and GCC 4.4.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 and GCC 4.4.2 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 2.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0, 32 bit and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.41.0</title><pubDate>Tue, 17 Nov 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Property Tree. Updated libraries: DateTime, Filesystem, Iostreams,
      Math, Multi-index Containers, Proto, Python, Regex, Spirit, System, Thread,
      Unordered, Utility, Wave, Xpressive. Updates to boost build and quickbook.
      The CMake build system for Boost, still under development &lt;a href=&quot;http://sodium.resophonic.com/boost-cmake/current-docs/&quot;&gt;here&lt;/a&gt;,
      has been removed from the main release to avoid confusion.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.41.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_41_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_tree/index.html&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt; A
        tree data structure especially suited to storing configuration data, from
        Marcin Kalicinski and Sebastian Redl.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The default format for time durations is now &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot; instead of &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot;
            that was used previously. In order to retain the old behavior, the format
            string has to be specified explicitly during the time IO facet construction
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1861&quot;&gt;#1861&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Gregorian dates now use 32-bit integer type internally on 64-bit platforms
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3308&quot;&gt;#3308&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/html/date_time/details.html#date_time.changes&quot;&gt;full
            changelog&lt;/a&gt; for more detail.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3385&quot;&gt;#3385&lt;/a&gt;).
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3528&quot;&gt;#3528&lt;/a&gt;).
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3509&quot;&gt;#3509&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
  Some old
        unreleased developments. There are still several open issues that should
        be fixed in the next version.
        &lt;ul&gt;
          &lt;li&gt;
            Add a grep filter (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1627&quot;&gt;#1627&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support archives with multiple members (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1896&quot;&gt;#1896&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; work with input
            streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/791&quot;&gt;#791&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Improved filesystem interoperability.
          &lt;/li&gt;
          &lt;li&gt;
            Several warnings fixed or suppressed (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1618&quot;&gt;#1618&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1875&quot;&gt;#1875&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2779&quot;&gt;#2779&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various other fixes (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1580&quot;&gt;#1580&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1671&quot;&gt;#1671&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
  Substantially improved
        the performance of the incomplete gamma function and it's inverse: this enhances
        the performance of the gamma, poisson, chi-squared and non-central chi-squared
        distributions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Maintenance
        fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_41&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Clean up some MSVC warnings and errors in /Za (disable Microsoft extensions)
            mode.
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for c++0x mode on various compilers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Python&lt;/a&gt;:&lt;/span&gt;
  Boost.Python now
        supports Python 3 (Haoyu Bai's Google Summer of Code project, mentored by
        Stefan Seefeld).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
  Added support for
        many Perl 5.10 syntax elements including named sub-expressions, branch resets
        and recursive regular expressions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt; This is the initial
        official release of the new Spirit V2.1, a completely new library for parsing,
        lexing, and output generation. Note: this release is not backwards compatible
        with earlier versions. Known issue: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;qi&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
        will match a symbol that starts with the string you're searching for. This
        will be fixed in the next version.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fix: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3559&quot;&gt;#3559&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for futures, promises and packaged tasks added
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt; is now faster when
            there are lots of thread-specific objects
          &lt;/li&gt;
          &lt;li&gt;
            Some Boost.Thread facilities are now header-only
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
  Major update:
        &lt;ul&gt;
          &lt;li&gt;
            Replaced a lot of the macro based implementation with a cleaner template
            based implementation.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced memory use.
          &lt;/li&gt;
          &lt;li&gt;
            Full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_41_1&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
  A &amp;quot;const&amp;quot;
        issue of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;/code&gt;
        is fixed: Its &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        member function and its conversion operator are replaced by overloads for
        const and non-const access (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2548&quot;&gt;#2548&lt;/a&gt;).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;changelog&lt;/a&gt;
        for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix infinite loop with some uses of &lt;tt&gt;\Q...\E&lt;/tt&gt; quotemeta
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3586&quot;&gt;#3586&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate unreachable code warnings on MSVC
          &lt;/li&gt;
          &lt;li&gt;
            Clean up some MSVC warnings and errors in /Za (&amp;quot;disable Microsoft
            extensions&amp;quot;) mode.
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for c++0x mode on various compilers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      A bug preventing &amp;quot;fat&amp;quot; 32-bit + 64-bit builds on OSX has been fixed.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.boost_cmake_moved&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake moved&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cmake version of boost has moved; the Boost.CMmake release will be separate
      and will lag the main release slightly, but will also be capable of producing
      patch releases as necessary.
    &lt;/p&gt;
    &lt;p&gt;
      More information on the &lt;a href=&quot;https:://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost
      CMake wiki page&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook 1.5&lt;/a&gt;:&lt;/span&gt;
  These
        changes require your document to use the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;quickbook&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; tag:
        &lt;ul&gt;
          &lt;li&gt;
            More intuitive syntax and variable lookup for template calls (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1174&quot;&gt;#1174&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2034&quot;&gt;#2034&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2036&quot;&gt;#2036&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Image attributes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1157&quot;&gt;#1157&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Table Ids (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1194&quot;&gt;#1194&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Better handling of whitespace in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;/code&gt;
            syntax. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2712&quot;&gt;#2712&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and GCC 4.4.1 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on 64-bit Redhat Server 5.1.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 on 64 bit Gentoo.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on AMD 64-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 1 with &lt;a href=&quot;http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=457199&quot;&gt;a
            patch for the program options lib&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.0 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.40.0</title><pubDate>Thu, 27 Aug 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Build System improvements. Updated Libraries: Accumulators, Asio, Circular
      Buffer, Foreach, Function, Fusion, Graph, Hash, Interprocess, Intrusive, MPL,
      Program.Options, Property Map, Proto, Random, Serialization, Unordered, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.40.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_40_0.update&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Update&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added missing notes for Graph and Property Map.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.boost_cmake&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost.CMake is &lt;em&gt;now distributed separately&lt;/em&gt;.
      The cmake build for boost is &lt;em&gt;BROKEN&lt;/em&gt; in the
      tarballs above. See the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost.CMake
      wiki page&lt;/a&gt; for pointers to working versions.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Works on GCC 4.4.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new ping example to illustrate the use of ICMP sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; templates to treat 0-byte reads
            and writes as no-ops, to comply with the documented type requirements
            for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncReadStream&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncReadStream&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncWriteStream&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncWriteStream&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Changed some instances of the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;
            keyword to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            to allow Asio to be used when exception support is disabled. Note that
            the SSL wrappers still require exception support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2754&quot;&gt;#2754&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Made Asio compatible with the OpenSSL 1.0 beta (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3256&quot;&gt;#3256&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminated a redundant system call in the Solaris &lt;tt&gt;/dev/poll&lt;/tt&gt;
            backend.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug in resizing of the bucket array in the internal hash maps
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3095&quot;&gt;#3095&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Ensured correct propagation of the error code when a synchronous accept
            fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3216&quot;&gt;#3216&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Ensured correct propagation of the error code when a synchronous read
            or write on a Windows HANDLE fails.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed failures reported when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_GLIBCXX_DEBUG&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3098&quot;&gt;#3098&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed custom memory allocation support for timers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3107&quot;&gt;#3107&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Tidied up various warnings reported by g++ (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1341&quot;&gt;#1341&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2618&quot;&gt;#2618&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various documentation improvements, including more obvious hyperlinks
            to function overloads, header file information, examples for the handler
            type requirements, and adding enum values to the index (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3157&quot;&gt;#3157&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2620&quot;&gt;#2620&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2785&quot;&gt;#2785&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3285&quot;&gt;#3285&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Workaround for conflict with Python headers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3000&quot;&gt;#3000&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Optimize the use of small target objects.
          &lt;/li&gt;
          &lt;li&gt;
            Make Boost.Function compile under BOOST_NO_EXCEPTIONS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2499&quot;&gt;#2499&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2494&quot;&gt;#2494&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2469&quot;&gt;#2469&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2466&quot;&gt;#2466&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2900&quot;&gt;#2900&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Various minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2642&quot;&gt;#2642&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2847&quot;&gt;#2847&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2929&quot;&gt;#2929&lt;/a&gt;
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3012&quot;&gt;#3012&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved compile times for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Merged in the &lt;a href=&quot;/libs/graph_parallel/doc/html/index.html&quot;&gt;Parallel
            Boost Graph Library&lt;/a&gt;, giving a full suite of graph algorithms
            and data structures for distributed-memory computers (such as clusters).
          &lt;/li&gt;
          &lt;li&gt;
            Updates to the interface of the compressed sparse row graph, including
            constructors from unsorted edge lists.
          &lt;/li&gt;
          &lt;li&gt;
            An implicit grid graph, saving memory over using the former generator.
          &lt;/li&gt;
          &lt;li&gt;
            New algorithms: Dijkstra's single-source shortest path algorithm without
            a separate color map and an algorithm to find maximal common subgraphs
            between two graphs.
          &lt;/li&gt;
          &lt;li&gt;
            Assorted bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Automatically configure the float functions using template metaprogramming
            instead of trying to configure every possibility manually.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Windows shared memory is created in Shared Documents folder so that it
            can be shared between services and processes
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2967&quot;&gt;#2967&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2973&quot;&gt;#2973&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2992&quot;&gt;#2992&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3138&quot;&gt;#3138&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3166&quot;&gt;#3166&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3205&quot;&gt;#3205&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Code cleanup in tree_algorithms.hpp and avl_tree_algorithms.hpp
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3164&quot;&gt;#3164&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;char_&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;
            for compile-time string manipulation, based on multichar literals (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2905&quot;&gt;#2905&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Updated &lt;a href=&quot;/libs/mpl/doc/refmanual.html&quot;&gt;MPL Reference Manual&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for building with disabled exceptions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2096&quot;&gt;#2096&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Unicode parser no longer drops original tokens (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2425&quot;&gt;#2425&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed crash on user-inserted items in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variables_map&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2782&quot;&gt;#2782&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;Property Map&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Moved property map code into a separate directory, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;. The old files exist and forward to
            the new ones; the previous files directly in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; will be removed in Boost 1.42.0.
          &lt;/li&gt;
          &lt;li&gt;
            Moved distributed property maps to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;parallel&lt;/span&gt;&lt;/code&gt;
            namespace.
          &lt;/li&gt;
          &lt;li&gt;
            Added a property map based on a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;/code&gt;,
            providing a simpler interface.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            PrimitiveTransforms have stricter conformance to ResultOf protocol. (Warning:
            some invalid code may break.)
          &lt;/li&gt;
          &lt;li&gt;
            Add a sensible default for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt;'s
            template parameter.
          &lt;/li&gt;
          &lt;li&gt;
            Improved default evaluation strategy for pointers to members.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4 portability fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3021&quot;&gt;#3021&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Work around Visual C++'s non-std-compliant ciso646 macros.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Made the constructors of all the generators call the copy constructor
            when passed a non-const reference.
          &lt;/li&gt;
          &lt;li&gt;
            Changed seeding functions to accept any arithmetic type. As a side-effect,
            the exact signature of seed changed for some classes.
          &lt;/li&gt;
          &lt;li&gt;
            Major bug fixes in uniform_int.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;static_warning&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_saver&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pfto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. Use the the equivalent headers
            in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;serialization&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;
            directory instead (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3062&quot;&gt;#3062&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_serializer_map&lt;/span&gt;&lt;/code&gt; should now be
            used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_pointer_iserializer&lt;/span&gt;&lt;/code&gt;.
            For more details see &lt;a href=&quot;/doc/libs/1_40_0/libs/serialization/doc/release.html&quot;&gt;the
            library release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt; for
            all compilers, not just ones with rvalue references and variadic templates
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1978&quot;&gt;#1978&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Create less buckets by default.
          &lt;/li&gt;
          &lt;li&gt;
            Some minor tweaks for better compiler support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2908&quot;&gt;#2908&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3096&quot;&gt;#3096&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3082&quot;&gt;#3082&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Works on Visual C++ 10.0 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3124&quot;&gt;#3124&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The default naming of libraries in Unix-like environment now matches system
      conventions, and does not include various decorations. Naming of libraries
      on Cygwin was also fixed. Support for beta versions of Microsoft Visual Studio
      10 was added. With gcc, 64-bit compilation no longer requires that target architecture
      be specified.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Hide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;INTERNAL&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ONLY&lt;/span&gt;&lt;/code&gt;
            enums in doxygen documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3242&quot;&gt;#3242&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Tweaked appearance of member classes/structs/unions in a class synopsis.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support python code snippets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3029&quot;&gt;#3029&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;teletype&lt;/span&gt;&lt;/code&gt; source mode
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1202&quot;&gt;#1202&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.3 on Ubuntu Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.0 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and GCC 4.4.0 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1.
          &lt;/li&gt;
          &lt;li&gt;
            GCC Open64 4.2.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1, 4.2.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3, 6.1.0, 6.1.3.
          &lt;/li&gt;
          &lt;li&gt;
            Borland C++ Builder 2007 and 2009.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and 4.4.0, on Mingw with C++0x features.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item></channel>
</rss>