<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>BoostBook2RSS</generator>
    <title>Boost History</title>
    <link>http://www.boost.org/feed/history.rss</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.46.1</title><pubDate>$Date$</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bug fixes for: Fusion, Proto, Unordered.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;div id=&quot;version_1_46_1.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;disable_if&lt;/span&gt;&lt;/code&gt; for
              Visual C++ 7.1/8.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix for STLPort (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5217&quot;&gt;#5217&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PGI large file support
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Bug fixes, including fixes for: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5181&quot;&gt;#5181&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5180&quot;&gt;#5180&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5199&quot;&gt;#5199&lt;/a&gt;
              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5175&quot;&gt;#5175&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/icl/&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intersects for interval_maps and segment_type/element_type (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5207&quot;&gt;#5207&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed some ambiguous calls to functions in boost and std namespaces.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Other bug fixes, and documentation fixes.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Several minor bug fixes.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Disabled 45-degree booleans optimization.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;display_expr&lt;/span&gt;&lt;/code&gt; copyable
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5096&quot;&gt;#5096&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix const correctness problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals2/&quot;&gt;Signals2&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix unused parameter warning.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Allow specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Improved support for Pathscale and Sun compilers.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add missing copy constructors and assignment operators when using rvalue
              references (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5119&quot;&gt;#5119&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_1.other_changes&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other changes&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Update getting started guide to reflect changes to boost build.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          In quickbook, workaround optimization bug in g++ 4.4.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_1.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;em&gt;TODO&lt;/em&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;em&gt;TODO&lt;/em&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;em&gt;TODO&lt;/em&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.46.0</title><pubDate>Mon, 21 Feb 2011 15:36:13 -0500</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Icl. Updated Libraries: Array, Asio, Bind, Concept Check, Filesystem,
      Fusion, Hash, Iterator, Math, Meta State Machine, Optional, Pool, Program Options,
      Proto, Signals, Spirit, Tokenizer, Unordered, Wave. Updated Tools: Boostbook,
      Inspect, Quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.46.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_46_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/icl/index.html&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
  Interval Container
          Library, interval sets and maps and aggregation of associated values, from
          Joachim Faulhaber.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for cbegin/cend (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4761&quot;&gt;#4761&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a problem with the Sun compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4757&quot;&gt;#4757&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed an integer overflow problem that occurs when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;address_v4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is used on 64-bit platforms.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a problem on older Linux kernels (where epoll is used without
              timerfd support) that prevents timely delivery of deadline_timer handlers,
              after the program has been running for some time (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5045&quot;&gt;#5045&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bind/index.html&quot;&gt;Bind&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_adaptable&lt;/span&gt;&lt;/code&gt; now
              documented (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4532&quot;&gt;#4532&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/index.html&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              fixed warnings with self-assignment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4918&quot;&gt;#4918&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Version 3 of the library is now the default.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM vacpp: Workaround for compiler bug affecting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_facade&lt;/span&gt;&lt;/code&gt;.
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4912&quot;&gt;#4912&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Verify, clarify, document that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              can be used to specify &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_VERSION&lt;/span&gt;&lt;/code&gt;.
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4891&quot;&gt;#4891&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Replaced C-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;
              with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Undeprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. Instead, add a note mentioning the
              workaround for lack of thread safety and possible change to cwd. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              is just too convenient to deprecate!
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Cleared several GCC warnings.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Changed V2 code to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Windows: Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to report non-symlink reparse point
              correctly.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;symlink_option&lt;/span&gt;&lt;/code&gt;
              to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;,
              allowing control over recursion into directory symlinks. Note that
              the default is changed to not recurse into directory symlinks.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Reference documentation cleanup, including fixing missing and broken
              links, and adding missing functions.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Miscellaneous implementation code cleanup.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              vector copy constructor now copies sequence members in the same order
              on different platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2823&quot;&gt;#2823&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed Graphviz output to work on Visual C++ 7.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Replaced assert with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Changed to Boost.Filesystem v3.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1021&quot;&gt;#1021&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4556&quot;&gt;#4556&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4631&quot;&gt;#4631&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4642&quot;&gt;#4642&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4715&quot;&gt;#4715&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4731&quot;&gt;#4731&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4737&quot;&gt;#4737&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4753&quot;&gt;#4753&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4758&quot;&gt;#4758&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4793&quot;&gt;#4793&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4843&quot;&gt;#4843&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4851&quot;&gt;#4851&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4852&quot;&gt;#4852&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4887&quot;&gt;#4887&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4914&quot;&gt;#4914&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4966&quot;&gt;#4966&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed various bugs not in Trac.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4756&quot;&gt;#4756&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Avoid &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wconversion&lt;/span&gt;&lt;/code&gt;
              warnings.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iterator/index.html&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              fixed problem with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;implicit_cast&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3645&quot;&gt;#3645&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added Wald, Inverse Gaussian and geometric distributions.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added information about configuration macros.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for mpreal as a real-numered type.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-compile-time-analysis&quot;&gt;Compile-time
              state machine analysis&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-boost-parameter&quot;&gt;Boost.Parameter
              interface definition for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;msm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; template arguments&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-queues&quot;&gt;Possibility
              to provide a container for the event and deferred event queues&lt;/a&gt;.
              A policy implementation based on a more efficient Boost.CircularBuffer
              is provided.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;msm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_flag_active&lt;/span&gt;&lt;/code&gt; method made const.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-enqueueing&quot;&gt;Added
              possibility to enqueue events for delayed processing&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Bugfixes
            &lt;/div&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4926&quot;&gt;#4926&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  stack overflow using the Defer functor
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  anonymous transition of a submachine not called for the initial
                  state
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/index.html&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Updated test results with information about expected failures (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2294&quot;&gt;#2294&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/index.html&quot;&gt;Pool&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Now can set a max_size for pool (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2696&quot;&gt;#2696&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; uses &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;/code&gt;
              instead of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2941&quot;&gt;#2941&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool_allocator&lt;/span&gt;&lt;/code&gt; now works with vector
              of vectors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/386&quot;&gt;#386&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Boost pool is now compatible with Microsoft memory leak detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4346&quot;&gt;#4346&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed errors in examples in docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3992&quot;&gt;#3992&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4858&quot;&gt;#4858&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Now takes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;argv&lt;/span&gt;&lt;/code&gt; as const
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3909&quot;&gt;#3909&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              no longer defines &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pop_front&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse&lt;/span&gt;&lt;/code&gt;, which have moved to their
              own headers under &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;/code&gt;
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add callable wrappers for more Fusion algorithms (including &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;/code&gt;); and callable wrappers for some
              std utilities like &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_pair&lt;/span&gt;&lt;/code&gt;,
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt;, all under the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;/code&gt; directory
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Allow transforms to be specified separately from a grammar
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;matches&lt;/span&gt;&lt;/code&gt; preserves domain-specific
              expression wrappers
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix ADL issue with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt;
              transform
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix handling of grammar checking in expressions involving multiple
              domains (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4675&quot;&gt;#4675&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix ambiguous &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;display_expr&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4910&quot;&gt;#4910&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_sequence&lt;/span&gt;&lt;/code&gt; answers true for Proto
              expressions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5006&quot;&gt;#5006&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Eliminate &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wundef&lt;/span&gt;&lt;/code&gt;
              GCC warning in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5075&quot;&gt;#5075&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/index.html&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              gcc warning cleanup (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4365&quot;&gt;#4365&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Spirit V2.4.2, see the '&lt;a href=&quot;/doc/libs/1_46_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_2.html&quot;&gt;What's
              New&lt;/a&gt;' section for details.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;isspace&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ispunct&lt;/span&gt;&lt;/code&gt; was called with wrong character
              type (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4791&quot;&gt;#4791&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Avoid using &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
              with the value type.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Avoid &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wconversion&lt;/span&gt;&lt;/code&gt;
              warnings.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Better support for attributes on root elements - including &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lang&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/inspect/index.html&quot;&gt;Inspect&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Check that Boost headers do not use C's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;
              macro.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lang&lt;/span&gt;&lt;/code&gt;
              attribute in documentation info.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Improved anchors.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Support &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;import&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;include&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xinclude&lt;/span&gt;&lt;/code&gt;
              in conditional phrases.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Uses Filesystem 3.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.2,
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang: 2.8
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Pathscale: 3.2.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 11.1
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0 and 10.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.4.0.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.0, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              pgCC 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PathScale: 3.2, 4.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual Age C++ 10.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel C++ Compiler: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0, 10.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++ with STLport: 9.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++, Windows Mobile 5, with STLport: 9.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.4.0, 4.5.1, 4.6.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw, C++0x mode: 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Borland: 6.1.3 (2009), 6.2.1 (2010)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM XL C/C++ Enterprise Edition, V11.1.0.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC 4.2.1, 64 bit
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Sun C++: 5.10
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.45.0</title><pubDate>Fri, 19 Nov 2010 11:00:00 EST</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Asio, Config, Flyweight, Foreach, Fusion, Graph, Interprocess,
      Math, Meta State Machine, MultiArray, Proto, Spirit, TypeTraits, uBLAS, Unordered,
      Wave, Xpressive. Updated tools: Boostbook, Quickbook
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.45.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_45_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a problem on kqueue-based platforms where a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
              may never fire if the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
              is running in a background thread (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4568&quot;&gt;#4568&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a const-correctness issue that prevented valid uses of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              from compiling (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4638&quot;&gt;#4638&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed MinGW cross-compilation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4491&quot;&gt;#4491&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Removed dependency on deprecated Boost.System functions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4672&quot;&gt;#4672&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Ensured &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;closesocket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              failures are correctly propagated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4573&quot;&gt;#4573&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added a check for errors returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InitializeCriticalSectionAndSpinCount&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4574&quot;&gt;#4574&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for hardware flow control on QNX (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4625&quot;&gt;#4625&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Always use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pselect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on HP-UX, if it is available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4578&quot;&gt;#4578&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Ensured handler arguments are passed as lvalues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4744&quot;&gt;#4744&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed Windows build when thread support is disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4680&quot;&gt;#4680&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a Windows-specific problem where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
              objects with expiry times set more than 5 minutes in the future may
              never expire (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4745&quot;&gt;#4745&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver&lt;/span&gt;&lt;/code&gt;
              backend on BSD platforms so that an empty service name resolves to
              port number &lt;code&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;, as per the
              documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4690&quot;&gt;#4690&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed read operations so that they do not accept buffer sequences of
              type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_buffers_1&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4746&quot;&gt;#4746&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Redefined &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;id&lt;/span&gt;&lt;/code&gt; to avoid clashing
              with Objective-C++ keywords (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4191&quot;&gt;#4191&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt; reallocation
              performance issue that can occur when there are many active &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt; objects (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4780&quot;&gt;#4780&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the kqueue backend so that it compiles on NetBSD (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4662&quot;&gt;#4662&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the socket &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; implementation on 64-bit Mac OS X
              and BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4782&quot;&gt;#4782&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a Windows-specific problem where failures from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              are incorrectly treated as successes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4859&quot;&gt;#4859&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Deprecated the separate compilation header &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              in favour of &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4560&quot;&gt;#4560&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added new defect macros, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_VARIADIC_MACROS&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_NUMERIC_LIMITS_LOWEST&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4670&quot;&gt;#4670&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4563&quot;&gt;#4563&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4474&quot;&gt;#4474&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4508&quot;&gt;#4508&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a hanging problem with &lt;a href=&quot;/libs/flyweight/doc/tutorial/configuration.html#intermodule_holder&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intermodule_holder&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; in Win32
              platforms related to a Boost.Interprocess issue described at ticket
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4606&quot;&gt;#4606&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Removed an internal assertion incompatible with program termination
              via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix ambiguitiy by making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;auto_any&lt;/span&gt;&lt;/code&gt;
              constructor explicit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ADT&lt;/span&gt;&lt;/code&gt;,
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_TPL_ADT&lt;/span&gt;&lt;/code&gt;,
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ASSOC_ADT&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ASSOC_TPL_ADT&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added Stoer-Wagner min-cut algorithm contributed by Daniel Trebbien.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added implicit graph (implicit_graph) and A* (astar_maze) examples
              contributed by W. P. McNeill.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added bundled property support for graph properties.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4556&quot;&gt;#4556&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4622&quot;&gt;#4622&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4631&quot;&gt;#4631&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4715&quot;&gt;#4715&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4753&quot;&gt;#4753&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4758&quot;&gt;#4758&lt;/a&gt;
              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4793&quot;&gt;#4793&lt;/a&gt;
              plus others not in Trac.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed documentation bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4731&quot;&gt;#4731&lt;/a&gt;
              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4737&quot;&gt;#4737&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1080&quot;&gt;#1080&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3284&quot;&gt;#3284&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3439&quot;&gt;#3439&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3448&quot;&gt;#3448&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3582&quot;&gt;#3582&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3682&quot;&gt;#3682&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3829&quot;&gt;#3829&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3846&quot;&gt;#3846&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3914&quot;&gt;#3914&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3947&quot;&gt;#3947&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3950&quot;&gt;#3950&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3951&quot;&gt;#3951&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3985&quot;&gt;#3985&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4010&quot;&gt;#4010&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4417&quot;&gt;#4417&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4019&quot;&gt;#4019&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4039&quot;&gt;#4039&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4218&quot;&gt;#4218&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4230&quot;&gt;#4230&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4250&quot;&gt;#4250&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4297&quot;&gt;#4297&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4350&quot;&gt;#4350&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4352&quot;&gt;#4352&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4426&quot;&gt;#4426&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4516&quot;&gt;#4516&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4524&quot;&gt;#4524&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4557&quot;&gt;#4557&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4606&quot;&gt;#4606&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4685&quot;&gt;#4685&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4694&quot;&gt;#4694&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for standard rvalue reference move semantics (tested
              on GCC 4.5 and VC10).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Permissions can be detailed for interprocess named resources.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flush&lt;/span&gt;&lt;/code&gt; initiates disk flushing but
              does not guarantee it's completed when returns, since it is not portable.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              FreeBSD and MacOS now use posix semaphores to implement named semaphores
              and mutex.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added inverse gamma distribution and inverse chi_square and scaled
              inverse chi_square.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added warnings about potential ambiguity with std random library in
              distribution and function names.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Editorial revision of documentation, and added FAQ.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch08.html#d0e2995&quot;&gt;Support
              for serialization&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s04.html#eUML-reuse-functor&quot;&gt;Possibility
              to use normal&lt;/a&gt; functors (from functor front-end) in eUML.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s05.html#backend-fsm-constructor-args&quot;&gt;New
              constructors where substates / submachines can be taken as arguments&lt;/a&gt;.
              This allows passing arguments to the constructor of a submachine.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Bugfixes (anonymous transitions)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixes for bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3820&quot;&gt;#3820&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3989&quot;&gt;#3989&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt;,
              plus other bugs not in Trac.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added new examples and test cases.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Knock down value of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;/code&gt;,
              fixes bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4602&quot;&gt;#4602&lt;/a&gt;,
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Support non-rtti compilers
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix bug with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;matches&lt;/span&gt;&lt;/code&gt;,
              array types and the wildcard pattern.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Make Proto work on MSVC with the /clr option
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add const-qualified overloads of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eval&lt;/span&gt;&lt;/code&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.4.1,
          see the '&lt;a href=&quot;/doc/libs/1_45_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_1.html&quot;&gt;What's
          New&lt;/a&gt;' section for details.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added new traits add_rvalue_reference, add_lvalue_reference and common_type.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Minor fixes to is_signed, is_unsigned and is_virtual_base_of.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Tickets closed:
            &lt;/div&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4410&quot;&gt;#4410&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3397&quot;&gt;#3397&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/795&quot;&gt;#795&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3514&quot;&gt;#3514&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Mixed types operation are possible and new tests added (like matrix&amp;lt;complex&amp;gt;+matrix&amp;lt;double&amp;gt;),
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              New features:
            &lt;/div&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  a new size&amp;lt;&amp;gt; operator is available. For example size&amp;lt;1&amp;gt;(A+B)
                  give the number of rows of the sum of matrices A and B,
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix inserting from iterators which return by copy from &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
              in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xpressive&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; handles wide-char &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; objects, fixes bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4496&quot;&gt;#4496&lt;/a&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_45_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix syntax highlighter for comments at the end of code blocks.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix command line macros.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Nested code snippets.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Nested documentation info comments.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Revert xml escaping document info, it broke some documentation files
              (will now be in 1.6).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Some other small tweaks. See &lt;a href=&quot;/doc/html/quickbook/change_log.html#quickbook.change_log.releases.version_1_5_3___boost_1_45_0&quot;&gt;the
              change log&lt;/a&gt; for more info.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_45_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Pathscale: 3.2.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 11.1
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0 and 10.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.3.3.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 32 bit.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.0, 4.6.0 (dev version).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              pgCC 10.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PathScale: 3.2.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel C++ Compiler: 10.1, 11.0, 11.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Borland: 5.9.3, 6.1.3 (2009), 6.2.1 (2010), 6.3.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.3.3, 4.4.5, 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw, C++0x mode: 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0, 10.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM XL C/C++ Enterprise Edition, V11.1.0.0.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Sun C++: 5.10.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_45_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.44.0</title><pubDate>Fri, 13 Aug 2010 13:00:00 EDT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Meta State Machine, Polygon. Updated Libraries: Accumulators,
      Asio, Config, Filesystem, Foreach, Fusion, Hash, Iostreams, Math, MPL, Multi-index
      Containers, Proto, Regex, Spirit, Thread, TR1, Type Traits, uBLAS, Utility,
      Uuid, Wave, Xpressive. Updates for Quickbook and Boostbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.44.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_44_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
  High-performance
          expressive UML2 finite state machines, from Christophe Henry
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/index.html&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
  Booleans/clipping,
          resizing/offsetting and more for planar polygons with integral coordinates,
          from Lucanus Simonson.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct miscellaneous documentation inaccuracies
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile times. (Note that some programs may need to add additional
                &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s, e.g.
                if the program uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;
                but does not explicitly include &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced the size of generated code.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
                implementation to improve performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved multiprocessor scalability on Windows by using a dedicated
                hidden thread to wait for timers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt;
                with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. These read operations now use
                the existing capacity of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt;
                when reading, rather than limiting the read to 512 bytes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added optional separate compilation. To enable, add &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                to one source file in a program, then build the program with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;
                defined in the project/compiler settings. Alternatively, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DYN_LINK&lt;/span&gt;&lt;/code&gt; may be defined
                to build a separately-compiled Asio as part of a shared library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_FENCED_BLOCK&lt;/span&gt;&lt;/code&gt;
                to permit the disabling of memory fences around completion handlers,
                even if thread support is enabled.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reworked timeout examples to better illustrate typical use cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured that handler arguments are passed as &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/code&gt;
                types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed incorrect parameter order in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                variant of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_send_to&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4170&quot;&gt;#4170&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;/code&gt;
                is used with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;isdigit&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4201&quot;&gt;#4201&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed handling of very small but non-zero timeouts (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4205&quot;&gt;#4205&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed crash that occurred when an empty buffer sequence was passed
                to a composed read or write operation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;+&lt;/span&gt;&lt;/code&gt; overload in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffers_iterator&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4382&quot;&gt;#4382&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented cancellation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                operations on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new defect macro, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_COMPLETE_VALUE_INITIALIZATION&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new defect macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_0X_HDR_TYPEINDEX&lt;/span&gt;&lt;/code&gt;,
                fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4274&quot;&gt;#4274&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for code visibility in GCC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4385&quot;&gt;#4385&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4324&quot;&gt;#4324&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4221&quot;&gt;#4221&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4182&quot;&gt;#4182&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4178&quot;&gt;#4178&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4152&quot;&gt;#4152&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4182&quot;&gt;#4115&lt;/a&gt;.
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4112&quot;&gt;#4112&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4059&quot;&gt;#4059&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4041&quot;&gt;#4041&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4012&quot;&gt;#4012&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This release contains both version 2 and version 3 of the library.
                Version 3 is a major upgrade that will break some existing user code,
                so version 2 is the default. Users are encouraged to migrate to version
                3. See '&lt;a href=&quot;/libs/filesystem/v2/doc/index.htm&quot;&gt;Version 2&lt;/a&gt;'
                and '&lt;a href=&quot;/libs/filesystem/v3/doc/index.htm&quot;&gt;Version 3&lt;/a&gt;'
                for more information.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix problems with symbol visibility for shared libraries.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix various minor problems.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3863&quot;&gt;#3863&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4248&quot;&gt;#4248&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;foreach_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; for forward declarations of
                foreach's customization points, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3998&quot;&gt;#3998&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove out-of-date work-arounds for sun compilers, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4306&quot;&gt;#4306&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse_fold&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iter_fold&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse_iter_fold&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1623&quot;&gt;#1623&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Option to prevent implicit casts when calling the hash function by
                defining the macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HASH_NO_IMPLICIT_CASTS&lt;/span&gt;&lt;/code&gt;,
                which can avoid some subtle problems. This might be activated by
                default in a future version.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Several fixes for file descriptors class, including a breaking change
                to the constructors and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;open&lt;/span&gt;&lt;/code&gt;
                methods for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_source&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_sink&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;/libs/iostreams/doc/classes/file_descriptor.html&quot;&gt;the
                documentation&lt;/a&gt; for details. The old methods are still available
                if you define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_IOSTREAMS_USE_DEPRECATED&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3323&quot;&gt;#3323&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3517&quot;&gt;#3517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4335&quot;&gt;#4335&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix several issues with compression and decompression (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2318&quot;&gt;#2318&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4091&quot;&gt;#4091&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3348&quot;&gt;#3348&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2783&quot;&gt;#2783&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1579&quot;&gt;#1579&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3853&quot;&gt;#3853&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                And a load more miscellaneous fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3851&quot;&gt;#3851&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3279&quot;&gt;#3279&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3689&quot;&gt;#3689&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2356&quot;&gt;#2356&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2996&quot;&gt;#2996&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4102&quot;&gt;#4102&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2998&quot;&gt;#2998&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1612&quot;&gt;#1612&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2325&quot;&gt;#2325&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Thanks to Steven Watanabe for almost all these fixes. For more detail
                see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;release
                notes&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed incorrect range and support for Rayleigh distribution.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt; work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug preventing the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt;
                with rollback in &lt;a href=&quot;/libs/multi_index/doc/reference/ord_indices.html#modify_key&quot;&gt;ordered&lt;/a&gt;
                and &lt;a href=&quot;/libs/multi_index/doc/reference/hash_indices.html#modify_key&quot;&gt;hashed&lt;/a&gt;
                indices when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Modifier&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Rollback&lt;/span&gt;&lt;/code&gt; are
                different types (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4130&quot;&gt;#4130&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Minor change in behavior:&lt;/em&gt; when using
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt; as a transform, apply &lt;em&gt;all&lt;/em&gt;
                transforms but only return the result of applying the last. See Proto's
                &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Minor change in behavior:&lt;/em&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt;
                no longer run objects that are already proto expressions through
                the expression domain's generator. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Minor change in behavior:&lt;/em&gt; Proto
                uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_expr&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;expr&lt;/span&gt;&lt;/code&gt; when possible for better compile
                times. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for sub-domains.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduce per-domain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt; customization
                points to allow for domain-specific customization of variable capture
                behavior.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt; transform is also a grammar
                that matches the expressions the transform knows how to handle.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_void&lt;/span&gt;&lt;/code&gt;, a no-op primitive transform
                that does nothing and returns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; transform doesn't
                strip expression wrappers, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4175&quot;&gt;#4175&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Const-correctness fixes when invoking proto domains.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4309&quot;&gt;#4309&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4215&quot;&gt;#4215&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4212&quot;&gt;#4212&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4191&quot;&gt;#4191&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4132&quot;&gt;#4132&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4123&quot;&gt;#4123&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4114&quot;&gt;#4114&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4036&quot;&gt;#4036&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4020&quot;&gt;#4020&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3941&quot;&gt;#3941&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3902&quot;&gt;#3902&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3890&quot;&gt;#3890&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.4,
          see the '&lt;a href=&quot;/doc/libs/1_44_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4.html&quot;&gt;What's
          New&lt;/a&gt;' section for details.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change system_category and generic_category to functions, to conform
                to the C++0x FCD. This change may cause compile errors some user
                code; the fix is add &amp;quot;()&amp;quot; to references to system_category
                and generic_category, so that they become function calls.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix problems with symbol visibility for shared libraries.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4254&quot;&gt;#4254&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3994&quot;&gt;#3994&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3474&quot;&gt;#3474&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for miscellaneous trac issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2501&quot;&gt;#2501&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4341&quot;&gt;#4341&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4363&quot;&gt;#4363&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3760&quot;&gt;#3760&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3761&quot;&gt;#3761&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3611&quot;&gt;#3611&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2955&quot;&gt;#2955&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4071&quot;&gt;#4071&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3097&quot;&gt;#3097&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2874&quot;&gt;#2874&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4316&quot;&gt;#4316&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4317&quot;&gt;#4317&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4322&quot;&gt;#4322&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3244&quot;&gt;#3244&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2747&quot;&gt;#2747&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4305&quot;&gt;#4305&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2704&quot;&gt;#2704&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2293&quot;&gt;#2293&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/868&quot;&gt;#868&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2918&quot;&gt;#2918&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4238&quot;&gt;#4238&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3269&quot;&gt;#3269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3178&quot;&gt;#3178&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for other miscellaneous issues (remove warnings, support newer
                compilers, etc.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed VC10 support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; always uses the TR1 ResultOf
                protocol, even on compilers that support the C++0x &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references throughout the library, plus
                two new traits classes is_rvalue_reference and is_lvalue_reference.
                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4407&quot;&gt;#4407&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3804&quot;&gt;#3804&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3621&quot;&gt;#3621&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New assignment operators to feed in vectors and matrices in many
                nice ways (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4034&quot;&gt;#4034&lt;/a&gt;).
                Thank you Nasos
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New doxygen-based &lt;a href=&quot;/libs/numeric/ublas/doc/html/index.html&quot;&gt;documentation&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enable arithmetic operators (+,-,*,/) to work between ublas containers
                of std::complex and integral types (&lt;a href=&quot;http://svn/boost/org/trac/boost/ticket/3649&quot;&gt;#3649&lt;/a&gt;).
                Thank you Neal
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed unused variables in functional.hpp (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4377&quot;&gt;#4377&lt;/a&gt;).
                Thank you Marco
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New matrix_indirect and vector_indirect views to access elements
                with a matrix or vector of indices
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new template class, &lt;a href=&quot;/libs/utility/value_init.htm#initialized&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                in order to fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3472&quot;&gt;#3472&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New version of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; no longer calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memset&lt;/span&gt;&lt;/code&gt; when the compiler has implemented
                value-initialization completely (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3869&quot;&gt;#3869&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New template &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1_result_of&lt;/span&gt;&lt;/code&gt;
                that implements the TR1 ResultOf protocol even if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
                uses the C++0x &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_UUID_NO_TYPE_TRAITS&lt;/span&gt;&lt;/code&gt;
                to remove the dependency on Boost.TypeTraits.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stream &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;
                handles left, internal, and right manipulators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_string&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_wstring&lt;/span&gt;&lt;/code&gt; to convert
                a uuid to a string.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed minor bugs in documentation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
          for details.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replace non-portable &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;&lt;/code&gt;
                declarations with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt;&lt;/code&gt;s
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nested_results&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support user-defined assertions with placeholders for non-local variables.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Significantly faster.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved syntax highlighter.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use the cygwin 1.7 API for better path handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved boostbook generation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Tweak the grammar to clean up some edge cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                For more detail see the &lt;a href=&quot;/doc/libs/1_44_0/doc/html/quickbook/change_log.html#quickbook.change_log.version_1_5_2___boost_1_44_0&quot;&gt;change
                log&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.0.1 on Intel Leopard.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.4 on 64-bit Suse.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 7.1 SP1, 8.0 SP1, 9.0 SP1 and 10.0.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.3.3, using Mingw.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 10.1 on 32 bit Red Hat Enterprise Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5 on Red Hat Enterprise Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, with C++0x extensions, 4.3.4, 4.4.3, 4.5 on Red Hat Enterprise
                Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.4 on 64 bit Suse.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
                Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion (will be released with LLVM 2.8).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.0.1, 4.2.1 (Apple build).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, with C++0x extensions, 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion (will be released with LLVM 2.8).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 7.1 SP, 8.0, 9.0 on 32-bit XP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 10.0 on XP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 10.0 on 64-bit Windows 7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.3.3, 4.5 on Mingw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, with C++0x extensions, 4.5 on Mingw.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0, on AIX Version 5.3.0.40.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1 on FreeBSD 7.2, 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1 on FreeBSD 8.0, 32 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun C++ 5.10 on Solaris 5.10.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      Thanks to Marshall Clow for organizing the bug sprint and to everyone who took
      part.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.43.0</title><pubDate>Thu 6 May 2010 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Functional/Factory, Functional/Forward. Major Update: Range.
      Updated Libraries: Accumulators, Array, Asio, Fusion, Iostreams, Multi-index
      Containers, Proto, Random, Spirit, Thread, Unordered, Uuid, Wave, Xpressive.
      Also, updates to the build system and quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.43.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_43_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/factory/index.html&quot;&gt;Functional/factory&lt;/a&gt;:&lt;/span&gt;
  Function
        objects for dynamic and by-value construction, from Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/forward/index.html&quot;&gt;Functional/forward&lt;/a&gt;:&lt;/span&gt;
  Function
        object adapters to address the forwarding problem, from Tobias Schwinger.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.major_updates&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Major Updates&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
  Boost.Range has
        undergone extensive updates that it include all of the features from the
        recently reviewed Boost.RangeEx, from Neil Groves.
        &lt;ul&gt;
          &lt;li&gt;
            Range-based version of the full STL iterator based algorithms.
          &lt;/li&gt;
          &lt;li&gt;
            Range adaptors which can be combined with range-based algorithms for
            unprecedented expressiveness and efficiency.
          &lt;/li&gt;
          &lt;li&gt;
            New functions: irange, istream_range, join, combine.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Avoid premature template evaluation in operator overload return types.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for SunCC compiler.
          &lt;/li&gt;
          &lt;li&gt;
            Added 'fill' member function.
          &lt;/li&gt;
          &lt;li&gt;
            Changed exception code to use boost::throw_exception.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved performance.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced compile times.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced the size of generated code.
          &lt;/li&gt;
          &lt;li&gt;
            Extended the guarantee that background threads don't call user code to
            all asynchronous operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3923&quot;&gt;#3923&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use edge-triggered epoll on Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timerfd&lt;/span&gt;&lt;/code&gt;
            for dispatching timers on Linux, when available.
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use one-shot notifications with kqueue on Mac OS X and BSD
            platforms.
          &lt;/li&gt;
          &lt;li&gt;
            Added a bitmask type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;
            as per the TR2 proposal. This type prevents implicit conversion from
            &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;,
            allowing the compiler to catch cases where users incorrectly pass a numeric
            port number as the service name.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;NOMINMAX&lt;/span&gt;&lt;/code&gt;
            for all Windows compilers. Users can define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_NO_NOMINMAX&lt;/span&gt;&lt;/code&gt;
            to suppress this definition (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3901&quot;&gt;#3901&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug where 0-byte asynchronous reads were incorrectly passing
            an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eof&lt;/span&gt;&lt;/code&gt; result to the completion handler
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4023&quot;&gt;#4023&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions to always call &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ioctl&lt;/span&gt;&lt;/code&gt; on the underlying descriptor
            when modifying blocking mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3307&quot;&gt;#3307&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed the resolver implementation to longer require the typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_iterator&lt;/span&gt;&lt;/code&gt;,
            as neither typedef is part of the documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;/code&gt;
            requirements. The corresponding typedefs in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;udp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;icmp&lt;/span&gt;&lt;/code&gt;
            classes have been deprecated.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed out-of-band handling for reactors not based on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_THREADS&lt;/span&gt;&lt;/code&gt;
            macro that allows Asio's threading support to be independently disabled.
          &lt;/li&gt;
          &lt;li&gt;
            Minor documentation improvements.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new macros for adapting or defining custom types. See the &lt;a href=&quot;/libs/fusion/doc/html/fusion/change_log.html&quot;&gt;Changelog&lt;/a&gt;
            for details.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2505&quot;&gt;#2505&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3839&quot;&gt;#3839&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3953&quot;&gt;#3953&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3723&quot;&gt;#3723&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3969&quot;&gt;#3969&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4135&quot;&gt;#4135&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/libs/serialization/doc/serialization.html#constructors&quot;&gt;Serialization
            of non default constructible values&lt;/a&gt; is now properly supported
            through user-provided facilities &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;save_construct_data&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;load_construct_data&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
            serialization &lt;a href=&quot;/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
            version&lt;/a&gt; has been bumped from 1 to 2.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor change in behavior: non-const expression self-assignment creates
            an assign node. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Minor change to recommended expression extension mechanism: use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS_USING_ASSIGN&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
            See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Fix error in invocation of callable monomorphic function objects in Proto
            transforms.
          &lt;/li&gt;
          &lt;li&gt;
            Fix misc const correctness issues, work around fusion bug.
          &lt;/li&gt;
          &lt;li&gt;
            Add non-const function call overloads to proto terminals.
          &lt;/li&gt;
          &lt;li&gt;
            Add a default constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Do not use deprecated config macros.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;assert_matches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            function and friends to &lt;tt&gt;&amp;lt;boost/proto/debug.hpp&amp;gt;&lt;/tt&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            return const-qualified rvalues.
          &lt;/li&gt;
          &lt;li&gt;
            Add documentation for Expr and Domain concepts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Put the implementation of random_device in a compiled lib, and added
            Windows support.
          &lt;/li&gt;
          &lt;li&gt;
            Rewrote the documentation using Quickbook/Doxygen/Boostbook and brought
            it up to date.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.3, see
        the '&lt;a href=&quot;/doc/libs/1_43_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_3.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt; for all exceptions
            except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_interrupted&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Added fix for issue 2742
          &lt;/li&gt;
          &lt;li&gt;
            Optimizations to mutex locks and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt; is
            now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;quick_erase&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3966&quot;&gt;#3966&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Split generators into separate files.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bug in basic_random_generator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3971&quot;&gt;#3971&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Updated documentation.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
        for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add missing include to &lt;tt&gt;&amp;lt;boost/xpressive/regex_error.hpp&amp;gt;&lt;/tt&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        When cross-compiling to GNU targets, static libraries are properly created.
        Previously, using such libraries resulted in &lt;tt&gt;Archive has no index&lt;/tt&gt;
        error.
      &lt;/li&gt;
      &lt;li&gt;
        The naming of DLL and import libraries with gcc compiler on Windows, both
        mingw and cygwin, now matches default conventions of those environments.
        Previously, the naming scheme was the same as for other Windows compilers.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Unicode escape characters.
          &lt;/li&gt;
          &lt;li&gt;
            Support the UTF-8 byte order mark.
          &lt;/li&gt;
          &lt;li&gt;
            Disallow &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;/code&gt; in simple markup.
            Fixes some errors with mismatched punctuation.
          &lt;/li&gt;
          &lt;li&gt;
            Add a command line flag (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;D&lt;/span&gt;&lt;/code&gt;) to define macros at the command
            line.
          &lt;/li&gt;
          &lt;li&gt;
            Improved post-processor output.
          &lt;/li&gt;
          &lt;li&gt;
            Check that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endsect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
            tags are balanced in templates.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on 64-bit Suse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, 11.1 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4, 4.4.3 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Clang from subversion.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 8,0, 9,0 on 32-bit XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 64-bit Windows 7.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Mingw.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.5 on Mingw.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.2, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 8.0, 32 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.42.0</title><pubDate>Tue 2 Feb 2010 14:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Uuid. Updated Libraries: Asio, Circular Buffer, Fusion, Graph,
      Integer, Iostreams, Program.Options, PropertyMap, Proto, Regex, Spirit, Unordered,
      Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.42.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_42_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
  A universally unique
        identifier, from Andy Tompkins.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new HTTP Server 4 example illustrating the use of stackless coroutines
            with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            Changed handler allocation and invocation to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
            to get the address of handler objects, rather than applying &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
            directly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2977&quot;&gt;#2977&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Restricted MSVC buffer debugging workaround to 2008, as it causes a crash
            with 2010 beta 2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3796&quot;&gt;#3796&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3822&quot;&gt;#3822&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a problem with the lifetime of handler memory, where Windows needs
            the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OVERLAPPED&lt;/span&gt;&lt;/code&gt; structure
            to be valid until both the initiating function call has returned and
            the completion packet has been delivered.
          &lt;/li&gt;
          &lt;li&gt;
            Don't block signals while performing system calls, but instead restart
            the calls if they are interrupted.
          &lt;/li&gt;
          &lt;li&gt;
            Documented the guarantee made by strand objects with respect to order
            of handler invocation.
          &lt;/li&gt;
          &lt;li&gt;
            Changed strands to use a pool of implementations, to make copying of
            strands cheaper.
          &lt;/li&gt;
          &lt;li&gt;
            Ensured that kqueue support is enabled for BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3626&quot;&gt;#3626&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost_&lt;/span&gt;&lt;/code&gt; prefix
            to the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;/code&gt;
            thread entry point function (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3809&quot;&gt;#3809&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation,
            only check the socket type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;/code&gt;
            or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;/code&gt;) if a service
            name has been specified. This should allow the emulation to work with
            raw sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added a workaround for some broken Windows firewalls that make a socket
            appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.
          &lt;/li&gt;
          &lt;li&gt;
            Applied a fix for reported excessive CPU usage under Solaris (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3670&quot;&gt;#3670&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added some support for platforms that use older compilers such as g++
            2.95 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3743&quot;&gt;#3743&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added methods erase_begin(size_type) and erase_end(size_type) with constant
            complexity for such types of stored elements which do not need an explicit
            destruction e.g. int or double.
          &lt;/li&gt;
          &lt;li&gt;
            Similarly changed implementation of the clear() method and the destructor
            so their complexity is now constant for such types of stored elements
            which do not require an explicit destruction (the complexity for other
            types remains linear).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The accumulator is the first argument to the functor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;accumulate&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2355&quot;&gt;#2355&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for associative iterators and views (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3473&quot;&gt;#3473&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old interface to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;,
            making new interface the default.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Reverted Trunk to release branch state (i.e. a &amp;quot;known good state&amp;quot;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/653&quot;&gt;653&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3084&quot;&gt;3084&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3177&quot;&gt;3177&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3180&quot;&gt;3180&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3548&quot;&gt;3568&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3657&quot;&gt;3657&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2134&quot;&gt;2134&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added long long support to &lt;tt&gt;boost::static_log2&lt;/tt&gt;, &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;,
            &lt;tt&gt;boost::static_signed_max&lt;/tt&gt;, &lt;tt&gt;boost::static_unsigned_min&lt;/tt&gt;&lt;tt&gt;boost::static_unsigned_max&lt;/tt&gt;,
            when available.
          &lt;/li&gt;
          &lt;li&gt;
            The argument type and the result type of &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;
            etc are now typedef'd. Formerly, they were hardcoded as &lt;tt&gt;unsigned
            long&lt;/tt&gt; and &lt;tt&gt;int&lt;/tt&gt; respectively. Please, use the
            provided typedefs in new code (and update old code as soon as possible).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed many outstanding issues. Thanks to Richard Smith for his work on
            this. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3612&quot;&gt;#3612&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3311&quot;&gt;#3311&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2094&quot;&gt;#2094&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3010&quot;&gt;#3010&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2894&quot;&gt;#2894&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3011&quot;&gt;#3011&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3352&quot;&gt;#3352&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3505&quot;&gt;#3505&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            For more information see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;library
            release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Information about option name added to a few exception classes and various
            clean ups in exception classes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3423&quot;&gt;#3423&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Description wordwrapping in presense of default parameters fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2613&quot;&gt;#2613&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Empty value in configuration file is now permitted (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1537&quot;&gt;#1537&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Quotes are no longer stripped from string values (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/850&quot;&gt;#850&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix endless loop in case of long default arguments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/689&quot;&gt;#689&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix compile warning caused by usage of boost::any (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2562&quot;&gt;#2562&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix memory bug in example/response_file.cpp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3525&quot;&gt;#3525&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Most compilation warnings were fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3608&quot;&gt;#3608&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make column width for description text configurable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3703&quot;&gt;#3703&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add general split function: split_unix() (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2561&quot;&gt;#2561&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable open config files from given file name (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3264&quot;&gt;#3264&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Additional flag for required options (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2982&quot;&gt;#2982&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable case insensitive style for command line (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3498&quot;&gt;#3498&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old header files (directly in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; directory); they were deprecated since
            1.40, replaced by headers in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix const correctness issues with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;
            and friends (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3364&quot;&gt;#3364&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Accomodate recent change to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt;,
            remove old support for Doxygen and pre-1.35 Fusion (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3553&quot;&gt;#3553&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In binary operations, when one operand has a user-specified domain and
            the other has the default domain, the user-specified domain trumps.
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
            to work with elaborated types.
          &lt;/li&gt;
          &lt;li&gt;
            Work around EDG compiler bug with function types and cv-qualification.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Functors rather than strings as format expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved error reporting when throwing exceptions to include better more
            relevant information.
          &lt;/li&gt;
          &lt;li&gt;
            Improved performance and reduced stack usage of recursive expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2802&quot;&gt;#2802&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3425&quot;&gt;#3425&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3507&quot;&gt;#3507&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3546&quot;&gt;#3546&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3631&quot;&gt;#3631&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3632&quot;&gt;#3632&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3715&quot;&gt;#3715&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3718&quot;&gt;#3718&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3763&quot;&gt;#3763&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3764&quot;&gt;#3764&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.2, see
        the '&lt;a href=&quot;/doc/libs/1_42_0/libs/spirit/doc/html/spirit/what_s_new.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support instantiating the containers with incomplete value types.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt;
            as a temporary workaround for the current &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;
            which can be inefficient because it has to find the next element to return
            an iterator (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3693&quot;&gt;#3693&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add templated find overload for compatible keys.
          &lt;/li&gt;
          &lt;li&gt;
            Improved codegear compatibility.
          &lt;/li&gt;
          &lt;li&gt;
            Other minor changes, full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_42_0&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;match_results&lt;/span&gt;&lt;/code&gt; no longer
            relies on undefined behavior in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3278&quot;&gt;#3278&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Do NOT copy singular iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3538&quot;&gt;#3538&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate gcc and darwin warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3734&quot;&gt;#3734&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Windows 2008, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Suse Linux 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, GCC 4.2.4, GCC 4.3.4 and GCC 4.4.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 and GCC 4.4.2 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 2.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0, 32 bit and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.41.0</title><pubDate>Tue, 17 Nov 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Property Tree. Updated libraries: DateTime, Filesystem, Iostreams,
      Math, Multi-index Containers, Proto, Python, Regex, Spirit, System, Thread,
      Unordered, Utility, Wave, Xpressive. Updates to boost build and quickbook.
      The CMake build system for Boost, still under development &lt;a href=&quot;http://sodium.resophonic.com/boost-cmake/current-docs/&quot;&gt;here&lt;/a&gt;,
      has been removed from the main release to avoid confusion.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.41.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_41_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_tree/index.html&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt; A
        tree data structure especially suited to storing configuration data, from
        Marcin Kalicinski and Sebastian Redl.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The default format for time durations is now &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot; instead of &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot;
            that was used previously. In order to retain the old behavior, the format
            string has to be specified explicitly during the time IO facet construction
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1861&quot;&gt;#1861&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Gregorian dates now use 32-bit integer type internally on 64-bit platforms
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3308&quot;&gt;#3308&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/html/date_time/details.html#date_time.changes&quot;&gt;full
            changelog&lt;/a&gt; for more detail.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3385&quot;&gt;#3385&lt;/a&gt;).
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3528&quot;&gt;#3528&lt;/a&gt;).
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3509&quot;&gt;#3509&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
  Some old
        unreleased developments. There are still several open issues that should
        be fixed in the next version.
        &lt;ul&gt;
          &lt;li&gt;
            Add a grep filter (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1627&quot;&gt;#1627&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support archives with multiple members (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1896&quot;&gt;#1896&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; work with input
            streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/791&quot;&gt;#791&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Improved filesystem interoperability.
          &lt;/li&gt;
          &lt;li&gt;
            Several warnings fixed or suppressed (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1618&quot;&gt;#1618&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1875&quot;&gt;#1875&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2779&quot;&gt;#2779&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various other fixes (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1580&quot;&gt;#1580&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1671&quot;&gt;#1671&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
  Substantially improved
        the performance of the incomplete gamma function and it's inverse: this enhances
        the performance of the gamma, poisson, chi-squared and non-central chi-squared
        distributions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Maintenance
        fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_41&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Clean up some MSVC warnings and errors in /Za (disable Microsoft extensions)
            mode.
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for c++0x mode on various compilers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Python&lt;/a&gt;:&lt;/span&gt;
  Boost.Python now
        supports Python 3 (Haoyu Bai's Google Summer of Code project, mentored by
        Stefan Seefeld).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
  Added support for
        many Perl 5.10 syntax elements including named sub-expressions, branch resets
        and recursive regular expressions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt; This is the initial
        official release of the new Spirit V2.1, a completely new library for parsing,
        lexing, and output generation. Note: this release is not backwards compatible
        with earlier versions. Known issue: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;qi&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
        will match a symbol that starts with the string you're searching for. This
        will be fixed in the next version.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fix: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3559&quot;&gt;#3559&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for futures, promises and packaged tasks added
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt; is now faster when
            there are lots of thread-specific objects
          &lt;/li&gt;
          &lt;li&gt;
            Some Boost.Thread facilities are now header-only
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
  Major update:
        &lt;ul&gt;
          &lt;li&gt;
            Replaced a lot of the macro based implementation with a cleaner template
            based implementation.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced memory use.
          &lt;/li&gt;
          &lt;li&gt;
            Full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_41_1&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
  A &amp;quot;const&amp;quot;
        issue of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;/code&gt;
        is fixed: Its &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        member function and its conversion operator are replaced by overloads for
        const and non-const access (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2548&quot;&gt;#2548&lt;/a&gt;).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;changelog&lt;/a&gt;
        for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix infinite loop with some uses of &lt;tt&gt;\Q...\E&lt;/tt&gt; quotemeta
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3586&quot;&gt;#3586&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate unreachable code warnings on MSVC
          &lt;/li&gt;
          &lt;li&gt;
            Clean up some MSVC warnings and errors in /Za (&amp;quot;disable Microsoft
            extensions&amp;quot;) mode.
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for c++0x mode on various compilers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      A bug preventing &amp;quot;fat&amp;quot; 32-bit + 64-bit builds on OSX has been fixed.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.boost_cmake_moved&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake moved&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cmake version of boost has moved; the Boost.CMmake release will be separate
      and will lag the main release slightly, but will also be capable of producing
      patch releases as necessary.
    &lt;/p&gt;
    &lt;p&gt;
      More information on the &lt;a href=&quot;https:://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost
      CMake wiki page&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook 1.5&lt;/a&gt;:&lt;/span&gt;
  These
        changes require your document to use the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;quickbook&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; tag:
        &lt;ul&gt;
          &lt;li&gt;
            More intuitive syntax and variable lookup for template calls (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1174&quot;&gt;#1174&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2034&quot;&gt;#2034&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2036&quot;&gt;#2036&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Image attributes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1157&quot;&gt;#1157&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Table Ids (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1194&quot;&gt;#1194&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Better handling of whitespace in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;/code&gt;
            syntax. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2712&quot;&gt;#2712&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and GCC 4.4.1 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on 64-bit Redhat Server 5.1.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 on 64 bit Gentoo.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on AMD 64-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 1 with &lt;a href=&quot;http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=457199&quot;&gt;a
            patch for the program options lib&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.0 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.40.0</title><pubDate>Thu, 27 Aug 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Build System improvements. Updated Libraries: Accumulators, Asio, Circular
      Buffer, Foreach, Function, Fusion, Graph, Hash, Interprocess, Intrusive, MPL,
      Program.Options, Property Map, Proto, Random, Serialization, Unordered, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.40.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_40_0.update&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Update&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added missing notes for Graph and Property Map.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.boost_cmake&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost.CMake is &lt;em&gt;now distributed separately&lt;/em&gt;.
      The cmake build for boost is &lt;em&gt;BROKEN&lt;/em&gt; in the
      tarballs above. See the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost.CMake
      wiki page&lt;/a&gt; for pointers to working versions.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Works on GCC 4.4.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new ping example to illustrate the use of ICMP sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; templates to treat 0-byte reads
            and writes as no-ops, to comply with the documented type requirements
            for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncReadStream&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncReadStream&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncWriteStream&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncWriteStream&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Changed some instances of the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;
            keyword to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            to allow Asio to be used when exception support is disabled. Note that
            the SSL wrappers still require exception support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2754&quot;&gt;#2754&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Made Asio compatible with the OpenSSL 1.0 beta (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3256&quot;&gt;#3256&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminated a redundant system call in the Solaris &lt;tt&gt;/dev/poll&lt;/tt&gt;
            backend.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug in resizing of the bucket array in the internal hash maps
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3095&quot;&gt;#3095&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Ensured correct propagation of the error code when a synchronous accept
            fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3216&quot;&gt;#3216&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Ensured correct propagation of the error code when a synchronous read
            or write on a Windows HANDLE fails.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed failures reported when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_GLIBCXX_DEBUG&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3098&quot;&gt;#3098&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed custom memory allocation support for timers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3107&quot;&gt;#3107&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Tidied up various warnings reported by g++ (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1341&quot;&gt;#1341&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2618&quot;&gt;#2618&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various documentation improvements, including more obvious hyperlinks
            to function overloads, header file information, examples for the handler
            type requirements, and adding enum values to the index (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3157&quot;&gt;#3157&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2620&quot;&gt;#2620&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2785&quot;&gt;#2785&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3285&quot;&gt;#3285&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Workaround for conflict with Python headers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3000&quot;&gt;#3000&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Optimize the use of small target objects.
          &lt;/li&gt;
          &lt;li&gt;
            Make Boost.Function compile under BOOST_NO_EXCEPTIONS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2499&quot;&gt;#2499&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2494&quot;&gt;#2494&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2469&quot;&gt;#2469&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2466&quot;&gt;#2466&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2900&quot;&gt;#2900&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Various minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2642&quot;&gt;#2642&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2847&quot;&gt;#2847&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2929&quot;&gt;#2929&lt;/a&gt;
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3012&quot;&gt;#3012&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved compile times for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Merged in the &lt;a href=&quot;/libs/graph_parallel/doc/html/index.html&quot;&gt;Parallel
            Boost Graph Library&lt;/a&gt;, giving a full suite of graph algorithms
            and data structures for distributed-memory computers (such as clusters).
          &lt;/li&gt;
          &lt;li&gt;
            Updates to the interface of the compressed sparse row graph, including
            constructors from unsorted edge lists.
          &lt;/li&gt;
          &lt;li&gt;
            An implicit grid graph, saving memory over using the former generator.
          &lt;/li&gt;
          &lt;li&gt;
            New algorithms: Dijkstra's single-source shortest path algorithm without
            a separate color map and an algorithm to find maximal common subgraphs
            between two graphs.
          &lt;/li&gt;
          &lt;li&gt;
            Assorted bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Automatically configure the float functions using template metaprogramming
            instead of trying to configure every possibility manually.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Windows shared memory is created in Shared Documents folder so that it
            can be shared between services and processes
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2967&quot;&gt;#2967&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2973&quot;&gt;#2973&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2992&quot;&gt;#2992&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3138&quot;&gt;#3138&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3166&quot;&gt;#3166&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3205&quot;&gt;#3205&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Code cleanup in tree_algorithms.hpp and avl_tree_algorithms.hpp
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3164&quot;&gt;#3164&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;char_&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;
            for compile-time string manipulation, based on multichar literals (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2905&quot;&gt;#2905&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Updated &lt;a href=&quot;/libs/mpl/doc/refmanual.html&quot;&gt;MPL Reference Manual&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for building with disabled exceptions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2096&quot;&gt;#2096&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Unicode parser no longer drops original tokens (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2425&quot;&gt;#2425&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed crash on user-inserted items in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variables_map&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2782&quot;&gt;#2782&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;Property Map&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Moved property map code into a separate directory, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;. The old files exist and forward to
            the new ones; the previous files directly in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; will be removed in Boost 1.42.0.
          &lt;/li&gt;
          &lt;li&gt;
            Moved distributed property maps to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;parallel&lt;/span&gt;&lt;/code&gt;
            namespace.
          &lt;/li&gt;
          &lt;li&gt;
            Added a property map based on a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;/code&gt;,
            providing a simpler interface.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            PrimitiveTransforms have stricter conformance to ResultOf protocol. (Warning:
            some invalid code may break.)
          &lt;/li&gt;
          &lt;li&gt;
            Add a sensible default for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt;'s
            template parameter.
          &lt;/li&gt;
          &lt;li&gt;
            Improved default evaluation strategy for pointers to members.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4 portability fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3021&quot;&gt;#3021&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Work around Visual C++'s non-std-compliant ciso646 macros.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Made the constructors of all the generators call the copy constructor
            when passed a non-const reference.
          &lt;/li&gt;
          &lt;li&gt;
            Changed seeding functions to accept any arithmetic type. As a side-effect,
            the exact signature of seed changed for some classes.
          &lt;/li&gt;
          &lt;li&gt;
            Major bug fixes in uniform_int.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;static_warning&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_saver&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pfto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. Use the the equivalent headers
            in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;serialization&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;
            directory instead (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3062&quot;&gt;#3062&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_serializer_map&lt;/span&gt;&lt;/code&gt; should now be
            used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_pointer_iserializer&lt;/span&gt;&lt;/code&gt;.
            For more details see &lt;a href=&quot;/doc/libs/1_40_0/libs/serialization/doc/release.html&quot;&gt;the
            library release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt; for
            all compilers, not just ones with rvalue references and variadic templates
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1978&quot;&gt;#1978&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Create less buckets by default.
          &lt;/li&gt;
          &lt;li&gt;
            Some minor tweaks for better compiler support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2908&quot;&gt;#2908&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3096&quot;&gt;#3096&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3082&quot;&gt;#3082&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Works on Visual C++ 10.0 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3124&quot;&gt;#3124&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The default naming of libraries in Unix-like environment now matches system
      conventions, and does not include various decorations. Naming of libraries
      on Cygwin was also fixed. Support for beta versions of Microsoft Visual Studio
      10 was added. With gcc, 64-bit compilation no longer requires that target architecture
      be specified.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Hide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;INTERNAL&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ONLY&lt;/span&gt;&lt;/code&gt;
            enums in doxygen documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3242&quot;&gt;#3242&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Tweaked appearance of member classes/structs/unions in a class synopsis.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support python code snippets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3029&quot;&gt;#3029&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;teletype&lt;/span&gt;&lt;/code&gt; source mode
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1202&quot;&gt;#1202&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.3 on Ubuntu Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.0 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and GCC 4.4.0 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1.
          &lt;/li&gt;
          &lt;li&gt;
            GCC Open64 4.2.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1, 4.2.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3, 6.1.0, 6.1.3.
          &lt;/li&gt;
          &lt;li&gt;
            Borland C++ Builder 2007 and 2009.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and 4.4.0, on Mingw with C++0x features.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.39.0</title><pubDate>Sat, 02 May 2009 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Signals2. Updated Libraries: Asio, Flyweight, Foreach, Hash,
      Interprocess, Intrusive, Program.Options, Proto, PtrContainer, Range, Unordered,
      Xpressive. Updated Tools: Boostbook, Quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.39.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_39_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals2/index.html&quot;&gt;Signals2&lt;/a&gt;:&lt;/span&gt; Managed signals
        &amp;amp; slots callback implementation (thread-safe version 2), from Frank Mori
        Hess.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Implement automatic resizing of the bucket array in the internal hash
            maps. This is to improve performance for very large numbers of asynchronous
            operations and also to reduce memory usage for very small numbers. A
            new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_HASH_MAP_BUCKETS&lt;/span&gt;&lt;/code&gt;
            may be used to tweak the sizes used for the bucket arrays.
          &lt;/li&gt;
          &lt;li&gt;
            Add performance optimisation for the Windows IOCP backend for when no
            timers are used.
          &lt;/li&gt;
          &lt;li&gt;
            Prevent locale settings from affecting formatting of TCP and UDP endpoints
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2682&quot;&gt;#2682&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix a memory leak that occurred when an asynchronous SSL operation's
            completion handler threw an exception (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2910&quot;&gt;#2910&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix the implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; so that it adheres to the documented
            type requirements for IoControlCommand (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2820&quot;&gt;#2820&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix incompatibility between Asio and ncurses.h (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2156&quot;&gt;#2156&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            On Windows, specifically handle the case when an overlapped &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ReadFile&lt;/span&gt;&lt;/code&gt; call fails with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;. This enables a hack
            where a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_handle&lt;/span&gt;&lt;/code&gt; can be used with a message-oriented
            named pipe (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2936&quot;&gt;#2936&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix system call wrappers to always clear the error on success, as POSIX
            allows successful system calls to modify errno (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2953&quot;&gt;#2953&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Don't include termios.h if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_SERIAL_PORT&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2917&quot;&gt;#2917&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Cleaned up some more MSVC level 4 warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2828&quot;&gt;#2828&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2871&quot;&gt;#2871&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The &lt;a href=&quot;/libs/flyweight/doc/tutorial/configuration.html#refcounted&quot;&gt;refcounted&lt;/a&gt;
            component was not thread-safe due to an incorrect implementation and
            could deadlock under heavy usage conditions. This problem has been corrected.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Eliminate shadow warnings on gcc for nested &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;FOREACH&lt;/span&gt;&lt;/code&gt;
            loops
          &lt;/li&gt;
          &lt;li&gt;
            Portability fix for Intel-Win toolset
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Remove deprecated headers for hashing containers. Everything that was
            in them is included in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2412&quot;&gt;#2412&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Other minor changes, full details in the library &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_39_0&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Increased portability and bug fixes. Full details in the library &lt;a href=&quot;/doc/html/interprocess/acknowledgements_notes.html#interprocess.acknowledgements_notes.release_notes.release_notes_boost_1_39_00&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Optimizations and bug fixes. Full details in the library &lt;a href=&quot;/doc/html/intrusive/release_notes.html#intrusive.release_notes.release_notes_boost_1_39_00&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Multitoken options fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/469&quot;&gt;#469&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Work around incompatibility with standard Linux header.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;noinvoke&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            to block metafunction invocation in object transforms.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes from Trac applied.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes from Trac applied.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed regression in 1.38 that prevented unordered from using more than
            about 1.5 million buckets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2975&quot;&gt;#2975&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Minor implementation changes, including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2756&quot;&gt;#2756&lt;/a&gt;.
            Full details in the library &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_39_0&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Work around for gcc optimization problem resulting in pure virtual function
            call runtime error (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2655&quot;&gt;#2655&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved PDF generation.
          &lt;/li&gt;
          &lt;li&gt;
            Preliminary HTMLHelp support.
          &lt;/li&gt;
          &lt;li&gt;
            Add default path for callout images.
          &lt;/li&gt;
          &lt;li&gt;
            Include data members' &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            in the class synopsis.
          &lt;/li&gt;
          &lt;li&gt;
            Fix bug where a function's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            wasn't displayed if it was just plain text.
          &lt;/li&gt;
          &lt;li&gt;
            Support the alt tag in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;headername&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;macroname&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. Use this if the header or macro
            name is different to the contents of the tag (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1977&quot;&gt;#1977&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support links relative to the boost root in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ulink&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            tags, using a custom url, see the &lt;a href=&quot;/doc/html/boostbook/together.html#boostbook.linking&quot;&gt;linking
            documentation&lt;/a&gt; for details (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1166&quot;&gt;#1166&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Avoid generating filenames that only differ in case for function, method
            and macro documentation.
          &lt;/li&gt;
          &lt;li&gt;
            Run the docbook chunker quietly, unless boostbook.verbose is set. This
            parameter might be used in other places in future releases.
          &lt;/li&gt;
          &lt;li&gt;
            Make the 1.1 DTD available.
          &lt;/li&gt;
          &lt;li&gt;
            Fill in some missing reference documentation (partially fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2153&quot;&gt;#2153&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changes to doxygen integration:
            &lt;ul&gt;
              &lt;li&gt;
                Support &lt;code&gt;&lt;span class=&quot;special&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;.
              &lt;/li&gt;
              &lt;li&gt;
                Support global variables and enums.
              &lt;/li&gt;
              &lt;li&gt;
                Better support for documentation written in function and method bodies.
              &lt;/li&gt;
              &lt;li&gt;
                Workaround a problem with doxygen 1.5.8's xml output (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2937&quot;&gt;#2937&lt;/a&gt;).
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Return an error code and error count if there are any errors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1399&quot;&gt;#1399&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support both windows and cygwin paths at the compile line when compiled
            with cygwin.
          &lt;/li&gt;
          &lt;li&gt;
            Fix some issues with C++ and Python code:
            &lt;ul&gt;
              &lt;li&gt;
                Fail gracefully for a mismatched &lt;code&gt;&lt;span class=&quot;char&quot;&gt;''&lt;/span&gt;&lt;/code&gt;.
              &lt;/li&gt;
              &lt;li&gt;
                Warn if any unexpected character are encountered and write them out
                properly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1170&quot;&gt;#1170&lt;/a&gt;).
              &lt;/li&gt;
              &lt;li&gt;
                Fix a bug for hex encoded characters in strings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2860&quot;&gt;#2860&lt;/a&gt;).
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Improved testing, including tests for expected failures.
          &lt;/li&gt;
          &lt;li&gt;
            Generate valid document info for document types other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;library&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2711&quot;&gt;#2711&lt;/a&gt;):
            &lt;ul&gt;
              &lt;li&gt;
                Remove library specific attributes.
              &lt;/li&gt;
              &lt;li&gt;
                Put title before info block.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Fix a bug when calling templates.
          &lt;/li&gt;
          &lt;li&gt;
            Less warnings when built using gcc.
          &lt;/li&gt;
          &lt;li&gt;
            Small documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1213&quot;&gt;#1213&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2701&quot;&gt;#2701&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix a bug with xinclude pages when outdir is the current directory (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2921&quot;&gt;#2921&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.2 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Debian &amp;quot;unstable&amp;quot;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.0 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.0 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on Suse Linux on 64 bit Itanium
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on OpenSuSE Linux
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux
          &lt;/li&gt;
          &lt;li&gt;
            GNU gcc version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
            Linux
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.1, 10.1 on Tiger
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on Leopard
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            Borland 6.1.0
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit. (TODO:
            not recently)
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, on Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        NetBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.38.0</title><pubDate>Sun, 08 Feb 2009 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Flyweight, ScopeExit, Swap. Updated Libraries: Accumulators,
      Any, Asio, Config, Date_Time, Exception, Filesystem, Graph, Hash, Interprocess,
      Intrusive, Lexical Cast, Math, Multi-index Containers, Proto, Regex, Thread,
      TR1, Type Traits, Unordered, Xpressive. Other Changes: Experimental CMake build
      system.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.38.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_38_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Design pattern to manage large quantities of highly redundant objects,
            from Joaquín M López Muñoz.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/scope_exit/doc/html/index.html&quot;&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Execute arbitrary code at scope exit, from Alexander Nasonov.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/swap.html&quot;&gt;Swap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Enhanced generic swap function, from Joseph Gauterin.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_sum&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_count&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_mean&lt;/span&gt;&lt;/code&gt;
            accumulators.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/any.html&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use a by-value argument for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2311&quot;&gt;#2311&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved compatibility with some Windows firewall software.
          &lt;/li&gt;
          &lt;li&gt;
            Ensured arguments to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;overlapped_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; are correctly passed to the completion
            handler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2614&quot;&gt;#2614&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a link problem and multicast failure on QNX (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2504&quot;&gt;#2504&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2530&quot;&gt;#2530&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a compile error in SSL support on MinGW / g++ 3.4.5.
          &lt;/li&gt;
          &lt;li&gt;
            Drop back to using a pipe for notification if eventfd is not available
            at runtime on Linux (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2683&quot;&gt;#2683&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various minor bug and documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2534&quot;&gt;#2534&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2541&quot;&gt;#2541&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2607&quot;&gt;#2607&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2617&quot;&gt;#2617&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2619&quot;&gt;#2619&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add new macros BOOST_NO_STD_UNORDERED and BOOST_NO_INITIALIZER_LISTS.
          &lt;/li&gt;
          &lt;li&gt;
            Added Codegear compiler support.
          &lt;/li&gt;
          &lt;li&gt;
            Added Dragonfly to the BSD family of configs.
          &lt;/li&gt;
          &lt;li&gt;
            Updated MSVC's binary ABI settings to match compiler default when doing
            64-bit builds.
          &lt;/li&gt;
          &lt;li&gt;
            Recognise latest compilers from MS and Intel.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;Date_Time&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for formatting and reading time durations longer than 24
            hours with new formatter: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Removed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;testfrmwk&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
            file from the public include directory.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed several bugs and compile errors.
          &lt;/li&gt;
          &lt;li&gt;
            For full details see the &lt;a href=&quot;/doc/libs/1_38_0/doc/html/date_time/details.html#date_time.changes&quot;&gt;change
            history&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved and more customizable &lt;a href=&quot;/libs/exception/doc/diagnostic_information.html&quot;&gt;diagnostic_information&lt;/a&gt;
            output.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix native(name) test failures on POSIX-like systems.
          &lt;/li&gt;
          &lt;li&gt;
            Several bugfixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2543&quot;&gt;#2543&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2224&quot;&gt;#2224&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2531&quot;&gt;#2531&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1840&quot;&gt;#1840&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2542&quot;&gt;#2542&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new algorithms for Travelling Salesman Problem approximation
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;metric_tsp_approx&lt;/span&gt;&lt;/code&gt;) and
            resource-constrained Shortest Paths (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;r_c_shortest_paths&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support for named vertices in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of bugfixes ( &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/416&quot;&gt;#416&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1622&quot;&gt;#1622&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1700&quot;&gt;#1700&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2209&quot;&gt;#2209&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2392&quot;&gt;#2392&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2460&quot;&gt;#2460&lt;/a&gt;,
            and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2550&quot;&gt;#2550&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; has been moved to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. The current location is deprecated.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail, see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_38_0&quot;&gt;library
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated documentation to show rvalue-references functions instead of
            emulation functions.
          &lt;/li&gt;
          &lt;li&gt;
            More non-copyable classes are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Move-constructor and assignments now leave moved object in default-constructed
            state instead of just swapping contents.
          &lt;/li&gt;
          &lt;li&gt;
            Several bugfixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2391&quot;&gt;#2391&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2431&quot;&gt;#2431&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1390&quot;&gt;#1390&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2570&quot;&gt;#2570&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2528&quot;&gt;#2528&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New treap-based containers: treap, treap_set, treap_multiset.
          &lt;/li&gt;
          &lt;li&gt;
            Corrected compilation bug for Windows-based 64 bit compilers.
          &lt;/li&gt;
          &lt;li&gt;
            Corrected exception-safety bugs in container constructors.
          &lt;/li&gt;
          &lt;li&gt;
            Updated documentation to show rvalue-references functions instead of
            emulation functions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Changed to work without RTTI when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_TYPEID&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1220&quot;&gt;#1220&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added Johan Råde's optimised floating point classification routines.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed code so that it compiles in GCC's -pedantic mode (bug report &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1451&quot;&gt;#1451&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Some
        redundant type definitions have been deprecated. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_38&quot;&gt;release notes&lt;/a&gt;
        for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix problem with SFINAE of binary operators (Bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2407&quot;&gt;2407&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call&lt;/span&gt;&lt;/code&gt; transform for callable transforms
            with &amp;gt;3 arguments.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;/code&gt; changed behavior for array-by-value
            terminals.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;/code&gt; requires
            only Forward Sequences rather than Random Access Sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Deprecate legacy undocumented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_DEFINE_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VARARG_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;FUNCTION_TEMPLATE&lt;/span&gt;&lt;/code&gt;
            macros.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_REPEAT&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_LOCAL_ITERATE&lt;/span&gt;&lt;/code&gt;
            macros to help with repetitive code generation
          &lt;/li&gt;
          &lt;li&gt;
            Support for nullary expressions with tag types other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;terminal&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Allow 0- and 1-argument variants of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;or_&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;em&gt;Breaking change&lt;/em&gt;: empty expressions,
            and empty alternatives are now allowed when using the Perl regular expression
            syntax. This change has been added for Perl compatibility, when the new
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;syntax_option_type&lt;/span&gt;&lt;/code&gt; &lt;em&gt;no_empty_expressions&lt;/em&gt;
            is set then the old behaviour is preserved and empty expressions are
            prohibited. This is issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1081&quot;&gt;#1081&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for Perl style ${n} expressions in format strings (issue
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2556&quot;&gt;#2556&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for accessing the location of sub-expressions within the
            regular expression string (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2269&quot;&gt;#2269&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed compiler compatibility issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2244&quot;&gt;#2244&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2514&quot;&gt;#2514&lt;/a&gt;,
            and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2244&quot;&gt;#2458&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/thread.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            No longer catches unhandled exceptions in threads as this debuggers couldn't
            identify the cause of unhandled exceptions in threads. An unhandled exception
            will still cause the application to terminate.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for the TR1 math functions and the unordered containers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Codegear intrinsics.
          &lt;/li&gt;
          &lt;li&gt;
            Minor tweaks to warning suppression and alignment_of code.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use &lt;a href=&quot;/libs/utility/swap.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Use a larger prime number list for selecting the number of buckets.
          &lt;/li&gt;
          &lt;li&gt;
            Use &lt;a href=&quot;/libs/type_traits/doc/html/boost_typetraits/category/alignment.html&quot;&gt;aligned
            storage&lt;/a&gt; to store the types.
          &lt;/li&gt;
          &lt;li&gt;
            Add support for C++0x initializer lists where they're available.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail, see the &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_38_0&quot;&gt;library
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;/code&gt; gets nested
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;syntax_option_flags&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;/code&gt; typedef, for
            compatibility with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Ported to Proto v4; Proto v2 at &lt;tt&gt;boost/xpressive/proto&lt;/tt&gt;
            has been removed.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_error&lt;/span&gt;&lt;/code&gt; inherits
            from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exception&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.other_changes&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Changes&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Experimental support for building Boost with &lt;a href=&quot;http://www.cmake.org/&quot;&gt;CMake&lt;/a&gt;
        has been introduced in this version. For more details see the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;wiki&lt;/a&gt;,
        Discussion is taking place on the &lt;a href=&quot;http://lists.boost.org/mailman/listinfo.cgi/boost-cmake&quot;&gt;Boost-cmake
        mailing list&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        Fixed subversion properties for several files. Most notably, unix shell scripts
        should always have unix line endings, even in the windows packages.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel OS X 10.4.10, 10.5.2
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC OS X 10.4.9
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.2 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Debian &amp;quot;unstable&amp;quot;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        HP-UX:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on HP-UX 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            HP C/aC++ B3910B A.06.17 on HP-UX 64-bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on OpenSuSE Linux
          &lt;/li&gt;
          &lt;li&gt;
            pgCC 8.0-0a 64-bit target on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.1, 10.0 on OS X 10.4.10
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on OS X 10.5.2
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista EE 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 express on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0, using STLport, on XP and Windows Mobile 5.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1, using STLport, on XP
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            Borland 6.1.0
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau 4.3.10.1 beta 2, with a Visual C++ 9.0 backend.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.4, on Cygwin
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        NetBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        QNX:
        &lt;ul&gt;
          &lt;li&gt;
            QNX Software Development Platform 6.4.0 x86
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release. Thanks to Vicente Botet for helping compile these
      release notes.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.37.0</title><pubDate>Mon, 03 Nov 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Proto. Updated Libraries: Asio, Circular Buffer, Dynamic Bitset,
      Exception, Hash, Interprocess, Intrusive, Math, Type Traits, Unordered
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.37.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_37_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Expression template library and compiler construction toolkit for domain-specific
            embedded languages, from Eric Niebler.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Enhanced CompletionCondition concept with the signature &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CompletionCondition&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;, where the return value indicates the
            maximum number of bytes to be transferred on the next read or write operation.
            (The old CompletionCondition signature is still supported for backwards
            compatibility).
          &lt;/li&gt;
          &lt;li&gt;
            New windows::overlapped_ptr class to allow arbitrary overlapped I/O functions
            (such as TransmitFile) to be used with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            On recent versions of Linux, an eventfd descriptor is now used (rather
            than a pipe) to interrupt a blocked select/epoll reactor.
          &lt;/li&gt;
          &lt;li&gt;
            Added const overloads of lowest_layer().
          &lt;/li&gt;
          &lt;li&gt;
            Synchronous read, write, accept and connect operations are now thread
            safe (meaning that it is now permitted to perform concurrent synchronous
            operations on an individual socket, if supported by the OS).
          &lt;/li&gt;
          &lt;li&gt;
            Reactor-based io_service implementations now use lazy initialisation
            to reduce the memory usage of an io_service object used only as a message
            queue.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new methods &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_linearized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;const_iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes and documentation updates.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Constructor &amp;quot;do the right thing&amp;quot; dispatch, a la standard sequence
            containers (follows the proposed resolution of &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438&quot;&gt;library
            issue 438&lt;/a&gt;, currently in the &lt;tt&gt;C++0x&lt;/tt&gt; working
            paper).
          &lt;/li&gt;
          &lt;li&gt;
            Improvements to documentation, code examples and implementation.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for non-RTTI builds.
          &lt;/li&gt;
          &lt;li&gt;
            Optimizations.
          &lt;/li&gt;
          &lt;li&gt;
            A new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
            which can be used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
            when throwing, to automatically record information about the location
            of the throw in the exception object.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor bug fix (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2264&quot;&gt;ticket
            2264&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added placement insertion (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;...) methods to containers.
          &lt;/li&gt;
          &lt;li&gt;
            Containers can be used now in recursive types.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Intrusive now takes advantage of compilers with variadic templates.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clone_from&lt;/span&gt;&lt;/code&gt; functions
            now copy predicates and hash functions of associative containers.
          &lt;/li&gt;
          &lt;li&gt;
            Added incremental hashing to unordered containers via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math.Special
        Functions&lt;/a&gt;:&lt;/span&gt;
   Improved accuracy and testing of the inverse hypergeometric
        functions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
   Added
        better support for the Codegear compiler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Rename overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt;
            with hint, to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_hint&lt;/span&gt;&lt;/code&gt;
            as specified in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2691.pdf&quot;&gt;n2691&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Provide forwarding headers at &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Move all of the implementation inside the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;/code&gt;
            directory.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.4 on Ubuntu Linux 8.10
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.3.2 on Debian Sid
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.1 on HP-UX Integrity
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1, 8.0, and 7.1 SP1, all on Windows XP
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.1.2 on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.10
      &lt;/li&gt;
      &lt;li&gt;
        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
      &lt;/li&gt;
      &lt;li&gt;
        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
      &lt;/li&gt;
      &lt;li&gt;
        On Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 3.4.3, 4.0.1, 4.2.1, 4.2.4, 4.3.2.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64 bit linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 8.1, 9.0, 9.1 and 10.0
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1
          &lt;/li&gt;
          &lt;li&gt;
            Sun Compiler 5.9, 5.10 with stdcxx
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        On Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Several testers using Visual C++ 7.1, 8.0, 9.0 and 10.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
            Pocket PC SDK (ARMV4I).
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3 and 6.10.0
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Visual C++ 9.0.
          &lt;/li&gt;
          &lt;li&gt;
            64-bit Visual C++ 9.0 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.36.0</title><pubDate>Thu, 14 Aug 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Accumulators, Exception, Units, Unordered. Updated Libraries:
      Asio, Assign, Circular Buffer, Foreach, Function, Hash, Interprocess, Intrusive,
      Math, Multi-index Containers, MPI, PtrContainer, Spirit, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.36.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_36_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt; Framework
        for incremental calculation, and collection of statistical accumulators,
        from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/doc/boost-exception.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt; 
  A
        library for transporting of arbitrary data in exception objects, and transporting
        of exceptions between threads, from Emil Dotchevski.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/units/index.html&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
  Zero-overhead dimensional
        analysis and unit/quantity manipulation and conversion, from Matthias Schabel
        and Steven Watanabe
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt; 
  Unordered
        associative containers, from Daniel James.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for serial ports.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for UNIX domain sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for raw sockets and ICMP.
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for POSIX stream-oriented file descriptors (excluding
            regular files).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows stream-oriented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as named pipes (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows random-access &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as files (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for reactor-style operations (i.e. they report readiness
            but perform no I/O) using a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
            type.
          &lt;/li&gt;
          &lt;li&gt;
            Added an iterator type for bytewise traversal of buffer sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; overloads that take a user-defined
            function object for locating message boundaries.
          &lt;/li&gt;
          &lt;li&gt;
            Added an experimental two-lock queue (enabled by defining &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE&lt;/span&gt;&lt;/code&gt;) that
            may provide better &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
            scalability across many processors.
          &lt;/li&gt;
          &lt;li&gt;
            Various fixes, performance improvements, and more complete coverage of
            the custom memory allocation support.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/assign/index.html&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        (and its variants) now has overloaded comparison operators. This allows you
        to write test code such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHECK_EQUAL&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Default constructor now doesn't allocate memory, and sets the capacity
            of the buffer to 0
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_REVERSE_FOREACH&lt;/span&gt;&lt;/code&gt;
            macro for iterating over a sequence in reverse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved allocator support, from Emil Dotchevski.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  Minor updates
        and fixes, for more info see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_36_0&quot;&gt;change
        log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added anonymous shared memory for UNIX systems.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed missing move semantics on managed memory classes.
          &lt;/li&gt;
          &lt;li&gt;
            Added copy_on_write and open_read_only options for shared memory and
            mapped file managed classes.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt; is movable
            and supports aliasing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cache_last&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            options to singly linked lists.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optimize_multikey&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option to unordered container
            hooks.
          &lt;/li&gt;
          &lt;li&gt;
            Optimized unordered containers when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;store_hash&lt;/span&gt;&lt;/code&gt;
            option is used in the hook.
          &lt;/li&gt;
          &lt;li&gt;
            Implementation changed to avoid explicit use of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/code&gt;-&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; blocks and be compilable with exceptions
            disabled.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new non-central Chi-Square, Beta, F and T distributions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Exponential Integral and Zeta special functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Rounding, Truncation, and Unit-in-the-last-place functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for compile time powers of a runtime base.
          &lt;/li&gt;
          &lt;li&gt;
            Added a few SSE2 based optimisations for the Lanczos approximations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for non-blocking operations in Python, from Andreas Klöckner.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for graph topologies.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Minor
        additions and maintenance fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_36&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
  Support
        for a few more containers, and addition of insert iterators. For details
        see &lt;a href=&quot;/libs/ptr_container/doc/ptr_container.html#upgrading-from-boost-v-1-35&quot;&gt;upgrading
        details&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Integrated the
        &amp;quot;Classic&amp;quot; Spirit V1.8.x code base with Spirit V2, &amp;quot;The New
        Generation&amp;quot;. See &lt;a href=&quot;/libs/spirit/classic/change_log.html&quot;&gt;Change
        Log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New generic &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt; functions for
            locking multiple mutexes at once.
          &lt;/li&gt;
          &lt;li&gt;
            Rvalue reference support for move semantics where the compilers supports
            it.
          &lt;/li&gt;
          &lt;li&gt;
            A few bugs fixed and missing functions added (including the serious win32
            condition variable bug).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_try_lock&lt;/span&gt;&lt;/code&gt; types
            are now backwards-compatible with Boost 1.34.0 and previous releases.
          &lt;/li&gt;
          &lt;li&gt;
            Support for passing function arguments to the thread function by supplying
            additional arguments to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;/code&gt;
            constructor.
          &lt;/li&gt;
          &lt;li&gt;
            Backwards-compatibility overloads added for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_lock&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_wait&lt;/span&gt;&lt;/code&gt; functions
            to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            for timeouts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave V2.0 is a new major release introducing some breaking API changes,
            preventing it to be used with Boost versions earlier than V1.36.0. Mainly,
            the API and hook interface have been streamlined for more consistency.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a couple of bugs, improved regression test system to include testing
            of the preporcessing hooks interface (for details see: &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; 
  Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            for specifying which parts of the input sequence to ignore when matching
            it against a regex.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            accepts formatter objects and formatter expressions in addition to format
            strings.
          &lt;/li&gt;
          &lt;li&gt;
            Range-based &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; algorithm.
          &lt;/li&gt;
          &lt;li&gt;
            Fix crash when semantic actions are placed in look-aheads, look-behinds
            or independent sub-expressions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.3 on Ubuntu Linux 8.04.1
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1 beta, 8.0 SP1, and 7.1, all on Windows XP SP-2
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.2.1 on FreeBSD-7
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.1.2 on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.1
      &lt;/li&gt;
      &lt;li&gt;
        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
      &lt;/li&gt;
      &lt;li&gt;
        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
      &lt;/li&gt;
      &lt;li&gt;
        On Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 3.4.3, 4.0.1, 4.2.1, 4.3.0.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.0 with C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, 4.1.1, 4.2.1 on 64 bit linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 8.1, 9.0 and 9.1.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1
          &lt;/li&gt;
          &lt;li&gt;
            pgCC 7.2-3 64-bit target on x86-64 Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        On Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            Lots of tests on Visual C++ 7.1, 8.0, 9.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
            Pocket PC SDK (ARMV4I).
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.6.4, 5.8.2, 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Visual C++ 9.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene
      Rivera&lt;/a&gt;, and Daniel James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.35.0</title><pubDate>Sat, 29 Mar 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Asio, Bimap, Circular Buffer, Function Types, Fusion, GIL, Interprocess,
      Intrusive, Math/Special Functions, Math/Statistical Distributions, MPI, System.
      Updated Libraries: Graph, Hash, Iostreams, Multi Array, Multi-index Containers,
      Serialization, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.35.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_35_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt; Portable networking,
        including sockets, timers, hostname resolution and socket iostreams, from
        Chris Kohlhoff.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bimap/index.html&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt; Boost.Bimap is a
        bidirectional maps library for C++. With Boost.Bimap you can create associative
        containers in which both types can be used as key, from Matias Capeletto.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt; STL
        compliant container also known as ring or cyclic buffer, from Jan Gaspar.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt; 
  Boost.FunctionTypes
        provides functionality to classify, decompose and synthesize function, function
        pointer, function reference and pointer to member types. From Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt; 
  Library for working
        with tuples, including various containers, algorithms, etc. From Joel de
        Guzman, Dan Marsden and Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/gil/doc/index.html&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt; 
  Generic Image Library,
        from Lubomir Bourdev and Hailin Jin.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt; 
  Shared
        memory, memory mapped files, process-shared mutexes, condition variables,
        containers and allocators, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt; 
  Intrusive
        containers and algorithms, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Special
        Functions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of mathematical special functions from
        John Maddock, Paul Bristow, Hubert Holin and Xiaogang Zhang.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Statistical
        Distributions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of univariate statistical distributions
        and functions that operate on them from John Maddock and Paul Bristow
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt; 
  Message Passing Interface
        library, for use in distributed-memory parallel application programming,
        from Douglas Gregor and Matthias Troyer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt; 
  Operating system
        support, including the diagnostics support that will be part of the C++0x
        standard library, from Beman Dawes.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
  Generic graph
        components and algorithms. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
            from Stephan Diederich as part of the 2006 Google Summer of Code.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            for max-flow problems, from Stephan Diederich.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_graphml&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_graphml&lt;/span&gt;&lt;/code&gt; for GraphML input/output,
            from Tiago de Paula Peixoto.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_cycle_ratio&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;maximum_cycle_ratio&lt;/span&gt;&lt;/code&gt;,
            from Dmitry Bufistov and Andrey Parfenov.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boyer_myrvold_planarity_test&lt;/span&gt;&lt;/code&gt;,
            along with a suite of algorithms for planar graphs, from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            LEDA Adaptor improvements, from Jens Müller.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  A TR1 hash
        function object, from Daniel James. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the algorithm for hashing floating point numbers.
          &lt;/li&gt;
          &lt;li&gt;
            A few bug and warning fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt; Framework
        for defining streams, stream buffers and i/o filters, from Jonathan Turkanis.
        Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Clarified the semantics of close(). This fixes several bugs but will
            break some existing code. See &lt;a href=&quot;/libs/iostreams/doc/index.html?path=12&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Numerous other bug fixes and optimizations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &amp;quot;dimensionality&amp;quot; compile-time constante to the MultiArray
            concept.
          &lt;/li&gt;
          &lt;li&gt;
            For greater control over error situations, uses of C++ assert have been
            replaced with BOOST_ASSERT.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug with simultaneous resizing and reindexing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/libs/multi_index/doc/tutorial/key_extraction.html#global_fun&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;global_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; predefined key extractor.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/libs/multi_index/doc/tutorial/indices.html#iterator_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; facility.
          &lt;/li&gt;
          &lt;li&gt;
            Included &lt;a href=&quot;/libs/multi_index/doc/tutorial/creation.html#special_allocator&quot;&gt;support
            for non-standard allocators&lt;/a&gt; such as those of &lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Boost.Interprocess&lt;/a&gt;,
            which makes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;s
            placeable in shared memory.
          &lt;/li&gt;
          &lt;li&gt;
            New versions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt; with rollback,
            as described in the &lt;a href=&quot;/libs/multi_index/doc/tutorial/basics.html#ord_updating&quot;&gt;tutorial&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of optimizations and minor improvements have also been included.
            For a complete list of changes, see the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_35&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt; 
   Boost.Serialization
        has been updated with optimizations for dense arrays.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The Thread library has been updated to be more in line with the C++0x
            working draft.
          &lt;/li&gt;
          &lt;li&gt;
            Instances of boost::thread and of the various lock types are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Threads can be interrupted at interruption points.
          &lt;/li&gt;
          &lt;li&gt;
            Condition variables can now be used with any type that implements the
            Lockable concept, through the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition&lt;/span&gt;&lt;/code&gt; is a typedef to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;, provided for
            backwards compatibility). &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
            is provided as an optimization, and will only work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Thread IDs are separated from boost::thread, so a thread can obtain it's
            own ID (using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;),
            and IDs can be used as keys in associative containers, as they have the
            full set of comparison operators.
          &lt;/li&gt;
          &lt;li&gt;
            Timeouts are now implemented using the Boost DateTime library, through
            a typedef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;system_time&lt;/span&gt;&lt;/code&gt; for absolute timeouts,
            and with support for relative timeouts in many cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            is supported for backwards compatibility only.
          &lt;/li&gt;
          &lt;li&gt;
            Locks are implemented as publicly accessible templates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_guard&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_lock&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;upgrade_lock&lt;/span&gt;&lt;/code&gt;,
            which are templated on the type of the mutex. The Lockable concept has
            been extended to include publicly available &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions, which are used by
            the lock types.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; has been removed, and the
            functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef, but
            is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; has been removed,
            and the functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef,
            but is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt; has been removed. Code that
            relies on the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt;
            implementation detail will no longer work, as this has been removed,
            as it is no longer necessary now that mutex types now have public &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt; constructors
            with a second parameter of type bool are no longer provided. With previous
            boost releases, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
            could be used to create a lock object that was associated with a mutex,
            but did not lock it on construction. This facility has now been replaced
            with the constructor that takes a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock_type&lt;/span&gt;&lt;/code&gt;
            as the second parameter: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            The broken &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been replaced
            with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_mutex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards conformant
        implementation of the mandated C99/C++ preprocessor functionality packed
        behind an easy to use iterator interface, from Hartmut Kaiser. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added the possibility to continue the preprocessing after an error occured.
          &lt;/li&gt;
          &lt;li&gt;
            Added the macro introspection API to the wave::context object.
          &lt;/li&gt;
          &lt;li&gt;
            Added threading support to the library.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the overall performance by upto 30%.
          &lt;/li&gt;
          &lt;li&gt;
            Changed and unified preprocessor hook interface (this is an interface
            breaking change!), added several new preprocessor hook functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added serialization support.
          &lt;/li&gt;
          &lt;li&gt;
            Added new examples (for instance: Hannibal - a partial C++ parser, by
            Danny Havenith).
          &lt;/li&gt;
          &lt;li&gt;
            Added a new lexical analyzer based on Ben Hansons Lexertl library.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a large number of other bugs and problems.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;em&gt;semantic actions&lt;/em&gt; to static regexes. A semantic
            action is code that executes when part of a regular expression matches.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;custom assertions&lt;/em&gt; to static regexes. A custom
            assertion is a Boolean predicate that can participate in the regex match.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named regexes&lt;/em&gt; for embedding a static or dynamic
            regex into a dynamic regex. This can be used to create dynamic regex
            grammars.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named captures&lt;/em&gt; to dynamic regexes, like Perl.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The following compilers are officially supported in this release:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        HP aC++ A.06.14 on HP-UX
      &lt;/li&gt;
      &lt;li&gt;
        Darwin GCC 4.01.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC up to version 4.2.1, on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 9.1 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10.1 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 7.1 and 8 on Windows (Visual Sudio .NET 2003 and 2005).
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      In addition the following compilers should be well supported, but weren't part
      of our release criteria for 1.35:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        IBM Visual Age 9.0 on AIX.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10 and later on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC 4.3 and later on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 9 (Visual Studio .NET 2008).
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.34.1</title><pubDate>Tue, 24 Jul 2007 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bugfix Release.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.34.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;p&gt;
    This is a bug fix release addressing many problems with the 1.34.0 release. It
    is a recommended upgrade for all users of Boost 1.34.0. For a complete list of
    fixes see &lt;a href=&quot;http://svn.boost.org/trac/boost/query?status=closed&amp;amp;milestone=Boost+1.34.1&quot;&gt;Boost
    Trac&lt;/a&gt;.
  &lt;/p&gt;
  &lt;div id=&quot;version_1_34_1.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      New in this release is improved support for the IBM XL C/C++ compiler.
    &lt;/p&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. New in this release The following compilers
      and platforms have been extensively tested with Boost, although many other
      compilers and platforms will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.8.2 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GNU C++&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          &lt;/li&gt;
          &lt;li&gt;
            4.1.x on Solaris
          &lt;/li&gt;
          &lt;li&gt;
            3.4.x on Windows
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.hp.com/go/c++&quot;&gt;HP aC++ A.06.14&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com/&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 9.4
        on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developers.sun.com/sunstudio/index.jsp&quot;&gt;Sun Studio 11&lt;/a&gt;
        on Solaris.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/thomas_witt.html&quot;&gt;Thomas Witt&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Kim Barrett consolidating Boost.Iostreams
      changes from various branches and Rene Rivera for general build and installation
      support.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.34.0</title><pubDate>Sat, 12 May 2007 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Foreach, Statechart, TR1, Typeof, Xpressive. Updated Libraries:
      Assign, Date_time, Filesystem, Function, Hash, Graph, MultiArray, Multi-Index,
      Optional, Parameter, Pointer Container, Python, Signals, Smart Pointer, String
      Algorithm, Wave
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.34.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_34_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/foreach.html&quot;&gt;Foreach Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/statechart/doc/index.html&quot;&gt;Statechart
        Library&lt;/a&gt;:&lt;/span&gt;
  Arbitrarily complex finite state machines can be implemented
        in easily readable and maintainable C++ code, from Andreas Huber.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/tr1/index.html&quot;&gt;TR1 Library&lt;/a&gt;:&lt;/span&gt; An
        implementation of the C++ Technical Report on Standard Library Extensions,
        from John Maddock. This library does not itself implement the TR1 components,
        rather it's a thin wrapper that will include your standard library's TR1
        implementation (if it has one), otherwise it will include the Boost Library
        equivalents, and import them into namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;/code&gt;.
        Highlights include: Reference Wrappers, Smart Pointers, result_of, Function
        Object Binders, Polymorphic function wrappers, Type Traits, Random Number
        Generators and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
        Regular Expressions, and Complex Number Additional Algorithms.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/typeof.html&quot;&gt;Typeof Library&lt;/a&gt;:&lt;/span&gt; Typeof
        operator emulation, from Arkadiy Vertleyb and Peder Holt.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/xpressive.html&quot;&gt;Xpressive Library&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/assign/index.html&quot;&gt;Assign Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            via the new function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_map_insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Support for initialization of &lt;a href=&quot;/doc/libs/1_34_0/libs/ptr_container/index.html&quot;&gt;Pointer
            Containers&lt;/a&gt; when the containers hold pointers to an abstract base
            class.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/date_time.html&quot;&gt;Date_time library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for new US/Canada timezone rules and other bug fixes. See &lt;a href=&quot;/doc/libs/1_34_0/doc/html/date_time/details.html#changes&quot;&gt;Change
            History&lt;/a&gt; for details.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
        Library&lt;/a&gt;:&lt;/span&gt; Major upgrade in preparation for submission to the C++ Standards
        Committee for TR2. Changes include:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization&quot;&gt;Internationalization&lt;/a&gt;,
            provided by class templates &lt;em&gt;basic_path&lt;/em&gt;, &lt;em&gt;basic_filesystem_error&lt;/em&gt;,
            &lt;em&gt;basic_directory_iterator&lt;/em&gt;, and &lt;em&gt;basic_directory_entry&lt;/em&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification&quot;&gt;Simplification&lt;/a&gt;
            of the path interface by eliminating special constructors to identify
            native formats.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization&quot;&gt;Rationalization&lt;/a&gt;
            of predicate function design, including the addition of several new functions.
          &lt;/li&gt;
          &lt;li&gt;
            Clearer specification by reference to &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01&quot;&gt;POSIX&lt;/a&gt;,
            the ISO/IEEE Single Unix Standard, with provisions for Windows and other
            operating systems.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation&quot;&gt;Preservation&lt;/a&gt;
            of existing user code whenever possible.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient&quot;&gt;More
            efficient&lt;/a&gt; directory iteration.
          &lt;/li&gt;
          &lt;li&gt;
            Addition of a &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator&quot;&gt;recursive
            directory iterator&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt;
  Boost.Function
        now implements a small buffer optimization, which can drastically improve
        the performance when copying or constructing Boost.Function objects storing
        small function objects. For instance, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
        requires no heap allocation when placed into a Boost.Function object.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use declarations for standard classes, so that the library doesn't need
            to include all of their headers
          &lt;/li&gt;
          &lt;li&gt;
            Deprecated the &lt;tt&gt;&amp;lt;boost/functional&lt;em&gt;hash&lt;/em&gt;*.hpp&amp;gt;&lt;/tt&gt;
            headers.
          &lt;/li&gt;
          &lt;li&gt;
            Add support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HASH_NO_EXTENSIONS&lt;/span&gt;&lt;/code&gt;
            macro, which disables the extensions to TR1
          &lt;/li&gt;
          &lt;li&gt;
            Minor improvements to the hash functions for floating point numbers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmonds_maximum_cardinality_matching&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lengauer_tarjan_dominator_tree&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from JongSoo Park.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremiah Willcock and Douglas Gregor of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sorted_erdos_renyi_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremiah Willcock of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;biconnected_components&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now
            supports a visitor and named parameters, from Janusz Piwowarski.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now models
            the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html&quot;&gt;Bidirectional
            Graph&lt;/a&gt; concept.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now
            calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialize_vertex&lt;/span&gt;&lt;/code&gt; for each vertex during
            initialization.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;em&gt;Note:&lt;/em&gt; the name of the compiled library
            for the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html&quot;&gt;GraphViz
            reader&lt;/a&gt; has changed to &lt;tt&gt;boost_graph&lt;/tt&gt; (from &lt;tt&gt;bgl-viz&lt;/tt&gt;)
            to match Boost conventions.
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0&quot;&gt;complete
            revision history&lt;/a&gt; for more information.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/multi_array/index.html&quot;&gt;MultiArray
        Library&lt;/a&gt;:&lt;/span&gt;
  Boost.MultiArray now by default provides range-checking for
        &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;.
        Range checking can be disabled by defining the macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DISABLE_ASSERTS&lt;/span&gt;&lt;/code&gt;
        before including &lt;tt&gt;multi_array.hpp&lt;/tt&gt;. A bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        related to storage orders was fixed.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices&quot;&gt;random
            access indices&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Non key-based indices feature new &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange&quot;&gt;rearrange
            facilities&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            This version also includes a number of optimizations and usage improvements.
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/optional/index.html&quot;&gt;Optional Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt; now added to Optional's documentation
          &lt;/li&gt;
          &lt;li&gt;
            Relational operators now directly support arguments of type &lt;code&gt;&lt;span class=&quot;char&quot;&gt;'T'&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;char&quot;&gt;'none_t'&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            operator-&amp;gt;() now also works with reference types.
          &lt;/li&gt;
          &lt;li&gt;
            Helper functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;make_optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;get_optional_value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;alternative_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
            added.
          &lt;/li&gt;
          &lt;li&gt;
            Constructor taking a boolean condition (as well as a value) added.
          &lt;/li&gt;
          &lt;li&gt;
            Member function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;alternative_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; added.
          &lt;/li&gt;
          &lt;li&gt;
            Incompatbility bug with mpl::apply&amp;lt;&amp;gt; fixed.
          &lt;/li&gt;
          &lt;li&gt;
            Converting assignment bug with uninitialized lvalues fixed.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/parameter/index.html&quot;&gt;Parameter
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Every ArgumentPack is now a valid &lt;a href=&quot;/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html&quot;&gt;MPL
            Forward Sequence.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Support for unnamed arguments (those whose keyword is deduced from their
            types) is added.
          &lt;/li&gt;
          &lt;li&gt;
            Support for named and unnamed template arguments is added.
          &lt;/li&gt;
          &lt;li&gt;
            New overload generation macros solve the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm&quot;&gt;forwarding
            problem&lt;/a&gt; directly.
          &lt;/li&gt;
          &lt;li&gt;
            See also the Python library changes, below.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for serialization via &lt;a href=&quot;/doc/libs/1_34_0/libs/serialization/index.html&quot;&gt;Boost.Serialization.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Exceptions can be disabled by defining the macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS
            before including any header. This macro is defined by default if BOOST_NO_EXCEPTIONS
            is defined.
          &lt;/li&gt;
          &lt;li&gt;
            Additional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            overloads added s.t. one can also pass &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; instead of only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; arguments to member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            now has weaker requirements s.t. one can transfer objects from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Boost.Python now automatically appends C++ signatures to docstrings.
            The new &lt;a href=&quot;/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html&quot;&gt;&lt;tt&gt;docstring_options.hpp&lt;/tt&gt;&lt;/a&gt;
            header is available to control the content of docstrings.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stl_input_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for turning
            a Python iterable object into an STL input iterator, from Eric Niebler.
          &lt;/li&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
            conversions is added.
          &lt;/li&gt;
          &lt;li&gt;
            Integrated support for wrapping C++ functions built with the parameter
            library; keyword names are automatically known to docsstrings.
          &lt;/li&gt;
          &lt;li&gt;
            Enhancements to the API for better embedding support (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exec_file&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; More
        improvements to signal invocation performance from Robert Zeh.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointers
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor&quot;&gt;Allocator
            support&lt;/a&gt; as proposed in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf&quot;&gt;N1851&lt;/a&gt;
            (162 Kb PDF).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer_cast&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer_to_other&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; utilities
            to allow pointer-independent code, from Ion Gaztanaga.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/algorithm/string/index.html&quot;&gt;String
        Algorithm Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexicographical_compare&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;join&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            New comparison predicates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_less&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_not_greater&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Negative indexes support (like Perl) in various algorihtms (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_head&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tail&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_nth&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/wave/index.html&quot;&gt;Wave Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave now correctly recognizes pp-number tokens as mandated by the C++
            Standard, which are converted to C++ tokens right before they are returned
            from the library.
          &lt;/li&gt;
          &lt;li&gt;
            Several new preprocessing hooks have been added. For a complete description
            please refer to the related documentation page: &lt;a href=&quot;/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html&quot;&gt;The
            Context Policy&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Shared library (dll) support has been added for the generated Wave libraries.
          &lt;/li&gt;
          &lt;li&gt;
            The overall error handling has been improved. It is now possible to recover
            and continue after an error or a warning was issued.
          &lt;/li&gt;
          &lt;li&gt;
            Support for optional comment and/or full whitespace preservation in the
            generated output stream has been added.
          &lt;/li&gt;
          &lt;li&gt;
            The Wave library now performs automatic include guard detection to avoid
            accessing header files more than once, if appropriate.
          &lt;/li&gt;
          &lt;li&gt;
            Full interactive mode has been added to the Wave tool. Now the Wave tool
            can be used just like Python or Perl for instance to interactively try
            out your BOOST_PP macros. Additionally it is now possible to load and
            save the current state of an interactive session (macro tables et.al.).
          &lt;/li&gt;
          &lt;li&gt;
            The overall performance has been improved by upto 40-60%, depending on
            the concrete files to process.
          &lt;/li&gt;
          &lt;li&gt;
            Support for new pragmas has been added allowing to control certain library
            features from inside the preprocessed sources (partial output redirection,
            control of generated whitespace and #line directives).
          &lt;/li&gt;
          &lt;li&gt;
            Optional support for #pragma message &amp;quot;...&amp;quot; has been added.
          &lt;/li&gt;
          &lt;li&gt;
            This version also includes a number of bug fixes and usage improvements.
            For a complete list of changes, see the libraries &lt;a href=&quot;/doc/libs/1_34_0/libs/wave/ChangeLog&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.8.2 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GNU C++&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          &lt;/li&gt;
          &lt;li&gt;
            4.1.x on Solaris
          &lt;/li&gt;
          &lt;li&gt;
            3.4.x on Windows
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP aC++ A.06.14&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com/&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 9.4
        on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developers.sun.com/sunstudio/compilers_index.html&quot;&gt;Sun
        Studio 11&lt;/a&gt; on Solaris.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/thomas_witt.html&quot;&gt;Thomas Witt&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Vladimir Prus for making Boost.Build
      version 2 a reality, David Abrahams for authoring a new getting started guide
      and Greg D. for answering countless questions.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.33.1</title><pubDate>Tue,  5 Dec 2006 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Any, Config, Python, Smart Pointer, Regex, Iostreams, Functional/Hash,
      Multi-index Containers, Graph, Signals, Thread, and Wave.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.33.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_33_1.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/any.html&quot;&gt;Any Library&lt;/a&gt;:&lt;/span&gt; Cast
        to reference types introduced in 1.33.0 is now documented on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any_cast&lt;/span&gt;&lt;/code&gt; documentation page.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html&quot;&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
        expressions now support &lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html#operators&quot;&gt;comparisons
        and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/config/index.html&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Don't
        undef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LIB_TOOLSET&lt;/span&gt;&lt;/code&gt; after
        use.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The build now assumes Python 2.4 by default, rather than 2.2
          &lt;/li&gt;
          &lt;li&gt;
            Support Python that's built without Unicode support
          &lt;/li&gt;
          &lt;li&gt;
            Support for wrapping classes with overloaded address-of (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;) operators
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/smart_ptr/index.html&quot;&gt;Smart Pointer
        Library&lt;/a&gt;:&lt;/span&gt; Fixed problems under Metrowerks CodeWarrior on PowerPC (Mac
        OS X) with inlining on, GNU GCC on PowerPC 64.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Fixed
        the supplied makefiles, and other small compiler specific changes. Refer
        to the &lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/history.html&quot;&gt;regex history
        page&lt;/a&gt; for more information on these and other small changes.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/iostreams/doc/index.html&quot;&gt;Iostreams
        Library&lt;/a&gt;:&lt;/span&gt;
  Improved the interface for accessing a chain's components,
        added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_open&lt;/span&gt;&lt;/code&gt; members to
        the file and file descriptor devices, fixed memory-mapped files on Windows,
        and made minor changes to the documentation.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for docstrings on nonstatic properties.
          &lt;/li&gt;
          &lt;li&gt;
            We now export the client-provided docstrings for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
          &lt;/li&gt;
          &lt;li&gt;
            Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
          &lt;/li&gt;
          &lt;li&gt;
            Introduced better support for rvalue from-python conversions of shared_ptr.
          &lt;/li&gt;
          &lt;li&gt;
            Support for exposing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
          &lt;/li&gt;
          &lt;li&gt;
            updated visual studio project build file.
          &lt;/li&gt;
          &lt;li&gt;
            Added search feature to the index page.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt;
  Fixed the points example.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
  Fixed a problem with multithreaded code, and other
        minor changes. Refer to the library &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html#boost_1_33_1&quot;&gt;release
        notes&lt;/a&gt; for further details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/table_of_contents.html&quot;&gt;Graph
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed a problem with the relaxed heap on x86 Linux (fixes bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed problems with &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/king_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;king_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; producing no
            results.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;/code&gt; parameter
            to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/signals/doc/index.html&quot;&gt;Signals
        Library&lt;/a&gt;:&lt;/span&gt; Fixed problems with the use of Signals across shared library
        boundaries.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/thread/doc/index.html&quot;&gt;Thread library&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been removed due to
        problems with deadlocks.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/wave/index.html&quot;&gt;Wave library&lt;/a&gt;
        (V1.2.1):&lt;/span&gt; Fixed a couple of problems, refer to the &lt;a href=&quot;/doc/libs/1_33_1/libs/wave/ChangeLog&quot;&gt;change
        log&lt;/a&gt; for further details.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_1.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;em&gt;New for this release&lt;/em&gt;: Support for building
      with the newest STLport-5.0 was added. The support includes building with MinGW
      Runtime 3.8 plus STLport-5.0 improved to support wide character operations.
      Apple GCC 4.0, HP Tru64 C++, and Microsoft Visual C++ 8.0 are supported platforms.
      We have added an experimental autoconf-like &lt;tt&gt;configure&lt;/tt&gt; script
      for Unix-like systems: run &lt;tt&gt;configure --help&lt;/tt&gt; for more information.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 3.3, 4.0 on Mac
        OS X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.6.4 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org&quot;&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
        STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
        9.4, 9.5 on Mac OS X and Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;span class=&quot;inset-left&quot;&gt;&lt;img alt=&quot;Medieval Mr. Gregor&quot; src=&quot;/gfx/boost_1_33_0.jpg&quot;/&gt;&lt;/span&gt;
&lt;a href=&quot;/users/people/doug_gregor.html&quot;&gt;Douglas
      Gregor&lt;/a&gt; managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
      managed to keep the regression testing system working throughout the release
      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Bronek Kozicki, Rene
      Rivera and Jonathan Turkanis for greatly improving the quality of this release;
      Rene Rivera for the new Boost web page design; and Zoltan &amp;quot;cad&amp;quot; Juhasz
      for the new Boost logo.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.33.0</title><pubDate>Thu, 11 Aug 2005 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Iostream, Hash, Parameter, Pointer Container, Wave. Updated
      Libraries: Any, Assignment, Bind, Date-Time, Graph, Multi-Index, Program Options,
      Property Map, Python, Random Number, Range, Regex, Serialization, Signals.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.33.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_33_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/iostreams/doc/index.html&quot;&gt;Iostreams
        Library&lt;/a&gt;:&lt;/span&gt;
  Framework for defining streams, stream buffers and i/o filters,
        from Jonathan Turkanis.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt; A TR1 hash function object that can be extended to hash user
        defined types, from Daniel James.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/parameter/doc/html/index.html&quot;&gt;Parameter
        Library&lt;/a&gt;:&lt;/span&gt;
  Write functions that accept arguments by name: especially
        useful when a function has more than one argument with a useful default value,
        since named arguments can be passed in any order.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt;:&lt;/span&gt;
  Containers for storing heap-allocated polymorphic
        objects to ease OO-programming, from Thorsten Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards
        conformant implementation of the mandated C99/C++ preprocessor functionality
        packed behind an easy to use iterator interface, from Hartmut Kaiser.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/any.html&quot;&gt;Any Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any_cast&lt;/span&gt;&lt;/code&gt; has been enhanced to allow direct
        access to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any&lt;/span&gt;&lt;/code&gt;'s held value.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/assign/doc/index.html&quot;&gt;Assignment
        Library&lt;/a&gt;:&lt;/span&gt; Support for &lt;a href=&quot;/doc/libs/1_33_1/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt; and new efficient functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref_list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cref_list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for generating anonymous ranges.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html&quot;&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
        expressions now support &lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html#operators&quot;&gt;comparisons
        and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time.html&quot;&gt;Date-Time Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/local_time.html&quot;&gt;local
            time and time zone classes&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/date_time_io.html&quot;&gt;format-based
            Input/Output facets&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/details.html#date_time.changes&quot;&gt;change
            history&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Introduced
        several new algorithms and improved existing algorithms:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/python.html&quot;&gt;Experimental
            Python bindings&lt;/a&gt;, from Doug Gregor and Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/floyd_warshall_shortest.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;floyd&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;warshall&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pairs&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;shortest&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Lauren Foutz and Scott Hill.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/astar_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;astar&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;search&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Kristopher Beevers and Jufeng Peng.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/fruchterman_reingold.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fruchterman&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;reingold&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;directed&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Doug Gregor
            and Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/biconnected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;biconnected&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;components&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;articulation&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;points&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremy Siek, Janusz Piwowarski, and Doug Gregor.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/sequential_vertex_coloring.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sequential&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;vertex&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;coloring&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been updated,
            tested, and documented.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/gursoy_atun_layout.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;gursoy&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;atun&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Jeremiah
            Willcock and Doug Gregor of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/king_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from D. Kevin McGrath of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;mckee&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been recast
            as an invocation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;search&lt;/span&gt;&lt;/code&gt;
            and now supports graphs with multiple components.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/dijkstra_shortest_paths.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;shortest&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now uses a relaxed
            heap [&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/bibliography.html#driscoll88&quot;&gt;61&lt;/a&gt;]
            as its priority queue, improving its complexity to O(V log V) and improving
            real-world performance for larger graphs.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/read_graphviz.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
            now has a new, Spirit-based parser that works for all graph types and
            supports arbitrary properties on the graph, from Ron Garcia. The old,
            Bison-based GraphViz reader has been deprecated and will be removed in
            a future Boost release. &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/write-graphviz.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
            also supports dynamic properties.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/subgraph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;subgraph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_property&lt;/span&gt;&lt;/code&gt;
            now refers to the subgraph property, not the root graph's property.
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/history.html#by-version&quot;&gt;history&lt;/a&gt;
            for additional changes and bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/tutorial/indices.html#hashed_indices&quot;&gt;hashed
            indices&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/tutorial/creation.html#serialization&quot;&gt;serialization
            support&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/program_options/doc/index.html&quot;&gt;Program
        Options Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Option descriptions are now printed with word wrapping.
          &lt;/li&gt;
          &lt;li&gt;
            Command line parser can bypass unregistered options, instread of throwing.
          &lt;/li&gt;
          &lt;li&gt;
            Removed support for &amp;quot;implicit&amp;quot; (optional) values.
          &lt;/li&gt;
          &lt;li&gt;
            New customization method 'command_line_parser::extra_style_parser'. Unlike
            'additional_parser', allows the user to parse several tokens and return
            a vector of options, not just a single option.
          &lt;/li&gt;
          &lt;li&gt;
            Work with disabled exceptions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/property_map/property_map.html&quot;&gt;Property
        Map Library&lt;/a&gt;:&lt;/span&gt; Introduced the &lt;a href=&quot;/doc/libs/1_33_1/libs/property_map/doc/dynamic_property_map.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;properties&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
        class, which provides dynamically-typed access to a set of property maps.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for docstrings on nonstatic properties.
          &lt;/li&gt;
          &lt;li&gt;
            We now export the client-provided docstrings for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
          &lt;/li&gt;
          &lt;li&gt;
            Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
          &lt;/li&gt;
          &lt;li&gt;
            Introduced better support for rvalue from-python conversions of shared_ptr.
          &lt;/li&gt;
          &lt;li&gt;
            Support for exposing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
          &lt;/li&gt;
          &lt;li&gt;
            updated visual studio project build file.
          &lt;/li&gt;
          &lt;li&gt;
            Added search feature to the index page.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/random/index.html&quot;&gt;Random Number
        Library&lt;/a&gt;:&lt;/span&gt;
  Improved initialization for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;,
        algorithm by Makoto Matsumoto and Takuji Nishimura, implemented for Boost
        by Jens Maurer.&lt;/p&gt;
  &lt;p&gt;Note: All test vectors for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;s
        constructed or seeded without parameters or with a single &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; parameter become invalid.&lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; Minor
        addition of convenience functions to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;
        &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;/code&gt; like &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]()&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Rewritten front end parser now supports (?imsx-imsx) constructs, plus
            lookbehind assertions and conditional expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Thin wrapper classes improve integration with MFC/ATL code.
          &lt;/li&gt;
          &lt;li&gt;
            Full (optional) Unicode support via the ICU library. Refer to the &lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/history.html&quot;&gt;regex history page&lt;/a&gt;
            for more information on these and other small changes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/serialization/doc/index.html&quot;&gt;Serialization
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            DLL version.
          &lt;/li&gt;
          &lt;li&gt;
            Auto-linking.
          &lt;/li&gt;
          &lt;li&gt;
            Serialization of variants.
          &lt;/li&gt;
          &lt;li&gt;
            Improved serialization of shared pointers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; added
        slot blocking/unblocking, from Frantz Maerten. Huge improvements to signal
        invocation performance from Robert Zeh.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 3.x on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.6.4 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org&quot;&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
        STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
        9.4, 9.5 on Mac OS X and Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0 beta. Note: due to intermittent
        problems with Visual C++ 8.0 beta, and the presence of a variety of pre-release
        compiler builds, we are unable to guarantee compatibility until the final
        compiler is released.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;img alt=&quot;[]&quot; src=&quot;/gfx/boost_1_33_0.jpg&quot;/&gt;&lt;a href=&quot;/users/people/doug_gregor.html&quot;&gt;Douglas Gregor&lt;/a&gt;
      managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
      managed to keep the regression testing system working throughout the release
      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Rene Rivera and Jonathan
      Turkanis for greatly improving the quality of this release; Rene Rivera for
      the new Boost web page design; and Zoltan &amp;quot;cad&amp;quot; Juhasz for the new
      Boost logo.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.32.0</title><pubDate>Fri, 19 Nov 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Assignment, Minmax, Multi-Index, Numeric Conversion, Program
      Options, Range, Serialization, String, Tribool. Updated Libraries: Graph, MPL,
      Python, Signals, Utility, Test. Removed Libraries: Compose.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.32.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_32_0.important___new_toolset_names&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Important
    - New Toolset Names&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The names of some the Boost.Build &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;toolsets&lt;/a&gt;
      have been changed to remove the &amp;quot;&lt;tt&gt;.&lt;/tt&gt;&amp;quot; (dot) character
      and to fix some other naming inconsistencies. For example, &lt;tt&gt;vc7.1&lt;/tt&gt;
      toolset was renamed to become &lt;tt&gt;vc-7_1&lt;/tt&gt;. Please refer to the
      &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;Supported Toolsets&lt;/a&gt;
      section of the installation guide for the complete list of the current toolset
      names. This change was made as a part of the effort to make the Boost distribution
      compatible with ISO 9660 level 2 requirements.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/assign/index.html&quot;&gt;Assignment Library&lt;/a&gt;:&lt;/span&gt; Filling
        containers with constant or generated data has never been easier, from Thorsten
        Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/minmax/index.html&quot;&gt;Minmax
        Library&lt;/a&gt;:&lt;/span&gt; Standard library extensions for simultaneous min/max and
        min/max element computations, from Herve Bronnimann.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt; Containers with multiple STL-compatible access
        interfaces, from Joaquin M Lopez Munoz.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/numeric/conversion/index.html&quot;&gt;Numeric
        Conversion Library&lt;/a&gt;:&lt;/span&gt; Optimized policy-based numeric conversions, from
        Fernando Cacciola.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/program_options.html&quot;&gt;Program
        Options Library&lt;/a&gt;:&lt;/span&gt; Access to configuration data given on command line,
        in config files and other sources, from Vladimir Prus.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; a
        new infrastructure for generic algorithms that builds on top of the new iterator
        concepts, from Thorsten Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/serialization/doc/index.html&quot;&gt;Serialization
        Library&lt;/a&gt;:&lt;/span&gt; Serialization/de-serialization of arbitrary C++ data structures
        to various formats including text, binary, and xml, from Robert Ramey.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/string/index.html&quot;&gt;String
        Algorithms Library&lt;/a&gt;:&lt;/span&gt; Collection of string related algorithms for case
        conversion, trimming, find/replace operations and more, from Pavol Droba.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/tribool.html&quot;&gt;Tribool&lt;/a&gt;:&lt;/span&gt; 3-state
        boolean type library, from Doug Gregor.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Compose: This deprecated library has been removed.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bundles.html&quot;&gt;bundled
            properties&lt;/a&gt; to the &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; class templates,
            greatly simplifying the introduction of internal vertex and edge properties.
          &lt;/li&gt;
          &lt;li&gt;
            The &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/leda_conversion.html&quot;&gt;LEDA
            graph adaptors&lt;/a&gt; have been ported to LEDA 4.5.
          &lt;/li&gt;
          &lt;li&gt;
            Added algorithms for &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/betweenness_centrality.html&quot;&gt;betweenness
            centrality&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bc_clustering.html&quot;&gt;betweenness
            centrality clustering&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/circle_layout.html&quot;&gt;circle
            layout&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/kamada_kawai_spring_layout.html&quot;&gt;undirected
            spring layout&lt;/a&gt; algorithms.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;MPL Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated to use the Boost Software License.
          &lt;/li&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;documentation&lt;/a&gt;,
            including a complete &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/refmanual.html&quot;&gt;reference
            manual.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Major interface changes and improvements, many of which are not backward
            compatible. Please refer to the &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/tutorial/changes-in-boost-1-32-0.html&quot;&gt;1.32
            changelog&lt;/a&gt; for the detailed information about upgrading to the
            new version.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated to use the Boost Software License.
          &lt;/li&gt;
          &lt;li&gt;
            a new, &lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/tutorial/doc/html/python/exposing.html#python.class_virtual_functions&quot;&gt;better
            method of wrapping classes with virtual functions&lt;/a&gt; has been implemented.
          &lt;/li&gt;
          &lt;li&gt;
            Support for the new Python Bool type, thanks to Daniel Holth.
          &lt;/li&gt;
          &lt;li&gt;
            Support for upcoming GCC symbol export control features have been folded
            in, thanks to Niall Douglas.
          &lt;/li&gt;
          &lt;li&gt;
            Improved support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;-like
            types.
          &lt;/li&gt;
          &lt;li&gt;
            Components used by other libraries have been moved out of &lt;tt&gt;python/detail&lt;/tt&gt;
            and into &lt;tt&gt;boost/detail&lt;/tt&gt; to improve dependency relationships.
          &lt;/li&gt;
          &lt;li&gt;
            Miscellaneous bug fixes and compiler workarounds.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; Introduced
        deterministic slot ordering, permitting slots to be connected at the beginning
        or end of slot groups or the slot list itself. Combiners may safely have
        state and are accessible from the signal.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt; class
        template &lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm#result_of&quot;&gt;result_of&lt;/a&gt;
        added.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
  &lt;ul&gt;
    &lt;li&gt;namespace names gets shorten; old one still supported till next
      release&lt;/li&gt;
    &lt;li&gt;added proper encoding of XML PCDATA&lt;/li&gt;
    &lt;li&gt;support for wide string comparison implemented&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    For complete list of changes see Test Library
    &lt;a href=&quot;/doc/libs/1_32_0/libs/test/doc/release_notes.html#v1_32_0&quot;&gt;release notes&lt;/a&gt;.
  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.regression_tests&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Regression tests&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release has been extensively tested on a variety of different compilers
      and platforms. It is known to contain no regressions against the previous reference
      release on the compilers and configurations tested. Please refer to the corresponding
      &lt;a href=&quot;http://www.meta-comm.com/engineering/boost-regression/1_32_0/index.html&quot;&gt;regression
      reports&lt;/a&gt; to see how well your compiler performs on the new Boost codebase.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;img alt=&quot;[]&quot; src=&quot;http://boost.sourceforge.net/photos/aleksey_gurtovoy2.jpg&quot;/&gt; &lt;a href=&quot;/users/people/aleksey_gurtovoy.html&quot;&gt;Aleksey
      Gurtovoy&lt;/a&gt; managed this release. &lt;a href=&quot;/doc/libs/1_32_0/more/release_procedures.htm&quot;&gt;Managing
      a release&lt;/a&gt; at all is an enormous job, and Aleksey always goes beyond
      merely meeting requirements by insisting on the highest possible quality. The
      Boost membership owes him a debt of gratitude.
    &lt;/p&gt;
    &lt;p&gt;
      This release wouldn't have been possible without the dedicated effort of many,
      many members of the Boost community who generously contributed their outstanding
      expertise, time and energy to making it happen. For patches, bug fixes, troubleshooting,
      expert advice, and prompt responses to the release manager's requests we thank:
    &lt;/p&gt;
    &lt;p&gt;
      David Abrahams, Misha Bergal, Jonathan Brandmeyer, Fernando Cacciola, Marshall
      Clow, Christopher Currie, Pavol Droba, Caleb Epstein, Eric Friedman, Jeff Garland,
      Michael Glassford, Doug Gregor, Joel de Guzman, Hubert Holin, Jaakko Jarvi,
      Hartmut Kaiser, Bronek Kozicki, Tarjei Knapstad, Toon Knapen, Aaron W. LaFramboise,
      Joaquin M Lopez Munoz, Christoph Ludwig, John Maddock, Paul Mensonides, Guillaume
      Melquiond, Thorsten Ottosen, Vladimir Prus, Robert Ramey, Rene Rivera, Gennadiy
      Rozental, Stefan Slapeta, Jonathan Turkanis, Pavel Vozenilek, Jonathan Wakely,
      Daryle Walker, Victor A. Wagner Jr. and Martin Wille.
    &lt;/p&gt;
    &lt;p&gt;
      Also, our special thanks go to: John Maddock for the managing the effort of
      converting the majority of the Boost libraries to the &lt;a href=&quot;/doc/libs/1_32_0/more/license_info.html&quot;&gt;Boost
      Software License&lt;/a&gt;, Eric Niebler and Joel de Guzman for taking on the
      important job of improving the Boost documentation's look and feel, and last,
      but not least, to our regression test runners, without whom we simply would
      never have released: Toon Knapen, Bronek Kozicki, Rene Rivera, Markus Schopflin,
      Stefan Slapeta, Victor A. Wagner Jr. and Martin Wille.
    &lt;/p&gt;
    &lt;p&gt;
      Thank you everybody!
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.31.0</title><pubDate>Mon, 26 Jan 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: enable_if, Variant. Updated Libraries: Date Time, Filesystem,
      Iterator, MultiArray, Python, Random Number, Regex, Spirit, Test. Deprecated
      Libraries: Compose.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.31.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_31_0.new_license&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New License&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      A unified &lt;a href=&quot;/doc/libs/1_31_0/more/license_info.html&quot;&gt;Boost Software
      License&lt;/a&gt; has been developed and will gradually replace the individual
      licenses for most Boost libraries. The new license offers better legal protection
      for both users and developers, and should speed user's legal reviews of Boost
      libraries. Dave Abrahams led the Boost effort to develop better licensing.
      The legal team was led by &lt;a href=&quot;http://cyber.law.harvard.edu/people/cabell/index.html&quot;&gt;Diane
      Cabell&lt;/a&gt;, Director, Clinical Programs, &lt;a href=&quot;http://cyber.law.harvard.edu&quot;&gt;Berkman
      Center for Internet &amp;amp; Society&lt;/a&gt;, Harvard Law School. &lt;a href=&quot;http://www.nixonpeabody.com/attorneys_detail1.asp?ID=121&quot;&gt;Devin
      Smith&lt;/a&gt;, attorney, &lt;a href=&quot;http://www.nixonpeabody.com/default.asp&quot;&gt;Nixon
      Peabody LLP&lt;/a&gt;, wrote the Boost License. Eva Chan, Harvard Law School,
      contributed analysis of issues and drafts of various legal documents.
    &lt;/p&gt;
    &lt;p&gt;
      Note: Many of the Boost libraries are still using earlier licenses, though
      all conform to the &lt;a href=&quot;/doc/libs/1_31_0/more/lib_guide.htm#license&quot;&gt;Boost
      License Requirements&lt;/a&gt;. After this release we will begin an effort to
      move toward uniform use of the new license.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.build_and_installation&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build and Installation&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        New &lt;a href=&quot;/doc/libs/1_31_0/more/getting_started.html&quot;&gt;Getting Started&lt;/a&gt;
        procedures ease download and installation, from Rene Rivera and others.
      &lt;/li&gt;
      &lt;li&gt;
        Improved support for libraries requiring &lt;a href=&quot;/doc/libs/1_31_0/more/separate_compilation.html&quot;&gt;separate
        compilation&lt;/a&gt;, from John Maddock and others.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/utility/enable_if.html&quot;&gt;enable_if&lt;/a&gt;:&lt;/span&gt; Selective
        inclusion of function template overloads, from Jaakko Jarvi, Jeremiah Willcock,
        and Andrew Lumsdaine. This is an important new technique which exploits the
        SFINAE (substitution-failure-is-not-an-error) principle.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/variant/index.html&quot;&gt;Variant Library&lt;/a&gt;:&lt;/span&gt; Safe,
        generic, stack-based discriminated union container, from Eric Friedman and
        Itay Maman.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/compose/index.htm&quot;&gt;Compose&lt;/a&gt;:&lt;/span&gt; This
        library has been deprecated and will be removed in a future release. Use
        &lt;a href=&quot;/doc/libs/1_31_0/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; or &lt;a href=&quot;/doc/libs/1_31_0/libs/lambda/doc/index.html&quot;&gt;Lambda&lt;/a&gt; instead.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/date_time/doc/index.html&quot;&gt;Date Time
        Library&lt;/a&gt;:&lt;/span&gt; A whole host of bug fixes, new features, and documentation
        improvements. See the Date Time Change History for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
        Library&lt;/a&gt;:&lt;/span&gt;
  Several added functions, including improved checking for
        directory and file name portability.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/iterator/doc/index.html&quot;&gt;Iterator
        Library&lt;/a&gt;:&lt;/span&gt; Major version upgrade, with interface as proposed for the
        C++ library TR, including an improved &lt;tt&gt;iterator_adaptor&lt;/tt&gt;
        design plus several new components, from David Abrahams, Jeremy Siek, and
        Thomas Witt.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt; The
        &lt;tt&gt;multi_array&lt;/tt&gt; class template now provides an element-preserving
        resize operation as well as default construction (see the &lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/doc/reference.html&quot;&gt;reference
        manual&lt;/a&gt; for more information).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for Python 2.3 and Intel C++ on Linux
          &lt;/li&gt;
          &lt;li&gt;
            Container &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/indexing.html&quot;&gt;Indexing
            Suite&lt;/a&gt; added.
          &lt;/li&gt;
          &lt;li&gt;
            injected constructors and wrapped function objects.
          &lt;/li&gt;
          &lt;li&gt;
            wrapping static data members.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wstring&lt;/span&gt;&lt;/code&gt; conversions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/args.html&quot;&gt;keyword
            arguments&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Better error messages, including name demangling for GCC.
          &lt;/li&gt;
          &lt;li&gt;
            Simpler &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/building.html&quot;&gt;build
            procedure&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;em&gt;...and more....&lt;/em&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/random/index.html&quot;&gt;Random Number
        Library&lt;/a&gt;:&lt;/span&gt; Interface changed to match the C++ &lt;a href=&quot;/doc/libs/1_31_0/libs/random/wg21-proposal.html&quot;&gt;TR
        proposal&lt;/a&gt;, from Jens Maurer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt; Completely
        new matching algorithm is now much faster than before, plus a selection of
        &lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/history.html&quot;&gt;new features and
        enhancements&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/spirit/index.html&quot;&gt;Boost.Spirit
        1.8.0&lt;/a&gt;:&lt;/span&gt;
  &lt;ul&gt;
    &lt;li&gt;Multiple grammar start rules&lt;/li&gt;
    &lt;li&gt;Multiple Scanner rules (no more scanner business woes)&lt;/li&gt;
    &lt;li&gt;More dynamic parsers&lt;/li&gt;
    &lt;li&gt;Predefined actors&lt;/li&gt;
    &lt;li&gt;Numerous bug fixes and QOI stuff&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;and more...&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    Starting from Spirit v1.8.0, ill conforming compilers will no longer be
    supported. If you are still using one of these older compilers, please use
    Spirit v1.6.x. See [@http://spirit.sf.net Spirit's Site] for more details.
  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
  &lt;ul&gt;
    &lt;li&gt;Free function template based test case&lt;/li&gt;
    &lt;li&gt;Custom exception translators support in execution monitor and
    register_exception_translator added for unit test framework&lt;/li&gt;
    &lt;li&gt;Added support for multi-module unit tests in automatic
    registration facility&lt;/li&gt;
    &lt;li&gt;Floating point comparison algorithm reworked (Is not backward
    compatible!!!)&lt;/li&gt;
    &lt;li&gt;Added support for custom users predicate returning both boolean
    result code and possibly error message&lt;/li&gt;
    &lt;li&gt;Documentation structure rework and update&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    For a complete list of changes see the Test Library
    &lt;a href=&quot;/doc/libs/1_31_0/libs/test/doc/release_notes.html#v1_31_0&quot;&gt;release notes&lt;/a&gt;.
  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.miscellaneous&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Miscellaneous&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Expanded testing and fixes for non-conforming compilers.
      &lt;/li&gt;
      &lt;li&gt;
        Web site hosting now provided by &lt;a href=&quot;http://www.sourceforge.net/&quot;&gt;SourceForge&lt;/a&gt;.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.2</title><pubDate>Tue, 19 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bugfix release
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.30.2/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.boost-consulting.com&quot;&gt;Boost Consulting&lt;/a&gt; is now
      hosting Boost CVS mirrors - see our &lt;a href=&quot;/more/getting_started.html#CVS&quot;&gt;download
      page&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Backported changes to the &lt;a href=&quot;/libs/config/config.htm&quot;&gt;config system&lt;/a&gt;,
      to better handle new compiler releases.
    &lt;/li&gt;
    &lt;li&gt;
      Bugs in regression reporting in subproject tests were fixed.
    &lt;/li&gt;
    &lt;li&gt;
      Tests are now run in the context of the user's PATH environment settings
    &lt;/li&gt;
    &lt;li&gt;
      msvc-stlport and intel-win32-stlport toolsets now build static libraries with
      multithreading enabled, to be compatible with the STLPort builds.
    &lt;/li&gt;
    &lt;li&gt;
      intel-win32 toolset now handles &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
      correctly when intel is installed over msvc6.
    &lt;/li&gt;
    &lt;li&gt;
      Backported fixes from the main trunk which prevent errors building the &lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Boost.Test&lt;/a&gt; library in its default configuration.
    &lt;/li&gt;
    &lt;li&gt;
      Backported portability improvements for &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;checked_delete&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Locale support for metrowerks (requiring a statically-linked runtime) is more
      uniformly handled.
    &lt;/li&gt;
    &lt;li&gt;
      Backported &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;conversion/lexical_cast&lt;/a&gt;'s
      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt; fixes from the main trunk.
    &lt;/li&gt;
    &lt;li&gt;
      intel-linux-tools: added &lt;tt&gt;rt&lt;/tt&gt; to FINDLIBS in order to make
      the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      function available (backport of a patch in CVS HEAD).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/tools/regression/index.htm&quot;&gt;regression/compiler_status.cpp&lt;/a&gt;:
      backported fixes in error log links generation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.1</title><pubDate>Mon,  4 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Withdrawn bug fix release, fixes for Lambda, Spirit, MPL, Function, Config,
      Format, Regex, Smart Pointers, Python
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    This release was withdrawn on the 12 Aug 2003.
  &lt;/p&gt;
  &lt;p&gt;
    Fixes were made to the following libraries: * The &lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Boost.Lambda&lt;/a&gt;
    ..library is now usable with gcc-2.95.2 * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Boost.Spirit&lt;/a&gt;:&lt;/span&gt; 
  *
    Fixed. Using MSVC++6 (SP5), calling the assign action with a string value on
    parsers using the file_iterator will not work. * Fixed: using assign semantic
    action in a grammar with a multi_pass iterator adaptor applied to an std::istream_iterator
    resulted in a failure to compile under msvc 7.0. * Fixed: There is a bug in the
    &lt;tt&gt;range_run&amp;lt;CharT&amp;gt;::set(range&amp;lt;CharT&amp;gt; const&amp;amp; r)&lt;/tt&gt;
    function in &amp;quot;../boost/spirit/utility/impl/chset/range_run.ipp&amp;quot;. * Fixed:
    handling of trailing whitespace bug (ast_parse/pt_parse related) * Fixed: comment_p
    and end of data bug * Fixed: Most trailing space bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;~(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detach_clear&lt;/span&gt;&lt;/code&gt; bug * Fixed: mismatch closure
    return type bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_node_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_match_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; iterator bugs * Fixed a bug regarding thread
    safety of Phoenix/Spirit closures. * The Boost Template &lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;Metaprogramming
    Library (MPL)&lt;/a&gt;'s ..typeof implementation is now compatible with Metrowerks
    CodeWarrior Pro8. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Boost.Function&lt;/a&gt;:&lt;/span&gt; workaround
    for the new Borland patch (version 0x564) and MSVC++ .NET 2003. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Boost.Config&lt;/a&gt;&lt;/span&gt;, &lt;a href=&quot;/libs/format/doc/format.html&quot;&gt;Boost.Format&lt;/a&gt;,
    and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Boost.Regex&lt;/a&gt; ..have been adjusted
    to avoid warnings with GCC-3.3, and Boost.Format also now works with string types
    other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart
    Pointers&lt;/a&gt;:&lt;/span&gt; 
  * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;checked_delete&lt;/span&gt;&lt;/code&gt;
    now works on more platforms * Compatibility with the SunPro compiler * Added
    missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt; 
  * warning suppression for
    finicky compilers * fixed a crashing bug in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;raw_function&lt;/span&gt;&lt;/code&gt;
    facility when no keyword arguments were passed. * Improved conversion of NULL
    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;s to Python.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.0</title><pubDate>Wed, 19 Mar 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Filesystem, Optional, Interval, MPL, Spirit Updated Libraries:
      Smart Pointers, Utility, Date-Time, Function, Operators, Test
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.30.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/doc/index.htm&quot;&gt;Filesystem Library&lt;/a&gt;&lt;/span&gt; added
      - Portable paths, iteration over directories, and other useful filesystem operations,
      from Beman Dawes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/doc/optional.html&quot;&gt;Optional Library&lt;/a&gt;&lt;/span&gt; added
      - A discriminated-union wrapper for optional values, from Fernando Cacciola.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/interval/doc/interval.htm&quot;&gt;Interval Library&lt;/a&gt;&lt;/span&gt;
  added
      - Extends the usual arithmetic functions to mathematical intervals, from Guillaume
      Melquiond, Herve Bronnimann and Sylvain Pion.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;MPL&lt;/a&gt;&lt;/span&gt; added - Template metaprogramming
      framework of compile-time algorithms, sequences and metafunction classes, from
      Aleksey Gurtovoy.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit Library&lt;/a&gt;&lt;/span&gt; added - An
      LL (unlimited lookahead) parser framework that represents parsers directly
      as EBNF grammars in inlined C++ source code, complete with semantic actions,
      ASTs and much more, from Joel de Guzman and team.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;&lt;/span&gt; -
      cast functions are now spelled &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#static_pointer_cast&quot;&gt;static_pointer_cast&lt;/a&gt;
      / &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#dynamic_pointer_cast&quot;&gt;dynamic_pointer_cast&lt;/a&gt;;
      &lt;a href=&quot;/libs/smart_ptr/enable_shared_from_this.html&quot;&gt;enable_shared_from_this&lt;/a&gt;
      added; shared_ptr::shared_ptr(), shared_ptr::reset(), weak_ptr::weak_ptr(),
      weak_ptr::reset() no longer throw; &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#get_deleter&quot;&gt;get_deleter&lt;/a&gt;
      added; weak_ptr::get() removed; make_shared is now spelled &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm#lock&quot;&gt;weak_ptr::lock()&lt;/a&gt;
      ; &lt;a href=&quot;/libs/smart_ptr/intrusive_ptr.html&quot;&gt;intrusive_ptr documentation&lt;/a&gt;
      added; some experimental undocumented shared_ptr features have been removed;
      a &lt;a href=&quot;/libs/smart_ptr/sp_techniques.html&quot;&gt;page describing some smart
      pointer programming techniques&lt;/a&gt; has been added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/utility/assert.html&quot;&gt;boost/assert.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/utility/current_function.html&quot;&gt;boost/current_function.hpp&lt;/a&gt;,
      &lt;a href=&quot;/libs/utility/throw_exception.html&quot;&gt;boost/throw_exception.hpp&lt;/a&gt;,
      &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;boost/checked_delete.hpp&lt;/a&gt;
      have been documented.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; -
      several fixes and small additions including an interface change to partial_date.
      See the Date-Time Change History for more details.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; - added
      support for assignment to zero (to clear) and comparison against zero (to check
      if empty).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/operators.htm#symmetry&quot;&gt;Operators Library&lt;/a&gt;&lt;/span&gt; -
      now takes advantage of named return value optimization (NRVO) when available,
      from Daniel Frey.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Regression Tests&lt;/a&gt; - Much expanded,
      plus a very nice &lt;a href=&quot;http://boost.sourceforge.net/regression-logs/&quot;&gt;summary
      page&lt;/a&gt; from Rene Rivera.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; - introduced
      following new facilities: &lt;ul&gt;
  &lt;li&gt;
  Automatic registration of unit tests &lt;/li&gt;
  &lt;li&gt;
          XML log format
      &lt;/li&gt;
  &lt;li&gt;
          XML report format &lt;/li&gt;
  &lt;li&gt;
          BOOST_CHECK_NO_THROW test tool &lt;/li&gt;
  &lt;li&gt;
          BOOST_BITWISE_CHECK test tool
      &lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
  For a complete list of changes see the Test Library &lt;a href=&quot;/libs/test/doc/release_notes.html#v1_30_0&quot;&gt;release
      notes&lt;/a&gt;. &lt;/p&gt;

    &lt;/li&gt;
    &lt;li&gt;
      Many fixes and enhancements to other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.29.0</title><pubDate>Thu, 10 Oct 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Date-Time, Dynamic Bitset, Format. Updated Libraries: Function,
      Multi-Array, Preprocessor, Python, Signals, uBLASH.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.29.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; added
      - Dates, times, leap seconds, infinity, and more, from Jeff Garland.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/dynamic_bitset.html&quot;&gt;Dynamic Bitset&lt;/a&gt;&lt;/span&gt;
  added
      - A runtime sized version of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bitset&lt;/span&gt;&lt;/code&gt;
      class from Jeremy Siek and Chuck Allison.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/format/index.html&quot;&gt;Format Library&lt;/a&gt;&lt;/span&gt; added - Type-safe
      'printf-like' format operations, from Samuel Krempp.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Major
      syntactic changes have been made. Some old syntax and little-used features
      have been deprecated (and will be removed shortly), and the syntax for the
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; class template has been greatly
      improved on conforming compilers. Please see the compatibility note for more
      information.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/doc/index.html&quot;&gt;Multi-array Library&lt;/a&gt;&lt;/span&gt;
  added
      - Multidimensional containers and adaptors for arrays of contiguous data, from
      Ron Garcia.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
  Major
      upgrade, from Paul Mensonides.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; - Version
      2 is released, from Dave Abrahams and others. This is a major rewrite which
      works on many more compilers and platforms, with a completely new interface
      and lots of new features. Boost.Python v2 requires Python 2.2 or later.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/doc/index.html&quot;&gt;Signals Library&lt;/a&gt;&lt;/span&gt; added
      - Managed signals &amp;amp; slots callback implementation, from Doug Gregor.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; Major new
      version, including full unit test capabilities, from Gennadiy Rozental.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/doc/index.htm&quot;&gt;uBLAS Library&lt;/a&gt;&lt;/span&gt; added
      - Basic linear algebra for dense, packed and sparse matrices, from Joerg Walter
      and Mathias Koch.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.28.0</title><pubDate>Wed, 15 May 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Lambda, I/O State Saver. Updated Libraries: Configuration, Random
      Number, Smart Pointers, Function Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.28.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      The Boost mailing lists are now also accessible as &lt;a href=&quot;/more/mailing_lists.htm#newsgroup&quot;&gt;newsgroups&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      A powerful &lt;a href=&quot;http://aspn.activestate.com/ASPN/Mail/Archives/boost/&quot;&gt;mailing
      list archive&lt;/a&gt; has been contributed by the &lt;a href=&quot;http://aspn.activestate.com/ASPN&quot;&gt;ActiveState
      Programmer Network&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Lambda Library&lt;/a&gt;&lt;/span&gt; added,
      from Jaakko Jarvi and Gary Powell. Define small unnamed function objects at
      the actual call site: for_each( a.begin(), a.end(), std::cout &amp;lt;&amp;lt; _1 &amp;lt;&amp;lt;
      ' ' );
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/io/doc/ios_state.html&quot;&gt;I/O State Saver Library added&lt;/a&gt;&lt;/span&gt; -
      Save I/O state to prevent jumbled data, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Configuration Library&lt;/a&gt;:&lt;/span&gt; User
      code should not use BOOST_NO_LIMITS.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Avoid
      compiler warnings.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Added
      shared_polymorphic_cast and shared_polymorphic_downcast.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Now
      supports function objects with the unary &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
      operator overloaded.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; Added
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      function.
    &lt;/li&gt;
    &lt;li&gt;
      The usual small fixes and tweaks.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.27.0</title><pubDate>Tue,  5 Feb 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Python, Integer, Function, Quaternions, Octonions, Smart
      Pointers, Preprocessor, Threads.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.27.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Scott
      Snyder contributed inplace operator support.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Daryle
      Walker contributed enhancements to the &lt;a href=&quot;/libs/integer/integer.htm&quot;&gt;type
      selection templates&lt;/a&gt;, and added new compile-time &lt;a href=&quot;/libs/integer/doc/integer_mask.html&quot;&gt;bit
      mask&lt;/a&gt;, &lt;a href=&quot;/libs/integer/doc/static_log2.html&quot;&gt;binary logarithm&lt;/a&gt;,
      and &lt;a href=&quot;/libs/integer/doc/static_min_max.html&quot;&gt;extrema&lt;/a&gt; templates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; user
      may request that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; objects store a reference to a function
      object target instead of a copy, using &lt;a href=&quot;/libs/bind/ref.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. Stateless objects are optimized
      so that they require no dynamic storage.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;Quaternions&lt;/a&gt;:&lt;/span&gt; added
      support for GCC 2.95.x.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;Octonions&lt;/a&gt;:&lt;/span&gt; added
      support for GCC 2.95.x.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Peter
      Dimov contributed a new implementation that fixes some bugs and adds some features
      including &lt;a href=&quot;/libs/smart_ptr/compatibility.htm#threadsafe&quot;&gt;thread
      safety&lt;/a&gt; when manipulating the use count, &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#constructors&quot;&gt;custom
      delete functions&lt;/a&gt;, a new &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm&quot;&gt;weak_ptr&lt;/a&gt;,
      and shared_static_cast and shared_dynamic_cast.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
  changed
      macro prefix from BOOST_PREPROCESSOR to BOOST_PP, added support for list data
      structure manipulation, added examples, made library ANSI C friendly, added
      generalized &lt;a href=&quot;/libs/preprocessor/doc/ref/for.html&quot;&gt;repetition&lt;/a&gt;
      and &lt;a href=&quot;/libs/preprocessor/doc/ref/while.html&quot;&gt;iteration&lt;/a&gt; primitives,
      improved reference manual.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Threads Library&lt;/a&gt;:&lt;/span&gt; Mac
      Carbon implementation contributed by Mac Murrett.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to many libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.26.0</title><pubDate>Fri, 30 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Common Factor, Preprocessor. Updated Libraries: Iterator Adaptor,
      Random Number, Operators.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.26.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/common_factor.html&quot;&gt;Common Factor Library&lt;/a&gt;&lt;/span&gt;
  added.
      Greatest common divisor and least common multiple, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;&lt;/span&gt;
  added.
      Preprocessor metaprogramming tools including repetition and recursion, from
      Vesa Karvonen.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;:&lt;/span&gt; Added
      &lt;a href=&quot;/libs/utility/generator_iterator.htm&quot;&gt;generator iterator&lt;/a&gt;
      adaptor, from Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Removed
      iterator interface. Fixed overflows in uniform_int&amp;lt;&amp;gt;. Both changes cause
      random number sequences to differ compared to previous boost releases.
    &lt;/li&gt;
    &lt;li&gt;
      [phase library..&lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators.hpp&lt;/a&gt;:]
      Improvements from Daryle and Helmut Ziesel
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Build&lt;/a&gt;:&lt;/span&gt; Continuing
      improvements, including pre-built &lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Jam
      executables&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to a number of other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.25.1</title><pubDate>Mon,  5 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Thread, Function.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.25.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt; Continued
      improvements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Continued
      refinements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Final
      cleanup for upcoming the Boost Graph Library book.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes - tests now pass on most Win32 and POSIX systems including Linux and
      Solaris. Semaphore removed as too error prone.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; direct
      support for member function pointers and documentation updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://groups.yahoo.com/group/Boost-Users&quot;&gt;Boost-Users&lt;/a&gt;
      mailing list has been created to address topics of interest to users of Boost
      libraries.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl&quot;&gt;Boost
      Wiki web&lt;/a&gt; added. Provides a place for Boost users to openly discuss
      and document the use of Boost libraries. It is not officially maintained by
      Boost developers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.25.0</title><pubDate>Mon,  1 Oct 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Thread, Bind. Updated Libraries: Utility, Array, Config, Random
      Number, Math, Tokenizer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.25.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;&lt;/span&gt; added.
      Portable C++ multi-programming at last, from William Kempf.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/utility/base_from_member.html&quot;&gt;Base From Member&lt;/a&gt; added
      to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;. Support
      for the base from member idiom, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; and &lt;a href=&quot;/libs/bind/mem_fn.html&quot;&gt;mem_fn&lt;/a&gt;
      added - Generalized binders for function/object/pointers and member functions,
      from Peter Dimov.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;:&lt;/span&gt; Minor updates,
      from Nico Josuttis.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; major redesign
      with much improved and automated configuration of Boost libraries for specific
      compilers, from John Maddock.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Fixed
      bug when copying normal_distribution and improved the documentation, from Michael
      Stevens and Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; updated, now
      useable with many more compilers, plus three new special functions, from Hubert
      Holin, Eric Ford, and others.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;:&lt;/span&gt;
  fixes/enhancements
      to escaped_list_separator based on empty fields and tokens comments from Johan
      Nillson and Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      Coming Soon - A mailing list for Boost users!
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.24.0</title><pubDate>Sun, 19 Aug 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Tuple.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.24.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tuple/doc/tuple_users_guide.html&quot;&gt;Tuple Library&lt;/a&gt;&lt;/span&gt;
  added.
      Tuples ease definition of functions returning multiple values, and more, from
      Jaakko Jarvi.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to some other libraries.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;&lt;/span&gt; added.
      Preliminary release of an innovative build system for Boost libraries, from
      Dave Abrahams and others.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/formal_review_schedule.html&quot;&gt;Formal Review Schedule&lt;/a&gt;
      added. Shows current, future, and recent past review dates.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.23.0</title><pubDate>Fri,  6 Jul 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Any, Function, Tokenizer, Special functions, Octonions, Quaternions.
      Updated Library: Smart Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.23.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/any/index.html&quot;&gt;Any Library&lt;/a&gt;&lt;/span&gt; added. Safe, generic
      container for single values of different value types, from Kevlin Henney.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; added.
      Function object wrappers for deferred calls or callbacks, from Doug Gregor.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;&lt;/span&gt; added.
      Break a string into a series of tokens, from John Bandela.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; added, from
      Hubert Holin.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  shared_ptr
      polymorphic pointers now work on more broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      IBM/Aix Compiler status table contributed by Toon Knapen.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to a number of other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.22.0</title><pubDate>Fri, 25 May 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libary: CRC. Updated Libraries: Graph, Integer, Regex, Smart Pointer, Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.22.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/crc/index.html&quot;&gt;CRC Library&lt;/a&gt;&lt;/span&gt; added. Compute
      cyclic redundancy codes from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;Integer Traits&lt;/a&gt;:&lt;/span&gt; added
      wchar_t specialization, minor portability fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  fixed
      bugs, tightened requirements, added examples.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; added
      checked_delete() and checked_array_delete() functions.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.2</title><pubDate>Tue, 24 Apr 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Compatibility. Updated Libraries: Random Number, Integer, Graph.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.21.2/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/compatibility/index.html&quot;&gt;Compatibility Library&lt;/a&gt;&lt;/span&gt;
  added:
      Help for non-conforming standard libraries missing CXX headers from Ralf Grosse-Kunstleve,
      and help for missing standard library &amp;lt;limits&amp;gt; header from Jens Maurer.
      (These are unreviewed implementation libraries, treated as maintenance steps
      only.)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Split
      into separate headers, updated documentation, added lagged_fibonacci generator.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Minor
      portability update.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
  Changed
      algorithm interfaces to use named parameters technique. Added graph isomorphism
      algorithm.
    &lt;/li&gt;
    &lt;li&gt;
      Download refinements - files now available from either FTP or web server.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://sourceforge.net/tracker/?group_id=7586&quot;&gt;Tracker&lt;/a&gt;
      Added: View and submit bug, support, and feature requests.
    &lt;/li&gt;
    &lt;li&gt;
      Minor portability fixes in several other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.1</title><pubDate>Wed, 14 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Python, Regex.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.21.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      New download page. The .zip and .tar.gz files now live on the SourceForge ftp
      site.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
      docs fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Minor
      docs fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
      fixes.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.0</title><pubDate>Fri,  9 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Iterator Adaptor, Pool, Test. Updated Libraries: Graph, Python,
      Regular Expression, Type Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;&lt;/span&gt; added.
      Adapt a base type into a standard conforming iterator, and more, from Dave
      Abrahams, Jeremy Siek, and John Potter.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/doc/index.html&quot;&gt;Pool Library&lt;/a&gt;&lt;/span&gt; added. Memory
      pool management from Steve Cleary.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; added. Support
      for program testing and execution from Beman Dawes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/generic_programming.html&quot;&gt;Generic Programming Techniques&lt;/a&gt;
      page added, contributed by Dave Abrahams.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
  Updated
      use of iterator adaptors. Changed &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;
      &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;edge_descriptor&lt;/span&gt;&lt;/code&gt;
      to improve semantics for multigraphs. Moved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_iterator_generator&lt;/span&gt;&lt;/code&gt;
      from namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; and added &lt;a href=&quot;/libs/graph/doc/adjacency_iterator.html&quot;&gt;documentation&lt;/a&gt;.
      Renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to &lt;a href=&quot;/libs/graph/doc/incremental_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
      better matching graph literature terminology. Cleaned up interface of &lt;a href=&quot;/libs/graph/doc/connected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connected_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and created separate &lt;a href=&quot;/libs/graph/doc/strong_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strong_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      function using Tarjan's more efficient algorithm. Fixed documentation figures
      for &lt;a href=&quot;/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      and &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
      Added docs for &lt;a href=&quot;/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      algorithm.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; upgraded.
      Better compatibility with Python 2.0, NULL pointers and smart-pointers get
      converted to/from python None, massive documentation review/revision.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes for Unicode platforms.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits Library&lt;/a&gt;&lt;/span&gt;
  upgraded:
      Major revision.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.2</title><pubDate>Sat, 10 Feb 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Array traits, Graph, Integer, Random Number, Rational Number,
      Regular Expression, Smart Pointer, Timer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138112</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      Array traits: minor portability fix.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
      Changes to &lt;a href=&quot;/libs/graph/doc/breadth_first_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      re: &lt;a href=&quot;/libs/graph/doc/BFSVisitor.html&quot;&gt;BFSVisitor&lt;/a&gt;, added
      max flow algorithms &lt;a href=&quot;/libs/graph/doc/edmunds_karp_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmunds_karp_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      and &lt;a href=&quot;/libs/graph/doc/push_relabel_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;push_relabel_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, added &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; graph class, added
      &lt;a href=&quot;/libs/graph/doc/filtered_graph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filtered_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      adaptor
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; minor
      fixes to integer.hpp and integer_test.cpp
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;microsoft_vcpp.html&quot;&gt;Portability Hints: Microsoft Visual C++&lt;/a&gt;
      added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Minor
      portability fixes
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;:&lt;/span&gt;
  documentation
      updates, efficiency improvements, co-operates with user-defined types, regression
      tests
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  shared_ptr
      example added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/timer/index.html&quot;&gt;Timer Library&lt;/a&gt;:&lt;/span&gt; changed to
      an all inline implementation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.1</title><pubDate>Wed, 10 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Compressed Pair, Graph Library, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/compressed_pair.hpp&quot;&gt;compressed_pair.hpp&lt;/a&gt; minor update
      fixes test failures of other libraries under VC++.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      Minor website fixes including missing files in boost_all.zip.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.0</title><pubDate>Sat,  6 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Conversion. Updated Libraries: Array, Graph, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/index.html&quot;&gt;Conversion Library&lt;/a&gt;&lt;/span&gt; added
      - &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;lexical_cast&lt;/a&gt;
      headers from Dave Abrahams and Kevlin Henney.
    &lt;/li&gt;
    &lt;li&gt;
      Web site moved to a larger host after the old ISP collapsed unexpectedly.
    &lt;/li&gt;
    &lt;li&gt;
      Regression tests now include execution testing. See &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler
      Status&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/discussion_policy.htm&quot;&gt;Discussion Policy&lt;/a&gt; page added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; minor documentation
      improvements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.19.0</title><pubDate>Sun, 10 Dec 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Concept Check, Python, Static Assert, Property Map Concepts.
      Updated Libraries: Graph, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/concept_check.htm&quot;&gt;Concept Check Library&lt;/a&gt;&lt;/span&gt; added
      - tools for generic programming from Jeremy Siek.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; added
      - reflects C++ classes and functions into Python, from Dave Abrahams.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/static_assert/static_assert.htm&quot;&gt;Static Assert Library&lt;/a&gt;&lt;/span&gt; added
      - compile time assertions from John Maddock
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/property_map.html&quot;&gt;Property Map Concepts&lt;/a&gt;&lt;/span&gt; added
      - interfaces which map key objects to value objects from Jeremy Siek.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and Guidelines&lt;/a&gt;
      - directory name policy added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/faq.htm&quot;&gt;FAQ&lt;/a&gt; updated.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.3</title><pubDate>Sat, 18 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Regular Expression, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      fixes and additions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; Borland compiler fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; changed to no longer expose
      names to the global namespace.
    &lt;/li&gt;
    &lt;li&gt;
      BeOS5/Intel compiler status contributed by John Maddock.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; added
      two additional test programs.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.2</title><pubDate>Fri,  3 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Case, Graph, Regular Expression, Configuration. Utility
      library split into separate libraries.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;Cast Library&lt;/a&gt;&lt;/span&gt; Fix numeric_cast&amp;lt;&amp;gt;
      bugs with floating types.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; more
      fixes for broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Boost Header Dependencies page added.
    &lt;/li&gt;
    &lt;li&gt;
      Terminology change: Several headers previously lumped together as a &amp;quot;utility&amp;quot;
      library are now considered separate libraries. For historical reasons, their
      non-header files still live in the &amp;quot;utility&amp;quot; sub-directory.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.1</title><pubDate>Sun, 15 Oct 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Random, Regular Expression, Configuration.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;,
      &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;, and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;: Minor fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; additions
      for various compiler foibles.
    &lt;/li&gt;
    &lt;li&gt;
      Portability Hints: Borland C++ 5.5.1 from Jens Maurer added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; updated
      for latest versions of several compilers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.0</title><pubDate>Thu, 28 Sep 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Graph, Regular Expression. Updated Libraries: Array, Functional,
      Utility, Integer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      Preliminary release of two important new libraries:
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
          Generic graph components and algorithms from Jeremy Siek and a University
          of Notre Dame team.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; -
          Text pattern matching in all its glory from John Maddock.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Other changes:
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; improvements
          reflecting formal review comments.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href=&quot;/boost/functional.hpp&quot;&gt;functional.hpp&lt;/a&gt; compiler workarounds
          added.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;/code&gt;
          added to utility.hpp for easier handling of std::pair&amp;lt;&amp;gt; return values.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;&lt;/span&gt; improved
          handling of 64-bit integers.
        &lt;/li&gt;
        &lt;li&gt;
          Minor web site page updates.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.17.0</title><pubDate>Thu,  3 Aug 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Library: Array. Updated Libraries: Array Traits, Random Number, Smart
      Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; added - An
      STL compliant container wrapper for arrays of constant size from Nicolai Josuttis.
    &lt;/li&gt;
    &lt;li&gt;
      array traits header renamed array_traits.hpp (was array.hpp).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; more
      minor changes to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  performance
      reducing exception-specifications removed.
    &lt;/li&gt;
    &lt;li&gt;
      Compiler and test program fixes for call_traits, compressed_pair, and type_traits.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; to clear compiler warning
      messages.
    &lt;/li&gt;
    &lt;li&gt;
      Linux &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt; added.
    &lt;/li&gt;
    &lt;li&gt;
      Boost source code now lives in a publicly accessible Concurrent Versions System
      (CVS) repository.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.16.1</title><pubDate>Wed,  5 Jul 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Integer, Random Number, Cast, Call Traits, Operators.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;&lt;/span&gt; library: fixed
      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; bug, added &lt;a href=&quot;/libs/integer/cstdint_test.cpp&quot;&gt;cstdint_test.cpp&lt;/a&gt;,
      updated &lt;a href=&quot;/libs/integer/cstdint.htm&quot;&gt;docs&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; minor
      fixes to &lt;a href=&quot;/boost/random.hpp&quot;&gt;random.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/random/random_test.cpp&quot;&gt;random_test.cpp&lt;/a&gt;
      to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; with more Microsoft compiler
      workarounds.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits docs&lt;/a&gt;,
      added &lt;a href=&quot;/libs/utility/call_traits_test.cpp&quot;&gt;call_traits_test.cpp&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Cleanup and bug fixes for &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;
      and &lt;a href=&quot;/libs/utility/operators_test.cpp&quot;&gt;operators_test.cpp&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.16.0</title><pubDate>Wed, 28 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Functional, iterator header, Updated Libraries: Random Number,
      Rational, Cast, Smart Pointer, Config.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      Added &lt;a href=&quot;/libs/functional/index.html&quot;&gt;Functional Library&lt;/a&gt; -
      Enhanced function object adaptors from Mark Rodgers.
    &lt;/li&gt;
    &lt;li&gt;
      Added missing &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;
      files.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators docs&lt;/a&gt; and
      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      New &lt;a href=&quot;/boost/iterator.hpp&quot;&gt;iterator.hpp&lt;/a&gt; header.
    &lt;/li&gt;
    &lt;li&gt;
      Minor &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/rational/rational_example.cpp&quot;&gt;rational_example.cpp&lt;/a&gt;,
      and &lt;a href=&quot;/libs/integer/integer_traits_test.cpp&quot;&gt;integer_traits_test.cpp&lt;/a&gt;
      changes to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Revised &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;: removed implicit_cast,
      plus fixes for broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Minor &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; workaround for
      some GCC builds.
    &lt;/li&gt;
    &lt;li&gt;
      Several &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes for Microsoft,
      Intel, and other compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Added &lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt; page
      and test program.
    &lt;/li&gt;
    &lt;li&gt;
      Added Experimental &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;
      page showing what library works with which compilers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.15.1</title><pubDate>Wed, 21 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Cast, Operators, Config.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
    fix. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for
    Microsoft compilers. The 1.15.0 operators changes seem to have introduced incompatibilities.
    We are working on fixing them, and have started to build a regression test to
    prevent similar future problems.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.15.0</title><pubDate>Sat, 17 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Library: Random Number. Updated Libraries: Utility, Config, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt; from Jens
    Maurer added. Updated utility library &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
    eliminates code bloat. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
    and &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; for Microsoft compilers.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.3</title><pubDate>Mon, 29 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Config, Type Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for Borland
    compilers. Minor fix to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_traits&lt;/span&gt;&lt;/code&gt;
    example. Minor web site fixes. &lt;a href=&quot;/more/formal_review_process.htm&quot;&gt;Library
    Formal Review Process&lt;/a&gt; page added.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.2</title><pubDate>Tue,  9 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Documentation updates.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    No libraries updated. &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and
    Guidelines&lt;/a&gt; expanded, &lt;a href=&quot;/more/submission_process.htm&quot;&gt;Library
    Submission Process&lt;/a&gt; added.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.1</title><pubDate>Fri, 17 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Rational, Smart Pointer, Call Traits, Compressed Pair, Type
      Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fix to &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;. Minor documentation
    changes to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer&lt;/a&gt;
    Library and &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;,
    &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;, and type_traits.
    Updated &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Guidelines&lt;/a&gt; and &lt;a href=&quot;/users/people.html&quot;&gt;People&lt;/a&gt; page.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.0</title><pubDate>Sun,  5 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Integer. Experimental libraries moved to vault.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt; status upgraded
    after removing bin_bun.hpp. The &amp;quot;Experimental&amp;quot; library category has
    been removed; the boost files/vault now serves the purpose. Minor fix to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; line endings.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.13.0</title><pubDate>Tue, 29 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Libraries: Utility, Type Traits, Call Traits, Compressed Pair.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Adds &lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility Library&lt;/a&gt; &lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;type_traits&lt;/a&gt;,
    &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;, and &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;
    headers from John Maddock, Steve Cleary and Howard Hinnant.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.12.0</title><pubDate>Wed, 23 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Library: Integer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Adds a &lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;integer_traits&lt;/a&gt;
    header from Jens Maurer to the &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer
    Library&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.2</title><pubDate>Mon, 21 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Smart Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    &lt;a href=&quot;/libs/smart_ptr/smarttests.htm&quot;&gt;Smart pointer timings&lt;/a&gt; added
    (thanks to Gavin Collings). Minor fix to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt;
    sample program. Minor fixes to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.1</title><pubDate>Wed,  2 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Minor fix for cast.hpp.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fix to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; (thanks to Doncho
    Angelov).
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.0</title><pubDate>Tue,  1 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Rational Number. Updated Libraries: Case, Config, Smart Pointer,
      Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Added &lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;.
    Minor fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;,
    &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;,
    and to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt; sample programs.
    Minor site cleanup (thanks to Paul Baxter).
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.10.4</title><pubDate>Fri, 31 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Smart Pointer, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fixes to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.10.3</title><pubDate>Thu, 30 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Compse, Operators, Cast, Config, Smart Pointer First release
      with a version number.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fixes to the compose library examples, &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators
    documentation&lt;/a&gt;, &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;,
    &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;, &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;,
    &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;, and &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;.
  &lt;/p&gt;
  &lt;p&gt;
    This is the first release with a version number. The version numbering scheme
    is xxx.yyy.zzz.
  &lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;
      xxx = Major version
    &lt;/li&gt;
    &lt;li&gt;
      yyy = New library or feature added
    &lt;/li&gt;
    &lt;li&gt;
      zzz = Bug fixes only
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Old Versions</title><pubDate>Tue, 14 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Early releases of boost without version numbers.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;div id=&quot;old_versions.14_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;14 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;Operators.hpp&lt;/a&gt; &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;documentation&lt;/a&gt;
      improved.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.13_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;13 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added iterator operators and helpers to &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;header
      operators.hpp&lt;/a&gt;, together with an iterator test program. This header
      is maturing into something really useful for building arithmetic or iterator
      user-defined types, so look it over even if you browsed one of the earlier
      versions.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.11_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added next() and prior() to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;header utility.hpp&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.8_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;8 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor improvements to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt;
      library: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt;,
      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;&lt;/code&gt;,
      and specializations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; and
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;less&lt;/span&gt;&lt;/code&gt; now provided.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.18_nov_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;18 Nov 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor improvements made to the &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator
      templates&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.15_nov_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;15 Nov 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator templates&lt;/a&gt; have been
      added to the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.11_oct_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Oct 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt; library
      and &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes to improve portability.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.26_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;26 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor updates to several libraries: * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_downcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
      library &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; header now works for
      multiple inheritance cases. * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions added in the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart
      pointer&lt;/a&gt; library. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/boost/timer.hpp&quot;&gt;timer.hpp&lt;/a&gt;&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_max&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_min&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      functions added to the &lt;a href=&quot;/libs/timer/index.html&quot;&gt;timer&lt;/a&gt; library.
      * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt;&lt;/span&gt; library bin_ubin.hpp
      changes to eliminate compiler warning messages. * &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
      minor changes to aid library developers. No impact on library users.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.3_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;3 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cast functions in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
      library were considerably simplified.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cast functions initially in &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;
      have been moved to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, still in
      the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The category &amp;quot;Experimental&amp;quot; has been added to the &lt;a href=&quot;/libs/libraries.htm&quot;&gt;library&lt;/a&gt;
      page. The &lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt; library is
      the first entry.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;p&gt;
    ...And the remainder are lost to the mists of time (for now, anyway)....
  &lt;/p&gt;
&lt;/div&gt;</description></item></channel>
</rss>