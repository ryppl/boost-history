<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>BoostBook2RSS</generator>
    <title>Boost History</title>
    <link>http://beta.boost.org/feed/history.rss</link>
    <description/>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
  <item><title>Version 1.36.0</title><pubDate>Thu, 14 Aug 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Accumulators, Exception, Units, Unordered. Updated Libraries:
      Asio, Assign, Foreach, Function, Hash, Interprocess, Intrusive, Math, Multi-index
      Containers, MPI, PtrContainer, Spirit, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=619445</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_36_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt; Framework
        for incremental calculation, and collection of statistical accumulators,
        from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/doc/boost-exception.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt; 
  A
        library for transporting of arbitrary data in exception objects, and transporting
        of exceptions between threads, from Emil Dotchevski.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/units/index.html&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
  Zero-overhead dimensional
        analysis and unit/quantity manipulation and conversion, from Matthias Schabel
        and Steven Watanabe
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt; 
  Unordered
        associative containers, from Daniel James.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for serial ports.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for UNIX domain sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for raw sockets and ICMP.
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for POSIX stream-oriented file descriptors (excluding
            regular files).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows stream-oriented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as named pipes (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows random-access &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as files (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for reactor-style operations (i.e. they report readiness
            but perform no I/O) using a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
            type.
          &lt;/li&gt;
          &lt;li&gt;
            Added an iterator type for bytewise traversal of buffer sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; overloads that take a user-defined
            function object for locating message boundaries.
          &lt;/li&gt;
          &lt;li&gt;
            Added an experimental two-lock queue (enabled by defining &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE&lt;/span&gt;&lt;/code&gt;) that
            may provide better &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
            scalability across many processors.
          &lt;/li&gt;
          &lt;li&gt;
            Various fixes, performance improvements, and more complete coverage of
            the custom memory allocation support.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/assign/index.html&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        (and its variants) now has overloaded comparison operators. This allows you
        to write test code such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHECK_EQUAL&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_REVERSE_FOREACH&lt;/span&gt;&lt;/code&gt;
            macro for iterating over a sequence in reverse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved allocator support, from Emil Dotchevski.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  Minor updates
        and fixes, for more info see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_36_0&quot;&gt;change
        log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added anonymous shared memory for UNIX systems.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed missing move semantics on managed memory classes.
          &lt;/li&gt;
          &lt;li&gt;
            Added copy_on_write and open_read_only options for shared memory and
            mapped file managed classes.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt; is movable
            and supports aliasing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cache_last&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            options to singly linked lists.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optimize_multikey&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option to unordered container
            hooks.
          &lt;/li&gt;
          &lt;li&gt;
            Optimized unordered containers when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;store_hash&lt;/span&gt;&lt;/code&gt;
            option is used in the hook.
          &lt;/li&gt;
          &lt;li&gt;
            Implementation changed to avoid explicit use of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/code&gt;-&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; blocks and be compilable with exceptions
            disabled.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new non-central Chi-Square, Beta, F and T distributions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Exponential Integral and Zeta special functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Rounding, Truncation, and Unit-in-the-last-place functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for compile time powers of a runtime base.
          &lt;/li&gt;
          &lt;li&gt;
            Added a few SSE2 based optimisations for the Lanczos approximations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for non-blocking operations in Python, from Andreas Klöckner.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for graph topologies.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Minor
        additions and maintenance fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_36&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
  Support
        for a few more containers, and addition of insert iterators. For details
        see &lt;a href=&quot;/libs/ptr_container/doc/ptr_container.html#upgrading-from-boost-v-1-35&quot;&gt;upgrading
        details&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Integrated the
        &amp;quot;Classic&amp;quot; Spirit V1.8.x code base with Spirit V2, &amp;quot;The New
        Generation&amp;quot;. See &lt;a href=&quot;/libs/spirit/classic/change_log.html&quot;&gt;Change
        Log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New generic &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt; functions for
            locking multiple mutexes at once.
          &lt;/li&gt;
          &lt;li&gt;
            Rvalue reference support for move semantics where the compilers supports
            it.
          &lt;/li&gt;
          &lt;li&gt;
            A few bugs fixed and missing functions added (including the serious win32
            condition variable bug).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_try_lock&lt;/span&gt;&lt;/code&gt; types
            are now backwards-compatible with Boost 1.34.0 and previous releases.
          &lt;/li&gt;
          &lt;li&gt;
            Support for passing function arguments to the thread function by supplying
            additional arguments to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;/code&gt;
            constructor.
          &lt;/li&gt;
          &lt;li&gt;
            Backwards-compatibility overloads added for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_lock&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_wait&lt;/span&gt;&lt;/code&gt; functions
            to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            for timeouts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave V2.0 is a new major release introducing some breaking API changes,
            preventing it to be used with Boost versions earlier than V1.36.0. Mainly,
            the API and hook interface have been streamlined for more consistency.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a couple of bugs, improved regression test system to include testing
            of the preporcessing hooks interface (for details see: &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; 
  Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            for specifying which parts of the input sequence to ignore when matching
            it against a regex.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            accepts formatter objects and formatter expressions in addition to format
            strings.
          &lt;/li&gt;
          &lt;li&gt;
            Range-based &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; algorithm.
          &lt;/li&gt;
          &lt;li&gt;
            Fix crash when semantic actions are placed in look-aheads, look-behinds
            or independent sub-expressions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.3 on Ubuntu Linux 8.08.1
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1 beta, 8.0 SP1, and 7.1, all on Windows XP SP-2
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.2.1 on FreeBSD-7
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.1
      &lt;/li&gt;
      &lt;li&gt;
        15 compilers on Linux
      &lt;/li&gt;
      &lt;li&gt;
        2 compilers on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        1 compiler on OSF1
      &lt;/li&gt;
      &lt;li&gt;
        4 compilers on SunOS
      &lt;/li&gt;
      &lt;li&gt;
        Too many to count on Windows.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene
      Rivera&lt;/a&gt;, and Daniel James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.35.0</title><pubDate>Sat, 29 Mar 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Asio, Bimap, Circular Buffer, Function Types, Fusion, GIL, Interprocess,
      Intrusive, Math/Special Functions, Math/Statistical Distributions, MPI, System.
      Updated Libraries: Graph, Hash, Iostreams, Multi Array, Multi-index Containers,
      Serialization, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=587936</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_35_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt; Portable networking,
        including sockets, timers, hostname resolution and socket iostreams, from
        Chris Kohlhoff.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bimap/index.html&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt; Boost.Bimap is a
        bidirectional maps library for C++. With Boost.Bimap you can create associative
        containers in which both types can be used as key, from Matias Capeletto.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt; STL
        compliant container also known as ring or cyclic buffer, from Jan Gaspar.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt; 
  Boost.FunctionTypes
        provides functionality to classify, decompose and synthesize function, function
        pointer, function reference and pointer to member types. From Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt; 
  Library for working
        with tuples, including various containers, algorithms, etc. From Joel de
        Guzman, Dan Marsden and Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/gil/doc/index.html&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt; 
  Generic Image Library,
        from Lubomir Bourdev and Hailin Jin.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt; 
  Shared
        memory, memory mapped files, process-shared mutexes, condition variables,
        containers and allocators, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt; 
  Intrusive
        containers and algorithms, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Special
        Functions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of mathematical special functions from
        John Maddock, Paul Bristow, Hubert Holin and Xiaogang Zhang.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Statistical
        Distributions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of univariate statistical distributions
        and functions that operate on them from John Maddock and Paul Bristow
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt; 
  Message Passing Interface
        library, for use in distributed-memory parallel application programming,
        from Douglas Gregor and Matthias Troyer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt; 
  Operating system
        support, including the diagnostics support that will be part of the C++0x
        standard library, from Beman Dawes.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
  Generic graph
        components and algorithms. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
            from Stephan Diederich as part of the 2006 Google Summer of Code.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            for max-flow problems, from Stephan Diederich.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_graphml&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_graphml&lt;/span&gt;&lt;/code&gt; for GraphML input/output,
            from Tiago de Paula Peixoto.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_cycle_ratio&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;maximum_cycle_ratio&lt;/span&gt;&lt;/code&gt;,
            from Dmitry Bufistov and Andrey Parfenov.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boyer_myrvold_planarity_test&lt;/span&gt;&lt;/code&gt;,
            along with a suite of algorithms for planar graphs, from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            LEDA Adaptor improvements, from Jens Müller.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  A TR1 hash
        function object, from Daniel James. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the algorithm for hashing floating point numbers.
          &lt;/li&gt;
          &lt;li&gt;
            A few bug and warning fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt; Framework
        for defining streams, stream buffers and i/o filters, from Jonathan Turkanis.
        Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Clarified the semantics of close(). This fixes several bugs but will
            break some existing code. See &lt;a href=&quot;/libs/iostreams/doc/index.html?path=12&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Numerous other bug fixes and optimizations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &amp;quot;dimensionality&amp;quot; compile-time constante to the MultiArray
            concept.
          &lt;/li&gt;
          &lt;li&gt;
            For greater control over error situations, uses of C++ assert have been
            replaced with BOOST_ASSERT.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug with simultaneous resizing and reindexing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/libs/multi_index/doc/tutorial/key_extraction.html#global_fun&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;global_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; predefined key extractor.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/libs/multi_index/doc/tutorial/indices.html#iterator_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; facility.
          &lt;/li&gt;
          &lt;li&gt;
            Included &lt;a href=&quot;/libs/multi_index/doc/tutorial/creation.html#special_allocator&quot;&gt;support
            for non-standard allocators&lt;/a&gt; such as those of &lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Boost.Interprocess&lt;/a&gt;,
            which makes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;s
            placeable in shared memory.
          &lt;/li&gt;
          &lt;li&gt;
            New versions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt; with rollback,
            as described in the &lt;a href=&quot;/libs/multi_index/doc/tutorial/basics.html#ord_updating&quot;&gt;tutorial&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of optimizations and minor improvements have also been included.
            For a complete list of changes, see the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_35&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt; 
   Boost.Serialization
        has been updated with optimizations for dense arrays.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The Thread library has been updated to be more in line with the C++0x
            working draft.
          &lt;/li&gt;
          &lt;li&gt;
            Instances of boost::thread and of the various lock types are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Threads can be interrupted at interruption points.
          &lt;/li&gt;
          &lt;li&gt;
            Condition variables can now be used with any type that implements the
            Lockable concept, through the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition&lt;/span&gt;&lt;/code&gt; is a typedef to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;, provided for
            backwards compatibility). &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
            is provided as an optimization, and will only work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Thread IDs are separated from boost::thread, so a thread can obtain it's
            own ID (using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;),
            and IDs can be used as keys in associative containers, as they have the
            full set of comparison operators.
          &lt;/li&gt;
          &lt;li&gt;
            Timeouts are now implemented using the Boost DateTime library, through
            a typedef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;system_time&lt;/span&gt;&lt;/code&gt; for absolute timeouts,
            and with support for relative timeouts in many cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            is supported for backwards compatibility only.
          &lt;/li&gt;
          &lt;li&gt;
            Locks are implemented as publicly accessible templates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_guard&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_lock&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;upgrade_lock&lt;/span&gt;&lt;/code&gt;,
            which are templated on the type of the mutex. The Lockable concept has
            been extended to include publicly available &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions, which are used by
            the lock types.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; has been removed, and the
            functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef, but
            is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; has been removed,
            and the functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef,
            but is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt; has been removed. Code that
            relies on the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt;
            implementation detail will no longer work, as this has been removed,
            as it is no longer necessary now that mutex types now have public &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt; constructors
            with a second parameter of type bool are no longer provided. With previous
            boost releases, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
            could be used to create a lock object that was associated with a mutex,
            but did not lock it on construction. This facility has now been replaced
            with the constructor that takes a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock_type&lt;/span&gt;&lt;/code&gt;
            as the second parameter: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            The broken &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been replaced
            with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_mutex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards conformant
        implementation of the mandated C99/C++ preprocessor functionality packed
        behind an easy to use iterator interface, from Hartmut Kaiser. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added the possibility to continue the preprocessing after an error occured.
          &lt;/li&gt;
          &lt;li&gt;
            Added the macro introspection API to the wave::context object.
          &lt;/li&gt;
          &lt;li&gt;
            Added threading support to the library.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the overall performance by upto 30%.
          &lt;/li&gt;
          &lt;li&gt;
            Changed and unified preprocessor hook interface (this is an interface
            breaking change!), added several new preprocessor hook functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added serialization support.
          &lt;/li&gt;
          &lt;li&gt;
            Added new examples (for instance: Hannibal - a partial C++ parser, by
            Danny Havenith).
          &lt;/li&gt;
          &lt;li&gt;
            Added a new lexical analyzer based on Ben Hansons Lexertl library.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a large number of other bugs and problems.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;em&gt;semantic actions&lt;/em&gt; to static regexes. A semantic
            action is code that executes when part of a regular expression matches.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;custom assertions&lt;/em&gt; to static regexes. A custom
            assertion is a Boolean predicate that can participate in the regex match.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named regexes&lt;/em&gt; for embedding a static or dynamic
            regex into a dynamic regex. This can be used to create dynamic regex
            grammars.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named captures&lt;/em&gt; to dynamic regexes, like Perl.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The following compilers are officially supported in this release:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        HP aC++ A.06.14 on HP-UX
      &lt;/li&gt;
      &lt;li&gt;
        Darwin GCC 4.01.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC up to version 4.2.1, on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 9.1 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10.1 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 7.1 and 8 on Windows (Visual Sudio .NET 2003 and 2005).
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      In addition the following compilers should be well supported, but weren't part
      of our release criteria for 1.35:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        IBM Visual Age 9.0 on AIX.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10 and later on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC 4.3 and later on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 9 (Visual Studio .NET 2008).
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.34.1</title><pubDate>Tue, 24 Jul 2007 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bugfix Release.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=527428</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;p&gt;
    This is a bug fix release addressing many problems with the 1.34.0 release. It
    is a recommended upgrade for all users of Boost 1.34.0. For a complete list of
    fixes see &lt;a href=&quot;http://svn.boost.org/trac/boost/query?status=closed&amp;amp;milestone=Boost+1.34.1&quot;&gt;Boost
    Trac&lt;/a&gt;.
  &lt;/p&gt;
  &lt;div id=&quot;version_1_34_1.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      New in this release is improved support for the IBM XL C/C++ compiler.
    &lt;/p&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. New in this release The following compilers
      and platforms have been extensively tested with Boost, although many other
      compilers and platforms will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.8.2 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GNU C++&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          &lt;/li&gt;
          &lt;li&gt;
            4.1.x on Solaris
          &lt;/li&gt;
          &lt;li&gt;
            3.4.x on Windows
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.hp.com/go/c++&quot;&gt;HP aC++ A.06.14&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com/&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 9.4
        on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developers.sun.com/sunstudio/index.jsp&quot;&gt;Sun Studio 11&lt;/a&gt;
        on Solaris.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/thomas_witt.html&quot;&gt;Thomas Witt&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Kim Barrett consolidating Boost.Iostreams
      changes from various branches and Rene Rivera for general build and installation
      support.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.34.0</title><pubDate>Sat, 12 May 2007 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Foreach, Statechart, TR1, Typeof, Xpressive. Updated Libraries:
      Assign, Date_time, Filesystem, Function, Hash, Graph, MultiArray, Multi-Index,
      Optional, Parameter, Pointer Container, Python, Signals, Smart Pointer, String
      Algorithm, Wave
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=507975</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_34_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/foreach.html&quot;&gt;Foreach Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/statechart/doc/index.html&quot;&gt;Statechart
        Library&lt;/a&gt;:&lt;/span&gt;
  Arbitrarily complex finite state machines can be implemented
        in easily readable and maintainable C++ code, from Andreas Huber.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/tr1/index.html&quot;&gt;TR1 Library&lt;/a&gt;:&lt;/span&gt; An
        implementation of the C++ Technical Report on Standard Library Extensions,
        from John Maddock. This library does not itself implement the TR1 components,
        rather it's a thin wrapper that will include your standard library's TR1
        implementation (if it has one), otherwise it will include the Boost Library
        equivalents, and import them into namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;/code&gt;.
        Highlights include: Reference Wrappers, Smart Pointers, result_of, Function
        Object Binders, Polymorphic function wrappers, Type Traits, Random Number
        Generators and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
        Regular Expressions, and Complex Number Additional Algorithms.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/typeof.html&quot;&gt;Typeof Library&lt;/a&gt;:&lt;/span&gt; Typeof
        operator emulation, from Arkadiy Vertleyb and Peder Holt.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/xpressive.html&quot;&gt;Xpressive Library&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/assign/index.html&quot;&gt;Assign Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            via the new function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_map_insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Support for initialization of &lt;a href=&quot;/doc/libs/1_34_0/libs/ptr_container/index.html&quot;&gt;Pointer
            Containers&lt;/a&gt; when the containers hold pointers to an abstract base
            class.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/date_time.html&quot;&gt;Date_time library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for new US/Canada timezone rules and other bug fixes. See &lt;a href=&quot;/doc/libs/1_34_0/doc/html/date_time/details.html#changes&quot;&gt;Change
            History&lt;/a&gt; for details.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
        Library&lt;/a&gt;:&lt;/span&gt; Major upgrade in preparation for submission to the C++ Standards
        Committee for TR2. Changes include:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization&quot;&gt;Internationalization&lt;/a&gt;,
            provided by class templates &lt;em&gt;basic_path&lt;/em&gt;, &lt;em&gt;basic_filesystem_error&lt;/em&gt;,
            &lt;em&gt;basic_directory_iterator&lt;/em&gt;, and &lt;em&gt;basic_directory_entry&lt;/em&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification&quot;&gt;Simplification&lt;/a&gt;
            of the path interface by eliminating special constructors to identify
            native formats.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization&quot;&gt;Rationalization&lt;/a&gt;
            of predicate function design, including the addition of several new functions.
          &lt;/li&gt;
          &lt;li&gt;
            Clearer specification by reference to &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01&quot;&gt;POSIX&lt;/a&gt;,
            the ISO/IEEE Single Unix Standard, with provisions for Windows and other
            operating systems.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation&quot;&gt;Preservation&lt;/a&gt;
            of existing user code whenever possible.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient&quot;&gt;More
            efficient&lt;/a&gt; directory iteration.
          &lt;/li&gt;
          &lt;li&gt;
            Addition of a &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator&quot;&gt;recursive
            directory iterator&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt;
  Boost.Function
        now implements a small buffer optimization, which can drastically improve
        the performance when copying or constructing Boost.Function objects storing
        small function objects. For instance, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
        requires no heap allocation when placed into a Boost.Function object.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use declarations for standard classes, so that the library doesn't need
            to include all of their headers
          &lt;/li&gt;
          &lt;li&gt;
            Deprecated the &lt;tt&gt;&amp;lt;boost/functional&lt;em&gt;hash&lt;/em&gt;*.hpp&amp;gt;&lt;/tt&gt;
            headers.
          &lt;/li&gt;
          &lt;li&gt;
            Add support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HASH_NO_EXTENSIONS&lt;/span&gt;&lt;/code&gt;
            macro, which disables the extensions to TR1
          &lt;/li&gt;
          &lt;li&gt;
            Minor improvements to the hash functions for floating point numbers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmonds_maximum_cardinality_matching&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lengauer_tarjan_dominator_tree&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from JongSoo Park.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremiah Willcock and Douglas Gregor of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sorted_erdos_renyi_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremiah Willcock of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;biconnected_components&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now
            supports a visitor and named parameters, from Janusz Piwowarski.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now models
            the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html&quot;&gt;Bidirectional
            Graph&lt;/a&gt; concept.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now
            calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialize_vertex&lt;/span&gt;&lt;/code&gt; for each vertex during
            initialization.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;em&gt;Note:&lt;/em&gt; the name of the compiled library
            for the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html&quot;&gt;GraphViz
            reader&lt;/a&gt; has changed to &lt;tt&gt;boost_graph&lt;/tt&gt; (from &lt;tt&gt;bgl-viz&lt;/tt&gt;)
            to match Boost conventions.
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0&quot;&gt;complete
            revision history&lt;/a&gt; for more information.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/multi_array/index.html&quot;&gt;MultiArray
        Library&lt;/a&gt;:&lt;/span&gt;
  Boost.MultiArray now by default provides range-checking for
        &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;.
        Range checking can be disabled by defining the macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DISABLE_ASSERTS&lt;/span&gt;&lt;/code&gt;
        before including &lt;tt&gt;multi_array.hpp&lt;/tt&gt;. A bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        related to storage orders was fixed.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices&quot;&gt;random
            access indices&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Non key-based indices feature new &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange&quot;&gt;rearrange
            facilities&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            This version also includes a number of optimizations and usage improvements.
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/optional/index.html&quot;&gt;Optional Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt; now added to Optional's documentation
          &lt;/li&gt;
          &lt;li&gt;
            Relational operators now directly support arguments of type &lt;code&gt;&lt;span class=&quot;char&quot;&gt;'T'&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;char&quot;&gt;'none_t'&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            operator-&amp;gt;() now also works with reference types.
          &lt;/li&gt;
          &lt;li&gt;
            Helper functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;make_optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;get_optional_value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;alternative_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
            added.
          &lt;/li&gt;
          &lt;li&gt;
            Constructor taking a boolean condition (as well as a value) added.
          &lt;/li&gt;
          &lt;li&gt;
            Member function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;alternative_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; added.
          &lt;/li&gt;
          &lt;li&gt;
            Incompatbility bug with mpl::apply&amp;lt;&amp;gt; fixed.
          &lt;/li&gt;
          &lt;li&gt;
            Converting assignment bug with uninitialized lvalues fixed.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/parameter/index.html&quot;&gt;Parameter
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Every ArgumentPack is now a valid &lt;a href=&quot;/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html&quot;&gt;MPL
            Forward Sequence.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Support for unnamed arguments (those whose keyword is deduced from their
            types) is added.
          &lt;/li&gt;
          &lt;li&gt;
            Support for named and unnamed template arguments is added.
          &lt;/li&gt;
          &lt;li&gt;
            New overload generation macros solve the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm&quot;&gt;forwarding
            problem&lt;/a&gt; directly.
          &lt;/li&gt;
          &lt;li&gt;
            See also the Python library changes, below.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for serialization via &lt;a href=&quot;/doc/libs/1_34_0/libs/serialization/index.html&quot;&gt;Boost.Serialization.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Exceptions can be disabled by defining the macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS
            before including any header. This macro is defined by default if BOOST_NO_EXCEPTIONS
            is defined.
          &lt;/li&gt;
          &lt;li&gt;
            Additional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            overloads added s.t. one can also pass &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; instead of only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; arguments to member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            now has weaker requirements s.t. one can transfer objects from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Boost.Python now automatically appends C++ signatures to docstrings.
            The new &lt;a href=&quot;/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html&quot;&gt;&lt;tt&gt;docstring_options.hpp&lt;/tt&gt;&lt;/a&gt;
            header is available to control the content of docstrings.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stl_input_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for turning
            a Python iterable object into an STL input iterator, from Eric Niebler.
          &lt;/li&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
            conversions is added.
          &lt;/li&gt;
          &lt;li&gt;
            Integrated support for wrapping C++ functions built with the parameter
            library; keyword names are automatically known to docsstrings.
          &lt;/li&gt;
          &lt;li&gt;
            Enhancements to the API for better embedding support (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exec_file&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; More
        improvements to signal invocation performance from Robert Zeh.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointers
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor&quot;&gt;Allocator
            support&lt;/a&gt; as proposed in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf&quot;&gt;N1851&lt;/a&gt;
            (162 Kb PDF).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer_cast&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer_to_other&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; utilities
            to allow pointer-independent code, from Ion Gaztanaga.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/algorithm/string/index.html&quot;&gt;String
        Algorithm Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexicographical_compare&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;join&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            New comparison predicates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_less&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_not_greater&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Negative indexes support (like Perl) in various algorihtms (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_head&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tail&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_nth&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/wave/index.html&quot;&gt;Wave Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave now correctly recognizes pp-number tokens as mandated by the C++
            Standard, which are converted to C++ tokens right before they are returned
            from the library.
          &lt;/li&gt;
          &lt;li&gt;
            Several new preprocessing hooks have been added. For a complete description
            please refer to the related documentation page: &lt;a href=&quot;/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html&quot;&gt;The
            Context Policy&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Shared library (dll) support has been added for the generated Wave libraries.
          &lt;/li&gt;
          &lt;li&gt;
            The overall error handling has been improved. It is now possible to recover
            and continue after an error or a warning was issued.
          &lt;/li&gt;
          &lt;li&gt;
            Support for optional comment and/or full whitespace preservation in the
            generated output stream has been added.
          &lt;/li&gt;
          &lt;li&gt;
            The Wave library now performs automatic include guard detection to avoid
            accessing header files more than once, if appropriate.
          &lt;/li&gt;
          &lt;li&gt;
            Full interactive mode has been added to the Wave tool. Now the Wave tool
            can be used just like Python or Perl for instance to interactively try
            out your BOOST_PP macros. Additionally it is now possible to load and
            save the current state of an interactive session (macro tables et.al.).
          &lt;/li&gt;
          &lt;li&gt;
            The overall performance has been improved by upto 40-60%, depending on
            the concrete files to process.
          &lt;/li&gt;
          &lt;li&gt;
            Support for new pragmas has been added allowing to control certain library
            features from inside the preprocessed sources (partial output redirection,
            control of generated whitespace and #line directives).
          &lt;/li&gt;
          &lt;li&gt;
            Optional support for #pragma message &amp;quot;...&amp;quot; has been added.
          &lt;/li&gt;
          &lt;li&gt;
            This version also includes a number of bug fixes and usage improvements.
            For a complete list of changes, see the libraries &lt;a href=&quot;/doc/libs/1_34_0/libs/wave/ChangeLog&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.8.2 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GNU C++&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          &lt;/li&gt;
          &lt;li&gt;
            4.1.x on Solaris
          &lt;/li&gt;
          &lt;li&gt;
            3.4.x on Windows
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP aC++ A.06.14&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com/&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 9.4
        on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developers.sun.com/sunstudio/compilers_index.html&quot;&gt;Sun
        Studio 11&lt;/a&gt; on Solaris.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/thomas_witt.html&quot;&gt;Thomas Witt&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Vladimir Prus for making Boost.Build
      version 2 a reality, David Abrahams for authoring a new getting started guide
      and Greg D. for answering countless questions.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.33.1</title><pubDate>Tue,  5 Dec 2006 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Any, Config, Python, Smart Pointer, Regex, Iostreams, Functional/Hash,
      Multi-index Containers, Graph, Signals, Thread, and Wave.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=376197</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_33_1.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/any.html&quot;&gt;Any Library&lt;/a&gt;:&lt;/span&gt; Cast
        to reference types introduced in 1.33.0 is now documented on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any_cast&lt;/span&gt;&lt;/code&gt; documentation page.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html&quot;&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
        expressions now support &lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html#operators&quot;&gt;comparisons
        and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/config/index.html&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Don't
        undef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LIB_TOOLSET&lt;/span&gt;&lt;/code&gt; after
        use.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The build now assumes Python 2.4 by default, rather than 2.2
          &lt;/li&gt;
          &lt;li&gt;
            Support Python that's built without Unicode support
          &lt;/li&gt;
          &lt;li&gt;
            Support for wrapping classes with overloaded address-of (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;) operators
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/smart_ptr/index.html&quot;&gt;Smart Pointer
        Library&lt;/a&gt;:&lt;/span&gt; Fixed problems under Metrowerks CodeWarrior on PowerPC (Mac
        OS X) with inlining on, GNU GCC on PowerPC 64.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Fixed
        the supplied makefiles, and other small compiler specific changes. Refer
        to the &lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/history.html&quot;&gt;regex history
        page&lt;/a&gt; for more information on these and other small changes.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/iostreams/doc/index.html&quot;&gt;Iostreams
        Library&lt;/a&gt;:&lt;/span&gt;
  Improved the interface for accessing a chain's components,
        added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_open&lt;/span&gt;&lt;/code&gt; members to
        the file and file descriptor devices, fixed memory-mapped files on Windows,
        and made minor changes to the documentation.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for docstrings on nonstatic properties.
          &lt;/li&gt;
          &lt;li&gt;
            We now export the client-provided docstrings for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
          &lt;/li&gt;
          &lt;li&gt;
            Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
          &lt;/li&gt;
          &lt;li&gt;
            Introduced better support for rvalue from-python conversions of shared_ptr.
          &lt;/li&gt;
          &lt;li&gt;
            Support for exposing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
          &lt;/li&gt;
          &lt;li&gt;
            updated visual studio project build file.
          &lt;/li&gt;
          &lt;li&gt;
            Added search feature to the index page.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt;
  Fixed the points example.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
  Fixed a problem with multithreaded code, and other
        minor changes. Refer to the library &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html#boost_1_33_1&quot;&gt;release
        notes&lt;/a&gt; for further details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/table_of_contents.html&quot;&gt;Graph
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed a problem with the relaxed heap on x86 Linux (fixes bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed problems with &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/king_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;king_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; producing no
            results.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;/code&gt; parameter
            to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/signals/doc/index.html&quot;&gt;Signals
        Library&lt;/a&gt;:&lt;/span&gt; Fixed problems with the use of Signals across shared library
        boundaries.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/thread/doc/index.html&quot;&gt;Thread library&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been removed due to
        problems with deadlocks.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/wave/index.html&quot;&gt;Wave library&lt;/a&gt;
        (V1.2.1):&lt;/span&gt; Fixed a couple of problems, refer to the &lt;a href=&quot;/doc/libs/1_33_1/libs/wave/ChangeLog&quot;&gt;change
        log&lt;/a&gt; for further details.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_1.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;em&gt;New for this release&lt;/em&gt;: Support for building
      with the newest STLport-5.0 was added. The support includes building with MinGW
      Runtime 3.8 plus STLport-5.0 improved to support wide character operations.
      Apple GCC 4.0, HP Tru64 C++, and Microsoft Visual C++ 8.0 are supported platforms.
      We have added an experimental autoconf-like &lt;tt&gt;configure&lt;/tt&gt; script
      for Unix-like systems: run &lt;tt&gt;configure --help&lt;/tt&gt; for more information.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 3.3, 4.0 on Mac
        OS X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.6.4 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org&quot;&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
        STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
        9.4, 9.5 on Mac OS X and Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;span class=&quot;inset-left&quot;&gt;&lt;img alt=&quot;Medieval Mr. Gregor&quot; src=&quot;/gfx/boost_1_33_0.jpg&quot;/&gt;&lt;/span&gt;
&lt;a href=&quot;/users/people/doug_gregor.html&quot;&gt;Douglas
      Gregor&lt;/a&gt; managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
      managed to keep the regression testing system working throughout the release
      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Bronek Kozicki, Rene
      Rivera and Jonathan Turkanis for greatly improving the quality of this release;
      Rene Rivera for the new Boost web page design; and Zoltan &amp;quot;cad&amp;quot; Juhasz
      for the new Boost logo.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.33.0</title><pubDate>Thu, 11 Aug 2005 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Iostream, Hash, Parameter, Pointer Container, Wave. Updated
      Libraries: Any, Assignment, Bind, Date-Time, Graph, Multi-Index, Program Options,
      Property Map, Python, Random Number, Range, Regex, Serialization, Signals.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=348655</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_33_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/iostreams/doc/index.html&quot;&gt;Iostreams
        Library&lt;/a&gt;:&lt;/span&gt;
  Framework for defining streams, stream buffers and i/o filters,
        from Jonathan Turkanis.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt; A TR1 hash function object that can be extended to hash user
        defined types, from Daniel James.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/parameter/doc/html/index.html&quot;&gt;Parameter
        Library&lt;/a&gt;:&lt;/span&gt;
  Write functions that accept arguments by name: especially
        useful when a function has more than one argument with a useful default value,
        since named arguments can be passed in any order.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt;:&lt;/span&gt;
  Containers for storing heap-allocated polymorphic
        objects to ease OO-programming, from Thorsten Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards
        conformant implementation of the mandated C99/C++ preprocessor functionality
        packed behind an easy to use iterator interface, from Hartmut Kaiser.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/any.html&quot;&gt;Any Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any_cast&lt;/span&gt;&lt;/code&gt; has been enhanced to allow direct
        access to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any&lt;/span&gt;&lt;/code&gt;'s held value.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/assign/doc/index.html&quot;&gt;Assignment
        Library&lt;/a&gt;:&lt;/span&gt; Support for &lt;a href=&quot;/doc/libs/1_33_1/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt; and new efficient functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref_list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cref_list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for generating anonymous ranges.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html&quot;&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
        expressions now support &lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html#operators&quot;&gt;comparisons
        and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time.html&quot;&gt;Date-Time Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/local_time.html&quot;&gt;local
            time and time zone classes&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/date_time_io.html&quot;&gt;format-based
            Input/Output facets&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/details.html#date_time.changes&quot;&gt;change
            history&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Introduced
        several new algorithms and improved existing algorithms:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/python.html&quot;&gt;Experimental
            Python bindings&lt;/a&gt;, from Doug Gregor and Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/floyd_warshall_shortest.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;floyd&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;warshall&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pairs&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;shortest&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Lauren Foutz and Scott Hill.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/astar_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;astar&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;search&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Kristopher Beevers and Jufeng Peng.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/fruchterman_reingold.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fruchterman&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;reingold&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;directed&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Doug Gregor
            and Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/biconnected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;biconnected&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;components&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;articulation&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;points&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremy Siek, Janusz Piwowarski, and Doug Gregor.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/sequential_vertex_coloring.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sequential&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;vertex&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;coloring&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been updated,
            tested, and documented.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/gursoy_atun_layout.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;gursoy&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;atun&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Jeremiah
            Willcock and Doug Gregor of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/king_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from D. Kevin McGrath of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;mckee&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been recast
            as an invocation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;search&lt;/span&gt;&lt;/code&gt;
            and now supports graphs with multiple components.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/dijkstra_shortest_paths.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;shortest&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now uses a relaxed
            heap [&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/bibliography.html#driscoll88&quot;&gt;61&lt;/a&gt;]
            as its priority queue, improving its complexity to O(V log V) and improving
            real-world performance for larger graphs.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/read_graphviz.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
            now has a new, Spirit-based parser that works for all graph types and
            supports arbitrary properties on the graph, from Ron Garcia. The old,
            Bison-based GraphViz reader has been deprecated and will be removed in
            a future Boost release. &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/write-graphviz.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
            also supports dynamic properties.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/subgraph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;subgraph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_property&lt;/span&gt;&lt;/code&gt;
            now refers to the subgraph property, not the root graph's property.
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/history.html#by-version&quot;&gt;history&lt;/a&gt;
            for additional changes and bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/tutorial/indices.html#hashed_indices&quot;&gt;hashed
            indices&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/tutorial/creation.html#serialization&quot;&gt;serialization
            support&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/program_options/doc/index.html&quot;&gt;Program
        Options Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Option descriptions are now printed with word wrapping.
          &lt;/li&gt;
          &lt;li&gt;
            Command line parser can bypass unregistered options, instread of throwing.
          &lt;/li&gt;
          &lt;li&gt;
            Removed support for &amp;quot;implicit&amp;quot; (optional) values.
          &lt;/li&gt;
          &lt;li&gt;
            New customization method 'command_line_parser::extra_style_parser'. Unlike
            'additional_parser', allows the user to parse several tokens and return
            a vector of options, not just a single option.
          &lt;/li&gt;
          &lt;li&gt;
            Work with disabled exceptions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/property_map/property_map.html&quot;&gt;Property
        Map Library&lt;/a&gt;:&lt;/span&gt; Introduced the &lt;a href=&quot;/doc/libs/1_33_1/libs/property_map/doc/dynamic_property_map.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;properties&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
        class, which provides dynamically-typed access to a set of property maps.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for docstrings on nonstatic properties.
          &lt;/li&gt;
          &lt;li&gt;
            We now export the client-provided docstrings for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
          &lt;/li&gt;
          &lt;li&gt;
            Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
          &lt;/li&gt;
          &lt;li&gt;
            Introduced better support for rvalue from-python conversions of shared_ptr.
          &lt;/li&gt;
          &lt;li&gt;
            Support for exposing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
          &lt;/li&gt;
          &lt;li&gt;
            updated visual studio project build file.
          &lt;/li&gt;
          &lt;li&gt;
            Added search feature to the index page.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/random/index.html&quot;&gt;Random Number
        Library&lt;/a&gt;:&lt;/span&gt;
  Improved initialization for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;,
        algorithm by Makoto Matsumoto and Takuji Nishimura, implemented for Boost
        by Jens Maurer.&lt;/p&gt;
  &lt;p&gt;Note: All test vectors for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;s
        constructed or seeded without parameters or with a single &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; parameter become invalid.&lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; Minor
        addition of convenience functions to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;
        &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;/code&gt; like &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]()&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Rewritten front end parser now supports (?imsx-imsx) constructs, plus
            lookbehind assertions and conditional expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Thin wrapper classes improve integration with MFC/ATL code.
          &lt;/li&gt;
          &lt;li&gt;
            Full (optional) Unicode support via the ICU library. Refer to the &lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/history.html&quot;&gt;regex history page&lt;/a&gt;
            for more information on these and other small changes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/serialization/doc/index.html&quot;&gt;Serialization
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            DLL version.
          &lt;/li&gt;
          &lt;li&gt;
            Auto-linking.
          &lt;/li&gt;
          &lt;li&gt;
            Serialization of variants.
          &lt;/li&gt;
          &lt;li&gt;
            Improved serialization of shared pointers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; added
        slot blocking/unblocking, from Frantz Maerten. Huge improvements to signal
        invocation performance from Robert Zeh.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 3.x on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.6.4 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org&quot;&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
        STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
        9.4, 9.5 on Mac OS X and Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0 beta. Note: due to intermittent
        problems with Visual C++ 8.0 beta, and the presence of a variety of pre-release
        compiler builds, we are unable to guarantee compatibility until the final
        compiler is released.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;img alt=&quot;[]&quot; src=&quot;/gfx/boost_1_33_0.jpg&quot;/&gt;&lt;a href=&quot;/users/people/doug_gregor.html&quot;&gt;Douglas Gregor&lt;/a&gt;
      managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
      managed to keep the regression testing system working throughout the release
      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Rene Rivera and Jonathan
      Turkanis for greatly improving the quality of this release; Rene Rivera for
      the new Boost web page design; and Zoltan &amp;quot;cad&amp;quot; Juhasz for the new
      Boost logo.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.32.0</title><pubDate>Fri, 19 Nov 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Assignment, Minmax, Multi-Index, Numeric Conversion, Program
      Options, Range, Serialization, String, Tribool. Updated Libraries: Graph, MPL,
      Python, Signals, Utility, Test. Removed Libraries: Compose.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=284047</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_32_0.important___new_toolset_names&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Important
    - New Toolset Names&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The names of some the Boost.Build &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;toolsets&lt;/a&gt;
      have been changed to remove the &amp;quot;&lt;tt&gt;.&lt;/tt&gt;&amp;quot; (dot) character
      and to fix some other naming inconsistencies. For example, &lt;tt&gt;vc7.1&lt;/tt&gt;
      toolset was renamed to become &lt;tt&gt;vc-7_1&lt;/tt&gt;. Please refer to the
      &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;Supported Toolsets&lt;/a&gt;
      section of the installation guide for the complete list of the current toolset
      names. This change was made as a part of the effort to make the Boost distribution
      compatible with ISO 9660 level 2 requirements.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/assign/index.html&quot;&gt;Assignment Library&lt;/a&gt;:&lt;/span&gt; Filling
        containers with constant or generated data has never been easier, from Thorsten
        Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/minmax/index.html&quot;&gt;Minmax
        Library&lt;/a&gt;:&lt;/span&gt; Standard library extensions for simultaneous min/max and
        min/max element computations, from Herve Bronnimann.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt; Containers with multiple STL-compatible access
        interfaces, from Joaquin M Lopez Munoz.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/numeric/conversion/index.html&quot;&gt;Numeric
        Conversion Library&lt;/a&gt;:&lt;/span&gt; Optimized policy-based numeric conversions, from
        Fernando Cacciola.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/program_options.html&quot;&gt;Program
        Options Library&lt;/a&gt;:&lt;/span&gt; Access to configuration data given on command line,
        in config files and other sources, from Vladimir Prus.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; a
        new infrastructure for generic algorithms that builds on top of the new iterator
        concepts, from Thorsten Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/serialization/doc/index.html&quot;&gt;Serialization
        Library&lt;/a&gt;:&lt;/span&gt; Serialization/de-serialization of arbitrary C++ data structures
        to various formats including text, binary, and xml, from Robert Ramey.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/string/index.html&quot;&gt;String
        Algorithms Library&lt;/a&gt;:&lt;/span&gt; Collection of string related algorithms for case
        conversion, trimming, find/replace operations and more, from Pavol Droba.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/tribool.html&quot;&gt;Tribool&lt;/a&gt;:&lt;/span&gt; 3-state
        boolean type library, from Doug Gregor.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Compose: This deprecated library has been removed.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bundles.html&quot;&gt;bundled
            properties&lt;/a&gt; to the &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; class templates,
            greatly simplifying the introduction of internal vertex and edge properties.
          &lt;/li&gt;
          &lt;li&gt;
            The &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/leda_conversion.html&quot;&gt;LEDA
            graph adaptors&lt;/a&gt; have been ported to LEDA 4.5.
          &lt;/li&gt;
          &lt;li&gt;
            Added algorithms for &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/betweenness_centrality.html&quot;&gt;betweenness
            centrality&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bc_clustering.html&quot;&gt;betweenness
            centrality clustering&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/circle_layout.html&quot;&gt;circle
            layout&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/kamada_kawai_spring_layout.html&quot;&gt;undirected
            spring layout&lt;/a&gt; algorithms.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;MPL Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated to use the Boost Software License.
          &lt;/li&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;documentation&lt;/a&gt;,
            including a complete &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/refmanual.html&quot;&gt;reference
            manual.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Major interface changes and improvements, many of which are not backward
            compatible. Please refer to the &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/tutorial/changes-in-boost-1-32-0.html&quot;&gt;1.32
            changelog&lt;/a&gt; for the detailed information about upgrading to the
            new version.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated to use the Boost Software License.
          &lt;/li&gt;
          &lt;li&gt;
            a new, &lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/tutorial/doc/html/python/exposing.html#python.class_virtual_functions&quot;&gt;better
            method of wrapping classes with virtual functions&lt;/a&gt; has been implemented.
          &lt;/li&gt;
          &lt;li&gt;
            Support for the new Python Bool type, thanks to Daniel Holth.
          &lt;/li&gt;
          &lt;li&gt;
            Support for upcoming GCC symbol export control features have been folded
            in, thanks to Niall Douglas.
          &lt;/li&gt;
          &lt;li&gt;
            Improved support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;-like
            types.
          &lt;/li&gt;
          &lt;li&gt;
            Components used by other libraries have been moved out of &lt;tt&gt;python/detail&lt;/tt&gt;
            and into &lt;tt&gt;boost/detail&lt;/tt&gt; to improve dependency relationships.
          &lt;/li&gt;
          &lt;li&gt;
            Miscellaneous bug fixes and compiler workarounds.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; Introduced
        deterministic slot ordering, permitting slots to be connected at the beginning
        or end of slot groups or the slot list itself. Combiners may safely have
        state and are accessible from the signal.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt; class
        template &lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm#result_of&quot;&gt;result_of&lt;/a&gt;
        added.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
  &lt;ul&gt;
    &lt;li&gt;namespace names gets shorten; old one still supported till next
      release&lt;/li&gt;
    &lt;li&gt;added proper encoding of XML PCDATA&lt;/li&gt;
    &lt;li&gt;support for wide string comparison implemented&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    For complete list of changes see Test Library
    &lt;a href=&quot;/doc/libs/1_32_0/libs/test/doc/release_notes.html#v1_32_0&quot;&gt;release notes&lt;/a&gt;.
  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.regression_tests&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Regression tests&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release has been extensively tested on a variety of different compilers
      and platforms. It is known to contain no regressions against the previous reference
      release on the compilers and configurations tested. Please refer to the corresponding
      &lt;a href=&quot;http://www.meta-comm.com/engineering/boost-regression/1_32_0/index.html&quot;&gt;regression
      reports&lt;/a&gt; to see how well your compiler performs on the new Boost codebase.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;img alt=&quot;[]&quot; src=&quot;http://boost.sourceforge.net/photos/aleksey_gurtovoy2.jpg&quot;/&gt; &lt;a href=&quot;/users/people/aleksey_gurtovoy.html&quot;&gt;Aleksey
      Gurtovoy&lt;/a&gt; managed this release. &lt;a href=&quot;/doc/libs/1_32_0/more/release_procedures.htm&quot;&gt;Managing
      a release&lt;/a&gt; at all is an enormous job, and Aleksey always goes beyond
      merely meeting requirements by insisting on the highest possible quality. The
      Boost membership owes him a debt of gratitude.
    &lt;/p&gt;
    &lt;p&gt;
      This release wouldn't have been possible without the dedicated effort of many,
      many members of the Boost community who generously contributed their outstanding
      expertise, time and energy to making it happen. For patches, bug fixes, troubleshooting,
      expert advice, and prompt responses to the release manager's requests we thank:
    &lt;/p&gt;
    &lt;p&gt;
      David Abrahams, Misha Bergal, Jonathan Brandmeyer, Fernando Cacciola, Marshall
      Clow, Christopher Currie, Pavol Droba, Caleb Epstein, Eric Friedman, Jeff Garland,
      Michael Glassford, Doug Gregor, Joel de Guzman, Hubert Holin, Jaakko Jarvi,
      Hartmut Kaiser, Bronek Kozicki, Tarjei Knapstad, Toon Knapen, Aaron W. LaFramboise,
      Joaquin M Lopez Munoz, Christoph Ludwig, John Maddock, Paul Mensonides, Guillaume
      Melquiond, Thorsten Ottosen, Vladimir Prus, Robert Ramey, Rene Rivera, Gennadiy
      Rozental, Stefan Slapeta, Jonathan Turkanis, Pavel Vozenilek, Jonathan Wakely,
      Daryle Walker, Victor A. Wagner Jr. and Martin Wille.
    &lt;/p&gt;
    &lt;p&gt;
      Also, our special thanks go to: John Maddock for the managing the effort of
      converting the majority of the Boost libraries to the &lt;a href=&quot;/doc/libs/1_32_0/more/license_info.html&quot;&gt;Boost
      Software License&lt;/a&gt;, Eric Niebler and Joel de Guzman for taking on the
      important job of improving the Boost documentation's look and feel, and last,
      but not least, to our regression test runners, without whom we simply would
      never have released: Toon Knapen, Bronek Kozicki, Rene Rivera, Markus Schopflin,
      Stefan Slapeta, Victor A. Wagner Jr. and Martin Wille.
    &lt;/p&gt;
    &lt;p&gt;
      Thank you everybody!
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.31.0</title><pubDate>Mon, 26 Jan 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: enable_if, Variant. Updated Libraries: Date Time, Filesystem,
      Iterator, MultiArray, Python, Random Number, Regex, Spirit, Test. Deprecated
      Libraries: Compose.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=214915</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;div id=&quot;version_1_31_0.new_license&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New License&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      A unified &lt;a href=&quot;/doc/libs/1_31_0/more/license_info.html&quot;&gt;Boost Software
      License&lt;/a&gt; has been developed and will gradually replace the individual
      licenses for most Boost libraries. The new license offers better legal protection
      for both users and developers, and should speed user's legal reviews of Boost
      libraries. Dave Abrahams led the Boost effort to develop better licensing.
      The legal team was led by &lt;a href=&quot;http://cyber.law.harvard.edu/people/cabell/index.html&quot;&gt;Diane
      Cabell&lt;/a&gt;, Director, Clinical Programs, &lt;a href=&quot;http://cyber.law.harvard.edu&quot;&gt;Berkman
      Center for Internet &amp;amp; Society&lt;/a&gt;, Harvard Law School. &lt;a href=&quot;http://www.nixonpeabody.com/attorneys_detail1.asp?ID=121&quot;&gt;Devin
      Smith&lt;/a&gt;, attorney, &lt;a href=&quot;http://www.nixonpeabody.com/default.asp&quot;&gt;Nixon
      Peabody LLP&lt;/a&gt;, wrote the Boost License. Eva Chan, Harvard Law School,
      contributed analysis of issues and drafts of various legal documents.
    &lt;/p&gt;
    &lt;p&gt;
      Note: Many of the Boost libraries are still using earlier licenses, though
      all conform to the &lt;a href=&quot;/doc/libs/1_31_0/more/lib_guide.htm#license&quot;&gt;Boost
      License Requirements&lt;/a&gt;. After this release we will begin an effort to
      move toward uniform use of the new license.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.build_and_installation&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build and Installation&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        New &lt;a href=&quot;/doc/libs/1_31_0/more/getting_started.html&quot;&gt;Getting Started&lt;/a&gt;
        procedures ease download and installation, from Rene Rivera and others.
      &lt;/li&gt;
      &lt;li&gt;
        Improved support for libraries requiring &lt;a href=&quot;/doc/libs/1_31_0/more/separate_compilation.html&quot;&gt;separate
        compilation&lt;/a&gt;, from John Maddock and others.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/utility/enable_if.html&quot;&gt;enable_if&lt;/a&gt;:&lt;/span&gt; Selective
        inclusion of function template overloads, from Jaakko Jarvi, Jeremiah Willcock,
        and Andrew Lumsdaine. This is an important new technique which exploits the
        SFINAE (substitution-failure-is-not-an-error) principle.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/variant/index.html&quot;&gt;Variant Library&lt;/a&gt;:&lt;/span&gt; Safe,
        generic, stack-based discriminated union container, from Eric Friedman and
        Itay Maman.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/compose/index.htm&quot;&gt;Compose&lt;/a&gt;:&lt;/span&gt; This
        library has been deprecated and will be removed in a future release. Use
        &lt;a href=&quot;/doc/libs/1_31_0/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; or &lt;a href=&quot;/doc/libs/1_31_0/libs/lambda/doc/index.html&quot;&gt;Lambda&lt;/a&gt; instead.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/date_time/doc/index.html&quot;&gt;Date Time
        Library&lt;/a&gt;:&lt;/span&gt; A whole host of bug fixes, new features, and documentation
        improvements. See the Date Time Change History for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
        Library&lt;/a&gt;:&lt;/span&gt;
  Several added functions, including improved checking for
        directory and file name portability.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/iterator/doc/index.html&quot;&gt;Iterator
        Library&lt;/a&gt;:&lt;/span&gt; Major version upgrade, with interface as proposed for the
        C++ library TR, including an improved &lt;tt&gt;iterator_adaptor&lt;/tt&gt;
        design plus several new components, from David Abrahams, Jeremy Siek, and
        Thomas Witt.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt; The
        &lt;tt&gt;multi_array&lt;/tt&gt; class template now provides an element-preserving
        resize operation as well as default construction (see the &lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/doc/reference.html&quot;&gt;reference
        manual&lt;/a&gt; for more information).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for Python 2.3 and Intel C++ on Linux
          &lt;/li&gt;
          &lt;li&gt;
            Container &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/indexing.html&quot;&gt;Indexing
            Suite&lt;/a&gt; added.
          &lt;/li&gt;
          &lt;li&gt;
            injected constructors and wrapped function objects.
          &lt;/li&gt;
          &lt;li&gt;
            wrapping static data members.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wstring&lt;/span&gt;&lt;/code&gt; conversions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/args.html&quot;&gt;keyword
            arguments&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Better error messages, including name demangling for GCC.
          &lt;/li&gt;
          &lt;li&gt;
            Simpler &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/building.html&quot;&gt;build
            procedure&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;em&gt;...and more....&lt;/em&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/random/index.html&quot;&gt;Random Number
        Library&lt;/a&gt;:&lt;/span&gt; Interface changed to match the C++ &lt;a href=&quot;/doc/libs/1_31_0/libs/random/wg21-proposal.html&quot;&gt;TR
        proposal&lt;/a&gt;, from Jens Maurer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt; Completely
        new matching algorithm is now much faster than before, plus a selection of
        &lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/history.html&quot;&gt;new features and
        enhancements&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/spirit/index.html&quot;&gt;Boost.Spirit
        1.8.0&lt;/a&gt;:&lt;/span&gt;
  &lt;ul&gt;
    &lt;li&gt;Multiple grammar start rules&lt;/li&gt;
    &lt;li&gt;Multiple Scanner rules (no more scanner business woes)&lt;/li&gt;
    &lt;li&gt;More dynamic parsers&lt;/li&gt;
    &lt;li&gt;Predefined actors&lt;/li&gt;
    &lt;li&gt;Numerous bug fixes and QOI stuff&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;and more...&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    Starting from Spirit v1.8.0, ill conforming compilers will no longer be
    supported. If you are still using one of these older compilers, please use
    Spirit v1.6.x. See [@http://spirit.sf.net Spirit's Site] for more details.
  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
  &lt;ul&gt;
    &lt;li&gt;Free function template based test case&lt;/li&gt;
    &lt;li&gt;Custom exception translators support in execution monitor and
    register_exception_translator added for unit test framework&lt;/li&gt;
    &lt;li&gt;Added support for multi-module unit tests in automatic
    registration facility&lt;/li&gt;
    &lt;li&gt;Floating point comparison algorithm reworked (Is not backward
    compatible!!!)&lt;/li&gt;
    &lt;li&gt;Added support for custom users predicate returning both boolean
    result code and possibly error message&lt;/li&gt;
    &lt;li&gt;Documentation structure rework and update&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    For a complete list of changes see the Test Library
    &lt;a href=&quot;/doc/libs/1_31_0/libs/test/doc/release_notes.html#v1_31_0&quot;&gt;release notes&lt;/a&gt;.
  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.miscellaneous&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Miscellaneous&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Expanded testing and fixes for non-conforming compilers.
      &lt;/li&gt;
      &lt;li&gt;
        Web site hosting now provided by &lt;a href=&quot;http://www.sourceforge.net/&quot;&gt;SourceForge&lt;/a&gt;.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.2</title><pubDate>Tue, 19 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bugfix release
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=178835</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.boost-consulting.com&quot;&gt;Boost Consulting&lt;/a&gt; is now
      hosting Boost CVS mirrors - see our &lt;a href=&quot;/more/getting_started.html#CVS&quot;&gt;download
      page&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Backported changes to the &lt;a href=&quot;/libs/config/config.htm&quot;&gt;config system&lt;/a&gt;,
      to better handle new compiler releases.
    &lt;/li&gt;
    &lt;li&gt;
      Bugs in regression reporting in subproject tests were fixed.
    &lt;/li&gt;
    &lt;li&gt;
      Tests are now run in the context of the user's PATH environment settings
    &lt;/li&gt;
    &lt;li&gt;
      msvc-stlport and intel-win32-stlport toolsets now build static libraries with
      multithreading enabled, to be compatible with the STLPort builds.
    &lt;/li&gt;
    &lt;li&gt;
      intel-win32 toolset now handles &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
      correctly when intel is installed over msvc6.
    &lt;/li&gt;
    &lt;li&gt;
      Backported fixes from the main trunk which prevent errors building the &lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Boost.Test&lt;/a&gt; library in its default configuration.
    &lt;/li&gt;
    &lt;li&gt;
      Backported portability improvements for &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;checked_delete&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Locale support for metrowerks (requiring a statically-linked runtime) is more
      uniformly handled.
    &lt;/li&gt;
    &lt;li&gt;
      Backported &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;conversion/lexical_cast&lt;/a&gt;'s
      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt; fixes from the main trunk.
    &lt;/li&gt;
    &lt;li&gt;
      intel-linux-tools: added &lt;tt&gt;rt&lt;/tt&gt; to FINDLIBS in order to make
      the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      function available (backport of a patch in CVS HEAD).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/tools/regression/index.htm&quot;&gt;regression/compiler_status.cpp&lt;/a&gt;:
      backported fixes in error log links generation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.1</title><pubDate>Mon,  4 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Withdrawn bug fix release, fixes for Lambda, Spirit, MPL, Function, Config,
      Format, Regex, Smart Pointers, Python
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    This release was withdrawn on the 12 Aug 2003.
  &lt;/p&gt;
  &lt;p&gt;
    Fixes were made to the following libraries: * The &lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Boost.Lambda&lt;/a&gt;
    ..library is now usable with gcc-2.95.2 * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Boost.Spirit&lt;/a&gt;:&lt;/span&gt; 
  *
    Fixed. Using MSVC++6 (SP5), calling the assign action with a string value on
    parsers using the file_iterator will not work. * Fixed: using assign semantic
    action in a grammar with a multi_pass iterator adaptor applied to an std::istream_iterator
    resulted in a failure to compile under msvc 7.0. * Fixed: There is a bug in the
    &lt;tt&gt;range_run&amp;lt;CharT&amp;gt;::set(range&amp;lt;CharT&amp;gt; const&amp;amp; r)&lt;/tt&gt;
    function in &amp;quot;../boost/spirit/utility/impl/chset/range_run.ipp&amp;quot;. * Fixed:
    handling of trailing whitespace bug (ast_parse/pt_parse related) * Fixed: comment_p
    and end of data bug * Fixed: Most trailing space bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;~(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detach_clear&lt;/span&gt;&lt;/code&gt; bug * Fixed: mismatch closure
    return type bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_node_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_match_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; iterator bugs * Fixed a bug regarding thread
    safety of Phoenix/Spirit closures. * The Boost Template &lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;Metaprogramming
    Library (MPL)&lt;/a&gt;'s ..typeof implementation is now compatible with Metrowerks
    CodeWarrior Pro8. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Boost.Function&lt;/a&gt;:&lt;/span&gt; workaround
    for the new Borland patch (version 0x564) and MSVC++ .NET 2003. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Boost.Config&lt;/a&gt;&lt;/span&gt;, &lt;a href=&quot;/libs/format/doc/format.html&quot;&gt;Boost.Format&lt;/a&gt;,
    and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Boost.Regex&lt;/a&gt; ..have been adjusted
    to avoid warnings with GCC-3.3, and Boost.Format also now works with string types
    other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart
    Pointers&lt;/a&gt;:&lt;/span&gt; 
  * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;checked_delete&lt;/span&gt;&lt;/code&gt;
    now works on more platforms * Compatibility with the SunPro compiler * Added
    missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt; 
  * warning suppression for
    finicky compilers * fixed a crashing bug in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;raw_function&lt;/span&gt;&lt;/code&gt;
    facility when no keyword arguments were passed. * Improved conversion of NULL
    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;s to Python.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.0</title><pubDate>Wed, 19 Mar 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Filesystem, Optional, Interval, MPL, Spirit Updated Libraries:
      Smart Pointers, Utility, Date-Time, Function, Operators, Test
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=147682</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/doc/index.htm&quot;&gt;Filesystem Library&lt;/a&gt;&lt;/span&gt; added
      - Portable paths, iteration over directories, and other useful filesystem operations,
      from Beman Dawes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/doc/optional.html&quot;&gt;Optional Library&lt;/a&gt;&lt;/span&gt; added
      - A discriminated-union wrapper for optional values, from Fernando Cacciola.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/interval/doc/interval.htm&quot;&gt;Interval Library&lt;/a&gt;&lt;/span&gt;
  added
      - Extends the usual arithmetic functions to mathematical intervals, from Guillaume
      Melquiond, Herve Bronnimann and Sylvain Pion.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;MPL&lt;/a&gt;&lt;/span&gt; added - Template metaprogramming
      framework of compile-time algorithms, sequences and metafunction classes, from
      Aleksey Gurtovoy.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit Library&lt;/a&gt;&lt;/span&gt; added - An
      LL (unlimited lookahead) parser framework that represents parsers directly
      as EBNF grammars in inlined C++ source code, complete with semantic actions,
      ASTs and much more, from Joel de Guzman and team.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;&lt;/span&gt; -
      cast functions are now spelled &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#static_pointer_cast&quot;&gt;static_pointer_cast&lt;/a&gt;
      / &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#dynamic_pointer_cast&quot;&gt;dynamic_pointer_cast&lt;/a&gt;;
      &lt;a href=&quot;/libs/smart_ptr/enable_shared_from_this.html&quot;&gt;enable_shared_from_this&lt;/a&gt;
      added; shared_ptr::shared_ptr(), shared_ptr::reset(), weak_ptr::weak_ptr(),
      weak_ptr::reset() no longer throw; &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#get_deleter&quot;&gt;get_deleter&lt;/a&gt;
      added; weak_ptr::get() removed; make_shared is now spelled &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm#lock&quot;&gt;weak_ptr::lock()&lt;/a&gt;
      ; &lt;a href=&quot;/libs/smart_ptr/intrusive_ptr.html&quot;&gt;intrusive_ptr documentation&lt;/a&gt;
      added; some experimental undocumented shared_ptr features have been removed;
      a &lt;a href=&quot;/libs/smart_ptr/sp_techniques.html&quot;&gt;page describing some smart
      pointer programming techniques&lt;/a&gt; has been added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/utility/assert.html&quot;&gt;boost/assert.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/utility/current_function.html&quot;&gt;boost/current_function.hpp&lt;/a&gt;,
      &lt;a href=&quot;/libs/utility/throw_exception.html&quot;&gt;boost/throw_exception.hpp&lt;/a&gt;,
      &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;boost/checked_delete.hpp&lt;/a&gt;
      have been documented.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; -
      several fixes and small additions including an interface change to partial_date.
      See the Date-Time Change History for more details.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; - added
      support for assignment to zero (to clear) and comparison against zero (to check
      if empty).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/operators.htm#symmetry&quot;&gt;Operators Library&lt;/a&gt;&lt;/span&gt; -
      now takes advantage of named return value optimization (NRVO) when available,
      from Daniel Frey.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Regression Tests&lt;/a&gt; - Much expanded,
      plus a very nice &lt;a href=&quot;http://boost.sourceforge.net/regression-logs/&quot;&gt;summary
      page&lt;/a&gt; from Rene Rivera.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; - introduced
      following new facilities: &lt;ul&gt;
  &lt;li&gt;
  Automatic registration of unit tests &lt;/li&gt;
  &lt;li&gt;
          XML log format
      &lt;/li&gt;
  &lt;li&gt;
          XML report format &lt;/li&gt;
  &lt;li&gt;
          BOOST_CHECK_NO_THROW test tool &lt;/li&gt;
  &lt;li&gt;
          BOOST_BITWISE_CHECK test tool
      &lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
  For a complete list of changes see the Test Library &lt;a href=&quot;/libs/test/doc/release_notes.html#v1_30_0&quot;&gt;release
      notes&lt;/a&gt;. &lt;/p&gt;

    &lt;/li&gt;
    &lt;li&gt;
      Many fixes and enhancements to other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.29.0</title><pubDate>Thu, 10 Oct 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Date-Time, Dynamic Bitset, Format. Updated Libraries: Function,
      Multi-Array, Preprocessor, Python, Signals, uBLASH.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=137397</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; added
      - Dates, times, leap seconds, infinity, and more, from Jeff Garland.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/dynamic_bitset.html&quot;&gt;Dynamic Bitset&lt;/a&gt;&lt;/span&gt;
  added
      - A runtime sized version of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bitset&lt;/span&gt;&lt;/code&gt;
      class from Jeremy Siek and Chuck Allison.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/format/index.html&quot;&gt;Format Library&lt;/a&gt;&lt;/span&gt; added - Type-safe
      'printf-like' format operations, from Samuel Krempp.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Major
      syntactic changes have been made. Some old syntax and little-used features
      have been deprecated (and will be removed shortly), and the syntax for the
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; class template has been greatly
      improved on conforming compilers. Please see the compatibility note for more
      information.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/doc/index.html&quot;&gt;Multi-array Library&lt;/a&gt;&lt;/span&gt;
  added
      - Multidimensional containers and adaptors for arrays of contiguous data, from
      Ron Garcia.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
  Major
      upgrade, from Paul Mensonides.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; - Version
      2 is released, from Dave Abrahams and others. This is a major rewrite which
      works on many more compilers and platforms, with a completely new interface
      and lots of new features. Boost.Python v2 requires Python 2.2 or later.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/doc/index.html&quot;&gt;Signals Library&lt;/a&gt;&lt;/span&gt; added
      - Managed signals &amp;amp; slots callback implementation, from Doug Gregor.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; Major new
      version, including full unit test capabilities, from Gennadiy Rozental.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/doc/index.htm&quot;&gt;uBLAS Library&lt;/a&gt;&lt;/span&gt; added
      - Basic linear algebra for dense, packed and sparse matrices, from Joerg Walter
      and Mathias Koch.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.28.0</title><pubDate>Wed, 15 May 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Lambda, I/O State Saver. Updated Libraries: Configuration, Random
      Number, Smart Pointers, Function Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=123324</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      The Boost mailing lists are now also accessible as &lt;a href=&quot;/more/mailing_lists.htm#newsgroup&quot;&gt;newsgroups&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      A powerful &lt;a href=&quot;http://aspn.activestate.com/ASPN/Mail/Archives/boost/&quot;&gt;mailing
      list archive&lt;/a&gt; has been contributed by the &lt;a href=&quot;http://aspn.activestate.com/ASPN&quot;&gt;ActiveState
      Programmer Network&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Lambda Library&lt;/a&gt;&lt;/span&gt; added,
      from Jaakko Jarvi and Gary Powell. Define small unnamed function objects at
      the actual call site: for_each( a.begin(), a.end(), std::cout &amp;lt;&amp;lt; _1 &amp;lt;&amp;lt;
      ' ' );
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/io/doc/ios_state.html&quot;&gt;I/O State Saver Library added&lt;/a&gt;&lt;/span&gt; -
      Save I/O state to prevent jumbled data, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Configuration Library&lt;/a&gt;:&lt;/span&gt; User
      code should not use BOOST_NO_LIMITS.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Avoid
      compiler warnings.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Added
      shared_polymorphic_cast and shared_polymorphic_downcast.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Now
      supports function objects with the unary &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
      operator overloaded.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; Added
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      function.
    &lt;/li&gt;
    &lt;li&gt;
      The usual small fixes and tweaks.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.27.0</title><pubDate>Tue,  5 Feb 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Python, Integer, Function, Quaternions, Octonions, Smart
      Pointers, Preprocessor, Threads.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=77358</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Scott
      Snyder contributed inplace operator support.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Daryle
      Walker contributed enhancements to the &lt;a href=&quot;/libs/integer/integer.htm&quot;&gt;type
      selection templates&lt;/a&gt;, and added new compile-time &lt;a href=&quot;/libs/integer/doc/integer_mask.html&quot;&gt;bit
      mask&lt;/a&gt;, &lt;a href=&quot;/libs/integer/doc/static_log2.html&quot;&gt;binary logarithm&lt;/a&gt;,
      and &lt;a href=&quot;/libs/integer/doc/static_min_max.html&quot;&gt;extrema&lt;/a&gt; templates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; user
      may request that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; objects store a reference to a function
      object target instead of a copy, using &lt;a href=&quot;/libs/bind/ref.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. Stateless objects are optimized
      so that they require no dynamic storage.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;Quaternions&lt;/a&gt;:&lt;/span&gt; added
      support for GCC 2.95.x.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;Octonions&lt;/a&gt;:&lt;/span&gt; added
      support for GCC 2.95.x.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Peter
      Dimov contributed a new implementation that fixes some bugs and adds some features
      including &lt;a href=&quot;/libs/smart_ptr/compatibility.htm#threadsafe&quot;&gt;thread
      safety&lt;/a&gt; when manipulating the use count, &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#constructors&quot;&gt;custom
      delete functions&lt;/a&gt;, a new &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm&quot;&gt;weak_ptr&lt;/a&gt;,
      and shared_static_cast and shared_dynamic_cast.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
  changed
      macro prefix from BOOST_PREPROCESSOR to BOOST_PP, added support for list data
      structure manipulation, added examples, made library ANSI C friendly, added
      generalized &lt;a href=&quot;/libs/preprocessor/doc/ref/for.html&quot;&gt;repetition&lt;/a&gt;
      and &lt;a href=&quot;/libs/preprocessor/doc/ref/while.html&quot;&gt;iteration&lt;/a&gt; primitives,
      improved reference manual.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Threads Library&lt;/a&gt;:&lt;/span&gt; Mac
      Carbon implementation contributed by Mac Murrett.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to many libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.26.0</title><pubDate>Fri, 30 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Common Factor, Preprocessor. Updated Libraries: Iterator Adaptor,
      Random Number, Operators.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138095</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/common_factor.html&quot;&gt;Common Factor Library&lt;/a&gt;&lt;/span&gt;
  added.
      Greatest common divisor and least common multiple, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;&lt;/span&gt;
  added.
      Preprocessor metaprogramming tools including repetition and recursion, from
      Vesa Karvonen.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;:&lt;/span&gt; Added
      &lt;a href=&quot;/libs/utility/generator_iterator.htm&quot;&gt;generator iterator&lt;/a&gt;
      adaptor, from Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Removed
      iterator interface. Fixed overflows in uniform_int&amp;lt;&amp;gt;. Both changes cause
      random number sequences to differ compared to previous boost releases.
    &lt;/li&gt;
    &lt;li&gt;
      [phase library..&lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators.hpp&lt;/a&gt;:]
      Improvements from Daryle and Helmut Ziesel
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Build&lt;/a&gt;:&lt;/span&gt; Continuing
      improvements, including pre-built &lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Jam
      executables&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to a number of other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.25.1</title><pubDate>Mon,  5 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Thread, Function.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138097</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt; Continued
      improvements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Continued
      refinements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Final
      cleanup for upcoming the Boost Graph Library book.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes - tests now pass on most Win32 and POSIX systems including Linux and
      Solaris. Semaphore removed as too error prone.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; direct
      support for member function pointers and documentation updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://groups.yahoo.com/group/Boost-Users&quot;&gt;Boost-Users&lt;/a&gt;
      mailing list has been created to address topics of interest to users of Boost
      libraries.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl&quot;&gt;Boost
      Wiki web&lt;/a&gt; added. Provides a place for Boost users to openly discuss
      and document the use of Boost libraries. It is not officially maintained by
      Boost developers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.25.0</title><pubDate>Mon,  1 Oct 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Thread, Bind. Updated Libraries: Utility, Array, Config, Random
      Number, Math, Tokenizer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138098</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;&lt;/span&gt; added.
      Portable C++ multi-programming at last, from William Kempf.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/utility/base_from_member.html&quot;&gt;Base From Member&lt;/a&gt; added
      to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;. Support
      for the base from member idiom, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; and &lt;a href=&quot;/libs/bind/mem_fn.html&quot;&gt;mem_fn&lt;/a&gt;
      added - Generalized binders for function/object/pointers and member functions,
      from Peter Dimov.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;:&lt;/span&gt; Minor updates,
      from Nico Josuttis.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; major redesign
      with much improved and automated configuration of Boost libraries for specific
      compilers, from John Maddock.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Fixed
      bug when copying normal_distribution and improved the documentation, from Michael
      Stevens and Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; updated, now
      useable with many more compilers, plus three new special functions, from Hubert
      Holin, Eric Ford, and others.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;:&lt;/span&gt;
  fixes/enhancements
      to escaped_list_separator based on empty fields and tokens comments from Johan
      Nillson and Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      Coming Soon - A mailing list for Boost users!
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.24.0</title><pubDate>Sun, 19 Aug 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Tuple.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138099</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tuple/doc/tuple_users_guide.html&quot;&gt;Tuple Library&lt;/a&gt;&lt;/span&gt;
  added.
      Tuples ease definition of functions returning multiple values, and more, from
      Jaakko Jarvi.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to some other libraries.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;&lt;/span&gt; added.
      Preliminary release of an innovative build system for Boost libraries, from
      Dave Abrahams and others.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/formal_review_schedule.html&quot;&gt;Formal Review Schedule&lt;/a&gt;
      added. Shows current, future, and recent past review dates.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.23.0</title><pubDate>Fri,  6 Jul 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Any, Function, Tokenizer, Special functions, Octonions, Quaternions.
      Updated Library: Smart Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138102</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/any/index.html&quot;&gt;Any Library&lt;/a&gt;&lt;/span&gt; added. Safe, generic
      container for single values of different value types, from Kevlin Henney.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; added.
      Function object wrappers for deferred calls or callbacks, from Doug Gregor.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;&lt;/span&gt; added.
      Break a string into a series of tokens, from John Bandela.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; added, from
      Hubert Holin.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  shared_ptr
      polymorphic pointers now work on more broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      IBM/Aix Compiler status table contributed by Toon Knapen.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to a number of other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.22.0</title><pubDate>Fri, 25 May 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libary: CRC. Updated Libraries: Graph, Integer, Regex, Smart Pointer, Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138104</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/crc/index.html&quot;&gt;CRC Library&lt;/a&gt;&lt;/span&gt; added. Compute
      cyclic redundancy codes from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;Integer Traits&lt;/a&gt;:&lt;/span&gt; added
      wchar_t specialization, minor portability fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  fixed
      bugs, tightened requirements, added examples.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; added
      checked_delete() and checked_array_delete() functions.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.2</title><pubDate>Tue, 24 Apr 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Compatibility. Updated Libraries: Random Number, Integer, Graph.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138108</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/compatibility/index.html&quot;&gt;Compatibility Library&lt;/a&gt;&lt;/span&gt;
  added:
      Help for non-conforming standard libraries missing CXX headers from Ralf Grosse-Kunstleve,
      and help for missing standard library &amp;lt;limits&amp;gt; header from Jens Maurer.
      (These are unreviewed implementation libraries, treated as maintenance steps
      only.)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Split
      into separate headers, updated documentation, added lagged_fibonacci generator.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Minor
      portability update.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
  Changed
      algorithm interfaces to use named parameters technique. Added graph isomorphism
      algorithm.
    &lt;/li&gt;
    &lt;li&gt;
      Download refinements - files now available from either FTP or web server.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://sourceforge.net/tracker/?group_id=7586&quot;&gt;Tracker&lt;/a&gt;
      Added: View and submit bug, support, and feature requests.
    &lt;/li&gt;
    &lt;li&gt;
      Minor portability fixes in several other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.1</title><pubDate>Wed, 14 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Python, Regex.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138111</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      New download page. The .zip and .tar.gz files now live on the SourceForge ftp
      site.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
      docs fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Minor
      docs fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
      fixes.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.0</title><pubDate>Fri,  9 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Iterator Adaptor, Pool, Test. Updated Libraries: Graph, Python,
      Regular Expression, Type Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;&lt;/span&gt; added.
      Adapt a base type into a standard conforming iterator, and more, from Dave
      Abrahams, Jeremy Siek, and John Potter.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/doc/index.html&quot;&gt;Pool Library&lt;/a&gt;&lt;/span&gt; added. Memory
      pool management from Steve Cleary.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; added. Support
      for program testing and execution from Beman Dawes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/generic_programming.html&quot;&gt;Generic Programming Techniques&lt;/a&gt;
      page added, contributed by Dave Abrahams.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
  Updated
      use of iterator adaptors. Changed &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;
      &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;edge_descriptor&lt;/span&gt;&lt;/code&gt;
      to improve semantics for multigraphs. Moved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_iterator_generator&lt;/span&gt;&lt;/code&gt;
      from namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; and added &lt;a href=&quot;/libs/graph/doc/adjacency_iterator.html&quot;&gt;documentation&lt;/a&gt;.
      Renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to &lt;a href=&quot;/libs/graph/doc/incremental_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
      better matching graph literature terminology. Cleaned up interface of &lt;a href=&quot;/libs/graph/doc/connected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connected_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and created separate &lt;a href=&quot;/libs/graph/doc/strong_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strong_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      function using Tarjan's more efficient algorithm. Fixed documentation figures
      for &lt;a href=&quot;/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      and &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
      Added docs for &lt;a href=&quot;/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      algorithm.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; upgraded.
      Better compatibility with Python 2.0, NULL pointers and smart-pointers get
      converted to/from python None, massive documentation review/revision.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes for Unicode platforms.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits Library&lt;/a&gt;&lt;/span&gt;
  upgraded:
      Major revision.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.2</title><pubDate>Sat, 10 Feb 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Array traits, Graph, Integer, Random Number, Rational Number,
      Regular Expression, Smart Pointer, Timer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138112</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Array traits: minor portability fix.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
      Changes to &lt;a href=&quot;/libs/graph/doc/breadth_first_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      re: &lt;a href=&quot;/libs/graph/doc/BFSVisitor.html&quot;&gt;BFSVisitor&lt;/a&gt;, added
      max flow algorithms &lt;a href=&quot;/libs/graph/doc/edmunds_karp_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmunds_karp_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      and &lt;a href=&quot;/libs/graph/doc/push_relabel_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;push_relabel_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, added &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; graph class, added
      &lt;a href=&quot;/libs/graph/doc/filtered_graph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filtered_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      adaptor
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; minor
      fixes to integer.hpp and integer_test.cpp
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;microsoft_vcpp.html&quot;&gt;Portability Hints: Microsoft Visual C++&lt;/a&gt;
      added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Minor
      portability fixes
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;:&lt;/span&gt;
  documentation
      updates, efficiency improvements, co-operates with user-defined types, regression
      tests
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  shared_ptr
      example added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/timer/index.html&quot;&gt;Timer Library&lt;/a&gt;:&lt;/span&gt; changed to
      an all inline implementation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.1</title><pubDate>Wed, 10 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Compressed Pair, Graph Library, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/compressed_pair.hpp&quot;&gt;compressed_pair.hpp&lt;/a&gt; minor update
      fixes test failures of other libraries under VC++.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      Minor website fixes including missing files in boost_all.zip.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.0</title><pubDate>Sat,  6 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Conversion. Updated Libraries: Array, Graph, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/index.html&quot;&gt;Conversion Library&lt;/a&gt;&lt;/span&gt; added
      - &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;lexical_cast&lt;/a&gt;
      headers from Dave Abrahams and Kevlin Henney.
    &lt;/li&gt;
    &lt;li&gt;
      Web site moved to a larger host after the old ISP collapsed unexpectedly.
    &lt;/li&gt;
    &lt;li&gt;
      Regression tests now include execution testing. See &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler
      Status&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/discussion_policy.htm&quot;&gt;Discussion Policy&lt;/a&gt; page added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; minor documentation
      improvements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.19.0</title><pubDate>Sun, 10 Dec 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Concept Check, Python, Static Assert, Property Map Concepts.
      Updated Libraries: Graph, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/concept_check.htm&quot;&gt;Concept Check Library&lt;/a&gt;&lt;/span&gt; added
      - tools for generic programming from Jeremy Siek.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; added
      - reflects C++ classes and functions into Python, from Dave Abrahams.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/static_assert/static_assert.htm&quot;&gt;Static Assert Library&lt;/a&gt;&lt;/span&gt; added
      - compile time assertions from John Maddock
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/property_map.html&quot;&gt;Property Map Concepts&lt;/a&gt;&lt;/span&gt; added
      - interfaces which map key objects to value objects from Jeremy Siek.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and Guidelines&lt;/a&gt;
      - directory name policy added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/faq.htm&quot;&gt;FAQ&lt;/a&gt; updated.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.3</title><pubDate>Sat, 18 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Regular Expression, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      fixes and additions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; Borland compiler fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; changed to no longer expose
      names to the global namespace.
    &lt;/li&gt;
    &lt;li&gt;
      BeOS5/Intel compiler status contributed by John Maddock.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; added
      two additional test programs.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.2</title><pubDate>Fri,  3 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Case, Graph, Regular Expression, Configuration. Utility
      library split into separate libraries.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;Cast Library&lt;/a&gt;&lt;/span&gt; Fix numeric_cast&amp;lt;&amp;gt;
      bugs with floating types.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; more
      fixes for broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Boost Header Dependencies page added.
    &lt;/li&gt;
    &lt;li&gt;
      Terminology change: Several headers previously lumped together as a &amp;quot;utility&amp;quot;
      library are now considered separate libraries. For historical reasons, their
      non-header files still live in the &amp;quot;utility&amp;quot; sub-directory.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.1</title><pubDate>Sun, 15 Oct 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Random, Regular Expression, Configuration.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;,
      &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;, and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;: Minor fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; additions
      for various compiler foibles.
    &lt;/li&gt;
    &lt;li&gt;
      Portability Hints: Borland C++ 5.5.1 from Jens Maurer added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; updated
      for latest versions of several compilers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.0</title><pubDate>Thu, 28 Sep 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Graph, Regular Expression. Updated Libraries: Array, Functional,
      Utility, Integer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      Preliminary release of two important new libraries:
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
          Generic graph components and algorithms from Jeremy Siek and a University
          of Notre Dame team.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; -
          Text pattern matching in all its glory from John Maddock.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Other changes:
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; improvements
          reflecting formal review comments.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href=&quot;/boost/functional.hpp&quot;&gt;functional.hpp&lt;/a&gt; compiler workarounds
          added.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;/code&gt;
          added to utility.hpp for easier handling of std::pair&amp;lt;&amp;gt; return values.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;&lt;/span&gt; improved
          handling of 64-bit integers.
        &lt;/li&gt;
        &lt;li&gt;
          Minor web site page updates.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.17.0</title><pubDate>Thu,  3 Aug 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Library: Array. Updated Libraries: Array Traits, Random Number, Smart
      Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; added - An
      STL compliant container wrapper for arrays of constant size from Nicolai Josuttis.
    &lt;/li&gt;
    &lt;li&gt;
      array traits header renamed array_traits.hpp (was array.hpp).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; more
      minor changes to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  performance
      reducing exception-specifications removed.
    &lt;/li&gt;
    &lt;li&gt;
      Compiler and test program fixes for call_traits, compressed_pair, and type_traits.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; to clear compiler warning
      messages.
    &lt;/li&gt;
    &lt;li&gt;
      Linux &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt; added.
    &lt;/li&gt;
    &lt;li&gt;
      Boost source code now lives in a publicly accessible Concurrent Versions System
      (CVS) repository.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.16.1</title><pubDate>Wed,  5 Jul 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Integer, Random Number, Cast, Call Traits, Operators.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;&lt;/span&gt; library: fixed
      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; bug, added &lt;a href=&quot;/libs/integer/cstdint_test.cpp&quot;&gt;cstdint_test.cpp&lt;/a&gt;,
      updated &lt;a href=&quot;/libs/integer/cstdint.htm&quot;&gt;docs&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; minor
      fixes to &lt;a href=&quot;/boost/random.hpp&quot;&gt;random.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/random/random_test.cpp&quot;&gt;random_test.cpp&lt;/a&gt;
      to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; with more Microsoft compiler
      workarounds.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits docs&lt;/a&gt;,
      added &lt;a href=&quot;/libs/utility/call_traits_test.cpp&quot;&gt;call_traits_test.cpp&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Cleanup and bug fixes for &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;
      and &lt;a href=&quot;/libs/utility/operators_test.cpp&quot;&gt;operators_test.cpp&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.16.0</title><pubDate>Wed, 28 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Functional, iterator header, Updated Libraries: Random Number,
      Rational, Cast, Smart Pointer, Config.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      Added &lt;a href=&quot;/libs/functional/index.html&quot;&gt;Functional Library&lt;/a&gt; -
      Enhanced function object adaptors from Mark Rodgers.
    &lt;/li&gt;
    &lt;li&gt;
      Added missing &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;
      files.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators docs&lt;/a&gt; and
      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      New &lt;a href=&quot;/boost/iterator.hpp&quot;&gt;iterator.hpp&lt;/a&gt; header.
    &lt;/li&gt;
    &lt;li&gt;
      Minor &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/rational/rational_example.cpp&quot;&gt;rational_example.cpp&lt;/a&gt;,
      and &lt;a href=&quot;/libs/integer/integer_traits_test.cpp&quot;&gt;integer_traits_test.cpp&lt;/a&gt;
      changes to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Revised &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;: removed implicit_cast,
      plus fixes for broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Minor &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; workaround for
      some GCC builds.
    &lt;/li&gt;
    &lt;li&gt;
      Several &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes for Microsoft,
      Intel, and other compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Added &lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt; page
      and test program.
    &lt;/li&gt;
    &lt;li&gt;
      Added Experimental &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;
      page showing what library works with which compilers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.15.1</title><pubDate>Wed, 21 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Cast, Operators, Config.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
    fix. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for
    Microsoft compilers. The 1.15.0 operators changes seem to have introduced incompatibilities.
    We are working on fixing them, and have started to build a regression test to
    prevent similar future problems.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.15.0</title><pubDate>Sat, 17 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Library: Random Number. Updated Libraries: Utility, Config, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt; from Jens
    Maurer added. Updated utility library &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
    eliminates code bloat. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
    and &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; for Microsoft compilers.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.3</title><pubDate>Mon, 29 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Config, Type Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for Borland
    compilers. Minor fix to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_traits&lt;/span&gt;&lt;/code&gt;
    example. Minor web site fixes. &lt;a href=&quot;/more/formal_review_process.htm&quot;&gt;Library
    Formal Review Process&lt;/a&gt; page added.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.2</title><pubDate>Tue,  9 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Documentation updates.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    No libraries updated. &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and
    Guidelines&lt;/a&gt; expanded, &lt;a href=&quot;/more/submission_process.htm&quot;&gt;Library
    Submission Process&lt;/a&gt; added.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.1</title><pubDate>Fri, 17 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Rational, Smart Pointer, Call Traits, Compressed Pair, Type
      Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Minor fix to &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;. Minor documentation
    changes to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer&lt;/a&gt;
    Library and &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;,
    &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;, and type_traits.
    Updated &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Guidelines&lt;/a&gt; and &lt;a href=&quot;/users/people.html&quot;&gt;People&lt;/a&gt; page.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.0</title><pubDate>Sun,  5 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Integer. Experimental libraries moved to vault.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt; status upgraded
    after removing bin_bun.hpp. The &amp;quot;Experimental&amp;quot; library category has
    been removed; the boost files/vault now serves the purpose. Minor fix to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; line endings.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.13.0</title><pubDate>Tue, 29 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Libraries: Utility, Type Traits, Call Traits, Compressed Pair.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Adds &lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility Library&lt;/a&gt; &lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;type_traits&lt;/a&gt;,
    &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;, and &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;
    headers from John Maddock, Steve Cleary and Howard Hinnant.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.12.0</title><pubDate>Wed, 23 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Library: Integer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Adds a &lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;integer_traits&lt;/a&gt;
    header from Jens Maurer to the &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer
    Library&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.2</title><pubDate>Mon, 21 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Smart Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;/libs/smart_ptr/smarttests.htm&quot;&gt;Smart pointer timings&lt;/a&gt; added
    (thanks to Gavin Collings). Minor fix to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt;
    sample program. Minor fixes to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.1</title><pubDate>Wed,  2 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Minor fix for cast.hpp.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Minor fix to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; (thanks to Doncho
    Angelov).
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.0</title><pubDate>Tue,  1 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Rational Number. Updated Libraries: Case, Config, Smart Pointer,
      Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Added &lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;.
    Minor fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;,
    &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;,
    and to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt; sample programs.
    Minor site cleanup (thanks to Paul Baxter).
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.10.4</title><pubDate>Fri, 31 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Smart Pointer, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Minor fixes to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.10.3</title><pubDate>Thu, 30 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Compse, Operators, Cast, Config, Smart Pointer First release
      with a version number.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;p&gt;
    Minor fixes to the compose library examples, &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators
    documentation&lt;/a&gt;, &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;,
    &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;, &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;,
    &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;, and &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;.
  &lt;/p&gt;
  &lt;p&gt;
    This is the first release with a version number. The version numbering scheme
    is xxx.yyy.zzz.
  &lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;
      xxx = Major version
    &lt;/li&gt;
    &lt;li&gt;
      yyy = New library or feature added
    &lt;/li&gt;
    &lt;li&gt;
      zzz = Bug fixes only
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Old Versions</title><pubDate>Tue, 14 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Early releases of boost without version numbers.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  &lt;div id=&quot;old_versions.14_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;14 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;Operators.hpp&lt;/a&gt; &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;documentation&lt;/a&gt;
      improved.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.13_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;13 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added iterator operators and helpers to &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;header
      operators.hpp&lt;/a&gt;, together with an iterator test program. This header
      is maturing into something really useful for building arithmetic or iterator
      user-defined types, so look it over even if you browsed one of the earlier
      versions.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.11_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added next() and prior() to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;header utility.hpp&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.8_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;8 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor improvements to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt;
      library: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt;,
      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;&lt;/code&gt;,
      and specializations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; and
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;less&lt;/span&gt;&lt;/code&gt; now provided.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.18_nov_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;18 Nov 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor improvements made to the &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator
      templates&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.15_nov_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;15 Nov 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator templates&lt;/a&gt; have been
      added to the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.11_oct_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Oct 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt; library
      and &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes to improve portability.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.26_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;26 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor updates to several libraries: * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_downcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
      library &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; header now works for
      multiple inheritance cases. * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions added in the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart
      pointer&lt;/a&gt; library. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/boost/timer.hpp&quot;&gt;timer.hpp&lt;/a&gt;&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_max&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_min&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      functions added to the &lt;a href=&quot;/libs/timer/index.html&quot;&gt;timer&lt;/a&gt; library.
      * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt;&lt;/span&gt; library bin_ubin.hpp
      changes to eliminate compiler warning messages. * &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
      minor changes to aid library developers. No impact on library users.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.3_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;3 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cast functions in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
      library were considerably simplified.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cast functions initially in &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;
      have been moved to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, still in
      the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The category &amp;quot;Experimental&amp;quot; has been added to the &lt;a href=&quot;/libs/libraries.htm&quot;&gt;library&lt;/a&gt;
      page. The &lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt; library is
      the first entry.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;p&gt;
    ...And the remainder are lost to the mists of time (for now, anyway)....
  &lt;/p&gt;
&lt;/div&gt;</description></item></channel>
</rss>