[article Version 1.45.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose New Libraries: Updated Libraries: ]
    [authors [Dawes, Beman]]
    [last-revision ]
]

[include ext.qbk]

[/ TODO: Check download link on release.]
[download http://sourceforge.net/projects/boost/files/boost/1.45.0/]

[/
    When adding libraries:

    1. Libraries are listed in alphabetical order.
    2. Besides the dedicated entry, the lib name should be added to the
       [purpose] section at the beginning of the page.
]

[section Updated Libraries]

* [phrase library..[@/libs/config/index.html Config]:]
  * Added new defect macros, `BOOST_NO_VARIADIC_MACROS` and `BOOST_NO_NUMERIC_LIMITS_LOWEST`.
  * Minor fixes
    ([@https://svn.boost.org/trac/boost/ticket/4670 #4670], 
    [@https://svn.boost.org/trac/boost/ticket/4563 #4563],
    [@https://svn.boost.org/trac/boost/ticket/4474 #4474],
    [@https://svn.boost.org/trac/boost/ticket/4508 #4508]).

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Fixed a hanging problem with
    [@/libs/flyweight/doc/tutorial/configuration.html#intermodule_holder `intermodule_holder`]
    in Win32 platforms related to a Boost.Interprocess issue described at
    ticket [@https://svn.boost.org/trac/boost/ticket/4606 #4606].
  * Removed an internal assertion incompatible with program termination via
    `std::exit`. 

* [phrase library..[@/libs/fusion/index.html Fusion]:]
  * Added `BOOST_FUSION_ADAPT_ADT`, `BOOST_FUSION_ADAPT_TPL_ADT`,
    `BOOST_FUSION_ADAPT_ASSOC_ADT` and `BOOST_FUSION_ADAPT_ASSOC_TPL_ADT`.

* [phrase library..[@/libs/graph/index.html Graph]:]
  * Added Stoer-Wagner min-cut algorithm contributed by Daniel Trebbien.
  * Added implicit graph (implicit_graph) and A* (astar_maze) examples
    contributed by W. P. McNeill.
  * Added bundled property support for graph properties.
  * Fixed bugs
    [@https://svn.boost.org/trac/boost/ticket/4556 #4556],
    [@https://svn.boost.org/trac/boost/ticket/4662 #4622] and
    [@https://svn.boost.org/trac/boost/ticket/4715 #4715]
    plus others not in Trac.
  * Fixed documentation bugs
    [@https://svn.boost.org/trac/boost/ticket/4731 #4731] and
    [@https://svn.boost.org/trac/boost/ticket/4737 #4737].

* [phrase library..[@/libs/multi_array/index.html MultiArray]:]
  * Fixes for bugs
    [@https://svn.boost.org/trac/boost/ticket/3581 #3581],
    [@https://svn.boost.org/trac/boost/ticket/3820 #3820],
    [@https://svn.boost.org/trac/boost/ticket/3989 #3989],
    [@https://svn.boost.org/trac/boost/ticket/4032 #4032],
    plus other bugs not in Trac.
  * Added new examples and test cases.

* [phrase library..[@/libs/msm/index.html Meta State Machine]:]
  * [@/doc/libs/1_45_0/libs/msm/doc/HTML/ch08.html#d0e2995 Support for serialization].
  * [@/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s04.html#eUML-reuse-functor
	Possibility to use normal] functors (from functor front-end) in eUML.
  * [@/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s05.html#backend-fsm-constructor-args
    New constructors where substates / submachines can be taken as
    arguments]. This allows passing arguments to the constructor of a
    submachine.
  * Bugfixes (anonymous transitions)

* [phrase library..[@/libs/type_traits/index.html TypeTraits]:]
  * Added new traits add_rvalue_reference, add_lvalue_reference and common_type.
  * Minor fixes to is_signed, is_unsigned and is_virtual_base_of.

* [phrase library..[@/libs/wave/index.html Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

* [phrase library..[@/libs/numeric/ublas/index.html uBLAS]:]
  * Tickets closed:
    * [@https://svn.boost.org/trac/boost/ticket/4410 #4410],
    * [@https://svn.boost.org/trac/boost/ticket/3397 #3397],
    * [@https://svn.boost.org/trac/boost/ticket/795 #795],
    * [@https://svn.boost.org/trac/boost/ticket/3514 #3514],
  * Mixed types operation are possible and new tests added (like matrix<complex>+matrix<double>),
  * New features:
    * a new size<> operator is available. For example size<1>(A+B) give the number of rows of the sum of matrices A and B,

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]



