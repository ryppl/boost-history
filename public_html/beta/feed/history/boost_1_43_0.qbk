[article Version 1.43.0
    [quickbook 1.4]
    [source-mode c++]
    [purpose Updated: Accumulators, Array, Asio, Fusion, Iostreams,
        Multi-index Containers, Random, Range, Spirit, Thread, Unordered,
        Uuid, Wave, Xpressive, the build system and quickbook.]
    [authors [Dawes, Beman]]
    [last-revision ]
]

[include ext.qbk]

[/ TODO: Check download link on release.]
[download http://sourceforge.net/projects/boost/files/boost/1.43.0/]

[/
    When adding libraries:

    1. Libraries are listed in alphabetical order.
    2. Besides the dedicated entry, the lib name should be added to the
       [purpose] section at the beginning of the page.
]

[section Updated Libraries]

* [phrase library..[@/libs/accumulators/index.html Accumulators]:]
  * Avoid premature template evaluation in operator overload return types.

* [phrase library..[@/libs/array/index.html Array]:]
  * Added support for SunCC compiler.
  * Added 'fill' member function.
  * Changed exception code to use boost::throw_exception.

* [phrase library..[@/libs/asio/index.html Asio]:]
  * Improved performance.
  * Reduced compile times.
  * Reduced the size of generated code.
  * Extended the guarantee that background threads don't call user code to all
    asynchronous operations
    ([@https://svn.boost.org/trac/boost/ticket/3923 #3923]).
  * Changed to use edge-triggered epoll on Linux.
  * Changed to use `timerfd` for dispatching timers on Linux, when available.
  * Changed to use one-shot notifications with kqueue on Mac OS X and BSD
    platforms.
  * Added a bitmask type `ip::resolver_query_base::flags` as per the TR2 proposal.
    This type prevents implicit conversion from `int` to `flags`, allowing the
    compiler to catch cases where users incorrectly pass a numeric port number as
    the service name.
  * Added `#define NOMINMAX` for all Windows compilers. Users can define
    `BOOST_ASIO_NO_NOMINMAX` to suppress this definition
    ([@https://svn.boost.org/trac/boost/ticket/3901 #3901]).
  * Fixed a bug where 0-byte asynchronous reads were incorrectly passing an
    `error::eof` result to the completion handler
    ([@https://svn.boost.org/trac/boost/ticket/4023 #4023]).
  * Changed the `io_control()` member functions to always call `ioctl` on the
    underlying descriptor when modifying blocking mode
    ([@https://svn.boost.org/trac/boost/ticket/3307 #3307]).
  * Changed the resolver implementation to longer require the typedefs
    `InternetProtocol::resolver_query` and `InternetProtocol::resolver_iterator`,
    as neither typedef is part of the documented `InternetProtocol` requirements.
    The corresponding typedefs in the `ip::tcp`, `ip::udp` and `ip::icmp` classes
    have been deprecated.
  * Fixed out-of-band handling for reactors not based on `select()`.
  * Added new `BOOST_ASIO_DISABLE_THREADS` macro that allows Asio's threading
    support to be independently disabled.
  * Minor documentation improvements.

* [phrase library..[@/libs/fusion/index.html Fusion]:]
  * Added new macros for adapting or defining custom types. See the
    [@/libs/fusion/doc/html/fusion/change_log.html Changelog] for details.
  
* [phrase library..[@/libs/iostreams/index.html Iostreams]:]
  * Minor fixes
    ([@https://svn.boost.org/trac/boost/ticket/3839 #3839],
    [@https://svn.boost.org/trac/boost/ticket/3953 #3953],
    [@https://svn.boost.org/trac/boost/ticket/3723 #3723],
    [@https://svn.boost.org/trac/boost/ticket/3969 #3969],
    [@https://svn.boost.org/trac/boost/ticket/2505 #2505]).

* [phrase library..[@/libs/multi_index/doc/index.html Multi-index Containers]:]
  * [@/libs/serialization/doc/serialization.html#constructors Serialization
    of non default constructible values] is now properly
    supported through user-provided facilities `save_construct_data`
    and `load_construct_data`. `multi_index_container` serialization
    [@/libs/serialization/doc/tutorial.html#versioning class version]
    has been bumped from 1 to 2. 

* [phrase library..[@/libs/proto/index.html Proto]:]
  * Minor change in behavior: non-const expression self-assignment creates
    an assign node. See Proto's
    [@/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43 Release Notes]
    for details.
  * Minor change to recommended expression extension mechanism: use
    `BOOST_PROTO_EXTENDS_USING_ASSIGN()`. See Proto's
    [@/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43 Release Notes]
    for details.
  * Fix error in invocation of callable monomorphic function objects in Proto transforms.
  * Fix misc const correctness issues, work around fusion bug.
  * Add non-const function call overloads to proto terminals.
  * Add a default constructor to `proto::literal<>`.
  * Do not use deprecated config macros.
  * Add `proto::assert_matches()` function and friends to [^<boost/proto/debug.hpp>].
  * `functional::make_expr<>` and `functional::unpack_expr<>` return const-qualified
    rvalues.
  * Add documentation for Expr and Domain concepts.

* [phrase library..[@/libs/random/index.html Random]:]
  * Put the implementation of random_device in a compiled lib,
    and added Windows support.
  * Rewrote the documentation using Quickbook/Doxygen/Boostbook
    and brought it up to date.

* [phrase library..[@/libs/range/index.html Range]:]
  * All of the features from the Boost.RangeEx review have been merged
    into Boost.Range.
  * New functionality:
    * Range Adaptors
    * Range Algorithms
    * New functions: irange, istream_range, join, combine.
  * Removed singularity from the Range Concepts.

* [phrase library..[@/libs/spirit/index.html Spirit]:]
  Spirit V2.3, see the
  '[@/doc/libs/1_44_0/libs/spirit/doc/html/spirit/what_s_new.html What's New]'
  section for details.

* [phrase library..[@/libs/thread/index.html Thread]:]
  * Uses `boost::throw_exception` for all exceptions except `thread_interrupted`
  * Added fix for issue 2742
  * Optimizations to mutex locks and `call_once`

* [phrase library..[@/libs/unordered/index.html Unordered]:]
  * `erase_return_void` is now `quick_erase`
    ([@http://svn.boost.org/trac/boost/ticket/3966 #3966]).

* [phrase library..[@/libs/uuid/index.html Uuid]:]
  * Split generators into separate files.
  * Fixed bug in basic_random_generator
    ([@https://svn.boost.org/trac/boost/ticket/3971 #3971]).
  * Updated documentation.

* [phrase library..[@/libs/wave/index.html Wave]:]
  See the [@/libs/wave/ChangeLog Changelog] for details.

* [phrase library..[@/libs/xpressive/index.html Xpressive]:]
  * Add missing include to [^<boost/xpressive/regex_error.hpp>].

[endsect]

[section Build System]

* When cross-compiling to GNU targets, static libraries are properly created.
  Previously, using such libraries resulted in [^Archive has no index] error.
* The naming of DLL and import libraries with gcc compiler on Windows, both
  mingw and cygwin, now matches default conventions of those environments.
  Previously, the naming scheme was the same as for other Windows compilers.
  
[endsect]

[section Updated Tools]

* [phrase library..[@/tools/quickbook/index.html Quickbook]:]
  * Unicode escape characters.
  * Support the UTF-8 byte order mark.
  * Disallow `[` in simple markup. Fixes some errors with mismatched punctuation.
  * Add a command line flag (`-D`) to define macros at the command line.
  * Improved post-processor output.
  * Check that `[section]` and `[endsect]` tags are balanced in templates.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

