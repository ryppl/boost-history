[article Version 1.46.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose New Libraries: Updated Libraries: ]
    [authors [Dawes, Beman]]
    [last-revision ]
]

[include ext.qbk]

[/ TODO: Check download link on release.
[download http://sourceforge.net/projects/boost/files/boost/1.46.0/]
]

[/
    When adding libraries:

    1. Libraries are listed in alphabetical order.
    2. Besides the dedicated entry, the lib name should be added to the
       [purpose] section at the beginning of the page.
]

[section New Libraries]

* [phrase library..[@/libs/icl/index.html Icl]:]
  Interval Container Library, interval sets and maps and aggregation 
  of associated values, from Joachim Faulhaber.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/array/index.html Array]:]
  * Added support for cbegin/cend
    ([@https://svn.boost.org/trac/boost/ticket/4761 #4761])
  * Fixed a problem with the Sun compiler
    ([@https://svn.boost.org/trac/boost/ticket/4757 #4757])

* [phrase library..[@/libs/bind/index.html Bind]:]
  * `make_adaptable` now documented
    ([@https://svn.boost.org/trac/boost/ticket/4532 #4532])

* [phrase library..[@/libs/concept_check/index.html Concept Check]:]
  * fixed warnings with self-assignment
    ([@https://svn.boost.org/trac/boost/ticket/4918 #4918])

* [phrase library..[@/libs/fusion/index.html Fusion]:]
  * vector copy constructor now copies sequence members in the same
    order on different platforms
    ([@https://svn.boost.org/trac/boost/ticket/2823 #2823])

* [phrase library..[@/libs/iterator/index.html Iterator]:]
  * fixed problem with `implicit_cast`
    ([@https://svn.boost.org/trac/boost/ticket/3645 #3645])
  * added `function_input_iterator`
    ([@https://svn.boost.org/trac/boost/ticket/2893 #2893])
  * `transform_iterator` now uses `boost::result_of` to determine
     functor result type
     ([@https://svn.boost.org/trac/boost/ticket/1427 #1427])

* [phrase library..[@/libs/math/doc/sf_and_dist/html/index.html Math]:]
   * Added Wald, Inverse Gaussian and geometric distributions.
   * Added information about configuration macros. 
   * Added support for mpreal as a real-numered type.

* [phrase library..[@/libs/msm/index.html Meta State Machine]:]
  * [@/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-compile-time-analysis
    Compile-time state machine analysis].
  * [@/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-boost-parameter
    Boost.Parameter interface definition for `msm::back::state_machine<>` template arguments].
  * [@/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-queues
    Possibility to provide a container for the event and deferred event
    queues]. A policy implementation based on a more efficient
    Boost.CircularBuffer is provided.
  * `msm::back::state_machine<>::is_flag_active` method made const.
  * [@/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-enqueueing
    Added possibility to enqueue events for delayed processing].
  * Bugfixes
    * [@https://svn.boost.org/trac/boost/ticket/4926 #4926].
    * stack overflow using the Defer functor
    * anonymous transition of a submachine not called for the initial state

* [phrase library..[@/libs/optional/index.html Optional]:]
  * Updated test results with information about expected failures
    ([@https://svn.boost.org/trac/boost/ticket/2294 #2294])

* [phrase library..[@/libs/pool/index.html Pool]:]
  * Now can set a max_size for pool
    ([@https://svn.boost.org/trac/boost/ticket/2696 #2696])
  * `boost/pool/pool.hpp` uses `reinterpret_cast` instead of `static_cast`
    ([@https://svn.boost.org/trac/boost/ticket/2941 #2941])
  * `boost::pool_allocator` now works with vector of vectors
    ([@https://svn.boost.org/trac/boost/ticket/386 #386])
  * Boost pool is now compatible with Microsoft memory leak detection
    ([@https://svn.boost.org/trac/boost/ticket/4346 #4346])

* [phrase library..[@/libs/program_options/index.html Program Options]:]
  * Fixed errors in examples in docs
    ([@https://svn.boost.org/trac/boost/ticket/3992 #3992],
     [@https://svn.boost.org/trac/boost/ticket/4858 #4858])
  * Now takes `argv` as const
    ([@https://svn.boost.org/trac/boost/ticket/3909 #3909])

* [phrase library..[@/libs/proto/index.html Proto]:]
  * *Breaking change*: `boost/proto/core.hpp` no longer defines
    `functional::pop_front` and `functional::reverse`, which have
    moved to their own headers under `boost/proto/functional`
  * Add callable wrappers for more Fusion algorithms (including
    `fusion::at`); and callable wrappers for some std utilities
    like `make_pair`, `first` and `second`, all under the new 
    `boost/proto/functional` directory
  * Allow transforms to be specified separately from a grammar
  * `proto::matches` preserves domain-specific expression wrappers
  * Fix ADL issue with `operator,` in `proto::and_` transform
  * Fix handling of grammar checking in expressions involving
    multiple domains
    ([@https://svn.boost.org/trac/boost/ticket/4675 #4675])
  * Fix ambiguous `operator<<` in `proto::display_expr`
    ([@https://svn.boost.org/trac/boost/ticket/4910 #4910])
  * `fusion::is_sequence` answers true for Proto expressions
    ([@https://svn.boost.org/trac/boost/ticket/5006 #5006])
  * Eliminate `-Wundef` GCC warning in `boost/proto/fusion.hpp`
    ([@https://svn.boost.org/trac/boost/ticket/5075 #5075])

* [phrase library..[@/libs/signals/index.html Signals]:]
  * gcc warning cleanup
    ([@https://svn.boost.org/trac/boost/ticket/4365 #4365])

* [phrase library..[@/libs/spirit/index.html Spirit]:]
  * Spirit V2.4.2, see the
    '[@/doc/libs/1_46_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_2.html What's New]'
    section for details.

* [phrase library..[@/libs/tokenizer/index.html Tokenizer]:]
  * `isspace`/`ispunct` was called with wrong character type
    ([@https://svn.boost.org/trac/boost/ticket/4791 #4791])

* [phrase library..[@/libs/wave/index.html Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/inspect/index.html Inspect]:]
  * Check that Boost headers do not use C's `assert` macro.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]

