<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<article id="version_1_34_0" name="Version 1.34.0" dirname="version_1_34_0" last-revision="Sat, 12 May 2007 12:00:00 GMT"
 xmlns:xi="http://www.w3.org/2001/XInclude">
  <articleinfo>
    <authorgroup>
    <author>
      <firstname>Thomas</firstname> <surname>Witt</surname>
    </author>
    </authorgroup>
    <articlepurpose>
      New Libraries: Foreach, Statechart, TR1, Typeof, Xpressive. Updated Libraries:
      Assign, Date_time, Filesystem, Function, Hash, Graph, MultiArray, Multi-Index,
      Optional, Parameter, Pointer Container, Python, Signals, Smart Pointer, String
      Algorithm, Wave
    </articlepurpose>
  </articleinfo>
  <title>Version 1.34.0</title>
  <para>
    <download><![CDATA[http://sourceforge.net/project/showfiles.php?group_id=7586&package_id=8041&release_id=507975]]></download>
  </para>
  <section id="version_1_34_0.new_libraries">
    <title><link linkend="version_1_34_0.new_libraries">New Libraries</link></title>
    <itemizedlist>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/doc/html/foreach.html">Foreach Library</ulink>:</phrase> <code><phrase
        role="identifier">BOOST_FOREACH</phrase></code> macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/statechart/doc/index.html">Statechart
        Library</ulink>:</phrase>
  Arbitrarily complex finite state machines can be implemented
        in easily readable and maintainable C++ code, from Andreas Huber.
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/tr1/index.html">TR1 Library</ulink>:</phrase> An
        implementation of the C++ Technical Report on Standard Library Extensions,
        from John Maddock. This library does not itself implement the TR1 components,
        rather it's a thin wrapper that will include your standard library's TR1
        implementation (if it has one), otherwise it will include the Boost Library
        equivalents, and import them into namespace <code><phrase role="identifier">std</phrase><phrase
        role="special">::</phrase><phrase role="identifier">tr1</phrase></code>.
        Highlights include: Reference Wrappers, Smart Pointers, result_of, Function
        Object Binders, Polymorphic function wrappers, Type Traits, Random Number
        Generators and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
        Regular Expressions, and Complex Number Additional Algorithms.
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/doc/html/typeof.html">Typeof Library</ulink>:</phrase> Typeof
        operator emulation, from Arkadiy Vertleyb and Peder Holt.
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/doc/html/xpressive.html">Xpressive Library</ulink>:</phrase> Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
      </listitem>
    </itemizedlist>
  </section>
  <section id="version_1_34_0.updated_libraries">
    <title><link linkend="version_1_34_0.updated_libraries">Updated Libraries</link></title>
    <itemizedlist>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/assign/index.html">Assign Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            Support for <code><phrase role="identifier">ptr_map</phrase><phrase role="special">&lt;</phrase><phrase
            role="identifier">key</phrase><phrase role="special">,</phrase><phrase
            role="identifier">T</phrase><phrase role="special">&gt;</phrase></code>
            via the new function <code><phrase role="identifier">ptr_map_insert</phrase><phrase
            role="special">()</phrase></code>
          </listitem>
          <listitem>
            Support for initialization of <ulink url="/doc/libs/1_34_0/libs/ptr_container/index.html">Pointer
            Containers</ulink> when the containers hold pointers to an abstract base
            class.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/doc/html/date_time.html">Date_time library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            Support for new US/Canada timezone rules and other bug fixes. See <ulink
            url="/doc/libs/1_34_0/doc/html/date_time/details.html#changes">Change
            History</ulink> for details.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/filesystem/doc/index.htm">Filesystem
        Library</ulink>:</phrase> Major upgrade in preparation for submission to the C++ Standards
        Committee for TR2. Changes include:
        <itemizedlist>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization">Internationalization</ulink>,
            provided by class templates <emphasis>basic_path</emphasis>, <emphasis>basic_filesystem_error</emphasis>,
            <emphasis>basic_directory_iterator</emphasis>, and <emphasis>basic_directory_entry</emphasis>.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification">Simplification</ulink>
            of the path interface by eliminating special constructors to identify
            native formats.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization">Rationalization</ulink>
            of predicate function design, including the addition of several new functions.
          </listitem>
          <listitem>
            Clearer specification by reference to <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01">POSIX</ulink>,
            the ISO/IEEE Single Unix Standard, with provisions for Windows and other
            operating systems.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation">Preservation</ulink>
            of existing user code whenever possible.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient">More
            efficient</ulink> directory iteration.
          </listitem>
          <listitem>
            Addition of a <ulink url="/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator">recursive
            directory iterator</ulink>.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/function/index.html">Function Library</ulink>:</phrase>
  Boost.Function
        now implements a small buffer optimization, which can drastically improve
        the performance when copying or constructing Boost.Function objects storing
        small function objects. For instance, <code><phrase role="identifier">bind</phrase><phrase
        role="special">(&amp;</phrase><phrase role="identifier">X</phrase><phrase
        role="special">:</phrase><phrase role="identifier">foo</phrase><phrase role="special">,</phrase>
        <phrase role="special">&amp;</phrase><phrase role="identifier">x</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">_1</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">_2</phrase><phrase role="special">)</phrase></code>
        requires no heap allocation when placed into a Boost.Function object.
      </listitem>
      <listitem>
        <ulink url="/doc/libs/1_34_0/libs/functional/hash/index.html">Functional/Hash
        Library</ulink>
        <itemizedlist>
          <listitem>
            Use declarations for standard classes, so that the library doesn't need
            to include all of their headers
          </listitem>
          <listitem>
            Deprecated the <literal>&lt;boost/functional<emphasis>hash</emphasis>*.hpp&gt;</literal>
            headers.
          </listitem>
          <listitem>
            Add support for the <code><phrase role="identifier">BOOST_HASH_NO_EXTENSIONS</phrase></code>
            macro, which disables the extensions to TR1
          </listitem>
          <listitem>
            Minor improvements to the hash functions for floating point numbers.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/graph/doc/index.html">Graph Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html"><code><phrase
            role="identifier">edmonds_maximum_cardinality_matching</phrase></code></ulink>,
            from Aaron Windsor.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm"><code><phrase
            role="identifier">lengauer_tarjan_dominator_tree</phrase></code></ulink>,
            from JongSoo Park.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html"><code><phrase
            role="identifier">compressed_sparse_row_graph</phrase></code></ulink>,
            from Jeremiah Willcock and Douglas Gregor of Indiana University.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html"><code><phrase
            role="identifier">sorted_erdos_renyi_iterator</phrase></code></ulink>,
            from Jeremiah Willcock of Indiana University.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html"><code><phrase
            role="identifier">biconnected_components</phrase></code></ulink> now
            supports a visitor and named parameters, from Janusz Piwowarski.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html"><code><phrase
            role="identifier">adjacency_matrix</phrase></code></ulink> now models
            the <ulink url="/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html">Bidirectional
            Graph</ulink> concept.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html"><code><phrase
            role="identifier">dijkstra_shortest_paths</phrase></code></ulink> now
            calls <code><phrase role="identifier">vis</phrase><phrase role="special">.</phrase><phrase
            role="identifier">initialize_vertex</phrase></code> for each vertex during
            initialization.
          </listitem>
          <listitem>
            <emphasis role="bold">Note:</emphasis> the name of the compiled library
            for the <ulink url="/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html">GraphViz
            reader</ulink> has changed to <literal>boost_graph</literal> (from <literal>bgl-viz</literal>)
            to match Boost conventions.
          </listitem>
          <listitem>
            See the <ulink url="/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0">complete
            revision history</ulink> for more information.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/multi_array/index.html">MultiArray
        Library</ulink>:</phrase>
  Boost.MultiArray now by default provides range-checking for
        <code><phrase role="keyword">operator</phrase><phrase role="special">[]</phrase></code>.
        Range checking can be disabled by defining the macro <code><phrase role="identifier">BOOST_DISABLE_ASSERTS</phrase></code>
        before including <literal>multi_array.hpp</literal>. A bug in <code><phrase
        role="identifier">multi_array</phrase><phrase role="special">::</phrase><phrase
        role="identifier">resize</phrase><phrase role="special">()</phrase></code>
        related to storage orders was fixed.
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/multi_index/doc/index.html">Multi-index
        Containers Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            New <ulink url="/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices">random
            access indices</ulink>.
          </listitem>
          <listitem>
            Non key-based indices feature new <ulink url="/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange">rearrange
            facilities</ulink>.
          </listitem>
          <listitem>
            This version also includes a number of optimizations and usage improvements.
            For a complete list of changes, see the library <ulink url="/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34">release
            notes</ulink>.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/optional/index.html">Optional Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">none_t</phrase> <phrase role="keyword">and</phrase>
            <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
            role="identifier">none</phrase></code> now added to Optional's documentation
          </listitem>
          <listitem>
            Relational operators now directly support arguments of type <code><phrase
            role="char">'T'</phrase></code> and <code><phrase role="char">'none_t'</phrase></code>
          </listitem>
          <listitem>
            operator-&gt;() now also works with reference types.
          </listitem>
          <listitem>
            Helper functions <code><phrase role="identifier">make_optional</phrase><phrase
            role="special">(</phrase><phrase role="identifier">val</phrase><phrase
            role="special">),</phrase> <phrase role="identifier">make_optional</phrase><phrase
            role="special">(</phrase><phrase role="identifier">cond</phrase><phrase
            role="special">,</phrase><phrase role="identifier">val</phrase><phrase
            role="special">)</phrase> <phrase role="keyword">and</phrase> <phrase
            role="identifier">get_optional_value_or</phrase><phrase role="special">(</phrase><phrase
            role="identifier">opt</phrase><phrase role="special">,</phrase><phrase
            role="identifier">alternative_value</phrase><phrase role="special">)</phrase></code>
            added.
          </listitem>
          <listitem>
            Constructor taking a boolean condition (as well as a value) added.
          </listitem>
          <listitem>
            Member function <code><phrase role="identifier">get_value_or</phrase><phrase
            role="special">(</phrase><phrase role="identifier">alternative_value</phrase><phrase
            role="special">)</phrase></code> added.
          </listitem>
          <listitem>
            Incompatbility bug with mpl::apply&lt;&gt; fixed.
          </listitem>
          <listitem>
            Converting assignment bug with uninitialized lvalues fixed.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/parameter/index.html">Parameter
        Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            Every ArgumentPack is now a valid <ulink url="/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html">MPL
            Forward Sequence.</ulink>
          </listitem>
          <listitem>
            Support for unnamed arguments (those whose keyword is deduced from their
            types) is added.
          </listitem>
          <listitem>
            Support for named and unnamed template arguments is added.
          </listitem>
          <listitem>
            New overload generation macros solve the
          </listitem>
          <listitem>
            <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm">forwarding
            problem</ulink> directly.
          </listitem>
          <listitem>
            See also the Python library changes, below.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/ptr_container/index.html">Pointer
        Container Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            Support for serialization via <ulink url="/doc/libs/1_34_0/libs/serialization/index.html">Boost.Serialization.</ulink>
          </listitem>
          <listitem>
            Exceptions can be disabled by defining the macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS
            before including any header. This macro is defined by default if BOOST_NO_EXCEPTIONS
            is defined.
          </listitem>
          <listitem>
            Additional <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
            role="identifier">auto_ptr</phrase><phrase role="special">&lt;</phrase><phrase
            role="identifier">T</phrase><phrase role="special">&gt;</phrase></code>
            overloads added s.t. one can also pass <code><phrase role="identifier">std</phrase><phrase
            role="special">::</phrase><phrase role="identifier">auto_ptr</phrase><phrase
            role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
            role="special">&gt;</phrase></code> instead of only <code><phrase role="identifier">T</phrase><phrase
            role="special">*</phrase></code> arguments to member functions.
          </listitem>
          <listitem>
            <code><phrase role="identifier">transfer</phrase><phrase role="special">()</phrase></code>
            now has weaker requirements s.t. one can transfer objects from <code><phrase
            role="identifier">ptr_container</phrase><phrase role="special">&lt;</phrase><phrase
            role="identifier">Derived</phrase><phrase role="special">&gt;</phrase></code>
            to <code><phrase role="identifier">ptr_container</phrase><phrase role="special">&lt;</phrase><phrase
            role="identifier">Base</phrase><phrase role="special">&gt;</phrase></code>,
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/python/index.html">Python Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            Boost.Python now automatically appends C++ signatures to docstrings.
            The new <ulink url="/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html"><literal>docstring_options.hpp</literal></ulink>
            header is available to control the content of docstrings.
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec"><code><phrase
            role="identifier">stl_input_iterator</phrase></code></ulink>, for turning
            a Python iterable object into an STL input iterator, from Eric Niebler.
          </listitem>
          <listitem>
            Support for <code><phrase role="keyword">void</phrase><phrase role="special">*</phrase></code>
            conversions is added.
          </listitem>
          <listitem>
            Integrated support for wrapping C++ functions built with the parameter
            library; keyword names are automatically known to docsstrings.
          </listitem>
          <listitem>
            Enhancements to the API for better embedding support (<code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">python</phrase><phrase
            role="special">::</phrase><phrase role="identifier">import</phrase><phrase
            role="special">()</phrase></code>, <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">python</phrase><phrase
            role="special">::</phrase><phrase role="identifier">exec</phrase><phrase
            role="special">()</phrase></code>, and <code><phrase role="identifier">boost</phrase><phrase
            role="special">::</phrase><phrase role="identifier">python</phrase><phrase
            role="special">::</phrase><phrase role="identifier">exec_file</phrase><phrase
            role="special">()</phrase></code>).
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/doc/html/signals.html">Signals Library</ulink>:</phrase> More
        improvements to signal invocation performance from Robert Zeh.
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm">Smart Pointers
        Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor">Allocator
            support</ulink> as proposed in <ulink url="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf">N1851</ulink>
            (162 Kb PDF).
          </listitem>
          <listitem>
            <ulink url="/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html"><code><phrase
            role="identifier">pointer_cast</phrase></code></ulink> and <ulink url="/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html"><code><phrase
            role="identifier">pointer_to_other</phrase></code></ulink> utilities
            to allow pointer-independent code, from Ion Gaztanaga.
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/algorithm/string/index.html">String
        Algorithm Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            <code><phrase role="identifier">lexicographical_compare</phrase></code>
          </listitem>
          <listitem>
            <code><phrase role="identifier">join</phrase></code>
          </listitem>
          <listitem>
            New comparison predicates <code><phrase role="identifier">is_less</phrase></code>,
            <code><phrase role="identifier">is_not_greater</phrase></code>.
          </listitem>
          <listitem>
            Negative indexes support (like Perl) in various algorihtms (<code><phrase
            role="special">*</phrase><phrase role="identifier">_head</phrase><phrase
            role="special">/</phrase><phrase role="identifier">tail</phrase></code>,
            <code><phrase role="special">*</phrase><phrase role="identifier">_nth</phrase></code>).
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <phrase role="library"><ulink url="/doc/libs/1_34_0/libs/wave/index.html">Wave Library</ulink>:</phrase>
        <itemizedlist>
          <listitem>
            Wave now correctly recognizes pp-number tokens as mandated by the C++
            Standard, which are converted to C++ tokens right before they are returned
            from the library.
          </listitem>
          <listitem>
            Several new preprocessing hooks have been added. For a complete description
            please refer to the related documentation page: <ulink url="/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html">The
            Context Policy</ulink>.
          </listitem>
          <listitem>
            Shared library (dll) support has been added for the generated Wave libraries.
          </listitem>
          <listitem>
            The overall error handling has been improved. It is now possible to recover
            and continue after an error or a warning was issued.
          </listitem>
          <listitem>
            Support for optional comment and/or full whitespace preservation in the
            generated output stream has been added.
          </listitem>
          <listitem>
            The Wave library now performs automatic include guard detection to avoid
            accessing header files more than once, if appropriate.
          </listitem>
          <listitem>
            Full interactive mode has been added to the Wave tool. Now the Wave tool
            can be used just like Python or Perl for instance to interactively try
            out your BOOST_PP macros. Additionally it is now possible to load and
            save the current state of an interactive session (macro tables et.al.).
          </listitem>
          <listitem>
            The overall performance has been improved by upto 40-60%, depending on
            the concrete files to process.
          </listitem>
          <listitem>
            Support for new pragmas has been added allowing to control certain library
            features from inside the preprocessed sources (partial output redirection,
            control of generated whitespace and #line directives).
          </listitem>
          <listitem>
            Optional support for #pragma message &quot;...&quot; has been added.
          </listitem>
          <listitem>
            This version also includes a number of bug fixes and usage improvements.
            For a complete list of changes, see the libraries <ulink url="/doc/libs/1_34_0/libs/wave/ChangeLog">change
            log</ulink>.
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <section id="version_1_34_0.supported_compilers">
    <title><link linkend="version_1_34_0.supported_compilers">Supported Compilers</link></title>
    <para>
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the <ulink url="http://www.boost.org/regression/release/user/">regression
      test results</ulink>.
    </para>
    <itemizedlist>
      <listitem>
        <ulink url="http://developer.apple.com/">Apple GCC</ulink> 4.0.1 on Mac OS
        X.
      </listitem>
      <listitem>
        <ulink url="http://www.borland.com/us/products/cbuilder/">Borland C++</ulink>
        5.8.2 on Windows.
      </listitem>
      <listitem>
        <ulink url="http://gcc.gnu.org/">GNU C++</ulink>
        <itemizedlist>
          <listitem>
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          </listitem>
          <listitem>
            4.1.x on Solaris
          </listitem>
          <listitem>
            3.4.x on Windows
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <ulink url="http://h30097.www3.hp.com/cplus/">HP aC++ A.06.14</ulink>.
      </listitem>
      <listitem>
        <ulink url="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm">Intel
        C++</ulink> 9.1 on Windows, 9.0 on Linux.
      </listitem>
      <listitem>
        <ulink url="http://www.metrowerks.com/">Metrowerks CodeWarrior</ulink> 9.4
        on Windows.
      </listitem>
      <listitem>
        <ulink url="http://msdn.microsoft.com/visualc/">Microsoft Visual C++</ulink>
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &quot;Safe&quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro <code><phrase role="identifier">_SCL_SECURE_NO_DEPRECATE</phrase></code>.
      </listitem>
      <listitem>
        <ulink url="http://developers.sun.com/sunstudio/compilers_index.html">Sun
        Studio 11</ulink> on Solaris.
      </listitem>
    </itemizedlist>
  </section>
  <section id="version_1_34_0.acknowledgements">
    <title><link linkend="version_1_34_0.acknowledgements">Acknowledgements</link></title>
    <para>
      <ulink url="/users/people/thomas_witt.html">Thomas Witt</ulink> managed this
      release.
    </para>
    <para>
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Vladimir Prus for making Boost.Build
      version 2 a reality, David Abrahams for authoring a new getting started guide
      and Greg D. for answering countless questions.
    </para>
  </section>
</article>
