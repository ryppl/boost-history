
[/ Copyright (C) 2009-2011 Lorenzo Caminiti ]
[/ Use, modification, and distribution is subject to the Boost Software ]
[/ License, Version 1.0 (see accompanying file LICENSE_1_0.txt or a ]
[/ copy at http://www.boost.org/LICENSE_1_0.txt). ]

[section:Implementation Appendix: Implementation]

This section lists source code that should provide a general idea on how this library is implemented.

The code listed here should only be used as a reference in trying to understand the library implementation and source code.
There is no guarantee that the library implementation will use exactly the code listed here.
Refer to the code comments in the library source files for the reasons behind the specific instructions listed here.

[section Local Functions]

The expansion of the local function macros of the `factorial` example presented in the __Advanced_Topics__ section generates code equivalent to the following:

[factorial_impl_cpp]

[endsect]

[section Local Classes as Template Parameters]

This library uses a local class to implement the local functor object.
However, in ISO standard C++ a local classes, and therefore the local functor object, cannot be passed as template parameter (for example to the `std::for_each` algorithm), this is instead possible on C++03 and later standards.
To work around this limitation, this library investigated the following two tricks (both tricks can be extended to support eventual function default parameters):

# The /casting functor trick/ uses a non-local functor class that calls a static member function of the local class via a function pointer.
The static member function then calls the correct local function body after type casting the object.

# The /virtual functor trick/ uses a non-local virtual base class for the local functor class.
The correct implementation of the `operator()` is called via polymorphism.

[tparam_trick_cpp]

The casting functor trick had slightly better run-time performances than the virtual functor trick so the current implementation of this library uses the casting functor trick.
However, both tricks do not allow for compiler optimizations that inline the local function calls because they rely on one indirect function call (via either a function pointer or a virtual function respectively) that can only be resolved at run-time.
Therefore, on C++03 compilers this library generates code that passes the local class functor as template parameter directly without using neither one of these two tricks in order to take full advantage of compiler optimizations that inline the local function calls.

[endsect]

[section Local Blocks]

The expansion of the local block macros for the main local block example presented in the __Tutorial__ section generates code equivalent to the following:

[add_block_impl_cpp]

[endsect]

[section Local Exits]

The expansion of the local exit macros for the main local exit example presented in the __Tutorial__ section generates code equivalent to the following:

[add_exit_impl_cpp]

[endsect]

[section Parsing Macros]

This library macros can parse the list of specified parameters and detect if any of the bound parameter name matches the token `this` (to generate special code to bind the object in scope), or if the parameter is bound by `const` (to generate special code to bind by constant), etc.
The parameter tokens are inspected by preprocessor metaprogramming using both __Boost_Preprocessor__ and the `BOOST_DETAIL_PP_KEYWORD_...` macros that in brief work as follow:

    #include <boost/detail/preprocessor/keyword/this.hpp>
    #include <boost/detail/preprocessor/keyword/const.hpp>
    #include <boost/locla/aux_/preprocessor/keyword/bind.hpp>

    // Detect `this`.
    BOOST_DETAIL_PP_KEYWORD_IS_THIS_BACK(const bind this)   // Expand to 1.
    BOOST_DETAIL_PP_KEYWORD_IS_THIS_BACK(const bind& x)     // Expand to 0.

    // Detect constant.
    BOOST_DETAIL_PP_KEYWORD_IS_CONST_FRONT(const bind this) // Expand to 1.
    BOOST_DETAIL_PP_KEYWORD_IS_CONST_FRONT(bind this)       // Expand to 0.

    // Detect binding (constant and not).
    BOOST_LOCAL_AUX_PP_KEYWORD_IS_BIND_FRONT(               // Expand to 1.
            BOOST_DETAIL_PP_KEYWORD_CONST_REMOVE_FRONT(const bind this))
    BOOST_LOCAL_AUX_PP_KEYWORD_IS_BIND_FRONT(               // Also expand to 1.
            BOOST_DETAIL_PP_KEYWORD_CONST_REMOVE_FRONT(bind this))
    BOOST_LOCAL_AUX_PP_KEYWORD_IS_BIND_FRONT(               // Expand to 0.
            BOOST_DETAIL_PP_KEYWORD_CONST_REMOVE_FRONT(const int x))
    BOOST_LOCAL_AUX_PP_KEYWORD_IS_BIND_FRONT(               // Also expand to 0.
            BOOST_DETAIL_PP_KEYWORD_CONST_REMOVE_FRONT(int x))

[endsect]

[endsect]

