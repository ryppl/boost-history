
[/ Copyright (C) 2009-2011 Lorenzo Caminiti ]
[/ Use, modification, and distribution is subject to the Boost Software ]
[/ License, Version 1.0 (see accompanying file LICENSE_1_0.txt or a ]
[/ copy at http://www.boost.org/LICENSE_1_0.txt). ]

[section:Release_Notes Release Notes]

[section Version 0.1.1]

# Uploaded library source into Boost SVN sandbox.
# Fixed prev/next arrows and other minor layouts in documentation.
# Added Release section to documentation.

[endsect]

[section Version 0.1.0]

# Shared with Boost for first round of comments.

[endsect]

[section Version 0.0.1]

# Completed development, examples, and documentation.

[endsect]

[section TODO]

# Add Inline Local Function `..._NAME(inline <name>)` to Advanced Topics section.

# Add `..._NAME(recursive <name>)` to recursion section in Advanced Topics.
Indicate that recursive local function cannot be optimized even when declared inline.

# Modify `..._NAME()` macro to parse also `recursive inline` and `inline recursive` as recursive (no reason to give an error, just ignore the inline request and document it).

# *Code.* Optimize macro expansion code for C++0x, C++03, etc.
From John Bytheway:

    > Yes, in C++0x local structs can be passed as template parameters.
    > Obviously, in C++0x there are lambdas too, so you might think your
    > library is useless, but I would expect most compilers to support passing
    > local structs as template parameters before they support lambdas, so
    > there is some advantage in having this intermediate implementation.
    > Also, your macros would allow writing code that worked in C++0x and
    > C++03, with the virtual function business in only those compilers/modes
    > where it is necessary.

* Shall `this_` be named `_this` instead? Ask Boosters if there is some guideline for consistency. Maybe Boost uses `..._` is for statements (like `if_`) and `_...` for variables (like `_1`)... if that is the case then I should use `_this`.

* Rename `abstract_function` to `function_interface`.

* Provide a special macro `BOOST_LOCAL_FUNCTION_NAME_OPTIMIZED` that runs faster (by using the local functor directly without using the global `boost::local::function` functor instead).
Make both local blocks and exits use this optimized local function variant.
Document that this optimized local function variant cannot be passed as template parameter unless it is first manually reassigned to the global `boost::local::function` functor or C++03 feature is supported by the compiler.
On C++03, make `BOOST_LOCAL_FUNCTION_NAME` be the same as `BOOST_LOCAL_FUNCTION_NAME_OPTIMIZED`.

[endsect]

[endsect]

