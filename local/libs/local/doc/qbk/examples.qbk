
[/ Copyright (C) 2009-2011 Lorenzo Caminiti ]
[/ Use, modification, and distribution is subject to the Boost Software ]
[/ License, Version 1.0 (see accompanying file LICENSE_1_0.txt or a ]
[/ copy at http://www.boost.org/LICENSE_1_0.txt). ]

[section:Examples Appendix: Examples]

This sections lists a few examples in addition to the already numerous examples presented in the rest of this documents.

[section:Boost_Typeof_for_User_Defined_Types Boost.Typeof for User Defined Types]

This example is adapted from the __Boost_ScopeExit__ documentation.
This example illustrates how to use __Boost_Typeof__ to register user defined types and then use these types to bind local exit variables.

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [world_exit_va_cpp] ] [ [world_exit_cpp] ] ]
]

[endsect]

[section:Emulating_Ds_Scope_Guards Emulating D's Scope Guards]

Similarly to __Boost_ScopeExit__, local exits essentially emulate the [@http://www.digitalmars.com/d/2.0/statement.html scope exits] provided by the __D_Programming_Language__.
Local exits can also be used to emulate D's [@http://www.digitalmars.com/d/2.0/statement.html scope success] and [@http://www.digitalmars.com/d/2.0/statement.html scope failure] statements using a local variable that is set when an error occurs.
For example, using error codes:

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [scope_guards_errno_va_cpp] ] [ [scope_guards_errno_cpp] ] ]
]

Or similarly but using exceptions:

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [scope_guards_except_va_cpp] ] [ [scope_guards_except_cpp] ] ]
]

[endsect]

[section STL Find (C++0x Lambdas)]

This example is adapted from __N2550__ (C++0x lambda functions).
This example passes a local function to the STL algorithm `std::find_if`.

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [find_if_va_cpp] ] [ [find_if_cpp] ] ]
]

[endsect]

[section Binding `this` (C++0x Lambdas)]

This example is adapted from __N2529__ (C++0x lambda functions).
This example binds the object in scope `this` to a local function.

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [this_va_cpp] ] [ [this_cpp] ] ]
]

[endsect]

[section GCC Nested Functions]

The GCC compiler supports local functions under the name of [@http://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html nested functions].
Nested functions are exclusively a C extension of the GCC compiler, they are not supported for C++ not even by the GCC compiler, and they are not part of any C++ standard (ISO C++, C99, C++0x, etc) nor they are supported by other compilers like MSVC.

The following examples rework the GCC nested function examples using this library local functions.

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [gcc_square_va_cpp] ] [ [gcc_square_cpp] ] ]
[ [ [gcc_access_va_cpp] ] [ [gcc_access_cpp] ] ]
[ [ [gcc_store_va_cpp] ] [ [gcc_store_cpp] ] ]
]

[endsect]

[section All Parameter Permutations]

This example shows all possible parameter permutations (with and without binding, etc).

[table
[ [__Variadic_Macro_Syntax__] [__Sequencing_Macro_Syntax__] ]
[ [ [params_all_va_cpp] ] [ [params_all_cpp] ] ]
]

[endsect]

[endsect]

